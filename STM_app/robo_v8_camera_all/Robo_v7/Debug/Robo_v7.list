
Robo_v7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a238  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800a3c8  0800a3c8  0001a3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a548  0800a548  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a548  0800a548  0001a548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a550  0800a550  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a550  0800a550  0001a550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a554  0800a554  0001a554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001334c  20000070  0800a5c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200133bc  0800a5c8  000233bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f00  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ad7  00000000  00000000  00033fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001038  00000000  00000000  00036a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f00  00000000  00000000  00037ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000237d9  00000000  00000000  000389b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000edad  00000000  00000000  0005c189  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cce6d  00000000  00000000  0006af36  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137da3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049dc  00000000  00000000  00137e20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3b0 	.word	0x0800a3b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800a3b0 	.word	0x0800a3b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f94d 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f808 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f008 fce4 	bl	8008f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x54>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f965 	bl	80008a2 <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00e      	b.n	8000600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d80a      	bhi.n	80005fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	f000 f92d 	bl	800084e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_InitTick+0x5c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000008 	.word	0x20000008
 800060c:	20000004 	.word	0x20000004
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x20>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x24>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_IncTick+0x24>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004
 8000638:	200002f0 	.word	0x200002f0

0800063c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return uwTick;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_GetTick+0x14>)
 8000642:	681b      	ldr	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200002f0 	.word	0x200002f0

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff ffee 	bl	800063c <HAL_GetTick>
 8000660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800066c:	d005      	beq.n	800067a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_Delay+0x40>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800067a:	bf00      	nop
 800067c:	f7ff ffde 	bl	800063c <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8f7      	bhi.n	800067c <HAL_Delay+0x28>
  {
  }
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000004 	.word	0x20000004

08000698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <__NVIC_GetPriorityGrouping+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	f003 0307 	and.w	r3, r3, #7
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	db0b      	blt.n	8000726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f003 021f 	and.w	r2, r3, #31
 8000714:	4907      	ldr	r1, [pc, #28]	; (8000734 <__NVIC_EnableIRQ+0x38>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	095b      	lsrs	r3, r3, #5
 800071c:	2001      	movs	r0, #1
 800071e:	fa00 f202 	lsl.w	r2, r0, r2
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000804:	d301      	bcc.n	800080a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000806:	2301      	movs	r3, #1
 8000808:	e00f      	b.n	800082a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <SysTick_Config+0x40>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000812:	210f      	movs	r1, #15
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f7ff ff8e 	bl	8000738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SysTick_Config+0x40>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SysTick_Config+0x40>)
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	e000e010 	.word	0xe000e010

08000838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff29 	bl	8000698 <__NVIC_SetPriorityGrouping>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000860:	f7ff ff3e 	bl	80006e0 <__NVIC_GetPriorityGrouping>
 8000864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f7ff ff8e 	bl	800078c <NVIC_EncodePriority>
 8000870:	4602      	mov	r2, r0
 8000872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff5d 	bl	8000738 <__NVIC_SetPriority>
}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff31 	bl	80006fc <__NVIC_EnableIRQ>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffa2 	bl	80007f4 <SysTick_Config>
 80008b0:	4603      	mov	r3, r0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af02      	add	r7, sp, #8
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
 80008c8:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d101      	bne.n	80008dc <HAL_DCMI_Start_DMA+0x20>
 80008d8:	2302      	movs	r3, #2
 80008da:	e086      	b.n	80009ea <HAL_DCMI_Start_DMA+0x12e>
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2201      	movs	r2, #1
 80008e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2202      	movs	r2, #2
 80008e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008fa:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f022 0202 	bic.w	r2, r2, #2
 800090a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6819      	ldr	r1, [r3, #0]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	430a      	orrs	r2, r1
 800091a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000920:	4a34      	ldr	r2, [pc, #208]	; (80009f4 <HAL_DCMI_Start_DMA+0x138>)
 8000922:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000928:	4a33      	ldr	r2, [pc, #204]	; (80009f8 <HAL_DCMI_Start_DMA+0x13c>)
 800092a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000930:	2200      	movs	r2, #0
 8000932:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2200      	movs	r2, #0
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2200      	movs	r2, #0
 800093e:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000946:	d20a      	bcs.n	800095e <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	3328      	adds	r3, #40	; 0x28
 8000952:	4619      	mov	r1, r3
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	f000 fafe 	bl	8000f58 <HAL_DMA_Start_IT>
 800095c:	e038      	b.n	80009d0 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000962:	4a24      	ldr	r2, [pc, #144]	; (80009f4 <HAL_DCMI_Start_DMA+0x138>)
 8000964:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2201      	movs	r2, #1
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8000978:	e009      	b.n	800098e <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097e:	085a      	lsrs	r2, r3, #1
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000988:	005a      	lsls	r2, r3, #1
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000996:	d2f0      	bcs.n	800097a <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099c:	1e9a      	subs	r2, r3, #2
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	4413      	add	r3, r2
 80009b4:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	3328      	adds	r3, #40	; 0x28
 80009c0:	4619      	mov	r1, r3
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	f000 fe16 	bl	80015fc <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f042 0201 	orr.w	r2, r2, #1
 80009de:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	08000bd9 	.word	0x08000bd9
 80009f8:	08000d03 	.word	0x08000d03

080009fc <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8000a04:	4b29      	ldr	r3, [pc, #164]	; (8000aac <HAL_DCMI_Stop+0xb0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	4a29      	ldr	r2, [pc, #164]	; (8000ab0 <HAL_DCMI_Stop+0xb4>)
 8000a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a10:	089b      	lsrs	r3, r3, #2
 8000a12:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d101      	bne.n	8000a26 <HAL_DCMI_Stop+0x2a>
 8000a22:	2302      	movs	r3, #2
 8000a24:	e03e      	b.n	8000aa4 <HAL_DCMI_Stop+0xa8>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2202      	movs	r2, #2
 8000a32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f022 0201 	bic.w	r2, r2, #1
 8000a44:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	60ba      	str	r2, [r7, #8]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d108      	bne.n	8000a62 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a54:	f043 0220 	orr.w	r2, r3, #32
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8000a60:	e006      	b.n	8000a70 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1ea      	bne.n	8000a46 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a7e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fabf 	bl	8001008 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2201      	movs	r2, #1
 8000a96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	92492493 	.word	0x92492493

08000ab4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d016      	beq.n	8000afc <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ada:	f043 0202 	orr.w	r2, r3, #2
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aee:	4a2f      	ldr	r2, [pc, #188]	; (8000bac <HAL_DCMI_IRQHandler+0xf8>)
 8000af0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 faf6 	bl	80010e8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d016      	beq.n	8000b34 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b12:	f043 0201 	orr.w	r2, r3, #1
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b26:	4a21      	ldr	r2, [pc, #132]	; (8000bac <HAL_DCMI_IRQHandler+0xf8>)
 8000b28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 fada 	bl	80010e8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f003 0310 	and.w	r3, r3, #16
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d006      	beq.n	8000b4c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2210      	movs	r2, #16
 8000b44:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f000 f83c 	bl	8000bc4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0308 	and.w	r3, r3, #8
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d006      	beq.n	8000b64 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2208      	movs	r2, #8
 8000b5c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f008 f9b6 	bl	8008ed0 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d019      	beq.n	8000ba2 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d107      	bne.n	8000b8c <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	68da      	ldr	r2, [r3, #12]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f022 021e 	bic.w	r2, r2, #30
 8000b8a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f022 0201 	bic.w	r2, r2, #1
 8000b9a:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f008 f965 	bl	8008e6c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	08000d03 	.word	0x08000d03

08000bb0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be8:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d043      	beq.n	8000c7a <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bfe:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d118      	bne.n	8000c3e <DCMI_DMAXferCplt+0x66>
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d015      	beq.n	8000c3e <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c24:	00da      	lsls	r2, r3, #3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4413      	add	r3, r2
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f001 fe2d 	bl	800288c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c36:	1e5a      	subs	r2, r3, #1
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
 8000c3c:	e044      	b.n	8000cc8 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d13c      	bne.n	8000cc8 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c60:	00da      	lsls	r2, r3, #3
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4413      	add	r3, r2
 8000c66:	2201      	movs	r2, #1
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f001 fe0f 	bl	800288c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	1e5a      	subs	r2, r3, #1
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	629a      	str	r2, [r3, #40]	; 0x28
 8000c78:	e026      	b.n	8000cc8 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d006      	beq.n	8000c98 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	68ba      	ldr	r2, [r7, #8]
 8000c92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	e017      	b.n	8000cc8 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d10f      	bne.n	8000cc8 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cac:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb2:	0099      	lsls	r1, r3, #2
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	440a      	add	r2, r1
 8000cbe:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d112      	bne.n	8000cfa <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f042 0201 	orr.w	r2, r2, #1
 8000ce2:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d103      	bne.n	8000cfa <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b084      	sub	sp, #16
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d0e:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d003      	beq.n	8000d22 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8000d22:	68f8      	ldr	r0, [r7, #12]
 8000d24:	f7ff ff44 	bl	8000bb0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e058      	b.n	8000df4 <HAL_DCMI_Init+0xc4>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d102      	bne.n	8000d54 <HAL_DCMI_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f008 f936 	bl	8008fc0 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2202      	movs	r2, #2
 8000d58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	6812      	ldr	r2, [r2, #0]
 8000d66:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d6a:	f023 0308 	bic.w	r3, r3, #8
 8000d6e:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6819      	ldr	r1, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000d84:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000d90:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode 
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000d9c:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b10      	cmp	r3, #16
 8000dac:	d112      	bne.n	8000dd4 <HAL_DCMI_Init+0xa4>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	7f1b      	ldrb	r3, [r3, #28]
 8000db2:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7f5b      	ldrb	r3, [r3, #29]
 8000db8:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8000dba:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7f9b      	ldrb	r3, [r3, #30]
 8000dc0:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8000dc2:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7fdb      	ldrb	r3, [r3, #31]
 8000dca:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8000dd0:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8000dd2:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f042 021e 	orr.w	r2, r2, #30
 8000de2:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2201      	movs	r2, #1
 8000dee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e08:	f7ff fc18 	bl	800063c <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d101      	bne.n	8000e18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e099      	b.n	8000f4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2202      	movs	r2, #2
 8000e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 0201 	bic.w	r2, r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e38:	e00f      	b.n	8000e5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e3a:	f7ff fbff 	bl	800063c <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b05      	cmp	r3, #5
 8000e46:	d908      	bls.n	8000e5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2203      	movs	r2, #3
 8000e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e078      	b.n	8000f4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1e8      	bne.n	8000e3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	4b38      	ldr	r3, [pc, #224]	; (8000f54 <HAL_DMA_Init+0x158>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d107      	bne.n	8000ec4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	f023 0307 	bic.w	r3, r3, #7
 8000eda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d117      	bne.n	8000f1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d00e      	beq.n	8000f1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 fb01 	bl	8001508 <DMA_CheckFifoParam>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d008      	beq.n	8000f1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2240      	movs	r2, #64	; 0x40
 8000f10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e016      	b.n	8000f4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 fab8 	bl	800149c <DMA_CalcBaseAndBitshift>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f34:	223f      	movs	r2, #63	; 0x3f
 8000f36:	409a      	lsls	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	f010803f 	.word	0xf010803f

08000f58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d101      	bne.n	8000f7e <HAL_DMA_Start_IT+0x26>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e040      	b.n	8001000 <HAL_DMA_Start_IT+0xa8>
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d12f      	bne.n	8000ff2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2202      	movs	r2, #2
 8000f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f000 fa4a 	bl	8001440 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb0:	223f      	movs	r2, #63	; 0x3f
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f042 0216 	orr.w	r2, r2, #22
 8000fc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d007      	beq.n	8000fe0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 0208 	orr.w	r2, r2, #8
 8000fde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0201 	orr.w	r2, r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	e005      	b.n	8000ffe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001014:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001016:	f7ff fb11 	bl	800063c <HAL_GetTick>
 800101a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d008      	beq.n	800103a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2280      	movs	r2, #128	; 0x80
 800102c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e052      	b.n	80010e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0216 	bic.w	r2, r2, #22
 8001048:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	695a      	ldr	r2, [r3, #20]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001058:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	2b00      	cmp	r3, #0
 8001060:	d103      	bne.n	800106a <HAL_DMA_Abort+0x62>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001066:	2b00      	cmp	r3, #0
 8001068:	d007      	beq.n	800107a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0208 	bic.w	r2, r2, #8
 8001078:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0201 	bic.w	r2, r2, #1
 8001088:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800108a:	e013      	b.n	80010b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800108c:	f7ff fad6 	bl	800063c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b05      	cmp	r3, #5
 8001098:	d90c      	bls.n	80010b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2220      	movs	r2, #32
 800109e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2203      	movs	r2, #3
 80010ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e015      	b.n	80010e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1e4      	bne.n	800108c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c6:	223f      	movs	r2, #63	; 0x3f
 80010c8:	409a      	lsls	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d004      	beq.n	8001106 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2280      	movs	r2, #128	; 0x80
 8001100:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00c      	b.n	8001120 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2205      	movs	r2, #5
 800110a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0201 	bic.w	r2, r2, #1
 800111c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001138:	4b92      	ldr	r3, [pc, #584]	; (8001384 <HAL_DMA_IRQHandler+0x258>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a92      	ldr	r2, [pc, #584]	; (8001388 <HAL_DMA_IRQHandler+0x25c>)
 800113e:	fba2 2303 	umull	r2, r3, r2, r3
 8001142:	0a9b      	lsrs	r3, r3, #10
 8001144:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001156:	2208      	movs	r2, #8
 8001158:	409a      	lsls	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4013      	ands	r3, r2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d01a      	beq.n	8001198 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	2b00      	cmp	r3, #0
 800116e:	d013      	beq.n	8001198 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0204 	bic.w	r2, r2, #4
 800117e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001184:	2208      	movs	r2, #8
 8001186:	409a      	lsls	r2, r3
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001190:	f043 0201 	orr.w	r2, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119c:	2201      	movs	r2, #1
 800119e:	409a      	lsls	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d012      	beq.n	80011ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00b      	beq.n	80011ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ba:	2201      	movs	r2, #1
 80011bc:	409a      	lsls	r2, r3
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c6:	f043 0202 	orr.w	r2, r3, #2
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d2:	2204      	movs	r2, #4
 80011d4:	409a      	lsls	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4013      	ands	r3, r2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d012      	beq.n	8001204 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00b      	beq.n	8001204 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f0:	2204      	movs	r2, #4
 80011f2:	409a      	lsls	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fc:	f043 0204 	orr.w	r2, r3, #4
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001208:	2210      	movs	r2, #16
 800120a:	409a      	lsls	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4013      	ands	r3, r2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d043      	beq.n	800129c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d03c      	beq.n	800129c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001226:	2210      	movs	r2, #16
 8001228:	409a      	lsls	r2, r3
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d018      	beq.n	800126e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d108      	bne.n	800125c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	2b00      	cmp	r3, #0
 8001250:	d024      	beq.n	800129c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	4798      	blx	r3
 800125a:	e01f      	b.n	800129c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001260:	2b00      	cmp	r3, #0
 8001262:	d01b      	beq.n	800129c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	4798      	blx	r3
 800126c:	e016      	b.n	800129c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001278:	2b00      	cmp	r3, #0
 800127a:	d107      	bne.n	800128c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 0208 	bic.w	r2, r2, #8
 800128a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a0:	2220      	movs	r2, #32
 80012a2:	409a      	lsls	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 808e 	beq.w	80013ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0310 	and.w	r3, r3, #16
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 8086 	beq.w	80013ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c2:	2220      	movs	r2, #32
 80012c4:	409a      	lsls	r2, r3
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b05      	cmp	r3, #5
 80012d4:	d136      	bne.n	8001344 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0216 	bic.w	r2, r2, #22
 80012e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	695a      	ldr	r2, [r3, #20]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d103      	bne.n	8001306 <HAL_DMA_IRQHandler+0x1da>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0208 	bic.w	r2, r2, #8
 8001314:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131a:	223f      	movs	r2, #63	; 0x3f
 800131c:	409a      	lsls	r2, r3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001336:	2b00      	cmp	r3, #0
 8001338:	d07d      	beq.n	8001436 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	4798      	blx	r3
        }
        return;
 8001342:	e078      	b.n	8001436 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d01c      	beq.n	800138c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d108      	bne.n	8001372 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001364:	2b00      	cmp	r3, #0
 8001366:	d030      	beq.n	80013ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	4798      	blx	r3
 8001370:	e02b      	b.n	80013ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001376:	2b00      	cmp	r3, #0
 8001378:	d027      	beq.n	80013ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	4798      	blx	r3
 8001382:	e022      	b.n	80013ca <HAL_DMA_IRQHandler+0x29e>
 8001384:	20000008 	.word	0x20000008
 8001388:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10f      	bne.n	80013ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0210 	bic.w	r2, r2, #16
 80013a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d032      	beq.n	8001438 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d022      	beq.n	8001424 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2205      	movs	r2, #5
 80013e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0201 	bic.w	r2, r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	3301      	adds	r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d307      	bcc.n	8001412 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f2      	bne.n	80013f6 <HAL_DMA_IRQHandler+0x2ca>
 8001410:	e000      	b.n	8001414 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001412:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	4798      	blx	r3
 8001434:	e000      	b.n	8001438 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001436:	bf00      	nop
    }
  }
}
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop

08001440 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800145c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b40      	cmp	r3, #64	; 0x40
 800146c:	d108      	bne.n	8001480 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800147e:	e007      	b.n	8001490 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	60da      	str	r2, [r3, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	3b10      	subs	r3, #16
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <DMA_CalcBaseAndBitshift+0x64>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014b6:	4a13      	ldr	r2, [pc, #76]	; (8001504 <DMA_CalcBaseAndBitshift+0x68>)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d909      	bls.n	80014de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014d2:	f023 0303 	bic.w	r3, r3, #3
 80014d6:	1d1a      	adds	r2, r3, #4
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	659a      	str	r2, [r3, #88]	; 0x58
 80014dc:	e007      	b.n	80014ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014e6:	f023 0303 	bic.w	r3, r3, #3
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	aaaaaaab 	.word	0xaaaaaaab
 8001504:	0800a434 	.word	0x0800a434

08001508 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d11f      	bne.n	8001562 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d855      	bhi.n	80015d4 <DMA_CheckFifoParam+0xcc>
 8001528:	a201      	add	r2, pc, #4	; (adr r2, 8001530 <DMA_CheckFifoParam+0x28>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001541 	.word	0x08001541
 8001534:	08001553 	.word	0x08001553
 8001538:	08001541 	.word	0x08001541
 800153c:	080015d5 	.word	0x080015d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d045      	beq.n	80015d8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001550:	e042      	b.n	80015d8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800155a:	d13f      	bne.n	80015dc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001560:	e03c      	b.n	80015dc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800156a:	d121      	bne.n	80015b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d836      	bhi.n	80015e0 <DMA_CheckFifoParam+0xd8>
 8001572:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <DMA_CheckFifoParam+0x70>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	08001589 	.word	0x08001589
 800157c:	0800158f 	.word	0x0800158f
 8001580:	08001589 	.word	0x08001589
 8001584:	080015a1 	.word	0x080015a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
      break;
 800158c:	e02f      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d024      	beq.n	80015e4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800159e:	e021      	b.n	80015e4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015a8:	d11e      	bne.n	80015e8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015ae:	e01b      	b.n	80015e8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d902      	bls.n	80015bc <DMA_CheckFifoParam+0xb4>
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d003      	beq.n	80015c2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015ba:	e018      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
      break;
 80015c0:	e015      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00e      	beq.n	80015ec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
      break;
 80015d2:	e00b      	b.n	80015ec <DMA_CheckFifoParam+0xe4>
      break;
 80015d4:	bf00      	nop
 80015d6:	e00a      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      break;
 80015d8:	bf00      	nop
 80015da:	e008      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      break;
 80015dc:	bf00      	nop
 80015de:	e006      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      break;
 80015e0:	bf00      	nop
 80015e2:	e004      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      break;
 80015e4:	bf00      	nop
 80015e6:	e002      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      break;   
 80015e8:	bf00      	nop
 80015ea:	e000      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      break;
 80015ec:	bf00      	nop
    }
  } 
  
  return status; 
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b80      	cmp	r3, #128	; 0x80
 8001614:	d106      	bne.n	8001624 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800161c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	f001 b913 	b.w	800284a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	2b00      	cmp	r3, #0
 800163a:	d105      	bne.n	8001648 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2240      	movs	r2, #64	; 0x40
 8001640:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	f001 b901 	b.w	800284a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800164e:	2b01      	cmp	r3, #1
 8001650:	d102      	bne.n	8001658 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8001652:	2302      	movs	r3, #2
 8001654:	f001 b8f9 	b.w	800284a <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b01      	cmp	r3, #1
 800166a:	f041 80e7 	bne.w	800283c <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2202      	movs	r2, #2
 8001672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800168a:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f001 f910 	bl	80028c0 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b99      	ldr	r3, [pc, #612]	; (800190c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d960      	bls.n	800176e <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a97      	ldr	r2, [pc, #604]	; (8001910 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d057      	beq.n	8001766 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a96      	ldr	r2, [pc, #600]	; (8001914 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d050      	beq.n	8001762 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a94      	ldr	r2, [pc, #592]	; (8001918 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d049      	beq.n	800175e <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a93      	ldr	r2, [pc, #588]	; (800191c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d042      	beq.n	800175a <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a91      	ldr	r2, [pc, #580]	; (8001920 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d03a      	beq.n	8001754 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a90      	ldr	r2, [pc, #576]	; (8001924 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d032      	beq.n	800174e <HAL_DMAEx_MultiBufferStart_IT+0x152>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a8e      	ldr	r2, [pc, #568]	; (8001928 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d02a      	beq.n	8001748 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a8d      	ldr	r2, [pc, #564]	; (800192c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d022      	beq.n	8001742 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a8b      	ldr	r2, [pc, #556]	; (8001930 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d01a      	beq.n	800173c <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a8a      	ldr	r2, [pc, #552]	; (8001934 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d012      	beq.n	8001736 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a88      	ldr	r2, [pc, #544]	; (8001938 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00a      	beq.n	8001730 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a87      	ldr	r2, [pc, #540]	; (800193c <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d102      	bne.n	800172a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8001724:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001728:	e01e      	b.n	8001768 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800172a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800172e:	e01b      	b.n	8001768 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001730:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001734:	e018      	b.n	8001768 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001736:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800173a:	e015      	b.n	8001768 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800173c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001740:	e012      	b.n	8001768 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001746:	e00f      	b.n	8001768 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001748:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800174c:	e00c      	b.n	8001768 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800174e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001752:	e009      	b.n	8001768 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001754:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001758:	e006      	b.n	8001768 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800175a:	2320      	movs	r3, #32
 800175c:	e004      	b.n	8001768 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800175e:	2320      	movs	r3, #32
 8001760:	e002      	b.n	8001768 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001762:	2320      	movs	r3, #32
 8001764:	e000      	b.n	8001768 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001766:	2320      	movs	r3, #32
 8001768:	4a75      	ldr	r2, [pc, #468]	; (8001940 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 800176a:	60d3      	str	r3, [r2, #12]
 800176c:	e150      	b.n	8001a10 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	4b73      	ldr	r3, [pc, #460]	; (8001944 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8001776:	429a      	cmp	r2, r3
 8001778:	d960      	bls.n	800183c <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a64      	ldr	r2, [pc, #400]	; (8001910 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d057      	beq.n	8001834 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a62      	ldr	r2, [pc, #392]	; (8001914 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d050      	beq.n	8001830 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a61      	ldr	r2, [pc, #388]	; (8001918 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d049      	beq.n	800182c <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a5f      	ldr	r2, [pc, #380]	; (800191c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d042      	beq.n	8001828 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a5e      	ldr	r2, [pc, #376]	; (8001920 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d03a      	beq.n	8001822 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a5c      	ldr	r2, [pc, #368]	; (8001924 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d032      	beq.n	800181c <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a5b      	ldr	r2, [pc, #364]	; (8001928 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d02a      	beq.n	8001816 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a59      	ldr	r2, [pc, #356]	; (800192c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d022      	beq.n	8001810 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a58      	ldr	r2, [pc, #352]	; (8001930 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d01a      	beq.n	800180a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a56      	ldr	r2, [pc, #344]	; (8001934 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d012      	beq.n	8001804 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a55      	ldr	r2, [pc, #340]	; (8001938 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d00a      	beq.n	80017fe <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a53      	ldr	r2, [pc, #332]	; (800193c <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d102      	bne.n	80017f8 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80017f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017f6:	e01e      	b.n	8001836 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80017f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80017fc:	e01b      	b.n	8001836 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80017fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001802:	e018      	b.n	8001836 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001804:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001808:	e015      	b.n	8001836 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800180a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800180e:	e012      	b.n	8001836 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001810:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001814:	e00f      	b.n	8001836 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001816:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800181a:	e00c      	b.n	8001836 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800181c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001820:	e009      	b.n	8001836 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001826:	e006      	b.n	8001836 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001828:	2320      	movs	r3, #32
 800182a:	e004      	b.n	8001836 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800182c:	2320      	movs	r3, #32
 800182e:	e002      	b.n	8001836 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001830:	2320      	movs	r3, #32
 8001832:	e000      	b.n	8001836 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001834:	2320      	movs	r3, #32
 8001836:	4a42      	ldr	r2, [pc, #264]	; (8001940 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8001838:	6093      	str	r3, [r2, #8]
 800183a:	e0e9      	b.n	8001a10 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8001844:	429a      	cmp	r2, r3
 8001846:	f240 8083 	bls.w	8001950 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a30      	ldr	r2, [pc, #192]	; (8001910 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d057      	beq.n	8001904 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a2e      	ldr	r2, [pc, #184]	; (8001914 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d050      	beq.n	8001900 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a2d      	ldr	r2, [pc, #180]	; (8001918 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d049      	beq.n	80018fc <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a2b      	ldr	r2, [pc, #172]	; (800191c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d042      	beq.n	80018f8 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a2a      	ldr	r2, [pc, #168]	; (8001920 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d03a      	beq.n	80018f2 <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a28      	ldr	r2, [pc, #160]	; (8001924 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d032      	beq.n	80018ec <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a27      	ldr	r2, [pc, #156]	; (8001928 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d02a      	beq.n	80018e6 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a25      	ldr	r2, [pc, #148]	; (800192c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d022      	beq.n	80018e0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a24      	ldr	r2, [pc, #144]	; (8001930 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d01a      	beq.n	80018da <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a22      	ldr	r2, [pc, #136]	; (8001934 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d012      	beq.n	80018d4 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a21      	ldr	r2, [pc, #132]	; (8001938 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d00a      	beq.n	80018ce <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1f      	ldr	r2, [pc, #124]	; (800193c <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d102      	bne.n	80018c8 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80018c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018c6:	e01e      	b.n	8001906 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80018c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80018cc:	e01b      	b.n	8001906 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80018ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018d2:	e018      	b.n	8001906 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80018d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018d8:	e015      	b.n	8001906 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80018da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018de:	e012      	b.n	8001906 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80018e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018e4:	e00f      	b.n	8001906 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80018e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018ea:	e00c      	b.n	8001906 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80018ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018f0:	e009      	b.n	8001906 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80018f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018f6:	e006      	b.n	8001906 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80018f8:	2320      	movs	r3, #32
 80018fa:	e004      	b.n	8001906 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 80018fc:	2320      	movs	r3, #32
 80018fe:	e002      	b.n	8001906 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8001900:	2320      	movs	r3, #32
 8001902:	e000      	b.n	8001906 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8001904:	2320      	movs	r3, #32
 8001906:	4a11      	ldr	r2, [pc, #68]	; (800194c <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8001908:	60d3      	str	r3, [r2, #12]
 800190a:	e081      	b.n	8001a10 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 800190c:	40026458 	.word	0x40026458
 8001910:	40026010 	.word	0x40026010
 8001914:	40026410 	.word	0x40026410
 8001918:	40026070 	.word	0x40026070
 800191c:	40026470 	.word	0x40026470
 8001920:	40026028 	.word	0x40026028
 8001924:	40026428 	.word	0x40026428
 8001928:	40026088 	.word	0x40026088
 800192c:	40026488 	.word	0x40026488
 8001930:	40026040 	.word	0x40026040
 8001934:	40026440 	.word	0x40026440
 8001938:	400260a0 	.word	0x400260a0
 800193c:	400264a0 	.word	0x400264a0
 8001940:	40026400 	.word	0x40026400
 8001944:	400260b8 	.word	0x400260b8
 8001948:	40026058 	.word	0x40026058
 800194c:	40026000 	.word	0x40026000
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a96      	ldr	r2, [pc, #600]	; (8001bb0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d057      	beq.n	8001a0a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a95      	ldr	r2, [pc, #596]	; (8001bb4 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d050      	beq.n	8001a06 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a93      	ldr	r2, [pc, #588]	; (8001bb8 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d049      	beq.n	8001a02 <HAL_DMAEx_MultiBufferStart_IT+0x406>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a92      	ldr	r2, [pc, #584]	; (8001bbc <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d042      	beq.n	80019fe <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a90      	ldr	r2, [pc, #576]	; (8001bc0 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d03a      	beq.n	80019f8 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a8f      	ldr	r2, [pc, #572]	; (8001bc4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d032      	beq.n	80019f2 <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a8d      	ldr	r2, [pc, #564]	; (8001bc8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d02a      	beq.n	80019ec <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a8c      	ldr	r2, [pc, #560]	; (8001bcc <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d022      	beq.n	80019e6 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a8a      	ldr	r2, [pc, #552]	; (8001bd0 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d01a      	beq.n	80019e0 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a89      	ldr	r2, [pc, #548]	; (8001bd4 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d012      	beq.n	80019da <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a87      	ldr	r2, [pc, #540]	; (8001bd8 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00a      	beq.n	80019d4 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a86      	ldr	r2, [pc, #536]	; (8001bdc <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d102      	bne.n	80019ce <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 80019c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019cc:	e01e      	b.n	8001a0c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80019ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80019d2:	e01b      	b.n	8001a0c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80019d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019d8:	e018      	b.n	8001a0c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80019da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019de:	e015      	b.n	8001a0c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80019e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019e4:	e012      	b.n	8001a0c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80019e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019ea:	e00f      	b.n	8001a0c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80019ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019f0:	e00c      	b.n	8001a0c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80019f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019f6:	e009      	b.n	8001a0c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80019f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019fc:	e006      	b.n	8001a0c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 80019fe:	2320      	movs	r3, #32
 8001a00:	e004      	b.n	8001a0c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8001a02:	2320      	movs	r3, #32
 8001a04:	e002      	b.n	8001a0c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8001a06:	2320      	movs	r3, #32
 8001a08:	e000      	b.n	8001a0c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8001a0e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b73      	ldr	r3, [pc, #460]	; (8001be4 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d960      	bls.n	8001ade <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a63      	ldr	r2, [pc, #396]	; (8001bb0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d057      	beq.n	8001ad6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a62      	ldr	r2, [pc, #392]	; (8001bb4 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d050      	beq.n	8001ad2 <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a60      	ldr	r2, [pc, #384]	; (8001bb8 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d049      	beq.n	8001ace <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a5f      	ldr	r2, [pc, #380]	; (8001bbc <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d042      	beq.n	8001aca <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a5d      	ldr	r2, [pc, #372]	; (8001bc0 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d03a      	beq.n	8001ac4 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a5c      	ldr	r2, [pc, #368]	; (8001bc4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d032      	beq.n	8001abe <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a5a      	ldr	r2, [pc, #360]	; (8001bc8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d02a      	beq.n	8001ab8 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a59      	ldr	r2, [pc, #356]	; (8001bcc <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d022      	beq.n	8001ab2 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a57      	ldr	r2, [pc, #348]	; (8001bd0 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d01a      	beq.n	8001aac <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a56      	ldr	r2, [pc, #344]	; (8001bd4 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d012      	beq.n	8001aa6 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a54      	ldr	r2, [pc, #336]	; (8001bd8 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00a      	beq.n	8001aa0 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a53      	ldr	r2, [pc, #332]	; (8001bdc <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d102      	bne.n	8001a9a <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8001a94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a98:	e01e      	b.n	8001ad8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8001a9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a9e:	e01b      	b.n	8001ad8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8001aa0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001aa4:	e018      	b.n	8001ad8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8001aa6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001aaa:	e015      	b.n	8001ad8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8001aac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ab0:	e012      	b.n	8001ad8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8001ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ab6:	e00f      	b.n	8001ad8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8001ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001abc:	e00c      	b.n	8001ad8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8001abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ac2:	e009      	b.n	8001ad8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8001ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ac8:	e006      	b.n	8001ad8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8001aca:	2310      	movs	r3, #16
 8001acc:	e004      	b.n	8001ad8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8001ace:	2310      	movs	r3, #16
 8001ad0:	e002      	b.n	8001ad8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8001ad2:	2310      	movs	r3, #16
 8001ad4:	e000      	b.n	8001ad8 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8001ad6:	2310      	movs	r3, #16
 8001ad8:	4a43      	ldr	r2, [pc, #268]	; (8001be8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8001ada:	60d3      	str	r3, [r2, #12]
 8001adc:	e14f      	b.n	8001d7e <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4b41      	ldr	r3, [pc, #260]	; (8001bec <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	f240 8082 	bls.w	8001bf0 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a2f      	ldr	r2, [pc, #188]	; (8001bb0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d057      	beq.n	8001ba6 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a2e      	ldr	r2, [pc, #184]	; (8001bb4 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d050      	beq.n	8001ba2 <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a2c      	ldr	r2, [pc, #176]	; (8001bb8 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d049      	beq.n	8001b9e <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a2b      	ldr	r2, [pc, #172]	; (8001bbc <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d042      	beq.n	8001b9a <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a29      	ldr	r2, [pc, #164]	; (8001bc0 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d03a      	beq.n	8001b94 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a28      	ldr	r2, [pc, #160]	; (8001bc4 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d032      	beq.n	8001b8e <HAL_DMAEx_MultiBufferStart_IT+0x592>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a26      	ldr	r2, [pc, #152]	; (8001bc8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d02a      	beq.n	8001b88 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a25      	ldr	r2, [pc, #148]	; (8001bcc <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d022      	beq.n	8001b82 <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a23      	ldr	r2, [pc, #140]	; (8001bd0 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d01a      	beq.n	8001b7c <HAL_DMAEx_MultiBufferStart_IT+0x580>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a22      	ldr	r2, [pc, #136]	; (8001bd4 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d012      	beq.n	8001b76 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00a      	beq.n	8001b70 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d102      	bne.n	8001b6a <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8001b64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b68:	e01e      	b.n	8001ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8001b6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b6e:	e01b      	b.n	8001ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8001b70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b74:	e018      	b.n	8001ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8001b76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b7a:	e015      	b.n	8001ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8001b7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b80:	e012      	b.n	8001ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8001b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b86:	e00f      	b.n	8001ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8001b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b8c:	e00c      	b.n	8001ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8001b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b92:	e009      	b.n	8001ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8001b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b98:	e006      	b.n	8001ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8001b9a:	2310      	movs	r3, #16
 8001b9c:	e004      	b.n	8001ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8001b9e:	2310      	movs	r3, #16
 8001ba0:	e002      	b.n	8001ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8001ba2:	2310      	movs	r3, #16
 8001ba4:	e000      	b.n	8001ba8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	4a0f      	ldr	r2, [pc, #60]	; (8001be8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8001baa:	6093      	str	r3, [r2, #8]
 8001bac:	e0e7      	b.n	8001d7e <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8001bae:	bf00      	nop
 8001bb0:	40026010 	.word	0x40026010
 8001bb4:	40026410 	.word	0x40026410
 8001bb8:	40026070 	.word	0x40026070
 8001bbc:	40026470 	.word	0x40026470
 8001bc0:	40026028 	.word	0x40026028
 8001bc4:	40026428 	.word	0x40026428
 8001bc8:	40026088 	.word	0x40026088
 8001bcc:	40026488 	.word	0x40026488
 8001bd0:	40026040 	.word	0x40026040
 8001bd4:	40026440 	.word	0x40026440
 8001bd8:	400260a0 	.word	0x400260a0
 8001bdc:	400264a0 	.word	0x400264a0
 8001be0:	40026000 	.word	0x40026000
 8001be4:	40026458 	.word	0x40026458
 8001be8:	40026400 	.word	0x40026400
 8001bec:	400260b8 	.word	0x400260b8
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b96      	ldr	r3, [pc, #600]	; (8001e50 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d960      	bls.n	8001cbe <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a94      	ldr	r2, [pc, #592]	; (8001e54 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d057      	beq.n	8001cb6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a93      	ldr	r2, [pc, #588]	; (8001e58 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d050      	beq.n	8001cb2 <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a91      	ldr	r2, [pc, #580]	; (8001e5c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d049      	beq.n	8001cae <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a90      	ldr	r2, [pc, #576]	; (8001e60 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d042      	beq.n	8001caa <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a8e      	ldr	r2, [pc, #568]	; (8001e64 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d03a      	beq.n	8001ca4 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a8d      	ldr	r2, [pc, #564]	; (8001e68 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d032      	beq.n	8001c9e <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a8b      	ldr	r2, [pc, #556]	; (8001e6c <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d02a      	beq.n	8001c98 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a8a      	ldr	r2, [pc, #552]	; (8001e70 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d022      	beq.n	8001c92 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a88      	ldr	r2, [pc, #544]	; (8001e74 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d01a      	beq.n	8001c8c <HAL_DMAEx_MultiBufferStart_IT+0x690>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a87      	ldr	r2, [pc, #540]	; (8001e78 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d012      	beq.n	8001c86 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a85      	ldr	r2, [pc, #532]	; (8001e7c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00a      	beq.n	8001c80 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a84      	ldr	r2, [pc, #528]	; (8001e80 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d102      	bne.n	8001c7a <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8001c74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c78:	e01e      	b.n	8001cb8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8001c7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c7e:	e01b      	b.n	8001cb8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8001c80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c84:	e018      	b.n	8001cb8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8001c86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c8a:	e015      	b.n	8001cb8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8001c8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c90:	e012      	b.n	8001cb8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8001c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c96:	e00f      	b.n	8001cb8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8001c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9c:	e00c      	b.n	8001cb8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8001c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca2:	e009      	b.n	8001cb8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8001ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca8:	e006      	b.n	8001cb8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8001caa:	2310      	movs	r3, #16
 8001cac:	e004      	b.n	8001cb8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8001cae:	2310      	movs	r3, #16
 8001cb0:	e002      	b.n	8001cb8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8001cb2:	2310      	movs	r3, #16
 8001cb4:	e000      	b.n	8001cb8 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8001cb6:	2310      	movs	r3, #16
 8001cb8:	4a72      	ldr	r2, [pc, #456]	; (8001e84 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8001cba:	60d3      	str	r3, [r2, #12]
 8001cbc:	e05f      	b.n	8001d7e <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a64      	ldr	r2, [pc, #400]	; (8001e54 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d057      	beq.n	8001d78 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a62      	ldr	r2, [pc, #392]	; (8001e58 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d050      	beq.n	8001d74 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a61      	ldr	r2, [pc, #388]	; (8001e5c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d049      	beq.n	8001d70 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a5f      	ldr	r2, [pc, #380]	; (8001e60 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d042      	beq.n	8001d6c <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a5e      	ldr	r2, [pc, #376]	; (8001e64 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d03a      	beq.n	8001d66 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a5c      	ldr	r2, [pc, #368]	; (8001e68 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d032      	beq.n	8001d60 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a5b      	ldr	r2, [pc, #364]	; (8001e6c <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d02a      	beq.n	8001d5a <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a59      	ldr	r2, [pc, #356]	; (8001e70 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d022      	beq.n	8001d54 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a58      	ldr	r2, [pc, #352]	; (8001e74 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d01a      	beq.n	8001d4e <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a56      	ldr	r2, [pc, #344]	; (8001e78 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d012      	beq.n	8001d48 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a55      	ldr	r2, [pc, #340]	; (8001e7c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d00a      	beq.n	8001d42 <HAL_DMAEx_MultiBufferStart_IT+0x746>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a53      	ldr	r2, [pc, #332]	; (8001e80 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d102      	bne.n	8001d3c <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8001d36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d3a:	e01e      	b.n	8001d7a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8001d3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d40:	e01b      	b.n	8001d7a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8001d42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d46:	e018      	b.n	8001d7a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8001d48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d4c:	e015      	b.n	8001d7a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8001d4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d52:	e012      	b.n	8001d7a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8001d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d58:	e00f      	b.n	8001d7a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8001d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d5e:	e00c      	b.n	8001d7a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8001d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d64:	e009      	b.n	8001d7a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8001d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6a:	e006      	b.n	8001d7a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8001d6c:	2310      	movs	r3, #16
 8001d6e:	e004      	b.n	8001d7a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8001d70:	2310      	movs	r3, #16
 8001d72:	e002      	b.n	8001d7a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8001d74:	2310      	movs	r3, #16
 8001d76:	e000      	b.n	8001d7a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8001d78:	2310      	movs	r3, #16
 8001d7a:	4a42      	ldr	r2, [pc, #264]	; (8001e84 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8001d7c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b40      	ldr	r3, [pc, #256]	; (8001e88 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8001d86:	429a      	cmp	r2, r3
 8001d88:	f240 8082 	bls.w	8001e90 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a30      	ldr	r2, [pc, #192]	; (8001e54 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d057      	beq.n	8001e46 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a2f      	ldr	r2, [pc, #188]	; (8001e58 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d050      	beq.n	8001e42 <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a2d      	ldr	r2, [pc, #180]	; (8001e5c <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d049      	beq.n	8001e3e <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a2c      	ldr	r2, [pc, #176]	; (8001e60 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d042      	beq.n	8001e3a <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a2a      	ldr	r2, [pc, #168]	; (8001e64 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d03a      	beq.n	8001e34 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a29      	ldr	r2, [pc, #164]	; (8001e68 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d032      	beq.n	8001e2e <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a27      	ldr	r2, [pc, #156]	; (8001e6c <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d02a      	beq.n	8001e28 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a26      	ldr	r2, [pc, #152]	; (8001e70 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d022      	beq.n	8001e22 <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01a      	beq.n	8001e1c <HAL_DMAEx_MultiBufferStart_IT+0x820>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d012      	beq.n	8001e16 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a21      	ldr	r2, [pc, #132]	; (8001e7c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00a      	beq.n	8001e10 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a20      	ldr	r2, [pc, #128]	; (8001e80 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d102      	bne.n	8001e0a <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8001e04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e08:	e01e      	b.n	8001e48 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8001e0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e0e:	e01b      	b.n	8001e48 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8001e10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e14:	e018      	b.n	8001e48 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8001e16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e1a:	e015      	b.n	8001e48 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8001e1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e20:	e012      	b.n	8001e48 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8001e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e26:	e00f      	b.n	8001e48 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8001e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e2c:	e00c      	b.n	8001e48 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8001e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e32:	e009      	b.n	8001e48 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8001e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e38:	e006      	b.n	8001e48 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8001e3a:	2308      	movs	r3, #8
 8001e3c:	e004      	b.n	8001e48 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8001e3e:	2308      	movs	r3, #8
 8001e40:	e002      	b.n	8001e48 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8001e42:	2308      	movs	r3, #8
 8001e44:	e000      	b.n	8001e48 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8001e46:	2308      	movs	r3, #8
 8001e48:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 8001e4a:	60d3      	str	r3, [r2, #12]
 8001e4c:	e16f      	b.n	800212e <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8001e4e:	bf00      	nop
 8001e50:	40026058 	.word	0x40026058
 8001e54:	40026010 	.word	0x40026010
 8001e58:	40026410 	.word	0x40026410
 8001e5c:	40026070 	.word	0x40026070
 8001e60:	40026470 	.word	0x40026470
 8001e64:	40026028 	.word	0x40026028
 8001e68:	40026428 	.word	0x40026428
 8001e6c:	40026088 	.word	0x40026088
 8001e70:	40026488 	.word	0x40026488
 8001e74:	40026040 	.word	0x40026040
 8001e78:	40026440 	.word	0x40026440
 8001e7c:	400260a0 	.word	0x400260a0
 8001e80:	400264a0 	.word	0x400264a0
 8001e84:	40026000 	.word	0x40026000
 8001e88:	40026458 	.word	0x40026458
 8001e8c:	40026400 	.word	0x40026400
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b94      	ldr	r3, [pc, #592]	; (80020e8 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d960      	bls.n	8001f5e <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a92      	ldr	r2, [pc, #584]	; (80020ec <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d057      	beq.n	8001f56 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a91      	ldr	r2, [pc, #580]	; (80020f0 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d050      	beq.n	8001f52 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a8f      	ldr	r2, [pc, #572]	; (80020f4 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d049      	beq.n	8001f4e <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a8e      	ldr	r2, [pc, #568]	; (80020f8 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d042      	beq.n	8001f4a <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a8c      	ldr	r2, [pc, #560]	; (80020fc <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d03a      	beq.n	8001f44 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a8b      	ldr	r2, [pc, #556]	; (8002100 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d032      	beq.n	8001f3e <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a89      	ldr	r2, [pc, #548]	; (8002104 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d02a      	beq.n	8001f38 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a88      	ldr	r2, [pc, #544]	; (8002108 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d022      	beq.n	8001f32 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a86      	ldr	r2, [pc, #536]	; (800210c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01a      	beq.n	8001f2c <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a85      	ldr	r2, [pc, #532]	; (8002110 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d012      	beq.n	8001f26 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a83      	ldr	r2, [pc, #524]	; (8002114 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00a      	beq.n	8001f20 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a82      	ldr	r2, [pc, #520]	; (8002118 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d102      	bne.n	8001f1a <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8001f14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f18:	e01e      	b.n	8001f58 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8001f1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f1e:	e01b      	b.n	8001f58 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8001f20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f24:	e018      	b.n	8001f58 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8001f26:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f2a:	e015      	b.n	8001f58 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8001f2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f30:	e012      	b.n	8001f58 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8001f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f36:	e00f      	b.n	8001f58 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8001f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f3c:	e00c      	b.n	8001f58 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8001f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f42:	e009      	b.n	8001f58 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8001f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f48:	e006      	b.n	8001f58 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8001f4a:	2308      	movs	r3, #8
 8001f4c:	e004      	b.n	8001f58 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8001f4e:	2308      	movs	r3, #8
 8001f50:	e002      	b.n	8001f58 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8001f52:	2308      	movs	r3, #8
 8001f54:	e000      	b.n	8001f58 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8001f56:	2308      	movs	r3, #8
 8001f58:	4a70      	ldr	r2, [pc, #448]	; (800211c <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 8001f5a:	6093      	str	r3, [r2, #8]
 8001f5c:	e0e7      	b.n	800212e <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	4b6e      	ldr	r3, [pc, #440]	; (8002120 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d960      	bls.n	800202c <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a5f      	ldr	r2, [pc, #380]	; (80020ec <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d057      	beq.n	8002024 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a5d      	ldr	r2, [pc, #372]	; (80020f0 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d050      	beq.n	8002020 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a5c      	ldr	r2, [pc, #368]	; (80020f4 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d049      	beq.n	800201c <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a5a      	ldr	r2, [pc, #360]	; (80020f8 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d042      	beq.n	8002018 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a59      	ldr	r2, [pc, #356]	; (80020fc <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d03a      	beq.n	8002012 <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a57      	ldr	r2, [pc, #348]	; (8002100 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d032      	beq.n	800200c <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a56      	ldr	r2, [pc, #344]	; (8002104 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d02a      	beq.n	8002006 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a54      	ldr	r2, [pc, #336]	; (8002108 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d022      	beq.n	8002000 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a53      	ldr	r2, [pc, #332]	; (800210c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d01a      	beq.n	8001ffa <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a51      	ldr	r2, [pc, #324]	; (8002110 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d012      	beq.n	8001ff4 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a50      	ldr	r2, [pc, #320]	; (8002114 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00a      	beq.n	8001fee <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a4e      	ldr	r2, [pc, #312]	; (8002118 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d102      	bne.n	8001fe8 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 8001fe2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001fe6:	e01e      	b.n	8002026 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8001fe8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fec:	e01b      	b.n	8002026 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8001fee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ff2:	e018      	b.n	8002026 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8001ff4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ff8:	e015      	b.n	8002026 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8001ffa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ffe:	e012      	b.n	8002026 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002004:	e00f      	b.n	8002026 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800200a:	e00c      	b.n	8002026 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800200c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002010:	e009      	b.n	8002026 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002012:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002016:	e006      	b.n	8002026 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002018:	2308      	movs	r3, #8
 800201a:	e004      	b.n	8002026 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800201c:	2308      	movs	r3, #8
 800201e:	e002      	b.n	8002026 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002020:	2308      	movs	r3, #8
 8002022:	e000      	b.n	8002026 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8002024:	2308      	movs	r3, #8
 8002026:	4a3f      	ldr	r2, [pc, #252]	; (8002124 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 8002028:	60d3      	str	r3, [r2, #12]
 800202a:	e080      	b.n	800212e <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2e      	ldr	r2, [pc, #184]	; (80020ec <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d078      	beq.n	8002128 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a2d      	ldr	r2, [pc, #180]	; (80020f0 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d050      	beq.n	80020e2 <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a2b      	ldr	r2, [pc, #172]	; (80020f4 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d049      	beq.n	80020de <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a2a      	ldr	r2, [pc, #168]	; (80020f8 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d042      	beq.n	80020da <HAL_DMAEx_MultiBufferStart_IT+0xade>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a28      	ldr	r2, [pc, #160]	; (80020fc <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d03a      	beq.n	80020d4 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a27      	ldr	r2, [pc, #156]	; (8002100 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d032      	beq.n	80020ce <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a25      	ldr	r2, [pc, #148]	; (8002104 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d02a      	beq.n	80020c8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a24      	ldr	r2, [pc, #144]	; (8002108 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d022      	beq.n	80020c2 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01a      	beq.n	80020bc <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a21      	ldr	r2, [pc, #132]	; (8002110 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d012      	beq.n	80020b6 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00a      	beq.n	80020b0 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d102      	bne.n	80020aa <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 80020a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80020a8:	e03f      	b.n	800212a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80020aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ae:	e03c      	b.n	800212a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80020b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80020b4:	e039      	b.n	800212a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80020b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80020ba:	e036      	b.n	800212a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80020bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80020c0:	e033      	b.n	800212a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80020c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c6:	e030      	b.n	800212a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80020c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020cc:	e02d      	b.n	800212a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80020ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020d2:	e02a      	b.n	800212a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80020d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020d8:	e027      	b.n	800212a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80020da:	2308      	movs	r3, #8
 80020dc:	e025      	b.n	800212a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80020de:	2308      	movs	r3, #8
 80020e0:	e023      	b.n	800212a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80020e2:	2308      	movs	r3, #8
 80020e4:	e021      	b.n	800212a <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 80020e6:	bf00      	nop
 80020e8:	400260b8 	.word	0x400260b8
 80020ec:	40026010 	.word	0x40026010
 80020f0:	40026410 	.word	0x40026410
 80020f4:	40026070 	.word	0x40026070
 80020f8:	40026470 	.word	0x40026470
 80020fc:	40026028 	.word	0x40026028
 8002100:	40026428 	.word	0x40026428
 8002104:	40026088 	.word	0x40026088
 8002108:	40026488 	.word	0x40026488
 800210c:	40026040 	.word	0x40026040
 8002110:	40026440 	.word	0x40026440
 8002114:	400260a0 	.word	0x400260a0
 8002118:	400264a0 	.word	0x400264a0
 800211c:	40026400 	.word	0x40026400
 8002120:	40026058 	.word	0x40026058
 8002124:	40026000 	.word	0x40026000
 8002128:	2308      	movs	r3, #8
 800212a:	4a9a      	ldr	r2, [pc, #616]	; (8002394 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 800212c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	4b98      	ldr	r3, [pc, #608]	; (8002398 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 8002136:	429a      	cmp	r2, r3
 8002138:	d960      	bls.n	80021fc <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a97      	ldr	r2, [pc, #604]	; (800239c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d057      	beq.n	80021f4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a95      	ldr	r2, [pc, #596]	; (80023a0 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d050      	beq.n	80021f0 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a94      	ldr	r2, [pc, #592]	; (80023a4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d049      	beq.n	80021ec <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a92      	ldr	r2, [pc, #584]	; (80023a8 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d042      	beq.n	80021e8 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a91      	ldr	r2, [pc, #580]	; (80023ac <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d03a      	beq.n	80021e2 <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a8f      	ldr	r2, [pc, #572]	; (80023b0 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d032      	beq.n	80021dc <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a8e      	ldr	r2, [pc, #568]	; (80023b4 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d02a      	beq.n	80021d6 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a8c      	ldr	r2, [pc, #560]	; (80023b8 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d022      	beq.n	80021d0 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a8b      	ldr	r2, [pc, #556]	; (80023bc <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d01a      	beq.n	80021ca <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a89      	ldr	r2, [pc, #548]	; (80023c0 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d012      	beq.n	80021c4 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a88      	ldr	r2, [pc, #544]	; (80023c4 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00a      	beq.n	80021be <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a86      	ldr	r2, [pc, #536]	; (80023c8 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d102      	bne.n	80021b8 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 80021b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021b6:	e01e      	b.n	80021f6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80021b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021bc:	e01b      	b.n	80021f6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80021be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021c2:	e018      	b.n	80021f6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80021c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021c8:	e015      	b.n	80021f6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80021ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021ce:	e012      	b.n	80021f6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80021d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d4:	e00f      	b.n	80021f6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80021d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021da:	e00c      	b.n	80021f6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80021dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e0:	e009      	b.n	80021f6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80021e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e6:	e006      	b.n	80021f6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80021e8:	2304      	movs	r3, #4
 80021ea:	e004      	b.n	80021f6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80021ec:	2304      	movs	r3, #4
 80021ee:	e002      	b.n	80021f6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80021f0:	2304      	movs	r3, #4
 80021f2:	e000      	b.n	80021f6 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 80021f4:	2304      	movs	r3, #4
 80021f6:	4a75      	ldr	r2, [pc, #468]	; (80023cc <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 80021f8:	60d3      	str	r3, [r2, #12]
 80021fa:	e151      	b.n	80024a0 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b73      	ldr	r3, [pc, #460]	; (80023d0 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8002204:	429a      	cmp	r2, r3
 8002206:	d960      	bls.n	80022ca <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a63      	ldr	r2, [pc, #396]	; (800239c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d057      	beq.n	80022c2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a62      	ldr	r2, [pc, #392]	; (80023a0 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d050      	beq.n	80022be <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a60      	ldr	r2, [pc, #384]	; (80023a4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d049      	beq.n	80022ba <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a5f      	ldr	r2, [pc, #380]	; (80023a8 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d042      	beq.n	80022b6 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a5d      	ldr	r2, [pc, #372]	; (80023ac <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d03a      	beq.n	80022b0 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a5c      	ldr	r2, [pc, #368]	; (80023b0 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d032      	beq.n	80022aa <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a5a      	ldr	r2, [pc, #360]	; (80023b4 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d02a      	beq.n	80022a4 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a59      	ldr	r2, [pc, #356]	; (80023b8 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d022      	beq.n	800229e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a57      	ldr	r2, [pc, #348]	; (80023bc <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01a      	beq.n	8002298 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a56      	ldr	r2, [pc, #344]	; (80023c0 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d012      	beq.n	8002292 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a54      	ldr	r2, [pc, #336]	; (80023c4 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00a      	beq.n	800228c <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a53      	ldr	r2, [pc, #332]	; (80023c8 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d102      	bne.n	8002286 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8002280:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002284:	e01e      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002286:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800228a:	e01b      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800228c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002290:	e018      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002292:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002296:	e015      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8002298:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800229c:	e012      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800229e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a2:	e00f      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80022a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a8:	e00c      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80022aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ae:	e009      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80022b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b4:	e006      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80022b6:	2304      	movs	r3, #4
 80022b8:	e004      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80022ba:	2304      	movs	r3, #4
 80022bc:	e002      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80022be:	2304      	movs	r3, #4
 80022c0:	e000      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 80022c2:	2304      	movs	r3, #4
 80022c4:	4a41      	ldr	r2, [pc, #260]	; (80023cc <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 80022c6:	6093      	str	r3, [r2, #8]
 80022c8:	e0ea      	b.n	80024a0 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	4b40      	ldr	r3, [pc, #256]	; (80023d4 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 80022d2:	429a      	cmp	r2, r3
 80022d4:	f240 8084 	bls.w	80023e0 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a2f      	ldr	r2, [pc, #188]	; (800239c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d07a      	beq.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a2e      	ldr	r2, [pc, #184]	; (80023a0 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d050      	beq.n	800238e <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a2c      	ldr	r2, [pc, #176]	; (80023a4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d049      	beq.n	800238a <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a2b      	ldr	r2, [pc, #172]	; (80023a8 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d042      	beq.n	8002386 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a29      	ldr	r2, [pc, #164]	; (80023ac <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d03a      	beq.n	8002380 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a28      	ldr	r2, [pc, #160]	; (80023b0 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d032      	beq.n	800237a <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d02a      	beq.n	8002374 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a25      	ldr	r2, [pc, #148]	; (80023b8 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d022      	beq.n	800236e <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a23      	ldr	r2, [pc, #140]	; (80023bc <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d01a      	beq.n	8002368 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a22      	ldr	r2, [pc, #136]	; (80023c0 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d012      	beq.n	8002362 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a20      	ldr	r2, [pc, #128]	; (80023c4 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00a      	beq.n	800235c <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1f      	ldr	r2, [pc, #124]	; (80023c8 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d102      	bne.n	8002356 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 8002350:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002354:	e041      	b.n	80023da <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800235a:	e03e      	b.n	80023da <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800235c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002360:	e03b      	b.n	80023da <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002362:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002366:	e038      	b.n	80023da <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002368:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800236c:	e035      	b.n	80023da <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800236e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002372:	e032      	b.n	80023da <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002378:	e02f      	b.n	80023da <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800237a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800237e:	e02c      	b.n	80023da <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002384:	e029      	b.n	80023da <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002386:	2304      	movs	r3, #4
 8002388:	e027      	b.n	80023da <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800238a:	2304      	movs	r3, #4
 800238c:	e025      	b.n	80023da <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800238e:	2304      	movs	r3, #4
 8002390:	e023      	b.n	80023da <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8002392:	bf00      	nop
 8002394:	40026000 	.word	0x40026000
 8002398:	40026458 	.word	0x40026458
 800239c:	40026010 	.word	0x40026010
 80023a0:	40026410 	.word	0x40026410
 80023a4:	40026070 	.word	0x40026070
 80023a8:	40026470 	.word	0x40026470
 80023ac:	40026028 	.word	0x40026028
 80023b0:	40026428 	.word	0x40026428
 80023b4:	40026088 	.word	0x40026088
 80023b8:	40026488 	.word	0x40026488
 80023bc:	40026040 	.word	0x40026040
 80023c0:	40026440 	.word	0x40026440
 80023c4:	400260a0 	.word	0x400260a0
 80023c8:	400264a0 	.word	0x400264a0
 80023cc:	40026400 	.word	0x40026400
 80023d0:	400260b8 	.word	0x400260b8
 80023d4:	40026058 	.word	0x40026058
 80023d8:	2304      	movs	r3, #4
 80023da:	4a94      	ldr	r2, [pc, #592]	; (800262c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80023dc:	60d3      	str	r3, [r2, #12]
 80023de:	e05f      	b.n	80024a0 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a92      	ldr	r2, [pc, #584]	; (8002630 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d057      	beq.n	800249a <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a91      	ldr	r2, [pc, #580]	; (8002634 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d050      	beq.n	8002496 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a8f      	ldr	r2, [pc, #572]	; (8002638 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d049      	beq.n	8002492 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a8e      	ldr	r2, [pc, #568]	; (800263c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d042      	beq.n	800248e <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a8c      	ldr	r2, [pc, #560]	; (8002640 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d03a      	beq.n	8002488 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a8b      	ldr	r2, [pc, #556]	; (8002644 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d032      	beq.n	8002482 <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a89      	ldr	r2, [pc, #548]	; (8002648 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d02a      	beq.n	800247c <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a88      	ldr	r2, [pc, #544]	; (800264c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d022      	beq.n	8002476 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a86      	ldr	r2, [pc, #536]	; (8002650 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d01a      	beq.n	8002470 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a85      	ldr	r2, [pc, #532]	; (8002654 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d012      	beq.n	800246a <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a83      	ldr	r2, [pc, #524]	; (8002658 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00a      	beq.n	8002464 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a82      	ldr	r2, [pc, #520]	; (800265c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d102      	bne.n	800245e <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 8002458:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800245c:	e01e      	b.n	800249c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800245e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002462:	e01b      	b.n	800249c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002464:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002468:	e018      	b.n	800249c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800246a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800246e:	e015      	b.n	800249c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002470:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002474:	e012      	b.n	800249c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800247a:	e00f      	b.n	800249c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800247c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002480:	e00c      	b.n	800249c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002486:	e009      	b.n	800249c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800248c:	e006      	b.n	800249c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800248e:	2304      	movs	r3, #4
 8002490:	e004      	b.n	800249c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002492:	2304      	movs	r3, #4
 8002494:	e002      	b.n	800249c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002496:	2304      	movs	r3, #4
 8002498:	e000      	b.n	800249c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800249a:	2304      	movs	r3, #4
 800249c:	4a63      	ldr	r2, [pc, #396]	; (800262c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800249e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b6e      	ldr	r3, [pc, #440]	; (8002660 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d95c      	bls.n	8002566 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a5f      	ldr	r2, [pc, #380]	; (8002630 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d053      	beq.n	800255e <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a5e      	ldr	r2, [pc, #376]	; (8002634 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d04c      	beq.n	800255a <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a5c      	ldr	r2, [pc, #368]	; (8002638 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d045      	beq.n	8002556 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a5b      	ldr	r2, [pc, #364]	; (800263c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d03e      	beq.n	8002552 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a59      	ldr	r2, [pc, #356]	; (8002640 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d037      	beq.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a58      	ldr	r2, [pc, #352]	; (8002644 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d030      	beq.n	800254a <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a56      	ldr	r2, [pc, #344]	; (8002648 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d029      	beq.n	8002546 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a55      	ldr	r2, [pc, #340]	; (800264c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d022      	beq.n	8002542 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a53      	ldr	r2, [pc, #332]	; (8002650 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d01a      	beq.n	800253c <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a52      	ldr	r2, [pc, #328]	; (8002654 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d012      	beq.n	8002536 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a50      	ldr	r2, [pc, #320]	; (8002658 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d00a      	beq.n	8002530 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a4f      	ldr	r2, [pc, #316]	; (800265c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d102      	bne.n	800252a <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8002524:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002528:	e01a      	b.n	8002560 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800252a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800252e:	e017      	b.n	8002560 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002534:	e014      	b.n	8002560 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800253a:	e011      	b.n	8002560 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800253c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002540:	e00e      	b.n	8002560 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002542:	2340      	movs	r3, #64	; 0x40
 8002544:	e00c      	b.n	8002560 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002546:	2340      	movs	r3, #64	; 0x40
 8002548:	e00a      	b.n	8002560 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800254a:	2340      	movs	r3, #64	; 0x40
 800254c:	e008      	b.n	8002560 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800254e:	2340      	movs	r3, #64	; 0x40
 8002550:	e006      	b.n	8002560 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002552:	2301      	movs	r3, #1
 8002554:	e004      	b.n	8002560 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8002556:	2301      	movs	r3, #1
 8002558:	e002      	b.n	8002560 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 800255e:	2301      	movs	r3, #1
 8002560:	4a40      	ldr	r2, [pc, #256]	; (8002664 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8002562:	60d3      	str	r3, [r2, #12]
 8002564:	e141      	b.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	4b3e      	ldr	r3, [pc, #248]	; (8002668 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 800256e:	429a      	cmp	r2, r3
 8002570:	d97c      	bls.n	800266c <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a2e      	ldr	r2, [pc, #184]	; (8002630 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d053      	beq.n	8002624 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a2c      	ldr	r2, [pc, #176]	; (8002634 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d04c      	beq.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a2b      	ldr	r2, [pc, #172]	; (8002638 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d045      	beq.n	800261c <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a29      	ldr	r2, [pc, #164]	; (800263c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d03e      	beq.n	8002618 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a28      	ldr	r2, [pc, #160]	; (8002640 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d037      	beq.n	8002614 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a26      	ldr	r2, [pc, #152]	; (8002644 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d030      	beq.n	8002610 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a25      	ldr	r2, [pc, #148]	; (8002648 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d029      	beq.n	800260c <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a23      	ldr	r2, [pc, #140]	; (800264c <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d022      	beq.n	8002608 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a22      	ldr	r2, [pc, #136]	; (8002650 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d01a      	beq.n	8002602 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a20      	ldr	r2, [pc, #128]	; (8002654 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d012      	beq.n	80025fc <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a1f      	ldr	r2, [pc, #124]	; (8002658 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00a      	beq.n	80025f6 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1d      	ldr	r2, [pc, #116]	; (800265c <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d102      	bne.n	80025f0 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 80025ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ee:	e01a      	b.n	8002626 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80025f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025f4:	e017      	b.n	8002626 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80025f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025fa:	e014      	b.n	8002626 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 80025fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002600:	e011      	b.n	8002626 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002606:	e00e      	b.n	8002626 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002608:	2340      	movs	r3, #64	; 0x40
 800260a:	e00c      	b.n	8002626 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800260c:	2340      	movs	r3, #64	; 0x40
 800260e:	e00a      	b.n	8002626 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002610:	2340      	movs	r3, #64	; 0x40
 8002612:	e008      	b.n	8002626 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002614:	2340      	movs	r3, #64	; 0x40
 8002616:	e006      	b.n	8002626 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002618:	2301      	movs	r3, #1
 800261a:	e004      	b.n	8002626 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800261c:	2301      	movs	r3, #1
 800261e:	e002      	b.n	8002626 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002624:	2301      	movs	r3, #1
 8002626:	4a0f      	ldr	r2, [pc, #60]	; (8002664 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8002628:	6093      	str	r3, [r2, #8]
 800262a:	e0de      	b.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 800262c:	40026000 	.word	0x40026000
 8002630:	40026010 	.word	0x40026010
 8002634:	40026410 	.word	0x40026410
 8002638:	40026070 	.word	0x40026070
 800263c:	40026470 	.word	0x40026470
 8002640:	40026028 	.word	0x40026028
 8002644:	40026428 	.word	0x40026428
 8002648:	40026088 	.word	0x40026088
 800264c:	40026488 	.word	0x40026488
 8002650:	40026040 	.word	0x40026040
 8002654:	40026440 	.word	0x40026440
 8002658:	400260a0 	.word	0x400260a0
 800265c:	400264a0 	.word	0x400264a0
 8002660:	40026458 	.word	0x40026458
 8002664:	40026400 	.word	0x40026400
 8002668:	400260b8 	.word	0x400260b8
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	4b78      	ldr	r3, [pc, #480]	; (8002854 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8002674:	429a      	cmp	r2, r3
 8002676:	d95c      	bls.n	8002732 <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a76      	ldr	r2, [pc, #472]	; (8002858 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d053      	beq.n	800272a <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a75      	ldr	r2, [pc, #468]	; (800285c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d04c      	beq.n	8002726 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a73      	ldr	r2, [pc, #460]	; (8002860 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d045      	beq.n	8002722 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a72      	ldr	r2, [pc, #456]	; (8002864 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d03e      	beq.n	800271e <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a70      	ldr	r2, [pc, #448]	; (8002868 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d037      	beq.n	800271a <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a6f      	ldr	r2, [pc, #444]	; (800286c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d030      	beq.n	8002716 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a6d      	ldr	r2, [pc, #436]	; (8002870 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d029      	beq.n	8002712 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a6c      	ldr	r2, [pc, #432]	; (8002874 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d022      	beq.n	800270e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a6a      	ldr	r2, [pc, #424]	; (8002878 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d01a      	beq.n	8002708 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a69      	ldr	r2, [pc, #420]	; (800287c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d012      	beq.n	8002702 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a67      	ldr	r2, [pc, #412]	; (8002880 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00a      	beq.n	80026fc <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a66      	ldr	r2, [pc, #408]	; (8002884 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d102      	bne.n	80026f6 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 80026f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026f4:	e01a      	b.n	800272c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80026f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026fa:	e017      	b.n	800272c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 80026fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002700:	e014      	b.n	800272c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002706:	e011      	b.n	800272c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800270c:	e00e      	b.n	800272c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800270e:	2340      	movs	r3, #64	; 0x40
 8002710:	e00c      	b.n	800272c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002712:	2340      	movs	r3, #64	; 0x40
 8002714:	e00a      	b.n	800272c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002716:	2340      	movs	r3, #64	; 0x40
 8002718:	e008      	b.n	800272c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800271a:	2340      	movs	r3, #64	; 0x40
 800271c:	e006      	b.n	800272c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800271e:	2301      	movs	r3, #1
 8002720:	e004      	b.n	800272c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002722:	2301      	movs	r3, #1
 8002724:	e002      	b.n	800272c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 800272a:	2301      	movs	r3, #1
 800272c:	4a56      	ldr	r2, [pc, #344]	; (8002888 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800272e:	60d3      	str	r3, [r2, #12]
 8002730:	e05b      	b.n	80027ea <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a48      	ldr	r2, [pc, #288]	; (8002858 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d053      	beq.n	80027e4 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a46      	ldr	r2, [pc, #280]	; (800285c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d04c      	beq.n	80027e0 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a45      	ldr	r2, [pc, #276]	; (8002860 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d045      	beq.n	80027dc <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a43      	ldr	r2, [pc, #268]	; (8002864 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d03e      	beq.n	80027d8 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a42      	ldr	r2, [pc, #264]	; (8002868 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d037      	beq.n	80027d4 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a40      	ldr	r2, [pc, #256]	; (800286c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d030      	beq.n	80027d0 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a3f      	ldr	r2, [pc, #252]	; (8002870 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d029      	beq.n	80027cc <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a3d      	ldr	r2, [pc, #244]	; (8002874 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d022      	beq.n	80027c8 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a3c      	ldr	r2, [pc, #240]	; (8002878 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d01a      	beq.n	80027c2 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a3a      	ldr	r2, [pc, #232]	; (800287c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d012      	beq.n	80027bc <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a39      	ldr	r2, [pc, #228]	; (8002880 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00a      	beq.n	80027b6 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a37      	ldr	r2, [pc, #220]	; (8002884 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d102      	bne.n	80027b0 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 80027aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ae:	e01a      	b.n	80027e6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80027b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027b4:	e017      	b.n	80027e6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80027b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ba:	e014      	b.n	80027e6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80027bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027c0:	e011      	b.n	80027e6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80027c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027c6:	e00e      	b.n	80027e6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80027c8:	2340      	movs	r3, #64	; 0x40
 80027ca:	e00c      	b.n	80027e6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80027cc:	2340      	movs	r3, #64	; 0x40
 80027ce:	e00a      	b.n	80027e6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80027d0:	2340      	movs	r3, #64	; 0x40
 80027d2:	e008      	b.n	80027e6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80027d4:	2340      	movs	r3, #64	; 0x40
 80027d6:	e006      	b.n	80027e6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80027d8:	2301      	movs	r3, #1
 80027da:	e004      	b.n	80027e6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80027dc:	2301      	movs	r3, #1
 80027de:	e002      	b.n	80027e6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80027e4:	2301      	movs	r3, #1
 80027e6:	4a28      	ldr	r2, [pc, #160]	; (8002888 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80027e8:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0216 	orr.w	r2, r2, #22
 80027f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002808:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0208 	orr.w	r2, r2, #8
 8002828:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0201 	orr.w	r2, r2, #1
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	e005      	b.n	8002848 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002844:	2302      	movs	r3, #2
 8002846:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8002848:	7dfb      	ldrb	r3, [r7, #23]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40026058 	.word	0x40026058
 8002858:	40026010 	.word	0x40026010
 800285c:	40026410 	.word	0x40026410
 8002860:	40026070 	.word	0x40026070
 8002864:	40026470 	.word	0x40026470
 8002868:	40026028 	.word	0x40026028
 800286c:	40026428 	.word	0x40026428
 8002870:	40026088 	.word	0x40026088
 8002874:	40026488 	.word	0x40026488
 8002878:	40026040 	.word	0x40026040
 800287c:	40026440 	.word	0x40026440
 8002880:	400260a0 	.word	0x400260a0
 8002884:	400264a0 	.word	0x400264a0
 8002888:	40026000 	.word	0x40026000

0800288c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	4613      	mov	r3, r2
 8002898:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d104      	bne.n	80028aa <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	e003      	b.n	80028b2 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b40      	cmp	r3, #64	; 0x40
 80028dc:	d108      	bne.n	80028f0 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028ee:	e007      	b.n	8002900 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	60da      	str	r2, [r3, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	e16b      	b.n	8002c00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002928:	2201      	movs	r2, #1
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	429a      	cmp	r2, r3
 8002942:	f040 815a 	bne.w	8002bfa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d00b      	beq.n	8002966 <HAL_GPIO_Init+0x5a>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d007      	beq.n	8002966 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800295a:	2b11      	cmp	r3, #17
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b12      	cmp	r3, #18
 8002964:	d130      	bne.n	80029c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	2203      	movs	r2, #3
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800299c:	2201      	movs	r2, #1
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 0201 	and.w	r2, r3, #1
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0xfc>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b12      	cmp	r3, #18
 8002a06:	d123      	bne.n	8002a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	08da      	lsrs	r2, r3, #3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3208      	adds	r2, #8
 8002a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	220f      	movs	r2, #15
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	08da      	lsrs	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3208      	adds	r2, #8
 8002a4a:	69b9      	ldr	r1, [r7, #24]
 8002a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0203 	and.w	r2, r3, #3
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80b4 	beq.w	8002bfa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b5f      	ldr	r3, [pc, #380]	; (8002c14 <HAL_GPIO_Init+0x308>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	4a5e      	ldr	r2, [pc, #376]	; (8002c14 <HAL_GPIO_Init+0x308>)
 8002a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa2:	4b5c      	ldr	r3, [pc, #368]	; (8002c14 <HAL_GPIO_Init+0x308>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aae:	4a5a      	ldr	r2, [pc, #360]	; (8002c18 <HAL_GPIO_Init+0x30c>)
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a51      	ldr	r2, [pc, #324]	; (8002c1c <HAL_GPIO_Init+0x310>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d02b      	beq.n	8002b32 <HAL_GPIO_Init+0x226>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a50      	ldr	r2, [pc, #320]	; (8002c20 <HAL_GPIO_Init+0x314>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d025      	beq.n	8002b2e <HAL_GPIO_Init+0x222>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4f      	ldr	r2, [pc, #316]	; (8002c24 <HAL_GPIO_Init+0x318>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01f      	beq.n	8002b2a <HAL_GPIO_Init+0x21e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4e      	ldr	r2, [pc, #312]	; (8002c28 <HAL_GPIO_Init+0x31c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d019      	beq.n	8002b26 <HAL_GPIO_Init+0x21a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4d      	ldr	r2, [pc, #308]	; (8002c2c <HAL_GPIO_Init+0x320>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <HAL_GPIO_Init+0x216>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a4c      	ldr	r2, [pc, #304]	; (8002c30 <HAL_GPIO_Init+0x324>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00d      	beq.n	8002b1e <HAL_GPIO_Init+0x212>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a4b      	ldr	r2, [pc, #300]	; (8002c34 <HAL_GPIO_Init+0x328>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d007      	beq.n	8002b1a <HAL_GPIO_Init+0x20e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a4a      	ldr	r2, [pc, #296]	; (8002c38 <HAL_GPIO_Init+0x32c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d101      	bne.n	8002b16 <HAL_GPIO_Init+0x20a>
 8002b12:	2307      	movs	r3, #7
 8002b14:	e00e      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b16:	2308      	movs	r3, #8
 8002b18:	e00c      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b1a:	2306      	movs	r3, #6
 8002b1c:	e00a      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b1e:	2305      	movs	r3, #5
 8002b20:	e008      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b22:	2304      	movs	r3, #4
 8002b24:	e006      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b26:	2303      	movs	r3, #3
 8002b28:	e004      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e002      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b32:	2300      	movs	r3, #0
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f002 0203 	and.w	r2, r2, #3
 8002b3a:	0092      	lsls	r2, r2, #2
 8002b3c:	4093      	lsls	r3, r2
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b44:	4934      	ldr	r1, [pc, #208]	; (8002c18 <HAL_GPIO_Init+0x30c>)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	089b      	lsrs	r3, r3, #2
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b52:	4b3a      	ldr	r3, [pc, #232]	; (8002c3c <HAL_GPIO_Init+0x330>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b76:	4a31      	ldr	r2, [pc, #196]	; (8002c3c <HAL_GPIO_Init+0x330>)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b7c:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <HAL_GPIO_Init+0x330>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ba0:	4a26      	ldr	r2, [pc, #152]	; (8002c3c <HAL_GPIO_Init+0x330>)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ba6:	4b25      	ldr	r3, [pc, #148]	; (8002c3c <HAL_GPIO_Init+0x330>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bca:	4a1c      	ldr	r2, [pc, #112]	; (8002c3c <HAL_GPIO_Init+0x330>)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bd0:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <HAL_GPIO_Init+0x330>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bf4:	4a11      	ldr	r2, [pc, #68]	; (8002c3c <HAL_GPIO_Init+0x330>)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	f67f ae90 	bls.w	8002928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c08:	bf00      	nop
 8002c0a:	3724      	adds	r7, #36	; 0x24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40013800 	.word	0x40013800
 8002c1c:	40020000 	.word	0x40020000
 8002c20:	40020400 	.word	0x40020400
 8002c24:	40020800 	.word	0x40020800
 8002c28:	40020c00 	.word	0x40020c00
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40021400 	.word	0x40021400
 8002c34:	40021800 	.word	0x40021800
 8002c38:	40021c00 	.word	0x40021c00
 8002c3c:	40013c00 	.word	0x40013c00

08002c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c50:	787b      	ldrb	r3, [r7, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c5c:	e003      	b.n	8002c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	041a      	lsls	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	619a      	str	r2, [r3, #24]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e11f      	b.n	8002ec6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f006 fa86 	bl	80091ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2224      	movs	r2, #36	; 0x24
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cd8:	f001 fd84 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 8002cdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	4a7b      	ldr	r2, [pc, #492]	; (8002ed0 <HAL_I2C_Init+0x25c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d807      	bhi.n	8002cf8 <HAL_I2C_Init+0x84>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4a7a      	ldr	r2, [pc, #488]	; (8002ed4 <HAL_I2C_Init+0x260>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	bf94      	ite	ls
 8002cf0:	2301      	movls	r3, #1
 8002cf2:	2300      	movhi	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e006      	b.n	8002d06 <HAL_I2C_Init+0x92>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4a77      	ldr	r2, [pc, #476]	; (8002ed8 <HAL_I2C_Init+0x264>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	bf94      	ite	ls
 8002d00:	2301      	movls	r3, #1
 8002d02:	2300      	movhi	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0db      	b.n	8002ec6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4a72      	ldr	r2, [pc, #456]	; (8002edc <HAL_I2C_Init+0x268>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	0c9b      	lsrs	r3, r3, #18
 8002d18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a64      	ldr	r2, [pc, #400]	; (8002ed0 <HAL_I2C_Init+0x25c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d802      	bhi.n	8002d48 <HAL_I2C_Init+0xd4>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	3301      	adds	r3, #1
 8002d46:	e009      	b.n	8002d5c <HAL_I2C_Init+0xe8>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d4e:	fb02 f303 	mul.w	r3, r2, r3
 8002d52:	4a63      	ldr	r2, [pc, #396]	; (8002ee0 <HAL_I2C_Init+0x26c>)
 8002d54:	fba2 2303 	umull	r2, r3, r2, r3
 8002d58:	099b      	lsrs	r3, r3, #6
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	430b      	orrs	r3, r1
 8002d62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4956      	ldr	r1, [pc, #344]	; (8002ed0 <HAL_I2C_Init+0x25c>)
 8002d78:	428b      	cmp	r3, r1
 8002d7a:	d80d      	bhi.n	8002d98 <HAL_I2C_Init+0x124>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e59      	subs	r1, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	bf38      	it	cc
 8002d94:	2304      	movcc	r3, #4
 8002d96:	e04f      	b.n	8002e38 <HAL_I2C_Init+0x1c4>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d111      	bne.n	8002dc4 <HAL_I2C_Init+0x150>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e58      	subs	r0, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	440b      	add	r3, r1
 8002dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db2:	3301      	adds	r3, #1
 8002db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e012      	b.n	8002dea <HAL_I2C_Init+0x176>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1e58      	subs	r0, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	0099      	lsls	r1, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf0c      	ite	eq
 8002de4:	2301      	moveq	r3, #1
 8002de6:	2300      	movne	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_I2C_Init+0x17e>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e022      	b.n	8002e38 <HAL_I2C_Init+0x1c4>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10e      	bne.n	8002e18 <HAL_I2C_Init+0x1a4>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1e58      	subs	r0, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6859      	ldr	r1, [r3, #4]
 8002e02:	460b      	mov	r3, r1
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	440b      	add	r3, r1
 8002e08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e16:	e00f      	b.n	8002e38 <HAL_I2C_Init+0x1c4>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1e58      	subs	r0, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6859      	ldr	r1, [r3, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	0099      	lsls	r1, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	6809      	ldr	r1, [r1, #0]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6911      	ldr	r1, [r2, #16]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	68d2      	ldr	r2, [r2, #12]
 8002e72:	4311      	orrs	r1, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	000186a0 	.word	0x000186a0
 8002ed4:	001e847f 	.word	0x001e847f
 8002ed8:	003d08ff 	.word	0x003d08ff
 8002edc:	431bde83 	.word	0x431bde83
 8002ee0:	10624dd3 	.word	0x10624dd3

08002ee4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	817b      	strh	r3, [r7, #10]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ef8:	f7fd fba0 	bl	800063c <HAL_GetTick>
 8002efc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	f040 80e0 	bne.w	80030cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	2319      	movs	r3, #25
 8002f12:	2201      	movs	r2, #1
 8002f14:	4970      	ldr	r1, [pc, #448]	; (80030d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fde4 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f22:	2302      	movs	r3, #2
 8002f24:	e0d3      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_I2C_Master_Transmit+0x50>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e0cc      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1ea>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d007      	beq.n	8002f5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2221      	movs	r2, #33	; 0x21
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2210      	movs	r2, #16
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	893a      	ldrh	r2, [r7, #8]
 8002f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a50      	ldr	r2, [pc, #320]	; (80030dc <HAL_I2C_Master_Transmit+0x1f8>)
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f9c:	8979      	ldrh	r1, [r7, #10]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	6a3a      	ldr	r2, [r7, #32]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fbbc 	bl	8003720 <I2C_MasterRequestWrite>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e08d      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fc8:	e066      	b.n	8003098 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	6a39      	ldr	r1, [r7, #32]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 fe5e 	bl	8003c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00d      	beq.n	8002ff6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d107      	bne.n	8002ff2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e06b      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	781a      	ldrb	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b04      	cmp	r3, #4
 8003032:	d11b      	bne.n	800306c <HAL_I2C_Master_Transmit+0x188>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d017      	beq.n	800306c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	6a39      	ldr	r1, [r7, #32]
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 fe4e 	bl	8003d12 <I2C_WaitOnBTFFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00d      	beq.n	8003098 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	2b04      	cmp	r3, #4
 8003082:	d107      	bne.n	8003094 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003092:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e01a      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309c:	2b00      	cmp	r3, #0
 800309e:	d194      	bne.n	8002fca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	e000      	b.n	80030ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030cc:	2302      	movs	r3, #2
  }
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	00100002 	.word	0x00100002
 80030dc:	ffff0000 	.word	0xffff0000

080030e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08c      	sub	sp, #48	; 0x30
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	461a      	mov	r2, r3
 80030ec:	460b      	mov	r3, r1
 80030ee:	817b      	strh	r3, [r7, #10]
 80030f0:	4613      	mov	r3, r2
 80030f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030f4:	f7fd faa2 	bl	800063c <HAL_GetTick>
 80030f8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b20      	cmp	r3, #32
 8003104:	f040 820b 	bne.w	800351e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	2319      	movs	r3, #25
 800310e:	2201      	movs	r2, #1
 8003110:	497c      	ldr	r1, [pc, #496]	; (8003304 <HAL_I2C_Master_Receive+0x224>)
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fce6 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800311e:	2302      	movs	r3, #2
 8003120:	e1fe      	b.n	8003520 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_I2C_Master_Receive+0x50>
 800312c:	2302      	movs	r3, #2
 800312e:	e1f7      	b.n	8003520 <HAL_I2C_Master_Receive+0x440>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d007      	beq.n	8003156 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0201 	orr.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003164:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2222      	movs	r2, #34	; 0x22
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2210      	movs	r2, #16
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	893a      	ldrh	r2, [r7, #8]
 8003186:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4a5c      	ldr	r2, [pc, #368]	; (8003308 <HAL_I2C_Master_Receive+0x228>)
 8003196:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003198:	8979      	ldrh	r1, [r7, #10]
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fb40 	bl	8003824 <I2C_MasterRequestRead>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e1b8      	b.n	8003520 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d113      	bne.n	80031de <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b6:	2300      	movs	r3, #0
 80031b8:	623b      	str	r3, [r7, #32]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	623b      	str	r3, [r7, #32]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	623b      	str	r3, [r7, #32]
 80031ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e18c      	b.n	80034f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d11b      	bne.n	800321e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e16c      	b.n	80034f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003222:	2b02      	cmp	r3, #2
 8003224:	d11b      	bne.n	800325e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003234:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003244:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	e14c      	b.n	80034f8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800326c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003284:	e138      	b.n	80034f8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328a:	2b03      	cmp	r3, #3
 800328c:	f200 80f1 	bhi.w	8003472 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003294:	2b01      	cmp	r3, #1
 8003296:	d123      	bne.n	80032e0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 fd79 	bl	8003d94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e139      	b.n	8003520 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032de:	e10b      	b.n	80034f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d14e      	bne.n	8003386 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	2200      	movs	r2, #0
 80032f0:	4906      	ldr	r1, [pc, #24]	; (800330c <HAL_I2C_Master_Receive+0x22c>)
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fbf6 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d008      	beq.n	8003310 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e10e      	b.n	8003520 <HAL_I2C_Master_Receive+0x440>
 8003302:	bf00      	nop
 8003304:	00100002 	.word	0x00100002
 8003308:	ffff0000 	.word	0xffff0000
 800330c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003384:	e0b8      	b.n	80034f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	2200      	movs	r2, #0
 800338e:	4966      	ldr	r1, [pc, #408]	; (8003528 <HAL_I2C_Master_Receive+0x448>)
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fba7 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0bf      	b.n	8003520 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	2200      	movs	r2, #0
 80033ea:	494f      	ldr	r1, [pc, #316]	; (8003528 <HAL_I2C_Master_Receive+0x448>)
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fb79 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e091      	b.n	8003520 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003470:	e042      	b.n	80034f8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003474:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fc8c 	bl	8003d94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e04c      	b.n	8003520 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d118      	bne.n	80034f8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f47f aec2 	bne.w	8003286 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	e000      	b.n	8003520 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800351e:	2302      	movs	r3, #2
  }
}
 8003520:	4618      	mov	r0, r3
 8003522:	3728      	adds	r7, #40	; 0x28
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	00010004 	.word	0x00010004

0800352c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af02      	add	r7, sp, #8
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	4608      	mov	r0, r1
 8003536:	4611      	mov	r1, r2
 8003538:	461a      	mov	r2, r3
 800353a:	4603      	mov	r3, r0
 800353c:	817b      	strh	r3, [r7, #10]
 800353e:	460b      	mov	r3, r1
 8003540:	813b      	strh	r3, [r7, #8]
 8003542:	4613      	mov	r3, r2
 8003544:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003546:	f7fd f879 	bl	800063c <HAL_GetTick>
 800354a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b20      	cmp	r3, #32
 8003556:	f040 80d9 	bne.w	800370c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2319      	movs	r3, #25
 8003560:	2201      	movs	r2, #1
 8003562:	496d      	ldr	r1, [pc, #436]	; (8003718 <HAL_I2C_Mem_Write+0x1ec>)
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fabd 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
 8003572:	e0cc      	b.n	800370e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_I2C_Mem_Write+0x56>
 800357e:	2302      	movs	r3, #2
 8003580:	e0c5      	b.n	800370e <HAL_I2C_Mem_Write+0x1e2>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d007      	beq.n	80035a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2221      	movs	r2, #33	; 0x21
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2240      	movs	r2, #64	; 0x40
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a3a      	ldr	r2, [r7, #32]
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4a4d      	ldr	r2, [pc, #308]	; (800371c <HAL_I2C_Mem_Write+0x1f0>)
 80035e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035ea:	88f8      	ldrh	r0, [r7, #6]
 80035ec:	893a      	ldrh	r2, [r7, #8]
 80035ee:	8979      	ldrh	r1, [r7, #10]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	4603      	mov	r3, r0
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f9de 	bl	80039bc <I2C_RequestMemoryWrite>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d052      	beq.n	80036ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e081      	b.n	800370e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fb3e 	bl	8003c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	2b04      	cmp	r3, #4
 8003620:	d107      	bne.n	8003632 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003630:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e06b      	b.n	800370e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	781a      	ldrb	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365c:	b29b      	uxth	r3, r3
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b04      	cmp	r3, #4
 8003672:	d11b      	bne.n	80036ac <HAL_I2C_Mem_Write+0x180>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	2b00      	cmp	r3, #0
 800367a:	d017      	beq.n	80036ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	781a      	ldrb	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1aa      	bne.n	800360a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fb2a 	bl	8003d12 <I2C_WaitOnBTFFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00d      	beq.n	80036e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d107      	bne.n	80036dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e016      	b.n	800370e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	00100002 	.word	0x00100002
 800371c:	ffff0000 	.word	0xffff0000

08003720 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	460b      	mov	r3, r1
 800372e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b08      	cmp	r3, #8
 800373a:	d006      	beq.n	800374a <I2C_MasterRequestWrite+0x2a>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d003      	beq.n	800374a <I2C_MasterRequestWrite+0x2a>
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003748:	d108      	bne.n	800375c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e00b      	b.n	8003774 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	2b12      	cmp	r3, #18
 8003762:	d107      	bne.n	8003774 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003772:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f9af 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00c      	beq.n	80037a6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e035      	b.n	8003812 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037ae:	d108      	bne.n	80037c2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037b0:	897b      	ldrh	r3, [r7, #10]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037be:	611a      	str	r2, [r3, #16]
 80037c0:	e01b      	b.n	80037fa <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037c2:	897b      	ldrh	r3, [r7, #10]
 80037c4:	11db      	asrs	r3, r3, #7
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f003 0306 	and.w	r3, r3, #6
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f063 030f 	orn	r3, r3, #15
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	490f      	ldr	r1, [pc, #60]	; (800381c <I2C_MasterRequestWrite+0xfc>)
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f9d6 	bl	8003b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e010      	b.n	8003812 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037f0:	897b      	ldrh	r3, [r7, #10]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	4908      	ldr	r1, [pc, #32]	; (8003820 <I2C_MasterRequestWrite+0x100>)
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f9c6 	bl	8003b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	00010008 	.word	0x00010008
 8003820:	00010002 	.word	0x00010002

08003824 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	460b      	mov	r3, r1
 8003832:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003848:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d006      	beq.n	800385e <I2C_MasterRequestRead+0x3a>
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d003      	beq.n	800385e <I2C_MasterRequestRead+0x3a>
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800385c:	d108      	bne.n	8003870 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e00b      	b.n	8003888 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	2b11      	cmp	r3, #17
 8003876:	d107      	bne.n	8003888 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003886:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f925 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00c      	beq.n	80038ba <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e078      	b.n	80039ac <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038c2:	d108      	bne.n	80038d6 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038c4:	897b      	ldrh	r3, [r7, #10]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	611a      	str	r2, [r3, #16]
 80038d4:	e05e      	b.n	8003994 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038d6:	897b      	ldrh	r3, [r7, #10]
 80038d8:	11db      	asrs	r3, r3, #7
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f003 0306 	and.w	r3, r3, #6
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f063 030f 	orn	r3, r3, #15
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4930      	ldr	r1, [pc, #192]	; (80039b4 <I2C_MasterRequestRead+0x190>)
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f94c 	bl	8003b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e053      	b.n	80039ac <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003904:	897b      	ldrh	r3, [r7, #10]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	4929      	ldr	r1, [pc, #164]	; (80039b8 <I2C_MasterRequestRead+0x194>)
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f93c 	bl	8003b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e043      	b.n	80039ac <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003948:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f8c4 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00c      	beq.n	800397c <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003976:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e017      	b.n	80039ac <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800397c:	897b      	ldrh	r3, [r7, #10]
 800397e:	11db      	asrs	r3, r3, #7
 8003980:	b2db      	uxtb	r3, r3
 8003982:	f003 0306 	and.w	r3, r3, #6
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f063 030e 	orn	r3, r3, #14
 800398c:	b2da      	uxtb	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	4907      	ldr	r1, [pc, #28]	; (80039b8 <I2C_MasterRequestRead+0x194>)
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 f8f9 	bl	8003b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	00010008 	.word	0x00010008
 80039b8:	00010002 	.word	0x00010002

080039bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4611      	mov	r1, r2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	817b      	strh	r3, [r7, #10]
 80039ce:	460b      	mov	r3, r1
 80039d0:	813b      	strh	r3, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f876 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00c      	beq.n	8003a18 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e05f      	b.n	8003ad8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a18:	897b      	ldrh	r3, [r7, #10]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	6a3a      	ldr	r2, [r7, #32]
 8003a2c:	492c      	ldr	r1, [pc, #176]	; (8003ae0 <I2C_RequestMemoryWrite+0x124>)
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f8af 	bl	8003b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e04c      	b.n	8003ad8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a56:	6a39      	ldr	r1, [r7, #32]
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f919 	bl	8003c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00d      	beq.n	8003a80 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d107      	bne.n	8003a7c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e02b      	b.n	8003ad8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d105      	bne.n	8003a92 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a86:	893b      	ldrh	r3, [r7, #8]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	611a      	str	r2, [r3, #16]
 8003a90:	e021      	b.n	8003ad6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a92:	893b      	ldrh	r3, [r7, #8]
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa2:	6a39      	ldr	r1, [r7, #32]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f8f3 	bl	8003c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00d      	beq.n	8003acc <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d107      	bne.n	8003ac8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e005      	b.n	8003ad8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003acc:	893b      	ldrh	r3, [r7, #8]
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	00010002 	.word	0x00010002

08003ae4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003af4:	e025      	b.n	8003b42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afc:	d021      	beq.n	8003b42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afe:	f7fc fd9d 	bl	800063c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d116      	bne.n	8003b42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f043 0220 	orr.w	r2, r3, #32
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e023      	b.n	8003b8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	0c1b      	lsrs	r3, r3, #16
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d10d      	bne.n	8003b68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	43da      	mvns	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4013      	ands	r3, r2
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bf0c      	ite	eq
 8003b5e:	2301      	moveq	r3, #1
 8003b60:	2300      	movne	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	e00c      	b.n	8003b82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4013      	ands	r3, r2
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bf0c      	ite	eq
 8003b7a:	2301      	moveq	r3, #1
 8003b7c:	2300      	movne	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d0b6      	beq.n	8003af6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ba0:	e051      	b.n	8003c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb0:	d123      	bne.n	8003bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f043 0204 	orr.w	r2, r3, #4
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e046      	b.n	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d021      	beq.n	8003c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c02:	f7fc fd1b 	bl	800063c <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d302      	bcc.n	8003c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d116      	bne.n	8003c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f043 0220 	orr.w	r2, r3, #32
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e020      	b.n	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	0c1b      	lsrs	r3, r3, #16
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d10c      	bne.n	8003c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	43da      	mvns	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	bf14      	ite	ne
 8003c62:	2301      	movne	r3, #1
 8003c64:	2300      	moveq	r3, #0
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	e00b      	b.n	8003c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	43da      	mvns	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	4013      	ands	r3, r2
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bf14      	ite	ne
 8003c7c:	2301      	movne	r3, #1
 8003c7e:	2300      	moveq	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d18d      	bne.n	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c9c:	e02d      	b.n	8003cfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f8ce 	bl	8003e40 <I2C_IsAcknowledgeFailed>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e02d      	b.n	8003d0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb4:	d021      	beq.n	8003cfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb6:	f7fc fcc1 	bl	800063c <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d302      	bcc.n	8003ccc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d116      	bne.n	8003cfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f043 0220 	orr.w	r2, r3, #32
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e007      	b.n	8003d0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d04:	2b80      	cmp	r3, #128	; 0x80
 8003d06:	d1ca      	bne.n	8003c9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d1e:	e02d      	b.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f88d 	bl	8003e40 <I2C_IsAcknowledgeFailed>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e02d      	b.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d36:	d021      	beq.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d38:	f7fc fc80 	bl	800063c <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d302      	bcc.n	8003d4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d116      	bne.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	f043 0220 	orr.w	r2, r3, #32
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e007      	b.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d1ca      	bne.n	8003d20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003da0:	e042      	b.n	8003e28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d119      	bne.n	8003de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0210 	mvn.w	r2, #16
 8003db8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e029      	b.n	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de4:	f7fc fc2a 	bl	800063c <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d116      	bne.n	8003e28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f043 0220 	orr.w	r2, r3, #32
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e007      	b.n	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d1b5      	bne.n	8003da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e56:	d11b      	bne.n	8003e90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	f043 0204 	orr.w	r2, r3, #4
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e25b      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d075      	beq.n	8003faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ebe:	4ba3      	ldr	r3, [pc, #652]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d00c      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eca:	4ba0      	ldr	r3, [pc, #640]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d112      	bne.n	8003efc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ed6:	4b9d      	ldr	r3, [pc, #628]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee2:	d10b      	bne.n	8003efc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee4:	4b99      	ldr	r3, [pc, #612]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d05b      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x108>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d157      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e236      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f04:	d106      	bne.n	8003f14 <HAL_RCC_OscConfig+0x74>
 8003f06:	4b91      	ldr	r3, [pc, #580]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a90      	ldr	r2, [pc, #576]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e01d      	b.n	8003f50 <HAL_RCC_OscConfig+0xb0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x98>
 8003f1e:	4b8b      	ldr	r3, [pc, #556]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a8a      	ldr	r2, [pc, #552]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4b88      	ldr	r3, [pc, #544]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a87      	ldr	r2, [pc, #540]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e00b      	b.n	8003f50 <HAL_RCC_OscConfig+0xb0>
 8003f38:	4b84      	ldr	r3, [pc, #528]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a83      	ldr	r2, [pc, #524]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	4b81      	ldr	r3, [pc, #516]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a80      	ldr	r2, [pc, #512]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d013      	beq.n	8003f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f58:	f7fc fb70 	bl	800063c <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f60:	f7fc fb6c 	bl	800063c <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	; 0x64
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e1fb      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	4b76      	ldr	r3, [pc, #472]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0xc0>
 8003f7e:	e014      	b.n	8003faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fc fb5c 	bl	800063c <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f88:	f7fc fb58 	bl	800063c <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e1e7      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f9a:	4b6c      	ldr	r3, [pc, #432]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0xe8>
 8003fa6:	e000      	b.n	8003faa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d063      	beq.n	800407e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fb6:	4b65      	ldr	r3, [pc, #404]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc2:	4b62      	ldr	r3, [pc, #392]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d11c      	bne.n	8004008 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fce:	4b5f      	ldr	r3, [pc, #380]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d116      	bne.n	8004008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fda:	4b5c      	ldr	r3, [pc, #368]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x152>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e1bb      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff2:	4b56      	ldr	r3, [pc, #344]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4952      	ldr	r1, [pc, #328]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8004002:	4313      	orrs	r3, r2
 8004004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004006:	e03a      	b.n	800407e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d020      	beq.n	8004052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004010:	4b4f      	ldr	r3, [pc, #316]	; (8004150 <HAL_RCC_OscConfig+0x2b0>)
 8004012:	2201      	movs	r2, #1
 8004014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004016:	f7fc fb11 	bl	800063c <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800401e:	f7fc fb0d 	bl	800063c <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e19c      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004030:	4b46      	ldr	r3, [pc, #280]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0f0      	beq.n	800401e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403c:	4b43      	ldr	r3, [pc, #268]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4940      	ldr	r1, [pc, #256]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 800404c:	4313      	orrs	r3, r2
 800404e:	600b      	str	r3, [r1, #0]
 8004050:	e015      	b.n	800407e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004052:	4b3f      	ldr	r3, [pc, #252]	; (8004150 <HAL_RCC_OscConfig+0x2b0>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7fc faf0 	bl	800063c <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004060:	f7fc faec 	bl	800063c <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e17b      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004072:	4b36      	ldr	r3, [pc, #216]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d030      	beq.n	80040ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004092:	4b30      	ldr	r3, [pc, #192]	; (8004154 <HAL_RCC_OscConfig+0x2b4>)
 8004094:	2201      	movs	r2, #1
 8004096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004098:	f7fc fad0 	bl	800063c <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040a0:	f7fc facc 	bl	800063c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e15b      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b2:	4b26      	ldr	r3, [pc, #152]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0x200>
 80040be:	e015      	b.n	80040ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c0:	4b24      	ldr	r3, [pc, #144]	; (8004154 <HAL_RCC_OscConfig+0x2b4>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c6:	f7fc fab9 	bl	800063c <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ce:	f7fc fab5 	bl	800063c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e144      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e0:	4b1a      	ldr	r3, [pc, #104]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 80040e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f0      	bne.n	80040ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 80a0 	beq.w	800423a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040fe:	4b13      	ldr	r3, [pc, #76]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10f      	bne.n	800412a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	4b0f      	ldr	r3, [pc, #60]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	4a0e      	ldr	r2, [pc, #56]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 8004114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004118:	6413      	str	r3, [r2, #64]	; 0x40
 800411a:	4b0c      	ldr	r3, [pc, #48]	; (800414c <HAL_RCC_OscConfig+0x2ac>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004126:	2301      	movs	r3, #1
 8004128:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <HAL_RCC_OscConfig+0x2b8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d121      	bne.n	800417a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <HAL_RCC_OscConfig+0x2b8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a07      	ldr	r2, [pc, #28]	; (8004158 <HAL_RCC_OscConfig+0x2b8>)
 800413c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004142:	f7fc fa7b 	bl	800063c <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004148:	e011      	b.n	800416e <HAL_RCC_OscConfig+0x2ce>
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800
 8004150:	42470000 	.word	0x42470000
 8004154:	42470e80 	.word	0x42470e80
 8004158:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415c:	f7fc fa6e 	bl	800063c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e0fd      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416e:	4b81      	ldr	r3, [pc, #516]	; (8004374 <HAL_RCC_OscConfig+0x4d4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d106      	bne.n	8004190 <HAL_RCC_OscConfig+0x2f0>
 8004182:	4b7d      	ldr	r3, [pc, #500]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	4a7c      	ldr	r2, [pc, #496]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	6713      	str	r3, [r2, #112]	; 0x70
 800418e:	e01c      	b.n	80041ca <HAL_RCC_OscConfig+0x32a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b05      	cmp	r3, #5
 8004196:	d10c      	bne.n	80041b2 <HAL_RCC_OscConfig+0x312>
 8004198:	4b77      	ldr	r3, [pc, #476]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	4a76      	ldr	r2, [pc, #472]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 800419e:	f043 0304 	orr.w	r3, r3, #4
 80041a2:	6713      	str	r3, [r2, #112]	; 0x70
 80041a4:	4b74      	ldr	r3, [pc, #464]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	4a73      	ldr	r2, [pc, #460]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	6713      	str	r3, [r2, #112]	; 0x70
 80041b0:	e00b      	b.n	80041ca <HAL_RCC_OscConfig+0x32a>
 80041b2:	4b71      	ldr	r3, [pc, #452]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 80041b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b6:	4a70      	ldr	r2, [pc, #448]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	6713      	str	r3, [r2, #112]	; 0x70
 80041be:	4b6e      	ldr	r3, [pc, #440]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 80041c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c2:	4a6d      	ldr	r2, [pc, #436]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 80041c4:	f023 0304 	bic.w	r3, r3, #4
 80041c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d015      	beq.n	80041fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d2:	f7fc fa33 	bl	800063c <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d8:	e00a      	b.n	80041f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041da:	f7fc fa2f 	bl	800063c <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e0bc      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f0:	4b61      	ldr	r3, [pc, #388]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0ee      	beq.n	80041da <HAL_RCC_OscConfig+0x33a>
 80041fc:	e014      	b.n	8004228 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fe:	f7fc fa1d 	bl	800063c <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004204:	e00a      	b.n	800421c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004206:	f7fc fa19 	bl	800063c <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f241 3288 	movw	r2, #5000	; 0x1388
 8004214:	4293      	cmp	r3, r2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e0a6      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800421c:	4b56      	ldr	r3, [pc, #344]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 800421e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1ee      	bne.n	8004206 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004228:	7dfb      	ldrb	r3, [r7, #23]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d105      	bne.n	800423a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800422e:	4b52      	ldr	r3, [pc, #328]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	4a51      	ldr	r2, [pc, #324]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 8004234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004238:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 8092 	beq.w	8004368 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004244:	4b4c      	ldr	r3, [pc, #304]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 030c 	and.w	r3, r3, #12
 800424c:	2b08      	cmp	r3, #8
 800424e:	d05c      	beq.n	800430a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d141      	bne.n	80042dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004258:	4b48      	ldr	r3, [pc, #288]	; (800437c <HAL_RCC_OscConfig+0x4dc>)
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425e:	f7fc f9ed 	bl	800063c <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004266:	f7fc f9e9 	bl	800063c <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e078      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004278:	4b3f      	ldr	r3, [pc, #252]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f0      	bne.n	8004266 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	019b      	lsls	r3, r3, #6
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	3b01      	subs	r3, #1
 800429e:	041b      	lsls	r3, r3, #16
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	061b      	lsls	r3, r3, #24
 80042a8:	4933      	ldr	r1, [pc, #204]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042ae:	4b33      	ldr	r3, [pc, #204]	; (800437c <HAL_RCC_OscConfig+0x4dc>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b4:	f7fc f9c2 	bl	800063c <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042bc:	f7fc f9be 	bl	800063c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e04d      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ce:	4b2a      	ldr	r3, [pc, #168]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0x41c>
 80042da:	e045      	b.n	8004368 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042dc:	4b27      	ldr	r3, [pc, #156]	; (800437c <HAL_RCC_OscConfig+0x4dc>)
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e2:	f7fc f9ab 	bl	800063c <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ea:	f7fc f9a7 	bl	800063c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e036      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fc:	4b1e      	ldr	r3, [pc, #120]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1f0      	bne.n	80042ea <HAL_RCC_OscConfig+0x44a>
 8004308:	e02e      	b.n	8004368 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e029      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004316:	4b18      	ldr	r3, [pc, #96]	; (8004378 <HAL_RCC_OscConfig+0x4d8>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	429a      	cmp	r2, r3
 8004328:	d11c      	bne.n	8004364 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d115      	bne.n	8004364 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800433e:	4013      	ands	r3, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004344:	4293      	cmp	r3, r2
 8004346:	d10d      	bne.n	8004364 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d106      	bne.n	8004364 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40007000 	.word	0x40007000
 8004378:	40023800 	.word	0x40023800
 800437c:	42470060 	.word	0x42470060

08004380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e0cc      	b.n	800452e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004394:	4b68      	ldr	r3, [pc, #416]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d90c      	bls.n	80043bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a2:	4b65      	ldr	r3, [pc, #404]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043aa:	4b63      	ldr	r3, [pc, #396]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d001      	beq.n	80043bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0b8      	b.n	800452e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d020      	beq.n	800440a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043d4:	4b59      	ldr	r3, [pc, #356]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	4a58      	ldr	r2, [pc, #352]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043ec:	4b53      	ldr	r3, [pc, #332]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	4a52      	ldr	r2, [pc, #328]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f8:	4b50      	ldr	r3, [pc, #320]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	494d      	ldr	r1, [pc, #308]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	4313      	orrs	r3, r2
 8004408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d044      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d107      	bne.n	800442e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441e:	4b47      	ldr	r3, [pc, #284]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d119      	bne.n	800445e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e07f      	b.n	800452e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d003      	beq.n	800443e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800443a:	2b03      	cmp	r3, #3
 800443c:	d107      	bne.n	800444e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443e:	4b3f      	ldr	r3, [pc, #252]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d109      	bne.n	800445e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e06f      	b.n	800452e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444e:	4b3b      	ldr	r3, [pc, #236]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e067      	b.n	800452e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800445e:	4b37      	ldr	r3, [pc, #220]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f023 0203 	bic.w	r2, r3, #3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	4934      	ldr	r1, [pc, #208]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 800446c:	4313      	orrs	r3, r2
 800446e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004470:	f7fc f8e4 	bl	800063c <HAL_GetTick>
 8004474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004476:	e00a      	b.n	800448e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004478:	f7fc f8e0 	bl	800063c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f241 3288 	movw	r2, #5000	; 0x1388
 8004486:	4293      	cmp	r3, r2
 8004488:	d901      	bls.n	800448e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e04f      	b.n	800452e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448e:	4b2b      	ldr	r3, [pc, #172]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 020c 	and.w	r2, r3, #12
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	429a      	cmp	r2, r3
 800449e:	d1eb      	bne.n	8004478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a0:	4b25      	ldr	r3, [pc, #148]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d20c      	bcs.n	80044c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ae:	4b22      	ldr	r3, [pc, #136]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b6:	4b20      	ldr	r3, [pc, #128]	; (8004538 <HAL_RCC_ClockConfig+0x1b8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d001      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e032      	b.n	800452e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044d4:	4b19      	ldr	r3, [pc, #100]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4916      	ldr	r1, [pc, #88]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d009      	beq.n	8004506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044f2:	4b12      	ldr	r3, [pc, #72]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	490e      	ldr	r1, [pc, #56]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	4313      	orrs	r3, r2
 8004504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004506:	f000 f889 	bl	800461c <HAL_RCC_GetSysClockFreq>
 800450a:	4601      	mov	r1, r0
 800450c:	4b0b      	ldr	r3, [pc, #44]	; (800453c <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	091b      	lsrs	r3, r3, #4
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	4a0a      	ldr	r2, [pc, #40]	; (8004540 <HAL_RCC_ClockConfig+0x1c0>)
 8004518:	5cd3      	ldrb	r3, [r2, r3]
 800451a:	fa21 f303 	lsr.w	r3, r1, r3
 800451e:	4a09      	ldr	r2, [pc, #36]	; (8004544 <HAL_RCC_ClockConfig+0x1c4>)
 8004520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004522:	4b09      	ldr	r3, [pc, #36]	; (8004548 <HAL_RCC_ClockConfig+0x1c8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7fc f844 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40023c00 	.word	0x40023c00
 800453c:	40023800 	.word	0x40023800
 8004540:	0800a498 	.word	0x0800a498
 8004544:	20000008 	.word	0x20000008
 8004548:	20000000 	.word	0x20000000

0800454c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08c      	sub	sp, #48	; 0x30
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d129      	bne.n	80045b2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <HAL_RCC_MCOConfig+0xc4>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	4a2a      	ldr	r2, [pc, #168]	; (8004610 <HAL_RCC_MCOConfig+0xc4>)
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	6313      	str	r3, [r2, #48]	; 0x30
 800456e:	4b28      	ldr	r3, [pc, #160]	; (8004610 <HAL_RCC_MCOConfig+0xc4>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800457a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800457e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004580:	2302      	movs	r3, #2
 8004582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004584:	2303      	movs	r3, #3
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004588:	2300      	movs	r3, #0
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800458c:	2300      	movs	r3, #0
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004590:	f107 031c 	add.w	r3, r7, #28
 8004594:	4619      	mov	r1, r3
 8004596:	481f      	ldr	r0, [pc, #124]	; (8004614 <HAL_RCC_MCOConfig+0xc8>)
 8004598:	f7fe f9b8 	bl	800290c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800459c:	4b1c      	ldr	r3, [pc, #112]	; (8004610 <HAL_RCC_MCOConfig+0xc4>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	430b      	orrs	r3, r1
 80045aa:	4919      	ldr	r1, [pc, #100]	; (8004610 <HAL_RCC_MCOConfig+0xc4>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80045b0:	e029      	b.n	8004606 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	4b16      	ldr	r3, [pc, #88]	; (8004610 <HAL_RCC_MCOConfig+0xc4>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	4a15      	ldr	r2, [pc, #84]	; (8004610 <HAL_RCC_MCOConfig+0xc4>)
 80045bc:	f043 0304 	orr.w	r3, r3, #4
 80045c0:	6313      	str	r3, [r2, #48]	; 0x30
 80045c2:	4b13      	ldr	r3, [pc, #76]	; (8004610 <HAL_RCC_MCOConfig+0xc4>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80045ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d4:	2302      	movs	r3, #2
 80045d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045d8:	2303      	movs	r3, #3
 80045da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80045e0:	2300      	movs	r3, #0
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80045e4:	f107 031c 	add.w	r3, r7, #28
 80045e8:	4619      	mov	r1, r3
 80045ea:	480b      	ldr	r0, [pc, #44]	; (8004618 <HAL_RCC_MCOConfig+0xcc>)
 80045ec:	f7fe f98e 	bl	800290c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <HAL_RCC_MCOConfig+0xc4>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	00d9      	lsls	r1, r3, #3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	430b      	orrs	r3, r1
 8004600:	4903      	ldr	r1, [pc, #12]	; (8004610 <HAL_RCC_MCOConfig+0xc4>)
 8004602:	4313      	orrs	r3, r2
 8004604:	608b      	str	r3, [r1, #8]
}
 8004606:	bf00      	nop
 8004608:	3730      	adds	r7, #48	; 0x30
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40023800 	.word	0x40023800
 8004614:	40020000 	.word	0x40020000
 8004618:	40020800 	.word	0x40020800

0800461c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800461c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	607b      	str	r3, [r7, #4]
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	2300      	movs	r3, #0
 800462c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004632:	4b63      	ldr	r3, [pc, #396]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 030c 	and.w	r3, r3, #12
 800463a:	2b04      	cmp	r3, #4
 800463c:	d007      	beq.n	800464e <HAL_RCC_GetSysClockFreq+0x32>
 800463e:	2b08      	cmp	r3, #8
 8004640:	d008      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x38>
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 80b4 	bne.w	80047b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004648:	4b5e      	ldr	r3, [pc, #376]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800464a:	60bb      	str	r3, [r7, #8]
       break;
 800464c:	e0b3      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800464e:	4b5e      	ldr	r3, [pc, #376]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004650:	60bb      	str	r3, [r7, #8]
      break;
 8004652:	e0b0      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004654:	4b5a      	ldr	r3, [pc, #360]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800465c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800465e:	4b58      	ldr	r3, [pc, #352]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d04a      	beq.n	8004700 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800466a:	4b55      	ldr	r3, [pc, #340]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	099b      	lsrs	r3, r3, #6
 8004670:	f04f 0400 	mov.w	r4, #0
 8004674:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	ea03 0501 	and.w	r5, r3, r1
 8004680:	ea04 0602 	and.w	r6, r4, r2
 8004684:	4629      	mov	r1, r5
 8004686:	4632      	mov	r2, r6
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	f04f 0400 	mov.w	r4, #0
 8004690:	0154      	lsls	r4, r2, #5
 8004692:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004696:	014b      	lsls	r3, r1, #5
 8004698:	4619      	mov	r1, r3
 800469a:	4622      	mov	r2, r4
 800469c:	1b49      	subs	r1, r1, r5
 800469e:	eb62 0206 	sbc.w	r2, r2, r6
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	f04f 0400 	mov.w	r4, #0
 80046aa:	0194      	lsls	r4, r2, #6
 80046ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046b0:	018b      	lsls	r3, r1, #6
 80046b2:	1a5b      	subs	r3, r3, r1
 80046b4:	eb64 0402 	sbc.w	r4, r4, r2
 80046b8:	f04f 0100 	mov.w	r1, #0
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	00e2      	lsls	r2, r4, #3
 80046c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046c6:	00d9      	lsls	r1, r3, #3
 80046c8:	460b      	mov	r3, r1
 80046ca:	4614      	mov	r4, r2
 80046cc:	195b      	adds	r3, r3, r5
 80046ce:	eb44 0406 	adc.w	r4, r4, r6
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	0262      	lsls	r2, r4, #9
 80046dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80046e0:	0259      	lsls	r1, r3, #9
 80046e2:	460b      	mov	r3, r1
 80046e4:	4614      	mov	r4, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	4621      	mov	r1, r4
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f04f 0400 	mov.w	r4, #0
 80046f0:	461a      	mov	r2, r3
 80046f2:	4623      	mov	r3, r4
 80046f4:	f7fb fdbc 	bl	8000270 <__aeabi_uldivmod>
 80046f8:	4603      	mov	r3, r0
 80046fa:	460c      	mov	r4, r1
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	e049      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004700:	4b2f      	ldr	r3, [pc, #188]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	099b      	lsrs	r3, r3, #6
 8004706:	f04f 0400 	mov.w	r4, #0
 800470a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	ea03 0501 	and.w	r5, r3, r1
 8004716:	ea04 0602 	and.w	r6, r4, r2
 800471a:	4629      	mov	r1, r5
 800471c:	4632      	mov	r2, r6
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	f04f 0400 	mov.w	r4, #0
 8004726:	0154      	lsls	r4, r2, #5
 8004728:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800472c:	014b      	lsls	r3, r1, #5
 800472e:	4619      	mov	r1, r3
 8004730:	4622      	mov	r2, r4
 8004732:	1b49      	subs	r1, r1, r5
 8004734:	eb62 0206 	sbc.w	r2, r2, r6
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	f04f 0400 	mov.w	r4, #0
 8004740:	0194      	lsls	r4, r2, #6
 8004742:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004746:	018b      	lsls	r3, r1, #6
 8004748:	1a5b      	subs	r3, r3, r1
 800474a:	eb64 0402 	sbc.w	r4, r4, r2
 800474e:	f04f 0100 	mov.w	r1, #0
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	00e2      	lsls	r2, r4, #3
 8004758:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800475c:	00d9      	lsls	r1, r3, #3
 800475e:	460b      	mov	r3, r1
 8004760:	4614      	mov	r4, r2
 8004762:	195b      	adds	r3, r3, r5
 8004764:	eb44 0406 	adc.w	r4, r4, r6
 8004768:	f04f 0100 	mov.w	r1, #0
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	02a2      	lsls	r2, r4, #10
 8004772:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004776:	0299      	lsls	r1, r3, #10
 8004778:	460b      	mov	r3, r1
 800477a:	4614      	mov	r4, r2
 800477c:	4618      	mov	r0, r3
 800477e:	4621      	mov	r1, r4
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f04f 0400 	mov.w	r4, #0
 8004786:	461a      	mov	r2, r3
 8004788:	4623      	mov	r3, r4
 800478a:	f7fb fd71 	bl	8000270 <__aeabi_uldivmod>
 800478e:	4603      	mov	r3, r0
 8004790:	460c      	mov	r4, r1
 8004792:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004794:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	0c1b      	lsrs	r3, r3, #16
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	3301      	adds	r3, #1
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ac:	60bb      	str	r3, [r7, #8]
      break;
 80047ae:	e002      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047b0:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047b2:	60bb      	str	r3, [r7, #8]
      break;
 80047b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047b6:	68bb      	ldr	r3, [r7, #8]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047c0:	40023800 	.word	0x40023800
 80047c4:	00f42400 	.word	0x00f42400
 80047c8:	007a1200 	.word	0x007a1200

080047cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d0:	4b03      	ldr	r3, [pc, #12]	; (80047e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047d2:	681b      	ldr	r3, [r3, #0]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	20000008 	.word	0x20000008

080047e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047e8:	f7ff fff0 	bl	80047cc <HAL_RCC_GetHCLKFreq>
 80047ec:	4601      	mov	r1, r0
 80047ee:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	0a9b      	lsrs	r3, r3, #10
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	4a03      	ldr	r2, [pc, #12]	; (8004808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047fa:	5cd3      	ldrb	r3, [r2, r3]
 80047fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40023800 	.word	0x40023800
 8004808:	0800a4a8 	.word	0x0800a4a8

0800480c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004810:	f7ff ffdc 	bl	80047cc <HAL_RCC_GetHCLKFreq>
 8004814:	4601      	mov	r1, r0
 8004816:	4b05      	ldr	r3, [pc, #20]	; (800482c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	0b5b      	lsrs	r3, r3, #13
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4a03      	ldr	r2, [pc, #12]	; (8004830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004822:	5cd3      	ldrb	r3, [r2, r3]
 8004824:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004828:	4618      	mov	r0, r3
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40023800 	.word	0x40023800
 8004830:	0800a4a8 	.word	0x0800a4a8

08004834 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e056      	b.n	80048f4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d106      	bne.n	8004866 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f004 fceb 	bl	800923c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2202      	movs	r2, #2
 800486a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800487c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	ea42 0103 	orr.w	r1, r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	0c1b      	lsrs	r3, r3, #16
 80048c4:	f003 0104 	and.w	r1, r3, #4
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	69da      	ldr	r2, [r3, #28]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	603b      	str	r3, [r7, #0]
 8004908:	4613      	mov	r3, r2
 800490a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_SPI_Transmit+0x22>
 800491a:	2302      	movs	r3, #2
 800491c:	e11e      	b.n	8004b5c <HAL_SPI_Transmit+0x260>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004926:	f7fb fe89 	bl	800063c <HAL_GetTick>
 800492a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	d002      	beq.n	8004942 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800493c:	2302      	movs	r3, #2
 800493e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004940:	e103      	b.n	8004b4a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_SPI_Transmit+0x52>
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d102      	bne.n	8004954 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004952:	e0fa      	b.n	8004b4a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2203      	movs	r2, #3
 8004958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	88fa      	ldrh	r2, [r7, #6]
 800496c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	88fa      	ldrh	r2, [r7, #6]
 8004972:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499a:	d107      	bne.n	80049ac <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b6:	2b40      	cmp	r3, #64	; 0x40
 80049b8:	d007      	beq.n	80049ca <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d2:	d14b      	bne.n	8004a6c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_SPI_Transmit+0xe6>
 80049dc:	8afb      	ldrh	r3, [r7, #22]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d13e      	bne.n	8004a60 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	881a      	ldrh	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	1c9a      	adds	r2, r3, #2
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a06:	e02b      	b.n	8004a60 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d112      	bne.n	8004a3c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	881a      	ldrh	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	1c9a      	adds	r2, r3, #2
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a3a:	e011      	b.n	8004a60 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a3c:	f7fb fdfe 	bl	800063c <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d803      	bhi.n	8004a54 <HAL_SPI_Transmit+0x158>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a52:	d102      	bne.n	8004a5a <HAL_SPI_Transmit+0x15e>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a5e:	e074      	b.n	8004b4a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1ce      	bne.n	8004a08 <HAL_SPI_Transmit+0x10c>
 8004a6a:	e04c      	b.n	8004b06 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <HAL_SPI_Transmit+0x17e>
 8004a74:	8afb      	ldrh	r3, [r7, #22]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d140      	bne.n	8004afc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	330c      	adds	r3, #12
 8004a84:	7812      	ldrb	r2, [r2, #0]
 8004a86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004aa0:	e02c      	b.n	8004afc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d113      	bne.n	8004ad8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	7812      	ldrb	r2, [r2, #0]
 8004abc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ad6:	e011      	b.n	8004afc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ad8:	f7fb fdb0 	bl	800063c <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d803      	bhi.n	8004af0 <HAL_SPI_Transmit+0x1f4>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aee:	d102      	bne.n	8004af6 <HAL_SPI_Transmit+0x1fa>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d102      	bne.n	8004afc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004afa:	e026      	b.n	8004b4a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1cd      	bne.n	8004aa2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	6839      	ldr	r1, [r7, #0]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 fa44 	bl	8004f98 <SPI_EndRxTxTransaction>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b24:	2300      	movs	r3, #0
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	77fb      	strb	r3, [r7, #31]
 8004b46:	e000      	b.n	8004b4a <HAL_SPI_Transmit+0x24e>
  }

error:
 8004b48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3720      	adds	r7, #32
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08c      	sub	sp, #48	; 0x30
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b72:	2301      	movs	r3, #1
 8004b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_SPI_TransmitReceive+0x26>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e18a      	b.n	8004ea0 <HAL_SPI_TransmitReceive+0x33c>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b92:	f7fb fd53 	bl	800063c <HAL_GetTick>
 8004b96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ba8:	887b      	ldrh	r3, [r7, #2]
 8004baa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d00f      	beq.n	8004bd4 <HAL_SPI_TransmitReceive+0x70>
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bba:	d107      	bne.n	8004bcc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d103      	bne.n	8004bcc <HAL_SPI_TransmitReceive+0x68>
 8004bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d003      	beq.n	8004bd4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004bcc:	2302      	movs	r3, #2
 8004bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bd2:	e15b      	b.n	8004e8c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <HAL_SPI_TransmitReceive+0x82>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_SPI_TransmitReceive+0x82>
 8004be0:	887b      	ldrh	r3, [r7, #2]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d103      	bne.n	8004bee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bec:	e14e      	b.n	8004e8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d003      	beq.n	8004c02 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2205      	movs	r2, #5
 8004bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	887a      	ldrh	r2, [r7, #2]
 8004c12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	887a      	ldrh	r2, [r7, #2]
 8004c18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	887a      	ldrh	r2, [r7, #2]
 8004c24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	887a      	ldrh	r2, [r7, #2]
 8004c2a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c42:	2b40      	cmp	r3, #64	; 0x40
 8004c44:	d007      	beq.n	8004c56 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c5e:	d178      	bne.n	8004d52 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <HAL_SPI_TransmitReceive+0x10a>
 8004c68:	8b7b      	ldrh	r3, [r7, #26]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d166      	bne.n	8004d3c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	881a      	ldrh	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	1c9a      	adds	r2, r3, #2
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c92:	e053      	b.n	8004d3c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d11b      	bne.n	8004cda <HAL_SPI_TransmitReceive+0x176>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d016      	beq.n	8004cda <HAL_SPI_TransmitReceive+0x176>
 8004cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d113      	bne.n	8004cda <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	881a      	ldrh	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	1c9a      	adds	r2, r3, #2
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d119      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x1b8>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d014      	beq.n	8004d1c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	b292      	uxth	r2, r2
 8004cfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	1c9a      	adds	r2, r3, #2
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d1c:	f7fb fc8e 	bl	800063c <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d807      	bhi.n	8004d3c <HAL_SPI_TransmitReceive+0x1d8>
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	d003      	beq.n	8004d3c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d3a:	e0a7      	b.n	8004e8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1a6      	bne.n	8004c94 <HAL_SPI_TransmitReceive+0x130>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1a1      	bne.n	8004c94 <HAL_SPI_TransmitReceive+0x130>
 8004d50:	e07c      	b.n	8004e4c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_SPI_TransmitReceive+0x1fc>
 8004d5a:	8b7b      	ldrh	r3, [r7, #26]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d16b      	bne.n	8004e38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	330c      	adds	r3, #12
 8004d6a:	7812      	ldrb	r2, [r2, #0]
 8004d6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d86:	e057      	b.n	8004e38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d11c      	bne.n	8004dd0 <HAL_SPI_TransmitReceive+0x26c>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d017      	beq.n	8004dd0 <HAL_SPI_TransmitReceive+0x26c>
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d114      	bne.n	8004dd0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
 8004db0:	7812      	ldrb	r2, [r2, #0]
 8004db2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d119      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x2ae>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d014      	beq.n	8004e12 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e12:	f7fb fc13 	bl	800063c <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d803      	bhi.n	8004e2a <HAL_SPI_TransmitReceive+0x2c6>
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d102      	bne.n	8004e30 <HAL_SPI_TransmitReceive+0x2cc>
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d103      	bne.n	8004e38 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e36:	e029      	b.n	8004e8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1a2      	bne.n	8004d88 <HAL_SPI_TransmitReceive+0x224>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d19d      	bne.n	8004d88 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 f8a1 	bl	8004f98 <SPI_EndRxTxTransaction>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d006      	beq.n	8004e6a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004e68:	e010      	b.n	8004e8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10b      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	e000      	b.n	8004e8c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004e8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3730      	adds	r7, #48	; 0x30
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eb6:	b2db      	uxtb	r3, r3
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ed4:	e04c      	b.n	8004f70 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004edc:	d048      	beq.n	8004f70 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004ede:	f7fb fbad 	bl	800063c <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d902      	bls.n	8004ef4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d13d      	bne.n	8004f70 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f0c:	d111      	bne.n	8004f32 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f16:	d004      	beq.n	8004f22 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f20:	d107      	bne.n	8004f32 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3a:	d10f      	bne.n	8004f5c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e00f      	b.n	8004f90 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	bf0c      	ite	eq
 8004f80:	2301      	moveq	r3, #1
 8004f82:	2300      	movne	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d1a3      	bne.n	8004ed6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fa4:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <SPI_EndRxTxTransaction+0x7c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a1b      	ldr	r2, [pc, #108]	; (8005018 <SPI_EndRxTxTransaction+0x80>)
 8004faa:	fba2 2303 	umull	r2, r3, r2, r3
 8004fae:	0d5b      	lsrs	r3, r3, #21
 8004fb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fb4:	fb02 f303 	mul.w	r3, r2, r3
 8004fb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc2:	d112      	bne.n	8004fea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2180      	movs	r1, #128	; 0x80
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f7ff ff78 	bl	8004ec4 <SPI_WaitFlagStateUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d016      	beq.n	8005008 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fde:	f043 0220 	orr.w	r2, r3, #32
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e00f      	b.n	800500a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005000:	2b80      	cmp	r3, #128	; 0x80
 8005002:	d0f2      	beq.n	8004fea <SPI_EndRxTxTransaction+0x52>
 8005004:	e000      	b.n	8005008 <SPI_EndRxTxTransaction+0x70>
        break;
 8005006:	bf00      	nop
  }

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20000008 	.word	0x20000008
 8005018:	165e9f81 	.word	0x165e9f81

0800501c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e03f      	b.n	80050ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f004 f942 	bl	80092cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2224      	movs	r2, #36	; 0x24
 800504c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800505e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 faad 	bl	80055c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005074:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005084:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005094:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint16_t *pData, uint16_t Size)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b085      	sub	sp, #20
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	4613      	mov	r3, r2
 80050c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d130      	bne.n	8005132 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_UART_Transmit_IT+0x26>
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e029      	b.n	8005134 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <HAL_UART_Transmit_IT+0x38>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e022      	b.n	8005134 <HAL_UART_Transmit_IT+0x7e>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	88fa      	ldrh	r2, [r7, #6]
 8005100:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	88fa      	ldrh	r2, [r7, #6]
 8005106:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2221      	movs	r2, #33	; 0x21
 8005112:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800512c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	e000      	b.n	8005134 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005132:	2302      	movs	r3, #2
  }
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005160:	2300      	movs	r3, #0
 8005162:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10d      	bne.n	8005192 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_UART_IRQHandler+0x52>
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f996 	bl	80054bc <UART_Receive_IT>
      return;
 8005190:	e0d1      	b.n	8005336 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80b0 	beq.w	80052fa <HAL_UART_IRQHandler+0x1ba>
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d105      	bne.n	80051b0 <HAL_UART_IRQHandler+0x70>
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80a5 	beq.w	80052fa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_UART_IRQHandler+0x90>
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c8:	f043 0201 	orr.w	r2, r3, #1
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <HAL_UART_IRQHandler+0xb0>
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e8:	f043 0202 	orr.w	r2, r3, #2
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <HAL_UART_IRQHandler+0xd0>
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005208:	f043 0204 	orr.w	r2, r3, #4
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00f      	beq.n	800523a <HAL_UART_IRQHandler+0xfa>
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d104      	bne.n	800522e <HAL_UART_IRQHandler+0xee>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005232:	f043 0208 	orr.w	r2, r3, #8
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d078      	beq.n	8005334 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b00      	cmp	r3, #0
 800524a:	d007      	beq.n	800525c <HAL_UART_IRQHandler+0x11c>
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f930 	bl	80054bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005266:	2b40      	cmp	r3, #64	; 0x40
 8005268:	bf0c      	ite	eq
 800526a:	2301      	moveq	r3, #1
 800526c:	2300      	movne	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <HAL_UART_IRQHandler+0x144>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d031      	beq.n	80052e8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f879 	bl	800537c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b40      	cmp	r3, #64	; 0x40
 8005296:	d123      	bne.n	80052e0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695a      	ldr	r2, [r3, #20]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d013      	beq.n	80052d8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b4:	4a21      	ldr	r2, [pc, #132]	; (800533c <HAL_UART_IRQHandler+0x1fc>)
 80052b6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fb ff13 	bl	80010e8 <HAL_DMA_Abort_IT>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d016      	beq.n	80052f6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052d2:	4610      	mov	r0, r2
 80052d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d6:	e00e      	b.n	80052f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f845 	bl	8005368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052de:	e00a      	b.n	80052f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f841 	bl	8005368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e6:	e006      	b.n	80052f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f83d 	bl	8005368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80052f4:	e01e      	b.n	8005334 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f6:	bf00      	nop
    return;
 80052f8:	e01c      	b.n	8005334 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_UART_IRQHandler+0x1d6>
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f866 	bl	80053e0 <UART_Transmit_IT>
    return;
 8005314:	e00f      	b.n	8005336 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <HAL_UART_IRQHandler+0x1f6>
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f8ae 	bl	800548c <UART_EndTransmit_IT>
    return;
 8005330:	bf00      	nop
 8005332:	e000      	b.n	8005336 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005334:	bf00      	nop
  }
}
 8005336:	3720      	adds	r7, #32
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	080053b9 	.word	0x080053b9

08005340 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005392:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695a      	ldr	r2, [r3, #20]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0201 	bic.w	r2, r2, #1
 80053a2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7ff ffc8 	bl	8005368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d8:	bf00      	nop
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b21      	cmp	r3, #33	; 0x21
 80053f2:	d144      	bne.n	800547e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fc:	d11a      	bne.n	8005434 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005412:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d105      	bne.n	8005428 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	1c9a      	adds	r2, r3, #2
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	621a      	str	r2, [r3, #32]
 8005426:	e00e      	b.n	8005446 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	621a      	str	r2, [r3, #32]
 8005432:	e008      	b.n	8005446 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	1c59      	adds	r1, r3, #1
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6211      	str	r1, [r2, #32]
 800543e:	781a      	ldrb	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29b      	uxth	r3, r3
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	4619      	mov	r1, r3
 8005454:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10f      	bne.n	800547a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005468:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005478:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	e000      	b.n	8005480 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800547e:	2302      	movs	r3, #2
  }
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff ff47 	bl	8005340 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b22      	cmp	r3, #34	; 0x22
 80054ce:	d171      	bne.n	80055b4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d8:	d123      	bne.n	8005522 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10e      	bne.n	8005506 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fe:	1c9a      	adds	r2, r3, #2
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	629a      	str	r2, [r3, #40]	; 0x28
 8005504:	e029      	b.n	800555a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	b29b      	uxth	r3, r3
 800550e:	b2db      	uxtb	r3, r3
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	629a      	str	r2, [r3, #40]	; 0x28
 8005520:	e01b      	b.n	800555a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10a      	bne.n	8005540 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6858      	ldr	r0, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	1c59      	adds	r1, r3, #1
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6291      	str	r1, [r2, #40]	; 0x28
 800553a:	b2c2      	uxtb	r2, r0
 800553c:	701a      	strb	r2, [r3, #0]
 800553e:	e00c      	b.n	800555a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	b2da      	uxtb	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	1c58      	adds	r0, r3, #1
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	6288      	str	r0, [r1, #40]	; 0x28
 8005552:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800555e:	b29b      	uxth	r3, r3
 8005560:	3b01      	subs	r3, #1
 8005562:	b29b      	uxth	r3, r3
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4619      	mov	r1, r3
 8005568:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800556a:	2b00      	cmp	r3, #0
 800556c:	d120      	bne.n	80055b0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0220 	bic.w	r2, r2, #32
 800557c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800558c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695a      	ldr	r2, [r3, #20]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0201 	bic.w	r2, r2, #1
 800559c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff fed4 	bl	8005354 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	e002      	b.n	80055b6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	e000      	b.n	80055b6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80055b4:	2302      	movs	r3, #2
  }
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005602:	f023 030c 	bic.w	r3, r3, #12
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	68f9      	ldr	r1, [r7, #12]
 800560c:	430b      	orrs	r3, r1
 800560e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800562e:	f040 818b 	bne.w	8005948 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4ac1      	ldr	r2, [pc, #772]	; (800593c <UART_SetConfig+0x37c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d005      	beq.n	8005648 <UART_SetConfig+0x88>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4abf      	ldr	r2, [pc, #764]	; (8005940 <UART_SetConfig+0x380>)
 8005642:	4293      	cmp	r3, r2
 8005644:	f040 80bd 	bne.w	80057c2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005648:	f7ff f8e0 	bl	800480c <HAL_RCC_GetPCLK2Freq>
 800564c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	461d      	mov	r5, r3
 8005652:	f04f 0600 	mov.w	r6, #0
 8005656:	46a8      	mov	r8, r5
 8005658:	46b1      	mov	r9, r6
 800565a:	eb18 0308 	adds.w	r3, r8, r8
 800565e:	eb49 0409 	adc.w	r4, r9, r9
 8005662:	4698      	mov	r8, r3
 8005664:	46a1      	mov	r9, r4
 8005666:	eb18 0805 	adds.w	r8, r8, r5
 800566a:	eb49 0906 	adc.w	r9, r9, r6
 800566e:	f04f 0100 	mov.w	r1, #0
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800567a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800567e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005682:	4688      	mov	r8, r1
 8005684:	4691      	mov	r9, r2
 8005686:	eb18 0005 	adds.w	r0, r8, r5
 800568a:	eb49 0106 	adc.w	r1, r9, r6
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	461d      	mov	r5, r3
 8005694:	f04f 0600 	mov.w	r6, #0
 8005698:	196b      	adds	r3, r5, r5
 800569a:	eb46 0406 	adc.w	r4, r6, r6
 800569e:	461a      	mov	r2, r3
 80056a0:	4623      	mov	r3, r4
 80056a2:	f7fa fde5 	bl	8000270 <__aeabi_uldivmod>
 80056a6:	4603      	mov	r3, r0
 80056a8:	460c      	mov	r4, r1
 80056aa:	461a      	mov	r2, r3
 80056ac:	4ba5      	ldr	r3, [pc, #660]	; (8005944 <UART_SetConfig+0x384>)
 80056ae:	fba3 2302 	umull	r2, r3, r3, r2
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	461d      	mov	r5, r3
 80056bc:	f04f 0600 	mov.w	r6, #0
 80056c0:	46a9      	mov	r9, r5
 80056c2:	46b2      	mov	sl, r6
 80056c4:	eb19 0309 	adds.w	r3, r9, r9
 80056c8:	eb4a 040a 	adc.w	r4, sl, sl
 80056cc:	4699      	mov	r9, r3
 80056ce:	46a2      	mov	sl, r4
 80056d0:	eb19 0905 	adds.w	r9, r9, r5
 80056d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80056d8:	f04f 0100 	mov.w	r1, #0
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056ec:	4689      	mov	r9, r1
 80056ee:	4692      	mov	sl, r2
 80056f0:	eb19 0005 	adds.w	r0, r9, r5
 80056f4:	eb4a 0106 	adc.w	r1, sl, r6
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	461d      	mov	r5, r3
 80056fe:	f04f 0600 	mov.w	r6, #0
 8005702:	196b      	adds	r3, r5, r5
 8005704:	eb46 0406 	adc.w	r4, r6, r6
 8005708:	461a      	mov	r2, r3
 800570a:	4623      	mov	r3, r4
 800570c:	f7fa fdb0 	bl	8000270 <__aeabi_uldivmod>
 8005710:	4603      	mov	r3, r0
 8005712:	460c      	mov	r4, r1
 8005714:	461a      	mov	r2, r3
 8005716:	4b8b      	ldr	r3, [pc, #556]	; (8005944 <UART_SetConfig+0x384>)
 8005718:	fba3 1302 	umull	r1, r3, r3, r2
 800571c:	095b      	lsrs	r3, r3, #5
 800571e:	2164      	movs	r1, #100	; 0x64
 8005720:	fb01 f303 	mul.w	r3, r1, r3
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	3332      	adds	r3, #50	; 0x32
 800572a:	4a86      	ldr	r2, [pc, #536]	; (8005944 <UART_SetConfig+0x384>)
 800572c:	fba2 2303 	umull	r2, r3, r2, r3
 8005730:	095b      	lsrs	r3, r3, #5
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005738:	4498      	add	r8, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	461d      	mov	r5, r3
 800573e:	f04f 0600 	mov.w	r6, #0
 8005742:	46a9      	mov	r9, r5
 8005744:	46b2      	mov	sl, r6
 8005746:	eb19 0309 	adds.w	r3, r9, r9
 800574a:	eb4a 040a 	adc.w	r4, sl, sl
 800574e:	4699      	mov	r9, r3
 8005750:	46a2      	mov	sl, r4
 8005752:	eb19 0905 	adds.w	r9, r9, r5
 8005756:	eb4a 0a06 	adc.w	sl, sl, r6
 800575a:	f04f 0100 	mov.w	r1, #0
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005766:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800576a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800576e:	4689      	mov	r9, r1
 8005770:	4692      	mov	sl, r2
 8005772:	eb19 0005 	adds.w	r0, r9, r5
 8005776:	eb4a 0106 	adc.w	r1, sl, r6
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	461d      	mov	r5, r3
 8005780:	f04f 0600 	mov.w	r6, #0
 8005784:	196b      	adds	r3, r5, r5
 8005786:	eb46 0406 	adc.w	r4, r6, r6
 800578a:	461a      	mov	r2, r3
 800578c:	4623      	mov	r3, r4
 800578e:	f7fa fd6f 	bl	8000270 <__aeabi_uldivmod>
 8005792:	4603      	mov	r3, r0
 8005794:	460c      	mov	r4, r1
 8005796:	461a      	mov	r2, r3
 8005798:	4b6a      	ldr	r3, [pc, #424]	; (8005944 <UART_SetConfig+0x384>)
 800579a:	fba3 1302 	umull	r1, r3, r3, r2
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	2164      	movs	r1, #100	; 0x64
 80057a2:	fb01 f303 	mul.w	r3, r1, r3
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	3332      	adds	r3, #50	; 0x32
 80057ac:	4a65      	ldr	r2, [pc, #404]	; (8005944 <UART_SetConfig+0x384>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	f003 0207 	and.w	r2, r3, #7
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4442      	add	r2, r8
 80057be:	609a      	str	r2, [r3, #8]
 80057c0:	e26f      	b.n	8005ca2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057c2:	f7ff f80f 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 80057c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	461d      	mov	r5, r3
 80057cc:	f04f 0600 	mov.w	r6, #0
 80057d0:	46a8      	mov	r8, r5
 80057d2:	46b1      	mov	r9, r6
 80057d4:	eb18 0308 	adds.w	r3, r8, r8
 80057d8:	eb49 0409 	adc.w	r4, r9, r9
 80057dc:	4698      	mov	r8, r3
 80057de:	46a1      	mov	r9, r4
 80057e0:	eb18 0805 	adds.w	r8, r8, r5
 80057e4:	eb49 0906 	adc.w	r9, r9, r6
 80057e8:	f04f 0100 	mov.w	r1, #0
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057fc:	4688      	mov	r8, r1
 80057fe:	4691      	mov	r9, r2
 8005800:	eb18 0005 	adds.w	r0, r8, r5
 8005804:	eb49 0106 	adc.w	r1, r9, r6
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	461d      	mov	r5, r3
 800580e:	f04f 0600 	mov.w	r6, #0
 8005812:	196b      	adds	r3, r5, r5
 8005814:	eb46 0406 	adc.w	r4, r6, r6
 8005818:	461a      	mov	r2, r3
 800581a:	4623      	mov	r3, r4
 800581c:	f7fa fd28 	bl	8000270 <__aeabi_uldivmod>
 8005820:	4603      	mov	r3, r0
 8005822:	460c      	mov	r4, r1
 8005824:	461a      	mov	r2, r3
 8005826:	4b47      	ldr	r3, [pc, #284]	; (8005944 <UART_SetConfig+0x384>)
 8005828:	fba3 2302 	umull	r2, r3, r3, r2
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	461d      	mov	r5, r3
 8005836:	f04f 0600 	mov.w	r6, #0
 800583a:	46a9      	mov	r9, r5
 800583c:	46b2      	mov	sl, r6
 800583e:	eb19 0309 	adds.w	r3, r9, r9
 8005842:	eb4a 040a 	adc.w	r4, sl, sl
 8005846:	4699      	mov	r9, r3
 8005848:	46a2      	mov	sl, r4
 800584a:	eb19 0905 	adds.w	r9, r9, r5
 800584e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005852:	f04f 0100 	mov.w	r1, #0
 8005856:	f04f 0200 	mov.w	r2, #0
 800585a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800585e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005862:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005866:	4689      	mov	r9, r1
 8005868:	4692      	mov	sl, r2
 800586a:	eb19 0005 	adds.w	r0, r9, r5
 800586e:	eb4a 0106 	adc.w	r1, sl, r6
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	461d      	mov	r5, r3
 8005878:	f04f 0600 	mov.w	r6, #0
 800587c:	196b      	adds	r3, r5, r5
 800587e:	eb46 0406 	adc.w	r4, r6, r6
 8005882:	461a      	mov	r2, r3
 8005884:	4623      	mov	r3, r4
 8005886:	f7fa fcf3 	bl	8000270 <__aeabi_uldivmod>
 800588a:	4603      	mov	r3, r0
 800588c:	460c      	mov	r4, r1
 800588e:	461a      	mov	r2, r3
 8005890:	4b2c      	ldr	r3, [pc, #176]	; (8005944 <UART_SetConfig+0x384>)
 8005892:	fba3 1302 	umull	r1, r3, r3, r2
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	2164      	movs	r1, #100	; 0x64
 800589a:	fb01 f303 	mul.w	r3, r1, r3
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	3332      	adds	r3, #50	; 0x32
 80058a4:	4a27      	ldr	r2, [pc, #156]	; (8005944 <UART_SetConfig+0x384>)
 80058a6:	fba2 2303 	umull	r2, r3, r2, r3
 80058aa:	095b      	lsrs	r3, r3, #5
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058b2:	4498      	add	r8, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	461d      	mov	r5, r3
 80058b8:	f04f 0600 	mov.w	r6, #0
 80058bc:	46a9      	mov	r9, r5
 80058be:	46b2      	mov	sl, r6
 80058c0:	eb19 0309 	adds.w	r3, r9, r9
 80058c4:	eb4a 040a 	adc.w	r4, sl, sl
 80058c8:	4699      	mov	r9, r3
 80058ca:	46a2      	mov	sl, r4
 80058cc:	eb19 0905 	adds.w	r9, r9, r5
 80058d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80058d4:	f04f 0100 	mov.w	r1, #0
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058e8:	4689      	mov	r9, r1
 80058ea:	4692      	mov	sl, r2
 80058ec:	eb19 0005 	adds.w	r0, r9, r5
 80058f0:	eb4a 0106 	adc.w	r1, sl, r6
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	461d      	mov	r5, r3
 80058fa:	f04f 0600 	mov.w	r6, #0
 80058fe:	196b      	adds	r3, r5, r5
 8005900:	eb46 0406 	adc.w	r4, r6, r6
 8005904:	461a      	mov	r2, r3
 8005906:	4623      	mov	r3, r4
 8005908:	f7fa fcb2 	bl	8000270 <__aeabi_uldivmod>
 800590c:	4603      	mov	r3, r0
 800590e:	460c      	mov	r4, r1
 8005910:	461a      	mov	r2, r3
 8005912:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <UART_SetConfig+0x384>)
 8005914:	fba3 1302 	umull	r1, r3, r3, r2
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	2164      	movs	r1, #100	; 0x64
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	3332      	adds	r3, #50	; 0x32
 8005926:	4a07      	ldr	r2, [pc, #28]	; (8005944 <UART_SetConfig+0x384>)
 8005928:	fba2 2303 	umull	r2, r3, r2, r3
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	f003 0207 	and.w	r2, r3, #7
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4442      	add	r2, r8
 8005938:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800593a:	e1b2      	b.n	8005ca2 <UART_SetConfig+0x6e2>
 800593c:	40011000 	.word	0x40011000
 8005940:	40011400 	.word	0x40011400
 8005944:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4ad7      	ldr	r2, [pc, #860]	; (8005cac <UART_SetConfig+0x6ec>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d005      	beq.n	800595e <UART_SetConfig+0x39e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4ad6      	ldr	r2, [pc, #856]	; (8005cb0 <UART_SetConfig+0x6f0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	f040 80d1 	bne.w	8005b00 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800595e:	f7fe ff55 	bl	800480c <HAL_RCC_GetPCLK2Freq>
 8005962:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	469a      	mov	sl, r3
 8005968:	f04f 0b00 	mov.w	fp, #0
 800596c:	46d0      	mov	r8, sl
 800596e:	46d9      	mov	r9, fp
 8005970:	eb18 0308 	adds.w	r3, r8, r8
 8005974:	eb49 0409 	adc.w	r4, r9, r9
 8005978:	4698      	mov	r8, r3
 800597a:	46a1      	mov	r9, r4
 800597c:	eb18 080a 	adds.w	r8, r8, sl
 8005980:	eb49 090b 	adc.w	r9, r9, fp
 8005984:	f04f 0100 	mov.w	r1, #0
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005990:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005994:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005998:	4688      	mov	r8, r1
 800599a:	4691      	mov	r9, r2
 800599c:	eb1a 0508 	adds.w	r5, sl, r8
 80059a0:	eb4b 0609 	adc.w	r6, fp, r9
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	4619      	mov	r1, r3
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	f04f 0400 	mov.w	r4, #0
 80059b6:	0094      	lsls	r4, r2, #2
 80059b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059bc:	008b      	lsls	r3, r1, #2
 80059be:	461a      	mov	r2, r3
 80059c0:	4623      	mov	r3, r4
 80059c2:	4628      	mov	r0, r5
 80059c4:	4631      	mov	r1, r6
 80059c6:	f7fa fc53 	bl	8000270 <__aeabi_uldivmod>
 80059ca:	4603      	mov	r3, r0
 80059cc:	460c      	mov	r4, r1
 80059ce:	461a      	mov	r2, r3
 80059d0:	4bb8      	ldr	r3, [pc, #736]	; (8005cb4 <UART_SetConfig+0x6f4>)
 80059d2:	fba3 2302 	umull	r2, r3, r3, r2
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	469b      	mov	fp, r3
 80059e0:	f04f 0c00 	mov.w	ip, #0
 80059e4:	46d9      	mov	r9, fp
 80059e6:	46e2      	mov	sl, ip
 80059e8:	eb19 0309 	adds.w	r3, r9, r9
 80059ec:	eb4a 040a 	adc.w	r4, sl, sl
 80059f0:	4699      	mov	r9, r3
 80059f2:	46a2      	mov	sl, r4
 80059f4:	eb19 090b 	adds.w	r9, r9, fp
 80059f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059fc:	f04f 0100 	mov.w	r1, #0
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a10:	4689      	mov	r9, r1
 8005a12:	4692      	mov	sl, r2
 8005a14:	eb1b 0509 	adds.w	r5, fp, r9
 8005a18:	eb4c 060a 	adc.w	r6, ip, sl
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	4619      	mov	r1, r3
 8005a22:	f04f 0200 	mov.w	r2, #0
 8005a26:	f04f 0300 	mov.w	r3, #0
 8005a2a:	f04f 0400 	mov.w	r4, #0
 8005a2e:	0094      	lsls	r4, r2, #2
 8005a30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a34:	008b      	lsls	r3, r1, #2
 8005a36:	461a      	mov	r2, r3
 8005a38:	4623      	mov	r3, r4
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	4631      	mov	r1, r6
 8005a3e:	f7fa fc17 	bl	8000270 <__aeabi_uldivmod>
 8005a42:	4603      	mov	r3, r0
 8005a44:	460c      	mov	r4, r1
 8005a46:	461a      	mov	r2, r3
 8005a48:	4b9a      	ldr	r3, [pc, #616]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	2164      	movs	r1, #100	; 0x64
 8005a52:	fb01 f303 	mul.w	r3, r1, r3
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	3332      	adds	r3, #50	; 0x32
 8005a5c:	4a95      	ldr	r2, [pc, #596]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a68:	4498      	add	r8, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	469b      	mov	fp, r3
 8005a6e:	f04f 0c00 	mov.w	ip, #0
 8005a72:	46d9      	mov	r9, fp
 8005a74:	46e2      	mov	sl, ip
 8005a76:	eb19 0309 	adds.w	r3, r9, r9
 8005a7a:	eb4a 040a 	adc.w	r4, sl, sl
 8005a7e:	4699      	mov	r9, r3
 8005a80:	46a2      	mov	sl, r4
 8005a82:	eb19 090b 	adds.w	r9, r9, fp
 8005a86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a8a:	f04f 0100 	mov.w	r1, #0
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a9e:	4689      	mov	r9, r1
 8005aa0:	4692      	mov	sl, r2
 8005aa2:	eb1b 0509 	adds.w	r5, fp, r9
 8005aa6:	eb4c 060a 	adc.w	r6, ip, sl
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	f04f 0400 	mov.w	r4, #0
 8005abc:	0094      	lsls	r4, r2, #2
 8005abe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ac2:	008b      	lsls	r3, r1, #2
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4623      	mov	r3, r4
 8005ac8:	4628      	mov	r0, r5
 8005aca:	4631      	mov	r1, r6
 8005acc:	f7fa fbd0 	bl	8000270 <__aeabi_uldivmod>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4b77      	ldr	r3, [pc, #476]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8005adc:	095b      	lsrs	r3, r3, #5
 8005ade:	2164      	movs	r1, #100	; 0x64
 8005ae0:	fb01 f303 	mul.w	r3, r1, r3
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	3332      	adds	r3, #50	; 0x32
 8005aea:	4a72      	ldr	r2, [pc, #456]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005aec:	fba2 2303 	umull	r2, r3, r2, r3
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	f003 020f 	and.w	r2, r3, #15
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4442      	add	r2, r8
 8005afc:	609a      	str	r2, [r3, #8]
 8005afe:	e0d0      	b.n	8005ca2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b00:	f7fe fe70 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 8005b04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	469a      	mov	sl, r3
 8005b0a:	f04f 0b00 	mov.w	fp, #0
 8005b0e:	46d0      	mov	r8, sl
 8005b10:	46d9      	mov	r9, fp
 8005b12:	eb18 0308 	adds.w	r3, r8, r8
 8005b16:	eb49 0409 	adc.w	r4, r9, r9
 8005b1a:	4698      	mov	r8, r3
 8005b1c:	46a1      	mov	r9, r4
 8005b1e:	eb18 080a 	adds.w	r8, r8, sl
 8005b22:	eb49 090b 	adc.w	r9, r9, fp
 8005b26:	f04f 0100 	mov.w	r1, #0
 8005b2a:	f04f 0200 	mov.w	r2, #0
 8005b2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b3a:	4688      	mov	r8, r1
 8005b3c:	4691      	mov	r9, r2
 8005b3e:	eb1a 0508 	adds.w	r5, sl, r8
 8005b42:	eb4b 0609 	adc.w	r6, fp, r9
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	f04f 0400 	mov.w	r4, #0
 8005b58:	0094      	lsls	r4, r2, #2
 8005b5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b5e:	008b      	lsls	r3, r1, #2
 8005b60:	461a      	mov	r2, r3
 8005b62:	4623      	mov	r3, r4
 8005b64:	4628      	mov	r0, r5
 8005b66:	4631      	mov	r1, r6
 8005b68:	f7fa fb82 	bl	8000270 <__aeabi_uldivmod>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	461a      	mov	r2, r3
 8005b72:	4b50      	ldr	r3, [pc, #320]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005b74:	fba3 2302 	umull	r2, r3, r3, r2
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	469b      	mov	fp, r3
 8005b82:	f04f 0c00 	mov.w	ip, #0
 8005b86:	46d9      	mov	r9, fp
 8005b88:	46e2      	mov	sl, ip
 8005b8a:	eb19 0309 	adds.w	r3, r9, r9
 8005b8e:	eb4a 040a 	adc.w	r4, sl, sl
 8005b92:	4699      	mov	r9, r3
 8005b94:	46a2      	mov	sl, r4
 8005b96:	eb19 090b 	adds.w	r9, r9, fp
 8005b9a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b9e:	f04f 0100 	mov.w	r1, #0
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005baa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bb2:	4689      	mov	r9, r1
 8005bb4:	4692      	mov	sl, r2
 8005bb6:	eb1b 0509 	adds.w	r5, fp, r9
 8005bba:	eb4c 060a 	adc.w	r6, ip, sl
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	f04f 0300 	mov.w	r3, #0
 8005bcc:	f04f 0400 	mov.w	r4, #0
 8005bd0:	0094      	lsls	r4, r2, #2
 8005bd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bd6:	008b      	lsls	r3, r1, #2
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4623      	mov	r3, r4
 8005bdc:	4628      	mov	r0, r5
 8005bde:	4631      	mov	r1, r6
 8005be0:	f7fa fb46 	bl	8000270 <__aeabi_uldivmod>
 8005be4:	4603      	mov	r3, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	461a      	mov	r2, r3
 8005bea:	4b32      	ldr	r3, [pc, #200]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005bec:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	2164      	movs	r1, #100	; 0x64
 8005bf4:	fb01 f303 	mul.w	r3, r1, r3
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	3332      	adds	r3, #50	; 0x32
 8005bfe:	4a2d      	ldr	r2, [pc, #180]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005c00:	fba2 2303 	umull	r2, r3, r2, r3
 8005c04:	095b      	lsrs	r3, r3, #5
 8005c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c0a:	4498      	add	r8, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	469b      	mov	fp, r3
 8005c10:	f04f 0c00 	mov.w	ip, #0
 8005c14:	46d9      	mov	r9, fp
 8005c16:	46e2      	mov	sl, ip
 8005c18:	eb19 0309 	adds.w	r3, r9, r9
 8005c1c:	eb4a 040a 	adc.w	r4, sl, sl
 8005c20:	4699      	mov	r9, r3
 8005c22:	46a2      	mov	sl, r4
 8005c24:	eb19 090b 	adds.w	r9, r9, fp
 8005c28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c2c:	f04f 0100 	mov.w	r1, #0
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c40:	4689      	mov	r9, r1
 8005c42:	4692      	mov	sl, r2
 8005c44:	eb1b 0509 	adds.w	r5, fp, r9
 8005c48:	eb4c 060a 	adc.w	r6, ip, sl
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	4619      	mov	r1, r3
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	f04f 0300 	mov.w	r3, #0
 8005c5a:	f04f 0400 	mov.w	r4, #0
 8005c5e:	0094      	lsls	r4, r2, #2
 8005c60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c64:	008b      	lsls	r3, r1, #2
 8005c66:	461a      	mov	r2, r3
 8005c68:	4623      	mov	r3, r4
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	4631      	mov	r1, r6
 8005c6e:	f7fa faff 	bl	8000270 <__aeabi_uldivmod>
 8005c72:	4603      	mov	r3, r0
 8005c74:	460c      	mov	r4, r1
 8005c76:	461a      	mov	r2, r3
 8005c78:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005c7a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	2164      	movs	r1, #100	; 0x64
 8005c82:	fb01 f303 	mul.w	r3, r1, r3
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	3332      	adds	r3, #50	; 0x32
 8005c8c:	4a09      	ldr	r2, [pc, #36]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c92:	095b      	lsrs	r3, r3, #5
 8005c94:	f003 020f 	and.w	r2, r3, #15
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4442      	add	r2, r8
 8005c9e:	609a      	str	r2, [r3, #8]
}
 8005ca0:	e7ff      	b.n	8005ca2 <UART_SetConfig+0x6e2>
 8005ca2:	bf00      	nop
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cac:	40011000 	.word	0x40011000
 8005cb0:	40011400 	.word	0x40011400
 8005cb4:	51eb851f 	.word	0x51eb851f

08005cb8 <camera_init>:
/*** Internal Static Variables ***/
/*** Internal Function Declarations ***/

/*** External Function Defines ***/
RET camera_init()
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
  return ov7670_init(&hdcmi, &hdma_dcmi, &hi2c1);
 8005cbc:	4a03      	ldr	r2, [pc, #12]	; (8005ccc <camera_init+0x14>)
 8005cbe:	4904      	ldr	r1, [pc, #16]	; (8005cd0 <camera_init+0x18>)
 8005cc0:	4804      	ldr	r0, [pc, #16]	; (8005cd4 <camera_init+0x1c>)
 8005cc2:	f003 f821 	bl	8008d08 <ov7670_init>
 8005cc6:	4603      	mov	r3, r0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	20012f38 	.word	0x20012f38
 8005cd0:	20012f8c 	.word	0x20012f8c
 8005cd4:	20013214 	.word	0x20013214

08005cd8 <camera_config>:
{
  return ov7670_read(regAddr, data);
}

RET camera_config(uint32_t mode)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t ov7670Mode;
  switch (mode){
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <camera_config+0x14>
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d003      	beq.n	8005cf2 <camera_config+0x1a>
 8005cea:	e005      	b.n	8005cf8 <camera_config+0x20>
  case CAMERA_MODE_QVGA_RGB565:
    ov7670Mode = OV7670_MODE_QVGA_RGB565;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]
    break;
 8005cf0:	e004      	b.n	8005cfc <camera_config+0x24>
  case CAMERA_MODE_QVGA_YUV:
    ov7670Mode = OV7670_MODE_QVGA_YUV;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
    break;
 8005cf6:	e001      	b.n	8005cfc <camera_config+0x24>
  default:
  //  printf("camera mode %d is not supported\n", mode);
    return RET_ERR;
 8005cf8:	4b04      	ldr	r3, [pc, #16]	; (8005d0c <camera_config+0x34>)
 8005cfa:	e003      	b.n	8005d04 <camera_config+0x2c>
  }
  return ov7670_config(ov7670Mode);
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f003 f84b 	bl	8008d98 <ov7670_config>
 8005d02:	4603      	mov	r3, r0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	80000001 	.word	0x80000001

08005d10 <camera_startCap>:

RET camera_startCap(uint32_t capMode, uint32_t destHandle)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t ov7670CapMode;
  switch (capMode){
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <camera_startCap+0x16>
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d003      	beq.n	8005d2c <camera_startCap+0x1c>
 8005d24:	e005      	b.n	8005d32 <camera_startCap+0x22>
  case CAMERA_CAP_CONTINUOUS:
    ov7670CapMode = OV7670_CAP_CONTINUOUS;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
    break;
 8005d2a:	e004      	b.n	8005d36 <camera_startCap+0x26>
  case CAMERA_CAP_SINGLE_FRAME:
    ov7670CapMode = OV7670_CAP_SINGLE_FRAME;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]
    break;
 8005d30:	e001      	b.n	8005d36 <camera_startCap+0x26>
  default:
 //   printf("cap mode %d is not supported\n", capMode);
    return RET_ERR;
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <camera_startCap+0x38>)
 8005d34:	e004      	b.n	8005d40 <camera_startCap+0x30>
  }
  return ov7670_startCap(ov7670CapMode, (uint32_t)destHandle);  //(uint32_t)
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f003 f85d 	bl	8008df8 <ov7670_startCap>
 8005d3e:	4603      	mov	r3, r0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	80000001 	.word	0x80000001

08005d4c <camera_stopCap>:

RET camera_stopCap()
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  return ov7670_stopCap();
 8005d50:	f003 f880 	bl	8008e54 <ov7670_stopCap>
 8005d54:	4603      	mov	r3, r0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	af00      	add	r7, sp, #0

}
 8005d5e:	bf00      	nop
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <DESELECT>:

static
inline void DESELECT(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0

}
 8005d6c:	bf00      	nop
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
	...

08005d78 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8005d82:	bf00      	nop
 8005d84:	4808      	ldr	r0, [pc, #32]	; (8005da8 <xmit_spi+0x30>)
 8005d86:	f7ff f88f 	bl	8004ea8 <HAL_SPI_GetState>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d1f9      	bne.n	8005d84 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 8005d90:	1df9      	adds	r1, r7, #7
 8005d92:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d96:	2201      	movs	r2, #1
 8005d98:	4803      	ldr	r0, [pc, #12]	; (8005da8 <xmit_spi+0x30>)
 8005d9a:	f7fe fdaf 	bl	80048fc <HAL_SPI_Transmit>
}
 8005d9e:	bf00      	nop
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	2001335c 	.word	0x2001335c

08005dac <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8005db2:	23ff      	movs	r3, #255	; 0xff
 8005db4:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8005dba:	bf00      	nop
 8005dbc:	4809      	ldr	r0, [pc, #36]	; (8005de4 <rcvr_spi+0x38>)
 8005dbe:	f7ff f873 	bl	8004ea8 <HAL_SPI_GetState>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d1f9      	bne.n	8005dbc <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8005dc8:	1dba      	adds	r2, r7, #6
 8005dca:	1df9      	adds	r1, r7, #7
 8005dcc:	f241 3388 	movw	r3, #5000	; 0x1388
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	4803      	ldr	r0, [pc, #12]	; (8005de4 <rcvr_spi+0x38>)
 8005dd6:	f7fe fec5 	bl	8004b64 <HAL_SPI_TransmitReceive>

	return Data;
 8005dda:	79bb      	ldrb	r3, [r7, #6]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	2001335c 	.word	0x2001335c

08005de8 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8005df0:	f7ff ffdc 	bl	8005dac <rcvr_spi>
 8005df4:	4603      	mov	r3, r0
 8005df6:	461a      	mov	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	701a      	strb	r2, [r3, #0]
}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8005e0a:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <wait_ready+0x34>)
 8005e0c:	2232      	movs	r2, #50	; 0x32
 8005e0e:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8005e10:	f7ff ffcc 	bl	8005dac <rcvr_spi>
	do
		res = rcvr_spi();
 8005e14:	f7ff ffca 	bl	8005dac <rcvr_spi>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	2bff      	cmp	r3, #255	; 0xff
 8005e20:	d004      	beq.n	8005e2c <wait_ready+0x28>
 8005e22:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <wait_ready+0x34>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1f3      	bne.n	8005e14 <wait_ready+0x10>

	return res;
 8005e2c:	79fb      	ldrb	r3, [r7, #7]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	2000008d 	.word	0x2000008d

08005e3c <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8005e42:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005e46:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8005e48:	f7ff ff8e 	bl	8005d68 <DESELECT>

	for (i = 0; i < 10; i++)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	73fb      	strb	r3, [r7, #15]
 8005e50:	e005      	b.n	8005e5e <power_on+0x22>
		xmit_spi(0xFF);
 8005e52:	20ff      	movs	r0, #255	; 0xff
 8005e54:	f7ff ff90 	bl	8005d78 <xmit_spi>
	for (i = 0; i < 10; i++)
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	73fb      	strb	r3, [r7, #15]
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	2b09      	cmp	r3, #9
 8005e62:	d9f6      	bls.n	8005e52 <power_on+0x16>

	SELECT();
 8005e64:	f7ff ff79 	bl	8005d5a <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8005e68:	2340      	movs	r3, #64	; 0x40
 8005e6a:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8005e70:	2300      	movs	r3, #0
 8005e72:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8005e7c:	2395      	movs	r3, #149	; 0x95
 8005e7e:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8005e80:	2300      	movs	r3, #0
 8005e82:	73fb      	strb	r3, [r7, #15]
 8005e84:	e00b      	b.n	8005e9e <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	f107 0210 	add.w	r2, r7, #16
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff ff70 	bl	8005d78 <xmit_spi>
	for (i = 0; i < 6; i++)
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	73fb      	strb	r3, [r7, #15]
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	2b05      	cmp	r3, #5
 8005ea2:	d9f0      	bls.n	8005e86 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8005ea4:	e002      	b.n	8005eac <power_on+0x70>
		Count--;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8005eac:	f7ff ff7e 	bl	8005dac <rcvr_spi>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d002      	beq.n	8005ebc <power_on+0x80>
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1f4      	bne.n	8005ea6 <power_on+0x6a>

	DESELECT();
 8005ebc:	f7ff ff54 	bl	8005d68 <DESELECT>
	xmit_spi(0XFF);
 8005ec0:	20ff      	movs	r0, #255	; 0xff
 8005ec2:	f7ff ff59 	bl	8005d78 <xmit_spi>

	PowerFlag = 1;
 8005ec6:	4b03      	ldr	r3, [pc, #12]	; (8005ed4 <power_on+0x98>)
 8005ec8:	2201      	movs	r2, #1
 8005eca:	701a      	strb	r2, [r3, #0]
}
 8005ecc:	bf00      	nop
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	2000008f 	.word	0x2000008f

08005ed8 <power_off>:

static
void power_off(void) {
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8005edc:	4b03      	ldr	r3, [pc, #12]	; (8005eec <power_off+0x14>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	701a      	strb	r2, [r3, #0]
}
 8005ee2:	bf00      	nop
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	2000008f 	.word	0x2000008f

08005ef0 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
	return PowerFlag;
 8005ef4:	4b03      	ldr	r3, [pc, #12]	; (8005f04 <chk_power+0x14>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	2000008f 	.word	0x2000008f

08005f08 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8005f12:	4b17      	ldr	r3, [pc, #92]	; (8005f70 <rcvr_datablock+0x68>)
 8005f14:	220a      	movs	r2, #10
 8005f16:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8005f18:	f7ff ff48 	bl	8005dac <rcvr_spi>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	2bff      	cmp	r3, #255	; 0xff
 8005f24:	d104      	bne.n	8005f30 <rcvr_datablock+0x28>
 8005f26:	4b12      	ldr	r3, [pc, #72]	; (8005f70 <rcvr_datablock+0x68>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1f3      	bne.n	8005f18 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	2bfe      	cmp	r3, #254	; 0xfe
 8005f34:	d001      	beq.n	8005f3a <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8005f36:	2300      	movs	r3, #0
 8005f38:	e016      	b.n	8005f68 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff ff51 	bl	8005de8 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	1c5a      	adds	r2, r3, #1
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff ff4b 	bl	8005de8 <rcvr_spi_m>
	} while (btr -= 2);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	3b02      	subs	r3, #2
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1ed      	bne.n	8005f3a <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8005f5e:	f7ff ff25 	bl	8005dac <rcvr_spi>
	rcvr_spi();
 8005f62:	f7ff ff23 	bl	8005dac <rcvr_spi>

	return TRUE; /* Return with success */
 8005f66:	2301      	movs	r3, #1
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	2000008c 	.word	0x2000008c

08005f74 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8005f84:	f7ff ff3e 	bl	8005e04 <wait_ready>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2bff      	cmp	r3, #255	; 0xff
 8005f8c:	d001      	beq.n	8005f92 <xmit_datablock+0x1e>
		return FALSE;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e040      	b.n	8006014 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff feef 	bl	8005d78 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8005f9a:	78fb      	ldrb	r3, [r7, #3]
 8005f9c:	2bfd      	cmp	r3, #253	; 0xfd
 8005f9e:	d031      	beq.n	8006004 <xmit_datablock+0x90>
		wc = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff fee3 	bl	8005d78 <xmit_spi>
			xmit_spi(*buff++);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7ff fedc 	bl	8005d78 <xmit_spi>
		} while (--wc);
 8005fc0:	7bbb      	ldrb	r3, [r7, #14]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	73bb      	strb	r3, [r7, #14]
 8005fc6:	7bbb      	ldrb	r3, [r7, #14]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1eb      	bne.n	8005fa4 <xmit_datablock+0x30>

		rcvr_spi();
 8005fcc:	f7ff feee 	bl	8005dac <rcvr_spi>
		rcvr_spi();
 8005fd0:	f7ff feec 	bl	8005dac <rcvr_spi>

		while (i <= 64) {
 8005fd4:	e00b      	b.n	8005fee <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8005fd6:	f7ff fee9 	bl	8005dac <rcvr_spi>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	f003 031f 	and.w	r3, r3, #31
 8005fe4:	2b05      	cmp	r3, #5
 8005fe6:	d006      	beq.n	8005ff6 <xmit_datablock+0x82>
				break;
			i++;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	3301      	adds	r3, #1
 8005fec:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b40      	cmp	r3, #64	; 0x40
 8005ff2:	d9f0      	bls.n	8005fd6 <xmit_datablock+0x62>
 8005ff4:	e000      	b.n	8005ff8 <xmit_datablock+0x84>
				break;
 8005ff6:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8005ff8:	bf00      	nop
 8005ffa:	f7ff fed7 	bl	8005dac <rcvr_spi>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0fa      	beq.n	8005ffa <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	f003 031f 	and.w	r3, r3, #31
 800600a:	2b05      	cmp	r3, #5
 800600c:	d101      	bne.n	8006012 <xmit_datablock+0x9e>
		return TRUE;
 800600e:	2301      	movs	r3, #1
 8006010:	e000      	b.n	8006014 <xmit_datablock+0xa0>
	else
		return FALSE;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	6039      	str	r1, [r7, #0]
 8006026:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8006028:	f7ff feec 	bl	8005e04 <wait_ready>
 800602c:	4603      	mov	r3, r0
 800602e:	2bff      	cmp	r3, #255	; 0xff
 8006030:	d001      	beq.n	8006036 <send_cmd+0x1a>
		return 0xFF;
 8006032:	23ff      	movs	r3, #255	; 0xff
 8006034:	e040      	b.n	80060b8 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 8006036:	79fb      	ldrb	r3, [r7, #7]
 8006038:	4618      	mov	r0, r3
 800603a:	f7ff fe9d 	bl	8005d78 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	0e1b      	lsrs	r3, r3, #24
 8006042:	b2db      	uxtb	r3, r3
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff fe97 	bl	8005d78 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	0c1b      	lsrs	r3, r3, #16
 800604e:	b2db      	uxtb	r3, r3
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff fe91 	bl	8005d78 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	0a1b      	lsrs	r3, r3, #8
 800605a:	b2db      	uxtb	r3, r3
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff fe8b 	bl	8005d78 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	b2db      	uxtb	r3, r3
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff fe86 	bl	8005d78 <xmit_spi>
	n = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	d101      	bne.n	800607a <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8006076:	2395      	movs	r3, #149	; 0x95
 8006078:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 800607a:	79fb      	ldrb	r3, [r7, #7]
 800607c:	2b48      	cmp	r3, #72	; 0x48
 800607e:	d101      	bne.n	8006084 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8006080:	2387      	movs	r3, #135	; 0x87
 8006082:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff fe76 	bl	8005d78 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 800608c:	79fb      	ldrb	r3, [r7, #7]
 800608e:	2b4c      	cmp	r3, #76	; 0x4c
 8006090:	d101      	bne.n	8006096 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8006092:	f7ff fe8b 	bl	8005dac <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8006096:	230a      	movs	r3, #10
 8006098:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 800609a:	f7ff fe87 	bl	8005dac <rcvr_spi>
 800609e:	4603      	mov	r3, r0
 80060a0:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 80060a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	da05      	bge.n	80060b6 <send_cmd+0x9a>
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	73fb      	strb	r3, [r7, #15]
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1f1      	bne.n	800609a <send_cmd+0x7e>

	return res; /* Return with the response value */
 80060b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 80060c0:	b590      	push	{r4, r7, lr}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	4603      	mov	r3, r0
 80060c8:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80060d0:	2301      	movs	r3, #1
 80060d2:	e0d5      	b.n	8006280 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 80060d4:	4b6c      	ldr	r3, [pc, #432]	; (8006288 <disk_initialize+0x1c8>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 80060e2:	4b69      	ldr	r3, [pc, #420]	; (8006288 <disk_initialize+0x1c8>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	e0ca      	b.n	8006280 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 80060ea:	f7ff fea7 	bl	8005e3c <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 80060ee:	f7ff fe34 	bl	8005d5a <SELECT>
	ty = 0;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 80060f6:	2100      	movs	r1, #0
 80060f8:	2040      	movs	r0, #64	; 0x40
 80060fa:	f7ff ff8f 	bl	800601c <send_cmd>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b01      	cmp	r3, #1
 8006102:	f040 80a5 	bne.w	8006250 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8006106:	4b61      	ldr	r3, [pc, #388]	; (800628c <disk_initialize+0x1cc>)
 8006108:	2264      	movs	r2, #100	; 0x64
 800610a:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 800610c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006110:	2048      	movs	r0, #72	; 0x48
 8006112:	f7ff ff83 	bl	800601c <send_cmd>
 8006116:	4603      	mov	r3, r0
 8006118:	2b01      	cmp	r3, #1
 800611a:	d158      	bne.n	80061ce <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 800611c:	2300      	movs	r3, #0
 800611e:	73fb      	strb	r3, [r7, #15]
 8006120:	e00c      	b.n	800613c <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 8006122:	7bfc      	ldrb	r4, [r7, #15]
 8006124:	f7ff fe42 	bl	8005dac <rcvr_spi>
 8006128:	4603      	mov	r3, r0
 800612a:	461a      	mov	r2, r3
 800612c:	f107 0310 	add.w	r3, r7, #16
 8006130:	4423      	add	r3, r4
 8006132:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8006136:	7bfb      	ldrb	r3, [r7, #15]
 8006138:	3301      	adds	r3, #1
 800613a:	73fb      	strb	r3, [r7, #15]
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	2b03      	cmp	r3, #3
 8006140:	d9ef      	bls.n	8006122 <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 8006142:	7abb      	ldrb	r3, [r7, #10]
 8006144:	2b01      	cmp	r3, #1
 8006146:	f040 8083 	bne.w	8006250 <disk_initialize+0x190>
 800614a:	7afb      	ldrb	r3, [r7, #11]
 800614c:	2baa      	cmp	r3, #170	; 0xaa
 800614e:	d17f      	bne.n	8006250 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8006150:	2100      	movs	r1, #0
 8006152:	2077      	movs	r0, #119	; 0x77
 8006154:	f7ff ff62 	bl	800601c <send_cmd>
 8006158:	4603      	mov	r3, r0
 800615a:	2b01      	cmp	r3, #1
 800615c:	d807      	bhi.n	800616e <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 800615e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006162:	2069      	movs	r0, #105	; 0x69
 8006164:	f7ff ff5a 	bl	800601c <send_cmd>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d005      	beq.n	800617a <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 800616e:	4b47      	ldr	r3, [pc, #284]	; (800628c <disk_initialize+0x1cc>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1eb      	bne.n	8006150 <disk_initialize+0x90>
 8006178:	e000      	b.n	800617c <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 800617a:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 800617c:	4b43      	ldr	r3, [pc, #268]	; (800628c <disk_initialize+0x1cc>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d064      	beq.n	8006250 <disk_initialize+0x190>
 8006186:	2100      	movs	r1, #0
 8006188:	207a      	movs	r0, #122	; 0x7a
 800618a:	f7ff ff47 	bl	800601c <send_cmd>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d15d      	bne.n	8006250 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8006194:	2300      	movs	r3, #0
 8006196:	73fb      	strb	r3, [r7, #15]
 8006198:	e00c      	b.n	80061b4 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 800619a:	7bfc      	ldrb	r4, [r7, #15]
 800619c:	f7ff fe06 	bl	8005dac <rcvr_spi>
 80061a0:	4603      	mov	r3, r0
 80061a2:	461a      	mov	r2, r3
 80061a4:	f107 0310 	add.w	r3, r7, #16
 80061a8:	4423      	add	r3, r4
 80061aa:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	3301      	adds	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	2b03      	cmp	r3, #3
 80061b8:	d9ef      	bls.n	800619a <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 80061ba:	7a3b      	ldrb	r3, [r7, #8]
 80061bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <disk_initialize+0x108>
 80061c4:	2306      	movs	r3, #6
 80061c6:	e000      	b.n	80061ca <disk_initialize+0x10a>
 80061c8:	2302      	movs	r3, #2
 80061ca:	73bb      	strb	r3, [r7, #14]
 80061cc:	e040      	b.n	8006250 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80061ce:	2100      	movs	r1, #0
 80061d0:	2077      	movs	r0, #119	; 0x77
 80061d2:	f7ff ff23 	bl	800601c <send_cmd>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d808      	bhi.n	80061ee <disk_initialize+0x12e>
 80061dc:	2100      	movs	r1, #0
 80061de:	2069      	movs	r0, #105	; 0x69
 80061e0:	f7ff ff1c 	bl	800601c <send_cmd>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d801      	bhi.n	80061ee <disk_initialize+0x12e>
 80061ea:	2302      	movs	r3, #2
 80061ec:	e000      	b.n	80061f0 <disk_initialize+0x130>
 80061ee:	2301      	movs	r3, #1
 80061f0:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 80061f2:	7bbb      	ldrb	r3, [r7, #14]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d10e      	bne.n	8006216 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 80061f8:	2100      	movs	r1, #0
 80061fa:	2077      	movs	r0, #119	; 0x77
 80061fc:	f7ff ff0e 	bl	800601c <send_cmd>
 8006200:	4603      	mov	r3, r0
 8006202:	2b01      	cmp	r3, #1
 8006204:	d80e      	bhi.n	8006224 <disk_initialize+0x164>
 8006206:	2100      	movs	r1, #0
 8006208:	2069      	movs	r0, #105	; 0x69
 800620a:	f7ff ff07 	bl	800601c <send_cmd>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d107      	bne.n	8006224 <disk_initialize+0x164>
						break; /* ACMD41 */
 8006214:	e00d      	b.n	8006232 <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8006216:	2100      	movs	r1, #0
 8006218:	2041      	movs	r0, #65	; 0x41
 800621a:	f7ff feff 	bl	800601c <send_cmd>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8006224:	4b19      	ldr	r3, [pc, #100]	; (800628c <disk_initialize+0x1cc>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e1      	bne.n	80061f2 <disk_initialize+0x132>
 800622e:	e000      	b.n	8006232 <disk_initialize+0x172>
						break; /* CMD1 */
 8006230:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 8006232:	4b16      	ldr	r3, [pc, #88]	; (800628c <disk_initialize+0x1cc>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <disk_initialize+0x18c>
 800623c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006240:	2050      	movs	r0, #80	; 0x50
 8006242:	f7ff feeb 	bl	800601c <send_cmd>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <disk_initialize+0x190>
				ty = 0;
 800624c:	2300      	movs	r3, #0
 800624e:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8006250:	4a0f      	ldr	r2, [pc, #60]	; (8006290 <disk_initialize+0x1d0>)
 8006252:	7bbb      	ldrb	r3, [r7, #14]
 8006254:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 8006256:	f7ff fd87 	bl	8005d68 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 800625a:	f7ff fda7 	bl	8005dac <rcvr_spi>

	if (ty) /* Initialization succeded */
 800625e:	7bbb      	ldrb	r3, [r7, #14]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 8006264:	4b08      	ldr	r3, [pc, #32]	; (8006288 <disk_initialize+0x1c8>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	f023 0301 	bic.w	r3, r3, #1
 800626e:	b2da      	uxtb	r2, r3
 8006270:	4b05      	ldr	r3, [pc, #20]	; (8006288 <disk_initialize+0x1c8>)
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	e001      	b.n	800627a <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 8006276:	f7ff fe2f 	bl	8005ed8 <power_off>

	return Stat;
 800627a:	4b03      	ldr	r3, [pc, #12]	; (8006288 <disk_initialize+0x1c8>)
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	b2db      	uxtb	r3, r3
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	bd90      	pop	{r4, r7, pc}
 8006288:	20000005 	.word	0x20000005
 800628c:	2000008c 	.word	0x2000008c
 8006290:	2000008e 	.word	0x2000008e

08006294 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	4603      	mov	r3, r0
 800629c:	71fb      	strb	r3, [r7, #7]
	if (drv)
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80062a4:	2301      	movs	r3, #1
 80062a6:	e002      	b.n	80062ae <disk_status+0x1a>
	return Stat;
 80062a8:	4b04      	ldr	r3, [pc, #16]	; (80062bc <disk_status+0x28>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	b2db      	uxtb	r3, r3
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	20000005 	.word	0x20000005

080062c0 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60b9      	str	r1, [r7, #8]
 80062c8:	607a      	str	r2, [r7, #4]
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	4603      	mov	r3, r0
 80062ce:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d102      	bne.n	80062dc <disk_read+0x1c>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <disk_read+0x20>
		return RES_PARERR;
 80062dc:	2304      	movs	r3, #4
 80062de:	e051      	b.n	8006384 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 80062e0:	4b2a      	ldr	r3, [pc, #168]	; (800638c <disk_read+0xcc>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <disk_read+0x32>
		return RES_NOTRDY;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e048      	b.n	8006384 <disk_read+0xc4>

	if (!(CardType & 4))
 80062f2:	4b27      	ldr	r3, [pc, #156]	; (8006390 <disk_read+0xd0>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	f003 0304 	and.w	r3, r3, #4
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d102      	bne.n	8006304 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	025b      	lsls	r3, r3, #9
 8006302:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8006304:	f7ff fd29 	bl	8005d5a <SELECT>

	if (count == 1) { /* Single block read */
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d111      	bne.n	8006332 <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	2051      	movs	r0, #81	; 0x51
 8006312:	f7ff fe83 	bl	800601c <send_cmd>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d129      	bne.n	8006370 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 800631c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006320:	68b8      	ldr	r0, [r7, #8]
 8006322:	f7ff fdf1 	bl	8005f08 <rcvr_datablock>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d021      	beq.n	8006370 <disk_read+0xb0>
			count = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	e01e      	b.n	8006370 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	2052      	movs	r0, #82	; 0x52
 8006336:	f7ff fe71 	bl	800601c <send_cmd>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d117      	bne.n	8006370 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8006340:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006344:	68b8      	ldr	r0, [r7, #8]
 8006346:	f7ff fddf 	bl	8005f08 <rcvr_datablock>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <disk_read+0xa6>
					break;
				buff += 512;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006356:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	3b01      	subs	r3, #1
 800635c:	603b      	str	r3, [r7, #0]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1ed      	bne.n	8006340 <disk_read+0x80>
 8006364:	e000      	b.n	8006368 <disk_read+0xa8>
					break;
 8006366:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8006368:	2100      	movs	r1, #0
 800636a:	204c      	movs	r0, #76	; 0x4c
 800636c:	f7ff fe56 	bl	800601c <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8006370:	f7ff fcfa 	bl	8005d68 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8006374:	f7ff fd1a 	bl	8005dac <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	bf14      	ite	ne
 800637e:	2301      	movne	r3, #1
 8006380:	2300      	moveq	r3, #0
 8006382:	b2db      	uxtb	r3, r3
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000005 	.word	0x20000005
 8006390:	2000008e 	.word	0x2000008e

08006394 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	607a      	str	r2, [r7, #4]
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	4603      	mov	r3, r0
 80063a2:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d102      	bne.n	80063b0 <disk_write+0x1c>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <disk_write+0x20>
		return RES_PARERR;
 80063b0:	2304      	movs	r3, #4
 80063b2:	e06b      	b.n	800648c <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 80063b4:	4b37      	ldr	r3, [pc, #220]	; (8006494 <disk_write+0x100>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <disk_write+0x32>
		return RES_NOTRDY;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e062      	b.n	800648c <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 80063c6:	4b33      	ldr	r3, [pc, #204]	; (8006494 <disk_write+0x100>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <disk_write+0x44>
		return RES_WRPRT;
 80063d4:	2302      	movs	r3, #2
 80063d6:	e059      	b.n	800648c <disk_write+0xf8>

	if (!(CardType & 4))
 80063d8:	4b2f      	ldr	r3, [pc, #188]	; (8006498 <disk_write+0x104>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	025b      	lsls	r3, r3, #9
 80063e8:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80063ea:	f7ff fcb6 	bl	8005d5a <SELECT>

	if (count == 1) { /* Single block write */
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d110      	bne.n	8006416 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	2058      	movs	r0, #88	; 0x58
 80063f8:	f7ff fe10 	bl	800601c <send_cmd>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d13a      	bne.n	8006478 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8006402:	21fe      	movs	r1, #254	; 0xfe
 8006404:	68b8      	ldr	r0, [r7, #8]
 8006406:	f7ff fdb5 	bl	8005f74 <xmit_datablock>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d033      	beq.n	8006478 <disk_write+0xe4>
			count = 0;
 8006410:	2300      	movs	r3, #0
 8006412:	603b      	str	r3, [r7, #0]
 8006414:	e030      	b.n	8006478 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8006416:	4b20      	ldr	r3, [pc, #128]	; (8006498 <disk_write+0x104>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8006422:	2100      	movs	r1, #0
 8006424:	2077      	movs	r0, #119	; 0x77
 8006426:	f7ff fdf9 	bl	800601c <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	2057      	movs	r0, #87	; 0x57
 800642e:	f7ff fdf5 	bl	800601c <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	2059      	movs	r0, #89	; 0x59
 8006436:	f7ff fdf1 	bl	800601c <send_cmd>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d11b      	bne.n	8006478 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8006440:	21fc      	movs	r1, #252	; 0xfc
 8006442:	68b8      	ldr	r0, [r7, #8]
 8006444:	f7ff fd96 	bl	8005f74 <xmit_datablock>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <disk_write+0xd0>
					break;
				buff += 512;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006454:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	3b01      	subs	r3, #1
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1ee      	bne.n	8006440 <disk_write+0xac>
 8006462:	e000      	b.n	8006466 <disk_write+0xd2>
					break;
 8006464:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8006466:	21fd      	movs	r1, #253	; 0xfd
 8006468:	2000      	movs	r0, #0
 800646a:	f7ff fd83 	bl	8005f74 <xmit_datablock>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <disk_write+0xe4>
				count = 1;
 8006474:	2301      	movs	r3, #1
 8006476:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8006478:	f7ff fc76 	bl	8005d68 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 800647c:	f7ff fc96 	bl	8005dac <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	bf14      	ite	ne
 8006486:	2301      	movne	r3, #1
 8006488:	2300      	moveq	r3, #0
 800648a:	b2db      	uxtb	r3, r3
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	20000005 	.word	0x20000005
 8006498:	2000008e 	.word	0x2000008e

0800649c <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 800649c:	b590      	push	{r4, r7, lr}
 800649e:	b08b      	sub	sp, #44	; 0x2c
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	603a      	str	r2, [r7, #0]
 80064a6:	71fb      	strb	r3, [r7, #7]
 80064a8:	460b      	mov	r3, r1
 80064aa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <disk_ioctl+0x1e>
		return RES_PARERR;
 80064b6:	2304      	movs	r3, #4
 80064b8:	e16a      	b.n	8006790 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 80064c0:	79bb      	ldrb	r3, [r7, #6]
 80064c2:	2b07      	cmp	r3, #7
 80064c4:	d127      	bne.n	8006516 <disk_ioctl+0x7a>
		switch (*ptr) {
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d00e      	beq.n	80064ec <disk_ioctl+0x50>
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d012      	beq.n	80064f8 <disk_ioctl+0x5c>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d11b      	bne.n	800650e <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 80064d6:	f7ff fd0b 	bl	8005ef0 <chk_power>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <disk_ioctl+0x48>
				power_off(); /* Power off */
 80064e0:	f7ff fcfa 	bl	8005ed8 <power_off>
			res = RES_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80064ea:	e14f      	b.n	800678c <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 80064ec:	f7ff fca6 	bl	8005e3c <power_on>
			res = RES_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80064f6:	e149      	b.n	800678c <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 80064f8:	f7ff fcfa 	bl	8005ef0 <chk_power>
 80064fc:	4602      	mov	r2, r0
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	3301      	adds	r3, #1
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800650c:	e13e      	b.n	800678c <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 800650e:	2304      	movs	r3, #4
 8006510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006514:	e13a      	b.n	800678c <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 8006516:	4ba0      	ldr	r3, [pc, #640]	; (8006798 <disk_ioctl+0x2fc>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	b2db      	uxtb	r3, r3
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8006524:	2303      	movs	r3, #3
 8006526:	e133      	b.n	8006790 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8006528:	f7ff fc17 	bl	8005d5a <SELECT>

		switch (ctrl) {
 800652c:	79bb      	ldrb	r3, [r7, #6]
 800652e:	2b35      	cmp	r3, #53	; 0x35
 8006530:	f200 811d 	bhi.w	800676e <disk_ioctl+0x2d2>
 8006534:	a201      	add	r2, pc, #4	; (adr r2, 800653c <disk_ioctl+0xa0>)
 8006536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653a:	bf00      	nop
 800653c:	080066d7 	.word	0x080066d7
 8006540:	08006615 	.word	0x08006615
 8006544:	080066c7 	.word	0x080066c7
 8006548:	0800676f 	.word	0x0800676f
 800654c:	0800676f 	.word	0x0800676f
 8006550:	0800676f 	.word	0x0800676f
 8006554:	0800676f 	.word	0x0800676f
 8006558:	0800676f 	.word	0x0800676f
 800655c:	0800676f 	.word	0x0800676f
 8006560:	0800676f 	.word	0x0800676f
 8006564:	0800676f 	.word	0x0800676f
 8006568:	0800676f 	.word	0x0800676f
 800656c:	0800676f 	.word	0x0800676f
 8006570:	0800676f 	.word	0x0800676f
 8006574:	0800676f 	.word	0x0800676f
 8006578:	0800676f 	.word	0x0800676f
 800657c:	0800676f 	.word	0x0800676f
 8006580:	0800676f 	.word	0x0800676f
 8006584:	0800676f 	.word	0x0800676f
 8006588:	0800676f 	.word	0x0800676f
 800658c:	0800676f 	.word	0x0800676f
 8006590:	0800676f 	.word	0x0800676f
 8006594:	0800676f 	.word	0x0800676f
 8006598:	0800676f 	.word	0x0800676f
 800659c:	0800676f 	.word	0x0800676f
 80065a0:	0800676f 	.word	0x0800676f
 80065a4:	0800676f 	.word	0x0800676f
 80065a8:	0800676f 	.word	0x0800676f
 80065ac:	0800676f 	.word	0x0800676f
 80065b0:	0800676f 	.word	0x0800676f
 80065b4:	0800676f 	.word	0x0800676f
 80065b8:	0800676f 	.word	0x0800676f
 80065bc:	0800676f 	.word	0x0800676f
 80065c0:	0800676f 	.word	0x0800676f
 80065c4:	0800676f 	.word	0x0800676f
 80065c8:	0800676f 	.word	0x0800676f
 80065cc:	0800676f 	.word	0x0800676f
 80065d0:	0800676f 	.word	0x0800676f
 80065d4:	0800676f 	.word	0x0800676f
 80065d8:	0800676f 	.word	0x0800676f
 80065dc:	0800676f 	.word	0x0800676f
 80065e0:	0800676f 	.word	0x0800676f
 80065e4:	0800676f 	.word	0x0800676f
 80065e8:	0800676f 	.word	0x0800676f
 80065ec:	0800676f 	.word	0x0800676f
 80065f0:	0800676f 	.word	0x0800676f
 80065f4:	0800676f 	.word	0x0800676f
 80065f8:	0800676f 	.word	0x0800676f
 80065fc:	0800676f 	.word	0x0800676f
 8006600:	0800676f 	.word	0x0800676f
 8006604:	0800676f 	.word	0x0800676f
 8006608:	080066e9 	.word	0x080066e9
 800660c:	0800670d 	.word	0x0800670d
 8006610:	08006731 	.word	0x08006731
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006614:	2100      	movs	r1, #0
 8006616:	2049      	movs	r0, #73	; 0x49
 8006618:	f7ff fd00 	bl	800601c <send_cmd>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	f040 80a9 	bne.w	8006776 <disk_ioctl+0x2da>
 8006624:	f107 030c 	add.w	r3, r7, #12
 8006628:	2110      	movs	r1, #16
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff fc6c 	bl	8005f08 <rcvr_datablock>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 809f 	beq.w	8006776 <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8006638:	7b3b      	ldrb	r3, [r7, #12]
 800663a:	099b      	lsrs	r3, r3, #6
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b01      	cmp	r3, #1
 8006640:	d10e      	bne.n	8006660 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8006642:	7d7b      	ldrb	r3, [r7, #21]
 8006644:	b29a      	uxth	r2, r3
 8006646:	7d3b      	ldrb	r3, [r7, #20]
 8006648:	b29b      	uxth	r3, r3
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	b29b      	uxth	r3, r3
 800664e:	4413      	add	r3, r2
 8006650:	b29b      	uxth	r3, r3
 8006652:	3301      	adds	r3, #1
 8006654:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8006656:	8bfb      	ldrh	r3, [r7, #30]
 8006658:	029a      	lsls	r2, r3, #10
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	e02e      	b.n	80066be <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8006660:	7c7b      	ldrb	r3, [r7, #17]
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	b2da      	uxtb	r2, r3
 8006668:	7dbb      	ldrb	r3, [r7, #22]
 800666a:	09db      	lsrs	r3, r3, #7
 800666c:	b2db      	uxtb	r3, r3
 800666e:	4413      	add	r3, r2
 8006670:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8006672:	7d7b      	ldrb	r3, [r7, #21]
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	b2db      	uxtb	r3, r3
 8006678:	f003 0306 	and.w	r3, r3, #6
 800667c:	b2db      	uxtb	r3, r3
 800667e:	4413      	add	r3, r2
 8006680:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8006682:	3302      	adds	r3, #2
 8006684:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8006688:	7d3b      	ldrb	r3, [r7, #20]
 800668a:	099b      	lsrs	r3, r3, #6
 800668c:	b2db      	uxtb	r3, r3
 800668e:	b29a      	uxth	r2, r3
 8006690:	7cfb      	ldrb	r3, [r7, #19]
 8006692:	b29b      	uxth	r3, r3
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	b29b      	uxth	r3, r3
 8006698:	4413      	add	r3, r2
 800669a:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 800669c:	7cbb      	ldrb	r3, [r7, #18]
 800669e:	029b      	lsls	r3, r3, #10
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	4413      	add	r3, r2
 80066aa:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80066ac:	3301      	adds	r3, #1
 80066ae:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80066b0:	8bfa      	ldrh	r2, [r7, #30]
 80066b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066b6:	3b09      	subs	r3, #9
 80066b8:	409a      	lsls	r2, r3
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80066c4:	e057      	b.n	8006776 <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066cc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80066d4:	e056      	b.n	8006784 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 80066d6:	f7ff fb95 	bl	8005e04 <wait_ready>
 80066da:	4603      	mov	r3, r0
 80066dc:	2bff      	cmp	r3, #255	; 0xff
 80066de:	d14c      	bne.n	800677a <disk_ioctl+0x2de>
				res = RES_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80066e6:	e048      	b.n	800677a <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 80066e8:	2100      	movs	r1, #0
 80066ea:	2049      	movs	r0, #73	; 0x49
 80066ec:	f7ff fc96 	bl	800601c <send_cmd>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d143      	bne.n	800677e <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 80066f6:	2110      	movs	r1, #16
 80066f8:	6a38      	ldr	r0, [r7, #32]
 80066fa:	f7ff fc05 	bl	8005f08 <rcvr_datablock>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d03c      	beq.n	800677e <disk_ioctl+0x2e2>
				res = RES_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800670a:	e038      	b.n	800677e <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 800670c:	2100      	movs	r1, #0
 800670e:	204a      	movs	r0, #74	; 0x4a
 8006710:	f7ff fc84 	bl	800601c <send_cmd>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d133      	bne.n	8006782 <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 800671a:	2110      	movs	r1, #16
 800671c:	6a38      	ldr	r0, [r7, #32]
 800671e:	f7ff fbf3 	bl	8005f08 <rcvr_datablock>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d02c      	beq.n	8006782 <disk_ioctl+0x2e6>
				res = RES_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800672e:	e028      	b.n	8006782 <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8006730:	2100      	movs	r1, #0
 8006732:	207a      	movs	r0, #122	; 0x7a
 8006734:	f7ff fc72 	bl	800601c <send_cmd>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d117      	bne.n	800676e <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 800673e:	2300      	movs	r3, #0
 8006740:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006744:	e00b      	b.n	800675e <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8006746:	6a3c      	ldr	r4, [r7, #32]
 8006748:	1c63      	adds	r3, r4, #1
 800674a:	623b      	str	r3, [r7, #32]
 800674c:	f7ff fb2e 	bl	8005dac <rcvr_spi>
 8006750:	4603      	mov	r3, r0
 8006752:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8006754:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006758:	3301      	adds	r3, #1
 800675a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800675e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006762:	2b03      	cmp	r3, #3
 8006764:	d9ef      	bls.n	8006746 <disk_ioctl+0x2aa>
				res = RES_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800676c:	e00a      	b.n	8006784 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 800676e:	2304      	movs	r3, #4
 8006770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006774:	e006      	b.n	8006784 <disk_ioctl+0x2e8>
			break;
 8006776:	bf00      	nop
 8006778:	e004      	b.n	8006784 <disk_ioctl+0x2e8>
			break;
 800677a:	bf00      	nop
 800677c:	e002      	b.n	8006784 <disk_ioctl+0x2e8>
			break;
 800677e:	bf00      	nop
 8006780:	e000      	b.n	8006784 <disk_ioctl+0x2e8>
			break;
 8006782:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8006784:	f7ff faf0 	bl	8005d68 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8006788:	f7ff fb10 	bl	8005dac <rcvr_spi>
	}

	return res;
 800678c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006790:	4618      	mov	r0, r3
 8006792:	372c      	adds	r7, #44	; 0x2c
 8006794:	46bd      	mov	sp, r7
 8006796:	bd90      	pop	{r4, r7, pc}
 8006798:	20000005 	.word	0x20000005

0800679c <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 80067a2:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <disk_timerproc+0x44>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	71fb      	strb	r3, [r7, #7]
	if (n)
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <disk_timerproc+0x1e>
		Timer1 = --n;
 80067ae:	79fb      	ldrb	r3, [r7, #7]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	71fb      	strb	r3, [r7, #7]
 80067b4:	4a0a      	ldr	r2, [pc, #40]	; (80067e0 <disk_timerproc+0x44>)
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 80067ba:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <disk_timerproc+0x48>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	71fb      	strb	r3, [r7, #7]
	if (n)
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d005      	beq.n	80067d2 <disk_timerproc+0x36>
		Timer2 = --n;
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	71fb      	strb	r3, [r7, #7]
 80067cc:	4a05      	ldr	r2, [pc, #20]	; (80067e4 <disk_timerproc+0x48>)
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	7013      	strb	r3, [r2, #0]

}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	2000008c 	.word	0x2000008c
 80067e4:	2000008d 	.word	0x2000008d

080067e8 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	af00      	add	r7, sp, #0
	++sdcard_timer;
 80067ec:	4b09      	ldr	r3, [pc, #36]	; (8006814 <sdcard_systick_timerproc+0x2c>)
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	3301      	adds	r3, #1
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	4b07      	ldr	r3, [pc, #28]	; (8006814 <sdcard_systick_timerproc+0x2c>)
 80067f8:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 80067fa:	4b06      	ldr	r3, [pc, #24]	; (8006814 <sdcard_systick_timerproc+0x2c>)
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b09      	cmp	r3, #9
 8006802:	d904      	bls.n	800680e <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8006804:	4b03      	ldr	r3, [pc, #12]	; (8006814 <sdcard_systick_timerproc+0x2c>)
 8006806:	2200      	movs	r2, #0
 8006808:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 800680a:	f7ff ffc7 	bl	800679c <disk_timerproc>
	}
}
 800680e:	bf00      	nop
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	200002f4 	.word	0x200002f4

08006818 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 800681c:	4b02      	ldr	r3, [pc, #8]	; (8006828 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 800681e:	4618      	mov	r0, r3
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	36c55cc0 	.word	0x36c55cc0

0800682c <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3301      	adds	r3, #1
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800683c:	89fb      	ldrh	r3, [r7, #14]
 800683e:	021b      	lsls	r3, r3, #8
 8006840:	b21a      	sxth	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	b21b      	sxth	r3, r3
 8006848:	4313      	orrs	r3, r2
 800684a:	b21b      	sxth	r3, r3
 800684c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800684e:	89fb      	ldrh	r3, [r7, #14]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3303      	adds	r3, #3
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	021b      	lsls	r3, r3, #8
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	3202      	adds	r2, #2
 8006874:	7812      	ldrb	r2, [r2, #0]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	3201      	adds	r2, #1
 8006882:	7812      	ldrb	r2, [r2, #0]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	021b      	lsls	r3, r3, #8
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	7812      	ldrb	r2, [r2, #0]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]
	return rv;
 8006894:	68fb      	ldr	r3, [r7, #12]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	460b      	mov	r3, r1
 80068ac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	887a      	ldrh	r2, [r7, #2]
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	701a      	strb	r2, [r3, #0]
 80068ba:	887b      	ldrh	r3, [r7, #2]
 80068bc:	0a1b      	lsrs	r3, r3, #8
 80068be:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	607a      	str	r2, [r7, #4]
 80068c6:	887a      	ldrh	r2, [r7, #2]
 80068c8:	b2d2      	uxtb	r2, r2
 80068ca:	701a      	strb	r2, [r3, #0]
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	0a1b      	lsrs	r3, r3, #8
 80068f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	607a      	str	r2, [r7, #4]
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	0a1b      	lsrs	r3, r3, #8
 8006904:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	b2d2      	uxtb	r2, r2
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	0a1b      	lsrs	r3, r3, #8
 8006916:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	607a      	str	r2, [r7, #4]
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00d      	beq.n	8006966 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	1c53      	adds	r3, r2, #1
 800694e:	613b      	str	r3, [r7, #16]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	1c59      	adds	r1, r3, #1
 8006954:	6179      	str	r1, [r7, #20]
 8006956:	7812      	ldrb	r2, [r2, #0]
 8006958:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3b01      	subs	r3, #1
 800695e:	607b      	str	r3, [r7, #4]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1f1      	bne.n	800694a <mem_cpy+0x1a>
	}
}
 8006966:	bf00      	nop
 8006968:	371c      	adds	r7, #28
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 8006972:	b480      	push	{r7}
 8006974:	b087      	sub	sp, #28
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	617a      	str	r2, [r7, #20]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3b01      	subs	r3, #1
 8006992:	607b      	str	r3, [r7, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1f3      	bne.n	8006982 <mem_set+0x10>
}
 800699a:	bf00      	nop
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 80069a6:	b480      	push	{r7}
 80069a8:	b089      	sub	sp, #36	; 0x24
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	60b9      	str	r1, [r7, #8]
 80069b0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	61fb      	str	r3, [r7, #28]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	61fa      	str	r2, [r7, #28]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	4619      	mov	r1, r3
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	61ba      	str	r2, [r7, #24]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	1acb      	subs	r3, r1, r3
 80069d2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	607b      	str	r3, [r7, #4]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d002      	beq.n	80069e6 <mem_cmp+0x40>
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0eb      	beq.n	80069be <mem_cmp+0x18>

	return r;
 80069e6:	697b      	ldr	r3, [r7, #20]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3724      	adds	r7, #36	; 0x24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80069fe:	e002      	b.n	8006a06 <chk_chr+0x12>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3301      	adds	r3, #1
 8006a04:	607b      	str	r3, [r7, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d005      	beq.n	8006a1a <chk_chr+0x26>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d1f2      	bne.n	8006a00 <chk_chr+0xc>
	return *str;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	4603      	mov	r3, r0
 8006a32:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 8006a34:	2281      	movs	r2, #129	; 0x81
 8006a36:	79fb      	ldrb	r3, [r7, #7]
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d30f      	bcc.n	8006a5c <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 8006a3c:	229f      	movs	r2, #159	; 0x9f
 8006a3e:	79fb      	ldrb	r3, [r7, #7]
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d801      	bhi.n	8006a48 <dbc_1st+0x1e>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e00a      	b.n	8006a5e <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 8006a48:	22e0      	movs	r2, #224	; 0xe0
 8006a4a:	79fb      	ldrb	r3, [r7, #7]
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d305      	bcc.n	8006a5c <dbc_1st+0x32>
 8006a50:	22fc      	movs	r2, #252	; 0xfc
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d801      	bhi.n	8006a5c <dbc_1st+0x32>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	4603      	mov	r3, r0
 8006a72:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 8006a74:	2240      	movs	r2, #64	; 0x40
 8006a76:	79fb      	ldrb	r3, [r7, #7]
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d319      	bcc.n	8006ab0 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 8006a7c:	227e      	movs	r2, #126	; 0x7e
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d801      	bhi.n	8006a88 <dbc_2nd+0x1e>
 8006a84:	2301      	movs	r3, #1
 8006a86:	e014      	b.n	8006ab2 <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 8006a88:	2280      	movs	r2, #128	; 0x80
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d305      	bcc.n	8006a9c <dbc_2nd+0x32>
 8006a90:	22fc      	movs	r2, #252	; 0xfc
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d801      	bhi.n	8006a9c <dbc_2nd+0x32>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e00a      	b.n	8006ab2 <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	79fb      	ldrb	r3, [r7, #7]
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d305      	bcc.n	8006ab0 <dbc_2nd+0x46>
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	79fb      	ldrb	r3, [r7, #7]
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d801      	bhi.n	8006ab0 <dbc_2nd+0x46>
 8006aac:	2301      	movs	r3, #1
 8006aae:	e000      	b.n	8006ab2 <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	78db      	ldrb	r3, [r3, #3]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d02c      	beq.n	8006b2c <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	7858      	ldrb	r0, [r3, #1]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f7ff fc57 	bl	8006394 <disk_write>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d11d      	bne.n	8006b28 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	1ad2      	subs	r2, r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d213      	bcs.n	8006b2c <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	789b      	ldrb	r3, [r3, #2]
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d10f      	bne.n	8006b2c <sync_window+0x6e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	7858      	ldrb	r0, [r3, #1]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	441a      	add	r2, r3
 8006b20:	2301      	movs	r3, #1
 8006b22:	f7ff fc37 	bl	8006394 <disk_write>
 8006b26:	e001      	b.n	8006b2c <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d01b      	beq.n	8006b86 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7ff ffb5 	bl	8006abe <sync_window>
 8006b54:	4603      	mov	r3, r0
 8006b56:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d113      	bne.n	8006b86 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	7858      	ldrb	r0, [r3, #1]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b68:	2301      	movs	r3, #1
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	f7ff fba8 	bl	80062c0 <disk_read>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d004      	beq.n	8006b80 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 8006b76:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff ff90 	bl	8006abe <sync_window>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d158      	bne.n	8006c5a <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	d148      	bne.n	8006c42 <sync_fs+0xb2>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	791b      	ldrb	r3, [r3, #4]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d144      	bne.n	8006c42 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3330      	adds	r3, #48	; 0x30
 8006bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff fed5 	bl	8006972 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3330      	adds	r3, #48	; 0x30
 8006bcc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006bd0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff fe64 	bl	80068a2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	3330      	adds	r3, #48	; 0x30
 8006bde:	4921      	ldr	r1, [pc, #132]	; (8006c64 <sync_fs+0xd4>)
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff fe79 	bl	80068d8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3330      	adds	r3, #48	; 0x30
 8006bea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006bee:	491e      	ldr	r1, [pc, #120]	; (8006c68 <sync_fs+0xd8>)
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff fe71 	bl	80068d8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3330      	adds	r3, #48	; 0x30
 8006bfa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	4619      	mov	r1, r3
 8006c04:	4610      	mov	r0, r2
 8006c06:	f7ff fe67 	bl	80068d8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3330      	adds	r3, #48	; 0x30
 8006c0e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	4619      	mov	r1, r3
 8006c18:	4610      	mov	r0, r2
 8006c1a:	f7ff fe5d 	bl	80068d8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	7858      	ldrb	r0, [r3, #1]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c36:	2301      	movs	r3, #1
 8006c38:	f7ff fbac 	bl	8006394 <disk_write>
			fs->fsi_flag = 0;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	785b      	ldrb	r3, [r3, #1]
 8006c46:	2200      	movs	r2, #0
 8006c48:	2100      	movs	r1, #0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7ff fc26 	bl	800649c <disk_ioctl>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <sync_fs+0xca>
 8006c56:	2301      	movs	r3, #1
 8006c58:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	41615252 	.word	0x41615252
 8006c68:	61417272 	.word	0x61417272

08006c6c <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	3b02      	subs	r3, #2
 8006c7a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	3b02      	subs	r3, #2
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d301      	bcc.n	8006c8c <clst2sect+0x20>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	e008      	b.n	8006c9e <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	895b      	ldrh	r3, [r3, #10]
 8006c94:	4619      	mov	r1, r3
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	fb03 f301 	mul.w	r3, r3, r1
 8006c9c:	4413      	add	r3, r2
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b086      	sub	sp, #24
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d904      	bls.n	8006cca <get_fat+0x20>
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d302      	bcc.n	8006cd0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006cca:	2301      	movs	r3, #1
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	e08c      	b.n	8006dea <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d045      	beq.n	8006d6a <get_fat+0xc0>
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d05d      	beq.n	8006d9e <get_fat+0xf4>
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d177      	bne.n	8006dd6 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	085b      	lsrs	r3, r3, #1
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	6a1a      	ldr	r2, [r3, #32]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	0a5b      	lsrs	r3, r3, #9
 8006cfc:	4413      	add	r3, r2
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6938      	ldr	r0, [r7, #16]
 8006d02:	f7ff ff18 	bl	8006b36 <move_window>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d167      	bne.n	8006ddc <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	60fa      	str	r2, [r7, #12]
 8006d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d1e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	6a1a      	ldr	r2, [r3, #32]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	0a5b      	lsrs	r3, r3, #9
 8006d28:	4413      	add	r3, r2
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6938      	ldr	r0, [r7, #16]
 8006d2e:	f7ff ff02 	bl	8006b36 <move_window>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d153      	bne.n	8006de0 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	4413      	add	r3, r2
 8006d42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d46:	021b      	lsls	r3, r3, #8
 8006d48:	461a      	mov	r2, r3
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d002      	beq.n	8006d60 <get_fat+0xb6>
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	091b      	lsrs	r3, r3, #4
 8006d5e:	e002      	b.n	8006d66 <get_fat+0xbc>
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d66:	617b      	str	r3, [r7, #20]
			break;
 8006d68:	e03f      	b.n	8006dea <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	6a1a      	ldr	r2, [r3, #32]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	0a1b      	lsrs	r3, r3, #8
 8006d72:	4413      	add	r3, r2
 8006d74:	4619      	mov	r1, r3
 8006d76:	6938      	ldr	r0, [r7, #16]
 8006d78:	f7ff fedd 	bl	8006b36 <move_window>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d130      	bne.n	8006de4 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006d90:	4413      	add	r3, r2
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fd4a 	bl	800682c <ld_word>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	617b      	str	r3, [r7, #20]
			break;
 8006d9c:	e025      	b.n	8006dea <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	6a1a      	ldr	r2, [r3, #32]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	09db      	lsrs	r3, r3, #7
 8006da6:	4413      	add	r3, r2
 8006da8:	4619      	mov	r1, r3
 8006daa:	6938      	ldr	r0, [r7, #16]
 8006dac:	f7ff fec3 	bl	8006b36 <move_window>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d118      	bne.n	8006de8 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006dc4:	4413      	add	r3, r2
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff fd48 	bl	800685c <ld_dword>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006dd2:	617b      	str	r3, [r7, #20]
			break;
 8006dd4:	e009      	b.n	8006dea <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	617b      	str	r3, [r7, #20]
 8006dda:	e006      	b.n	8006dea <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ddc:	bf00      	nop
 8006dde:	e004      	b.n	8006dea <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006de0:	bf00      	nop
 8006de2:	e002      	b.n	8006dea <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006de4:	bf00      	nop
 8006de6:	e000      	b.n	8006dea <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006de8:	bf00      	nop
		}
	}

	return val;
 8006dea:	697b      	ldr	r3, [r7, #20]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006df4:	b590      	push	{r4, r7, lr}
 8006df6:	b089      	sub	sp, #36	; 0x24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006e00:	2302      	movs	r3, #2
 8006e02:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	f240 80d6 	bls.w	8006fb8 <put_fat+0x1c4>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	f080 80d0 	bcs.w	8006fb8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d073      	beq.n	8006f08 <put_fat+0x114>
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	f000 8091 	beq.w	8006f48 <put_fat+0x154>
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	f040 80c6 	bne.w	8006fb8 <put_fat+0x1c4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	61bb      	str	r3, [r7, #24]
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	085b      	lsrs	r3, r3, #1
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	4413      	add	r3, r2
 8006e38:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a1a      	ldr	r2, [r3, #32]
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	0a5b      	lsrs	r3, r3, #9
 8006e42:	4413      	add	r3, r2
 8006e44:	4619      	mov	r1, r3
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7ff fe75 	bl	8006b36 <move_window>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e50:	7ffb      	ldrb	r3, [r7, #31]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f040 80a9 	bne.w	8006faa <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	1c59      	adds	r1, r3, #1
 8006e62:	61b9      	str	r1, [r7, #24]
 8006e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e68:	4413      	add	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00d      	beq.n	8006e92 <put_fat+0x9e>
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	b25b      	sxtb	r3, r3
 8006e7c:	f003 030f 	and.w	r3, r3, #15
 8006e80:	b25a      	sxtb	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	b25b      	sxtb	r3, r3
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	b25b      	sxtb	r3, r3
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	e001      	b.n	8006e96 <put_fat+0xa2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a1a      	ldr	r2, [r3, #32]
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	0a5b      	lsrs	r3, r3, #9
 8006ea8:	4413      	add	r3, r2
 8006eaa:	4619      	mov	r1, r3
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f7ff fe42 	bl	8006b36 <move_window>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006eb6:	7ffb      	ldrb	r3, [r7, #31]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d178      	bne.n	8006fae <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec8:	4413      	add	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <put_fat+0xea>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	091b      	lsrs	r3, r3, #4
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	e00e      	b.n	8006efc <put_fat+0x108>
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	b25b      	sxtb	r3, r3
 8006ee4:	f023 030f 	bic.w	r3, r3, #15
 8006ee8:	b25a      	sxtb	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	0a1b      	lsrs	r3, r3, #8
 8006eee:	b25b      	sxtb	r3, r3
 8006ef0:	f003 030f 	and.w	r3, r3, #15
 8006ef4:	b25b      	sxtb	r3, r3
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	b25b      	sxtb	r3, r3
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2201      	movs	r2, #1
 8006f04:	70da      	strb	r2, [r3, #3]
			break;
 8006f06:	e057      	b.n	8006fb8 <put_fat+0x1c4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a1a      	ldr	r2, [r3, #32]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	0a1b      	lsrs	r3, r3, #8
 8006f10:	4413      	add	r3, r2
 8006f12:	4619      	mov	r1, r3
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f7ff fe0e 	bl	8006b36 <move_window>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f1e:	7ffb      	ldrb	r3, [r7, #31]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d146      	bne.n	8006fb2 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006f32:	4413      	add	r3, r2
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	b292      	uxth	r2, r2
 8006f38:	4611      	mov	r1, r2
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7ff fcb1 	bl	80068a2 <st_word>
			fs->wflag = 1;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2201      	movs	r2, #1
 8006f44:	70da      	strb	r2, [r3, #3]
			break;
 8006f46:	e037      	b.n	8006fb8 <put_fat+0x1c4>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a1a      	ldr	r2, [r3, #32]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	09db      	lsrs	r3, r3, #7
 8006f50:	4413      	add	r3, r2
 8006f52:	4619      	mov	r1, r3
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f7ff fdee 	bl	8006b36 <move_window>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f5e:	7ffb      	ldrb	r3, [r7, #31]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d128      	bne.n	8006fb6 <put_fat+0x1c2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006f78:	4413      	add	r3, r2
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff fc6e 	bl	800685c <ld_dword>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006f86:	4323      	orrs	r3, r4
 8006f88:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006f98:	4413      	add	r3, r2
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff fc9b 	bl	80068d8 <st_dword>
			fs->wflag = 1;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	70da      	strb	r2, [r3, #3]
			break;
 8006fa8:	e006      	b.n	8006fb8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006faa:	bf00      	nop
 8006fac:	e004      	b.n	8006fb8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006fae:	bf00      	nop
 8006fb0:	e002      	b.n	8006fb8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006fb2:	bf00      	nop
 8006fb4:	e000      	b.n	8006fb8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006fb6:	bf00      	nop
		}
	}
	return res;
 8006fb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3724      	adds	r7, #36	; 0x24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd90      	pop	{r4, r7, pc}

08006fc2 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b088      	sub	sp, #32
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d904      	bls.n	8006fe8 <remove_chain+0x26>
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d301      	bcc.n	8006fec <remove_chain+0x2a>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e04b      	b.n	8007084 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00c      	beq.n	800700c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	69b8      	ldr	r0, [r7, #24]
 8006ffa:	f7ff fefb 	bl	8006df4 <put_fat>
 8006ffe:	4603      	mov	r3, r0
 8007000:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007002:	7ffb      	ldrb	r3, [r7, #31]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <remove_chain+0x4a>
 8007008:	7ffb      	ldrb	r3, [r7, #31]
 800700a:	e03b      	b.n	8007084 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800700c:	68b9      	ldr	r1, [r7, #8]
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f7ff fe4b 	bl	8006caa <get_fat>
 8007014:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d031      	beq.n	8007080 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d101      	bne.n	8007026 <remove_chain+0x64>
 8007022:	2302      	movs	r3, #2
 8007024:	e02e      	b.n	8007084 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d101      	bne.n	8007032 <remove_chain+0x70>
 800702e:	2301      	movs	r3, #1
 8007030:	e028      	b.n	8007084 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007032:	2200      	movs	r2, #0
 8007034:	68b9      	ldr	r1, [r7, #8]
 8007036:	69b8      	ldr	r0, [r7, #24]
 8007038:	f7ff fedc 	bl	8006df4 <put_fat>
 800703c:	4603      	mov	r3, r0
 800703e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007040:	7ffb      	ldrb	r3, [r7, #31]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <remove_chain+0x88>
 8007046:	7ffb      	ldrb	r3, [r7, #31]
 8007048:	e01c      	b.n	8007084 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	691a      	ldr	r2, [r3, #16]
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	3b02      	subs	r3, #2
 8007054:	429a      	cmp	r2, r3
 8007056:	d20b      	bcs.n	8007070 <remove_chain+0xae>
			fs->free_clst++;
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	791b      	ldrb	r3, [r3, #4]
 8007066:	f043 0301 	orr.w	r3, r3, #1
 800706a:	b2da      	uxtb	r2, r3
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	429a      	cmp	r2, r3
 800707c:	d3c6      	bcc.n	800700c <remove_chain+0x4a>
 800707e:	e000      	b.n	8007082 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007080:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3720      	adds	r7, #32
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10d      	bne.n	80070be <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d004      	beq.n	80070b8 <create_chain+0x2c>
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d31b      	bcc.n	80070f0 <create_chain+0x64>
 80070b8:	2301      	movs	r3, #1
 80070ba:	61bb      	str	r3, [r7, #24]
 80070bc:	e018      	b.n	80070f0 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7ff fdf2 	bl	8006caa <get_fat>
 80070c6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d801      	bhi.n	80070d2 <create_chain+0x46>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e0a9      	b.n	8007226 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d8:	d101      	bne.n	80070de <create_chain+0x52>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	e0a3      	b.n	8007226 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d201      	bcs.n	80070ec <create_chain+0x60>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	e09c      	b.n	8007226 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <create_chain+0x70>
 80070f8:	2300      	movs	r3, #0
 80070fa:	e094      	b.n	8007226 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d129      	bne.n	800715c <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	3301      	adds	r3, #1
 800710c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	429a      	cmp	r2, r3
 8007116:	d301      	bcc.n	800711c <create_chain+0x90>
 8007118:	2302      	movs	r3, #2
 800711a:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800711c:	69f9      	ldr	r1, [r7, #28]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff fdc3 	bl	8006caa <get_fat>
 8007124:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d003      	beq.n	8007134 <create_chain+0xa8>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007132:	d101      	bne.n	8007138 <create_chain+0xac>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	e076      	b.n	8007226 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00e      	beq.n	800715c <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d906      	bls.n	8007158 <create_chain+0xcc>
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	429a      	cmp	r2, r3
 8007152:	d201      	bcs.n	8007158 <create_chain+0xcc>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8007158:	2300      	movs	r3, #0
 800715a:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d129      	bne.n	80071b6 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	3301      	adds	r3, #1
 800716a:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	69fa      	ldr	r2, [r7, #28]
 8007172:	429a      	cmp	r2, r3
 8007174:	d307      	bcc.n	8007186 <create_chain+0xfa>
					ncl = 2;
 8007176:	2302      	movs	r3, #2
 8007178:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	429a      	cmp	r2, r3
 8007180:	d901      	bls.n	8007186 <create_chain+0xfa>
 8007182:	2300      	movs	r3, #0
 8007184:	e04f      	b.n	8007226 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007186:	69f9      	ldr	r1, [r7, #28]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff fd8e 	bl	8006caa <get_fat>
 800718e:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00e      	beq.n	80071b4 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d003      	beq.n	80071a4 <create_chain+0x118>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a2:	d101      	bne.n	80071a8 <create_chain+0x11c>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	e03e      	b.n	8007226 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80071a8:	69fa      	ldr	r2, [r7, #28]
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d1da      	bne.n	8007166 <create_chain+0xda>
 80071b0:	2300      	movs	r3, #0
 80071b2:	e038      	b.n	8007226 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 80071b4:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80071b6:	f04f 32ff 	mov.w	r2, #4294967295
 80071ba:	69f9      	ldr	r1, [r7, #28]
 80071bc:	6938      	ldr	r0, [r7, #16]
 80071be:	f7ff fe19 	bl	8006df4 <put_fat>
 80071c2:	4603      	mov	r3, r0
 80071c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d109      	bne.n	80071e0 <create_chain+0x154>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d006      	beq.n	80071e0 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6938      	ldr	r0, [r7, #16]
 80071d8:	f7ff fe0c 	bl	8006df4 <put_fat>
 80071dc:	4603      	mov	r3, r0
 80071de:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d116      	bne.n	8007214 <create_chain+0x188>
		fs->last_clst = ncl;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	69fa      	ldr	r2, [r7, #28]
 80071ea:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	691a      	ldr	r2, [r3, #16]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	3b02      	subs	r3, #2
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d804      	bhi.n	8007204 <create_chain+0x178>
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	1e5a      	subs	r2, r3, #1
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	791b      	ldrb	r3, [r3, #4]
 8007208:	f043 0301 	orr.w	r3, r3, #1
 800720c:	b2da      	uxtb	r2, r3
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	711a      	strb	r2, [r3, #4]
 8007212:	e007      	b.n	8007224 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007214:	7dfb      	ldrb	r3, [r7, #23]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d102      	bne.n	8007220 <create_chain+0x194>
 800721a:	f04f 33ff 	mov.w	r3, #4294967295
 800721e:	e000      	b.n	8007222 <create_chain+0x196>
 8007220:	2301      	movs	r3, #1
 8007222:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007224:	69fb      	ldr	r3, [r7, #28]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3720      	adds	r7, #32
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b086      	sub	sp, #24
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff fc40 	bl	8006abe <sync_window>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <dir_clear+0x1a>
 8007244:	2301      	movs	r3, #1
 8007246:	e036      	b.n	80072b6 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff fd0e 	bl	8006c6c <clst2sect>
 8007250:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3330      	adds	r3, #48	; 0x30
 800725c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007260:	2100      	movs	r1, #0
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff fb85 	bl	8006972 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	3330      	adds	r3, #48	; 0x30
 800726c:	60fb      	str	r3, [r7, #12]
 800726e:	2301      	movs	r3, #1
 8007270:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8007272:	2300      	movs	r3, #0
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	e003      	b.n	8007280 <dir_clear+0x52>
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	4413      	add	r3, r2
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	895b      	ldrh	r3, [r3, #10]
 8007284:	461a      	mov	r2, r3
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	4293      	cmp	r3, r2
 800728a:	d20b      	bcs.n	80072a4 <dir_clear+0x76>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	7858      	ldrb	r0, [r3, #1]
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	441a      	add	r2, r3
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	68f9      	ldr	r1, [r7, #12]
 800729a:	f7ff f87b 	bl	8006394 <disk_write>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0e9      	beq.n	8007278 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	895b      	ldrh	r3, [r3, #10]
 80072a8:	461a      	mov	r2, r3
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	4293      	cmp	r3, r2
 80072ae:	bf14      	ite	ne
 80072b0:	2301      	movne	r3, #1
 80072b2:	2300      	moveq	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b086      	sub	sp, #24
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072d4:	d204      	bcs.n	80072e0 <dir_sdi+0x22>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	f003 031f 	and.w	r3, r3, #31
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80072e0:	2302      	movs	r3, #2
 80072e2:	e063      	b.n	80073ac <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d106      	bne.n	8007304 <dir_sdi+0x46>
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d902      	bls.n	8007304 <dir_sdi+0x46>
		clst = fs->dirbase;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007302:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10c      	bne.n	8007324 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	095b      	lsrs	r3, r3, #5
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	8912      	ldrh	r2, [r2, #8]
 8007312:	4293      	cmp	r3, r2
 8007314:	d301      	bcc.n	800731a <dir_sdi+0x5c>
 8007316:	2302      	movs	r3, #2
 8007318:	e048      	b.n	80073ac <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	619a      	str	r2, [r3, #24]
 8007322:	e029      	b.n	8007378 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	895b      	ldrh	r3, [r3, #10]
 8007328:	025b      	lsls	r3, r3, #9
 800732a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800732c:	e019      	b.n	8007362 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6979      	ldr	r1, [r7, #20]
 8007332:	4618      	mov	r0, r3
 8007334:	f7ff fcb9 	bl	8006caa <get_fat>
 8007338:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007340:	d101      	bne.n	8007346 <dir_sdi+0x88>
 8007342:	2301      	movs	r3, #1
 8007344:	e032      	b.n	80073ac <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d904      	bls.n	8007356 <dir_sdi+0x98>
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	429a      	cmp	r2, r3
 8007354:	d301      	bcc.n	800735a <dir_sdi+0x9c>
 8007356:	2302      	movs	r3, #2
 8007358:	e028      	b.n	80073ac <dir_sdi+0xee>
			ofs -= csz;
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	429a      	cmp	r2, r3
 8007368:	d2e1      	bcs.n	800732e <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 800736a:	6979      	ldr	r1, [r7, #20]
 800736c:	6938      	ldr	r0, [r7, #16]
 800736e:	f7ff fc7d 	bl	8006c6c <clst2sect>
 8007372:	4602      	mov	r2, r0
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <dir_sdi+0xcc>
 8007386:	2302      	movs	r3, #2
 8007388:	e010      	b.n	80073ac <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	699a      	ldr	r2, [r3, #24]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	0a5b      	lsrs	r3, r3, #9
 8007392:	441a      	add	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073a4:	441a      	add	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	3320      	adds	r3, #32
 80073ca:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073d2:	d302      	bcc.n	80073da <dir_next+0x26>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <dir_next+0x32>
 80073e2:	2304      	movs	r3, #4
 80073e4:	e078      	b.n	80074d8 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d166      	bne.n	80074be <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	8912      	ldrh	r2, [r2, #8]
 800740a:	4293      	cmp	r3, r2
 800740c:	d357      	bcc.n	80074be <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	619a      	str	r2, [r3, #24]
 8007414:	2304      	movs	r3, #4
 8007416:	e05f      	b.n	80074d8 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	0a5b      	lsrs	r3, r3, #9
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	8952      	ldrh	r2, [r2, #10]
 8007420:	3a01      	subs	r2, #1
 8007422:	4013      	ands	r3, r2
 8007424:	2b00      	cmp	r3, #0
 8007426:	d14a      	bne.n	80074be <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	4619      	mov	r1, r3
 8007430:	4610      	mov	r0, r2
 8007432:	f7ff fc3a 	bl	8006caa <get_fat>
 8007436:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d801      	bhi.n	8007442 <dir_next+0x8e>
 800743e:	2302      	movs	r3, #2
 8007440:	e04a      	b.n	80074d8 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007448:	d101      	bne.n	800744e <dir_next+0x9a>
 800744a:	2301      	movs	r3, #1
 800744c:	e044      	b.n	80074d8 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	429a      	cmp	r2, r3
 8007456:	d328      	bcc.n	80074aa <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d104      	bne.n	8007468 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	619a      	str	r2, [r3, #24]
 8007464:	2304      	movs	r3, #4
 8007466:	e037      	b.n	80074d8 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	4619      	mov	r1, r3
 8007470:	4610      	mov	r0, r2
 8007472:	f7ff fe0b 	bl	800708c <create_chain>
 8007476:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <dir_next+0xce>
 800747e:	2307      	movs	r3, #7
 8007480:	e02a      	b.n	80074d8 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d101      	bne.n	800748c <dir_next+0xd8>
 8007488:	2302      	movs	r3, #2
 800748a:	e025      	b.n	80074d8 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007492:	d101      	bne.n	8007498 <dir_next+0xe4>
 8007494:	2301      	movs	r3, #1
 8007496:	e01f      	b.n	80074d8 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8007498:	6979      	ldr	r1, [r7, #20]
 800749a:	6938      	ldr	r0, [r7, #16]
 800749c:	f7ff fec7 	bl	800722e <dir_clear>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <dir_next+0xf6>
 80074a6:	2301      	movs	r3, #1
 80074a8:	e016      	b.n	80074d8 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 80074b0:	6979      	ldr	r1, [r7, #20]
 80074b2:	6938      	ldr	r0, [r7, #16]
 80074b4:	f7ff fbda 	bl	8006c6c <clst2sect>
 80074b8:	4602      	mov	r2, r0
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d0:	441a      	add	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80074f0:	2100      	movs	r1, #0
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff fee3 	bl	80072be <dir_sdi>
 80074f8:	4603      	mov	r3, r0
 80074fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d12b      	bne.n	800755a <dir_alloc+0x7a>
		n = 0;
 8007502:	2300      	movs	r3, #0
 8007504:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	4619      	mov	r1, r3
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f7ff fb12 	bl	8006b36 <move_window>
 8007512:	4603      	mov	r3, r0
 8007514:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d11d      	bne.n	8007558 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2be5      	cmp	r3, #229	; 0xe5
 8007524:	d004      	beq.n	8007530 <dir_alloc+0x50>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d107      	bne.n	8007540 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	3301      	adds	r3, #1
 8007534:	613b      	str	r3, [r7, #16]
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	429a      	cmp	r2, r3
 800753c:	d102      	bne.n	8007544 <dir_alloc+0x64>
 800753e:	e00c      	b.n	800755a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007540:	2300      	movs	r3, #0
 8007542:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007544:	2101      	movs	r1, #1
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff ff34 	bl	80073b4 <dir_next>
 800754c:	4603      	mov	r3, r0
 800754e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007550:	7dfb      	ldrb	r3, [r7, #23]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0d7      	beq.n	8007506 <dir_alloc+0x26>
 8007556:	e000      	b.n	800755a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007558:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	2b04      	cmp	r3, #4
 800755e:	d101      	bne.n	8007564 <dir_alloc+0x84>
 8007560:	2307      	movs	r3, #7
 8007562:	75fb      	strb	r3, [r7, #23]
	return res;
 8007564:	7dfb      	ldrb	r3, [r7, #23]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b084      	sub	sp, #16
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	331a      	adds	r3, #26
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff f955 	bl	800682c <ld_word>
 8007582:	4603      	mov	r3, r0
 8007584:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	2b03      	cmp	r3, #3
 800758c:	d109      	bne.n	80075a2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	3314      	adds	r3, #20
 8007592:	4618      	mov	r0, r3
 8007594:	f7ff f94a 	bl	800682c <ld_word>
 8007598:	4603      	mov	r3, r0
 800759a:	041b      	lsls	r3, r3, #16
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	4313      	orrs	r3, r2
 80075a0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80075a2:	68fb      	ldr	r3, [r7, #12]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	331a      	adds	r3, #26
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	b292      	uxth	r2, r2
 80075c0:	4611      	mov	r1, r2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7ff f96d 	bl	80068a2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d109      	bne.n	80075e4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f103 0214 	add.w	r2, r3, #20
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	0c1b      	lsrs	r3, r3, #16
 80075da:	b29b      	uxth	r3, r3
 80075dc:	4619      	mov	r1, r3
 80075de:	4610      	mov	r0, r2
 80075e0:	f7ff f95f 	bl	80068a2 <st_word>
	}
}
 80075e4:	bf00      	nop
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80075fa:	2100      	movs	r1, #0
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff fe5e 	bl	80072be <dir_sdi>
 8007602:	4603      	mov	r3, r0
 8007604:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <dir_find+0x24>
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	e03e      	b.n	800768e <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	4619      	mov	r1, r3
 8007616:	6938      	ldr	r0, [r7, #16]
 8007618:	f7ff fa8d 	bl	8006b36 <move_window>
 800761c:	4603      	mov	r3, r0
 800761e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d12f      	bne.n	8007686 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d102      	bne.n	800763a <dir_find+0x4e>
 8007634:	2304      	movs	r3, #4
 8007636:	75fb      	strb	r3, [r7, #23]
 8007638:	e028      	b.n	800768c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	330b      	adds	r3, #11
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007646:	b2da      	uxtb	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	330b      	adds	r3, #11
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	f003 0308 	and.w	r3, r3, #8
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <dir_find+0x86>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	69d8      	ldr	r0, [r3, #28]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3320      	adds	r3, #32
 8007664:	220b      	movs	r2, #11
 8007666:	4619      	mov	r1, r3
 8007668:	f7ff f99d 	bl	80069a6 <mem_cmp>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00b      	beq.n	800768a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007672:	2100      	movs	r1, #0
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7ff fe9d 	bl	80073b4 <dir_next>
 800767a:	4603      	mov	r3, r0
 800767c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800767e:	7dfb      	ldrb	r3, [r7, #23]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0c5      	beq.n	8007610 <dir_find+0x24>
 8007684:	e002      	b.n	800768c <dir_find+0xa0>
		if (res != FR_OK) break;
 8007686:	bf00      	nop
 8007688:	e000      	b.n	800768c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800768a:	bf00      	nop

	return res;
 800768c:	7dfb      	ldrb	r3, [r7, #23]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80076a4:	2101      	movs	r1, #1
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7ff ff1a 	bl	80074e0 <dir_alloc>
 80076ac:	4603      	mov	r3, r0
 80076ae:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d11c      	bne.n	80076f0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	4619      	mov	r1, r3
 80076bc:	68b8      	ldr	r0, [r7, #8]
 80076be:	f7ff fa3a 	bl	8006b36 <move_window>
 80076c2:	4603      	mov	r3, r0
 80076c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d111      	bne.n	80076f0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	2220      	movs	r2, #32
 80076d2:	2100      	movs	r1, #0
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7ff f94c 	bl	8006972 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	69d8      	ldr	r0, [r3, #28]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3320      	adds	r3, #32
 80076e2:	220b      	movs	r2, #11
 80076e4:	4619      	mov	r1, r3
 80076e6:	f7ff f923 	bl	8006930 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2201      	movs	r2, #1
 80076ee:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08a      	sub	sp, #40	; 0x28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3320      	adds	r3, #32
 8007710:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 8007712:	220b      	movs	r2, #11
 8007714:	2120      	movs	r1, #32
 8007716:	6938      	ldr	r0, [r7, #16]
 8007718:	f7ff f92b 	bl	8006972 <mem_set>
	si = i = 0; ni = 8;
 800771c:	2300      	movs	r3, #0
 800771e:	61bb      	str	r3, [r7, #24]
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	61fb      	str	r3, [r7, #28]
 8007724:	2308      	movs	r3, #8
 8007726:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	61fa      	str	r2, [r7, #28]
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	4413      	add	r3, r2
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800773c:	2b20      	cmp	r3, #32
 800773e:	d97c      	bls.n	800783a <create_name+0x13e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007744:	2b2f      	cmp	r3, #47	; 0x2f
 8007746:	d007      	beq.n	8007758 <create_name+0x5c>
 8007748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800774c:	2b5c      	cmp	r3, #92	; 0x5c
 800774e:	d110      	bne.n	8007772 <create_name+0x76>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007750:	e002      	b.n	8007758 <create_name+0x5c>
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	3301      	adds	r3, #1
 8007756:	61fb      	str	r3, [r7, #28]
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	4413      	add	r3, r2
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b2f      	cmp	r3, #47	; 0x2f
 8007762:	d0f6      	beq.n	8007752 <create_name+0x56>
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	4413      	add	r3, r2
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	2b5c      	cmp	r3, #92	; 0x5c
 800776e:	d0f0      	beq.n	8007752 <create_name+0x56>
			break;
 8007770:	e064      	b.n	800783c <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8007772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007776:	2b2e      	cmp	r3, #46	; 0x2e
 8007778:	d003      	beq.n	8007782 <create_name+0x86>
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	6a3b      	ldr	r3, [r7, #32]
 800777e:	429a      	cmp	r2, r3
 8007780:	d30d      	bcc.n	800779e <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	2b0b      	cmp	r3, #11
 8007786:	d003      	beq.n	8007790 <create_name+0x94>
 8007788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800778c:	2b2e      	cmp	r3, #46	; 0x2e
 800778e:	d001      	beq.n	8007794 <create_name+0x98>
 8007790:	2306      	movs	r3, #6
 8007792:	e06f      	b.n	8007874 <create_name+0x178>
			i = 8; ni = 11;				/* Enter file extension field */
 8007794:	2308      	movs	r3, #8
 8007796:	61bb      	str	r3, [r7, #24]
 8007798:	230b      	movs	r3, #11
 800779a:	623b      	str	r3, [r7, #32]
			continue;
 800779c:	e04c      	b.n	8007838 <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 800779e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff f941 	bl	8006a2a <dbc_1st>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d024      	beq.n	80077f8 <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	1c5a      	adds	r2, r3, #1
 80077b2:	61fa      	str	r2, [r7, #28]
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	4413      	add	r3, r2
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff f953 	bl	8006a6a <dbc_2nd>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d004      	beq.n	80077d4 <create_name+0xd8>
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d301      	bcc.n	80077d8 <create_name+0xdc>
 80077d4:	2306      	movs	r3, #6
 80077d6:	e04d      	b.n	8007874 <create_name+0x178>
			sfn[i++] = c;
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	61ba      	str	r2, [r7, #24]
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	4413      	add	r3, r2
 80077e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80077e6:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	61ba      	str	r2, [r7, #24]
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	4413      	add	r3, r2
 80077f2:	7bfa      	ldrb	r2, [r7, #15]
 80077f4:	701a      	strb	r2, [r3, #0]
 80077f6:	e797      	b.n	8007728 <create_name+0x2c>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80077f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077fc:	4619      	mov	r1, r3
 80077fe:	481f      	ldr	r0, [pc, #124]	; (800787c <create_name+0x180>)
 8007800:	f7ff f8f8 	bl	80069f4 <chk_chr>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <create_name+0x112>
 800780a:	2306      	movs	r3, #6
 800780c:	e032      	b.n	8007874 <create_name+0x178>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800780e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007812:	2b60      	cmp	r3, #96	; 0x60
 8007814:	d908      	bls.n	8007828 <create_name+0x12c>
 8007816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800781a:	2b7a      	cmp	r3, #122	; 0x7a
 800781c:	d804      	bhi.n	8007828 <create_name+0x12c>
 800781e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007822:	3b20      	subs	r3, #32
 8007824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	61ba      	str	r2, [r7, #24]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4413      	add	r3, r2
 8007832:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007836:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8007838:	e776      	b.n	8007728 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800783a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	441a      	add	r2, r3
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d101      	bne.n	8007850 <create_name+0x154>
 800784c:	2306      	movs	r3, #6
 800784e:	e011      	b.n	8007874 <create_name+0x178>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	2be5      	cmp	r3, #229	; 0xe5
 8007856:	d102      	bne.n	800785e <create_name+0x162>
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	2205      	movs	r2, #5
 800785c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800785e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007862:	2b20      	cmp	r3, #32
 8007864:	d801      	bhi.n	800786a <create_name+0x16e>
 8007866:	2204      	movs	r2, #4
 8007868:	e000      	b.n	800786c <create_name+0x170>
 800786a:	2200      	movs	r2, #0
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	330b      	adds	r3, #11
 8007870:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007872:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8007874:	4618      	mov	r0, r3
 8007876:	3728      	adds	r7, #40	; 0x28
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	0800a3c8 	.word	0x0800a3c8

08007880 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007890:	e002      	b.n	8007898 <follow_path+0x18>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	3301      	adds	r3, #1
 8007896:	603b      	str	r3, [r7, #0]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b2f      	cmp	r3, #47	; 0x2f
 800789e:	d0f8      	beq.n	8007892 <follow_path+0x12>
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	2b5c      	cmp	r3, #92	; 0x5c
 80078a6:	d0f4      	beq.n	8007892 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b1f      	cmp	r3, #31
 80078b4:	d80a      	bhi.n	80078cc <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2280      	movs	r2, #128	; 0x80
 80078ba:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 80078be:	2100      	movs	r1, #0
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff fcfc 	bl	80072be <dir_sdi>
 80078c6:	4603      	mov	r3, r0
 80078c8:	75fb      	strb	r3, [r7, #23]
 80078ca:	e043      	b.n	8007954 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80078cc:	463b      	mov	r3, r7
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff ff13 	bl	80076fc <create_name>
 80078d6:	4603      	mov	r3, r0
 80078d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80078da:	7dfb      	ldrb	r3, [r7, #23]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d134      	bne.n	800794a <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7ff fe83 	bl	80075ec <dir_find>
 80078e6:	4603      	mov	r3, r0
 80078e8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80078f0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00a      	beq.n	800790e <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d127      	bne.n	800794e <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
 8007900:	f003 0304 	and.w	r3, r3, #4
 8007904:	2b00      	cmp	r3, #0
 8007906:	d122      	bne.n	800794e <follow_path+0xce>
 8007908:	2305      	movs	r3, #5
 800790a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800790c:	e01f      	b.n	800794e <follow_path+0xce>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800790e:	7bfb      	ldrb	r3, [r7, #15]
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b00      	cmp	r3, #0
 8007916:	d11c      	bne.n	8007952 <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	799b      	ldrb	r3, [r3, #6]
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	2b00      	cmp	r3, #0
 8007922:	d102      	bne.n	800792a <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8007924:	2305      	movs	r3, #5
 8007926:	75fb      	strb	r3, [r7, #23]
 8007928:	e014      	b.n	8007954 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007938:	4413      	add	r3, r2
 800793a:	4619      	mov	r1, r3
 800793c:	6938      	ldr	r0, [r7, #16]
 800793e:	f7ff fe16 	bl	800756e <ld_clust>
 8007942:	4602      	mov	r2, r0
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007948:	e7c0      	b.n	80078cc <follow_path+0x4c>
			if (res != FR_OK) break;
 800794a:	bf00      	nop
 800794c:	e002      	b.n	8007954 <follow_path+0xd4>
				break;
 800794e:	bf00      	nop
 8007950:	e000      	b.n	8007954 <follow_path+0xd4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007952:	bf00      	nop
			}
		}
	}

	return res;
 8007954:	7dfb      	ldrb	r3, [r7, #23]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800795e:	b480      	push	{r7}
 8007960:	b089      	sub	sp, #36	; 0x24
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8007966:	f04f 33ff 	mov.w	r3, #4294967295
 800796a:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	613b      	str	r3, [r7, #16]
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <get_ldnumber+0x22>
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	e02d      	b.n	80079dc <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	61fa      	str	r2, [r7, #28]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	73fb      	strb	r3, [r7, #15]
 800798a:	7bfb      	ldrb	r3, [r7, #15]
 800798c:	2b20      	cmp	r3, #32
 800798e:	d902      	bls.n	8007996 <get_ldnumber+0x38>
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	2b3a      	cmp	r3, #58	; 0x3a
 8007994:	d1f4      	bne.n	8007980 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	2b3a      	cmp	r3, #58	; 0x3a
 800799a:	d11c      	bne.n	80079d6 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 800799c:	2301      	movs	r3, #1
 800799e:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2b2f      	cmp	r3, #47	; 0x2f
 80079a6:	d90c      	bls.n	80079c2 <get_ldnumber+0x64>
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b39      	cmp	r3, #57	; 0x39
 80079ae:	d808      	bhi.n	80079c2 <get_ldnumber+0x64>
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	3302      	adds	r3, #2
 80079b4:	69fa      	ldr	r2, [r7, #28]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d103      	bne.n	80079c2 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	3b30      	subs	r3, #48	; 0x30
 80079c0:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	dc04      	bgt.n	80079d2 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	69fa      	ldr	r2, [r7, #28]
 80079d0:	601a      	str	r2, [r3, #0]
		}
		return vol;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	e002      	b.n	80079dc <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 80079d6:	2300      	movs	r3, #0
 80079d8:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 80079da:	697b      	ldr	r3, [r7, #20]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3724      	adds	r7, #36	; 0x24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	70da      	strb	r2, [r3, #3]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f04f 32ff 	mov.w	r2, #4294967295
 80079fe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff f897 	bl	8006b36 <move_window>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <check_fs+0x2a>
 8007a0e:	2304      	movs	r3, #4
 8007a10:	e038      	b.n	8007a84 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3330      	adds	r3, #48	; 0x30
 8007a16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fe ff06 	bl	800682c <ld_word>
 8007a20:	4603      	mov	r3, r0
 8007a22:	461a      	mov	r2, r3
 8007a24:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d001      	beq.n	8007a30 <check_fs+0x48>
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e029      	b.n	8007a84 <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a36:	2be9      	cmp	r3, #233	; 0xe9
 8007a38:	d009      	beq.n	8007a4e <check_fs+0x66>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a40:	2beb      	cmp	r3, #235	; 0xeb
 8007a42:	d004      	beq.n	8007a4e <check_fs+0x66>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a4a:	2be8      	cmp	r3, #232	; 0xe8
 8007a4c:	d119      	bne.n	8007a82 <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	3330      	adds	r3, #48	; 0x30
 8007a52:	3336      	adds	r3, #54	; 0x36
 8007a54:	2203      	movs	r2, #3
 8007a56:	490d      	ldr	r1, [pc, #52]	; (8007a8c <check_fs+0xa4>)
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe ffa4 	bl	80069a6 <mem_cmp>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <check_fs+0x80>
 8007a64:	2300      	movs	r3, #0
 8007a66:	e00d      	b.n	8007a84 <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3330      	adds	r3, #48	; 0x30
 8007a6c:	3352      	adds	r3, #82	; 0x52
 8007a6e:	2205      	movs	r2, #5
 8007a70:	4907      	ldr	r1, [pc, #28]	; (8007a90 <check_fs+0xa8>)
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fe ff97 	bl	80069a6 <mem_cmp>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d101      	bne.n	8007a82 <check_fs+0x9a>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	e000      	b.n	8007a84 <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8007a82:	2302      	movs	r3, #2
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	0800a3d8 	.word	0x0800a3d8
 8007a90:	0800a3dc 	.word	0x0800a3dc

08007a94 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b096      	sub	sp, #88	; 0x58
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f7ff ff58 	bl	800795e <get_ldnumber>
 8007aae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	da01      	bge.n	8007aba <find_volume+0x26>
 8007ab6:	230b      	movs	r3, #11
 8007ab8:	e238      	b.n	8007f2c <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8007aba:	4aa8      	ldr	r2, [pc, #672]	; (8007d5c <find_volume+0x2c8>)
 8007abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ac2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <find_volume+0x3a>
 8007aca:	230c      	movs	r3, #12
 8007acc:	e22e      	b.n	8007f2c <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ad2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	f023 0301 	bic.w	r3, r3, #1
 8007ada:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8007adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d01a      	beq.n	8007b1a <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	785b      	ldrb	r3, [r3, #1]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fe fbd3 	bl	8006294 <disk_status>
 8007aee:	4603      	mov	r3, r0
 8007af0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007af4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10c      	bne.n	8007b1a <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d007      	beq.n	8007b16 <find_volume+0x82>
 8007b06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007b12:	230a      	movs	r3, #10
 8007b14:	e20a      	b.n	8007f2c <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 8007b16:	2300      	movs	r3, #0
 8007b18:	e208      	b.n	8007f2c <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	785b      	ldrb	r3, [r3, #1]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fe fac7 	bl	80060c0 <disk_initialize>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007b38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007b44:	2303      	movs	r3, #3
 8007b46:	e1f1      	b.n	8007f2c <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007b48:	79fb      	ldrb	r3, [r7, #7]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d007      	beq.n	8007b5e <find_volume+0xca>
 8007b4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b52:	f003 0304 	and.w	r3, r3, #4
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007b5a:	230a      	movs	r3, #10
 8007b5c:	e1e6      	b.n	8007f2c <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007b62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b66:	f7ff ff3f 	bl	80079e8 <check_fs>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007b70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d14b      	bne.n	8007c10 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b78:	2300      	movs	r3, #0
 8007b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b7c:	e01f      	b.n	8007bbe <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b86:	011b      	lsls	r3, r3, #4
 8007b88:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007b8c:	4413      	add	r3, r2
 8007b8e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	3304      	adds	r3, #4
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d006      	beq.n	8007ba8 <find_volume+0x114>
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fe5c 	bl	800685c <ld_dword>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	e000      	b.n	8007baa <find_volume+0x116>
 8007ba8:	2200      	movs	r2, #0
 8007baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007bb2:	440b      	add	r3, r1
 8007bb4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bba:	3301      	adds	r3, #1
 8007bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8007bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d9dc      	bls.n	8007b7e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8007bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <find_volume+0x140>
 8007bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007bdc:	4413      	add	r3, r2
 8007bde:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007be2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d005      	beq.n	8007bf6 <find_volume+0x162>
 8007bea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007bec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bee:	f7ff fefb 	bl	80079e8 <check_fs>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	e000      	b.n	8007bf8 <find_volume+0x164>
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d905      	bls.n	8007c10 <find_volume+0x17c>
 8007c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c06:	3301      	adds	r3, #1
 8007c08:	643b      	str	r3, [r7, #64]	; 0x40
 8007c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d9e1      	bls.n	8007bd4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007c10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d101      	bne.n	8007c1c <find_volume+0x188>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e187      	b.n	8007f2c <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007c1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d901      	bls.n	8007c28 <find_volume+0x194>
 8007c24:	230d      	movs	r3, #13
 8007c26:	e181      	b.n	8007f2c <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2a:	3330      	adds	r3, #48	; 0x30
 8007c2c:	330b      	adds	r3, #11
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe fdfc 	bl	800682c <ld_word>
 8007c34:	4603      	mov	r3, r0
 8007c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c3a:	d001      	beq.n	8007c40 <find_volume+0x1ac>
 8007c3c:	230d      	movs	r3, #13
 8007c3e:	e175      	b.n	8007f2c <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c42:	3330      	adds	r3, #48	; 0x30
 8007c44:	3316      	adds	r3, #22
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe fdf0 	bl	800682c <ld_word>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d106      	bne.n	8007c64 <find_volume+0x1d0>
 8007c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c58:	3330      	adds	r3, #48	; 0x30
 8007c5a:	3324      	adds	r3, #36	; 0x24
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fe fdfd 	bl	800685c <ld_dword>
 8007c62:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c68:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c76:	789b      	ldrb	r3, [r3, #2]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d005      	beq.n	8007c88 <find_volume+0x1f4>
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	789b      	ldrb	r3, [r3, #2]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d001      	beq.n	8007c88 <find_volume+0x1f4>
 8007c84:	230d      	movs	r3, #13
 8007c86:	e151      	b.n	8007f2c <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	789b      	ldrb	r3, [r3, #2]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c90:	fb02 f303 	mul.w	r3, r2, r3
 8007c94:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca4:	895b      	ldrh	r3, [r3, #10]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d008      	beq.n	8007cbc <find_volume+0x228>
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	895b      	ldrh	r3, [r3, #10]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb2:	895b      	ldrh	r3, [r3, #10]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <find_volume+0x22c>
 8007cbc:	230d      	movs	r3, #13
 8007cbe:	e135      	b.n	8007f2c <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	3330      	adds	r3, #48	; 0x30
 8007cc4:	3311      	adds	r3, #17
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fe fdb0 	bl	800682c <ld_word>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	461a      	mov	r2, r3
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd6:	891b      	ldrh	r3, [r3, #8]
 8007cd8:	f003 030f 	and.w	r3, r3, #15
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <find_volume+0x252>
 8007ce2:	230d      	movs	r3, #13
 8007ce4:	e122      	b.n	8007f2c <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	3330      	adds	r3, #48	; 0x30
 8007cea:	3313      	adds	r3, #19
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fe fd9d 	bl	800682c <ld_word>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d106      	bne.n	8007d0a <find_volume+0x276>
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	3330      	adds	r3, #48	; 0x30
 8007d00:	3320      	adds	r3, #32
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe fdaa 	bl	800685c <ld_dword>
 8007d08:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0c:	3330      	adds	r3, #48	; 0x30
 8007d0e:	330e      	adds	r3, #14
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fe fd8b 	bl	800682c <ld_word>
 8007d16:	4603      	mov	r3, r0
 8007d18:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007d1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <find_volume+0x290>
 8007d20:	230d      	movs	r3, #13
 8007d22:	e103      	b.n	8007f2c <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007d24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d28:	4413      	add	r3, r2
 8007d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d2c:	8912      	ldrh	r2, [r2, #8]
 8007d2e:	0912      	lsrs	r2, r2, #4
 8007d30:	b292      	uxth	r2, r2
 8007d32:	4413      	add	r3, r2
 8007d34:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d201      	bcs.n	8007d42 <find_volume+0x2ae>
 8007d3e:	230d      	movs	r3, #13
 8007d40:	e0f4      	b.n	8007f2c <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d4a:	8952      	ldrh	r2, [r2, #10]
 8007d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d103      	bne.n	8007d60 <find_volume+0x2cc>
 8007d58:	230d      	movs	r3, #13
 8007d5a:	e0e7      	b.n	8007f2c <find_volume+0x498>
 8007d5c:	20000090 	.word	0x20000090
		fmt = 0;
 8007d60:	2300      	movs	r3, #0
 8007d62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	4a72      	ldr	r2, [pc, #456]	; (8007f34 <find_volume+0x4a0>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d802      	bhi.n	8007d74 <find_volume+0x2e0>
 8007d6e:	2303      	movs	r3, #3
 8007d70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d802      	bhi.n	8007d84 <find_volume+0x2f0>
 8007d7e:	2302      	movs	r3, #2
 8007d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d802      	bhi.n	8007d94 <find_volume+0x300>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8007d94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <find_volume+0x30c>
 8007d9c:	230d      	movs	r3, #13
 8007d9e:	e0c5      	b.n	8007f2c <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	1c9a      	adds	r2, r3, #2
 8007da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007daa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007dac:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007dae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db2:	441a      	add	r2, r3
 8007db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007db8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbc:	441a      	add	r2, r3
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007dc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d11e      	bne.n	8007e08 <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	3330      	adds	r3, #48	; 0x30
 8007dce:	332a      	adds	r3, #42	; 0x2a
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fe fd2b 	bl	800682c <ld_word>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <find_volume+0x34c>
 8007ddc:	230d      	movs	r3, #13
 8007dde:	e0a5      	b.n	8007f2c <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de2:	891b      	ldrh	r3, [r3, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <find_volume+0x358>
 8007de8:	230d      	movs	r3, #13
 8007dea:	e09f      	b.n	8007f2c <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dee:	3330      	adds	r3, #48	; 0x30
 8007df0:	332c      	adds	r3, #44	; 0x2c
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fe fd32 	bl	800685c <ld_dword>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	647b      	str	r3, [r7, #68]	; 0x44
 8007e06:	e01f      	b.n	8007e48 <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0a:	891b      	ldrh	r3, [r3, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <find_volume+0x380>
 8007e10:	230d      	movs	r3, #13
 8007e12:	e08b      	b.n	8007f2c <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e16:	6a1a      	ldr	r2, [r3, #32]
 8007e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e1a:	441a      	add	r2, r3
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007e20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d103      	bne.n	8007e30 <find_volume+0x39c>
 8007e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	e00a      	b.n	8007e46 <find_volume+0x3b2>
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	695a      	ldr	r2, [r3, #20]
 8007e34:	4613      	mov	r3, r2
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	4413      	add	r3, r2
 8007e3a:	085a      	lsrs	r2, r3, #1
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007e46:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4a:	699a      	ldr	r2, [r3, #24]
 8007e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e4e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007e52:	0a5b      	lsrs	r3, r3, #9
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d201      	bcs.n	8007e5c <find_volume+0x3c8>
 8007e58:	230d      	movs	r3, #13
 8007e5a:	e067      	b.n	8007f2c <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e62:	611a      	str	r2, [r3, #16]
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	691a      	ldr	r2, [r3, #16]
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6e:	2280      	movs	r2, #128	; 0x80
 8007e70:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8007e72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d149      	bne.n	8007f0e <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7c:	3330      	adds	r3, #48	; 0x30
 8007e7e:	3330      	adds	r3, #48	; 0x30
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fe fcd3 	bl	800682c <ld_word>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d140      	bne.n	8007f0e <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e8e:	3301      	adds	r3, #1
 8007e90:	4619      	mov	r1, r3
 8007e92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e94:	f7fe fe4f 	bl	8006b36 <move_window>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d137      	bne.n	8007f0e <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea6:	3330      	adds	r3, #48	; 0x30
 8007ea8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fe fcbd 	bl	800682c <ld_word>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d127      	bne.n	8007f0e <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec0:	3330      	adds	r3, #48	; 0x30
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe fcca 	bl	800685c <ld_dword>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	4b1b      	ldr	r3, [pc, #108]	; (8007f38 <find_volume+0x4a4>)
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d11e      	bne.n	8007f0e <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed2:	3330      	adds	r3, #48	; 0x30
 8007ed4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fe fcbf 	bl	800685c <ld_dword>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	4b16      	ldr	r3, [pc, #88]	; (8007f3c <find_volume+0x4a8>)
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d113      	bne.n	8007f0e <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee8:	3330      	adds	r3, #48	; 0x30
 8007eea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fe fcb4 	bl	800685c <ld_dword>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efc:	3330      	adds	r3, #48	; 0x30
 8007efe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe fcaa 	bl	800685c <ld_dword>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f10:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007f14:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8007f16:	4b0a      	ldr	r3, [pc, #40]	; (8007f40 <find_volume+0x4ac>)
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	4b08      	ldr	r3, [pc, #32]	; (8007f40 <find_volume+0x4ac>)
 8007f20:	801a      	strh	r2, [r3, #0]
 8007f22:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <find_volume+0x4ac>)
 8007f24:	881a      	ldrh	r2, [r3, #0]
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3758      	adds	r7, #88	; 0x58
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	0ffffff5 	.word	0x0ffffff5
 8007f38:	41615252 	.word	0x41615252
 8007f3c:	61417272 	.word	0x61417272
 8007f40:	20000094 	.word	0x20000094

08007f44 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007f4e:	2309      	movs	r3, #9
 8007f50:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d01c      	beq.n	8007f92 <validate+0x4e>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d018      	beq.n	8007f92 <validate+0x4e>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d013      	beq.n	8007f92 <validate+0x4e>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	889a      	ldrh	r2, [r3, #4]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	88db      	ldrh	r3, [r3, #6]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d10c      	bne.n	8007f92 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	785b      	ldrb	r3, [r3, #1]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fe f988 	bl	8006294 <disk_status>
 8007f84:	4603      	mov	r3, r0
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <validate+0x4e>
			res = FR_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d102      	bne.n	8007f9e <validate+0x5a>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	e000      	b.n	8007fa0 <validate+0x5c>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	6013      	str	r3, [r2, #0]
	return res;
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b088      	sub	sp, #32
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007fc2:	f107 0310 	add.w	r3, r7, #16
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff fcc9 	bl	800795e <get_ldnumber>
 8007fcc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	da01      	bge.n	8007fd8 <f_mount+0x28>
 8007fd4:	230b      	movs	r3, #11
 8007fd6:	e025      	b.n	8008024 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007fd8:	4a14      	ldr	r2, [pc, #80]	; (800802c <f_mount+0x7c>)
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fe0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	2200      	movs	r2, #0
 8007fec:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	490b      	ldr	r1, [pc, #44]	; (800802c <f_mount+0x7c>)
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8008004:	79fb      	ldrb	r3, [r7, #7]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <f_mount+0x5e>
 800800a:	2300      	movs	r3, #0
 800800c:	e00a      	b.n	8008024 <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800800e:	f107 010c 	add.w	r1, r7, #12
 8008012:	f107 0308 	add.w	r3, r7, #8
 8008016:	2200      	movs	r2, #0
 8008018:	4618      	mov	r0, r3
 800801a:	f7ff fd3b 	bl	8007a94 <find_volume>
 800801e:	4603      	mov	r3, r0
 8008020:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008022:	7dfb      	ldrb	r3, [r7, #23]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3720      	adds	r7, #32
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	20000090 	.word	0x20000090

08008030 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008030:	b590      	push	{r4, r7, lr}
 8008032:	b099      	sub	sp, #100	; 0x64
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	4613      	mov	r3, r2
 800803c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <f_open+0x18>
 8008044:	2309      	movs	r3, #9
 8008046:	e172      	b.n	800832e <f_open+0x2fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8008048:	79fb      	ldrb	r3, [r7, #7]
 800804a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800804e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008050:	79fa      	ldrb	r2, [r7, #7]
 8008052:	f107 0114 	add.w	r1, r7, #20
 8008056:	f107 0308 	add.w	r3, r7, #8
 800805a:	4618      	mov	r0, r3
 800805c:	f7ff fd1a 	bl	8007a94 <find_volume>
 8008060:	4603      	mov	r3, r0
 8008062:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008066:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800806a:	2b00      	cmp	r3, #0
 800806c:	f040 8156 	bne.w	800831c <f_open+0x2ec>
		dj.obj.fs = fs;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	f107 0318 	add.w	r3, r7, #24
 800807a:	4611      	mov	r1, r2
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff fbff 	bl	8007880 <follow_path>
 8008082:	4603      	mov	r3, r0
 8008084:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8008088:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800808c:	2b00      	cmp	r3, #0
 800808e:	d107      	bne.n	80080a0 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008090:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008094:	b25b      	sxtb	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	da02      	bge.n	80080a0 <f_open+0x70>
				res = FR_INVALID_NAME;
 800809a:	2306      	movs	r3, #6
 800809c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	f003 031c 	and.w	r3, r3, #28
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d073      	beq.n	8008192 <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 80080aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d010      	beq.n	80080d4 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80080b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080b6:	2b04      	cmp	r3, #4
 80080b8:	d107      	bne.n	80080ca <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 80080ba:	f107 0318 	add.w	r3, r7, #24
 80080be:	4618      	mov	r0, r3
 80080c0:	f7ff fae9 	bl	8007696 <dir_register>
 80080c4:	4603      	mov	r3, r0
 80080c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80080ca:	79fb      	ldrb	r3, [r7, #7]
 80080cc:	f043 0308 	orr.w	r3, r3, #8
 80080d0:	71fb      	strb	r3, [r7, #7]
 80080d2:	e010      	b.n	80080f6 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80080d4:	7fbb      	ldrb	r3, [r7, #30]
 80080d6:	f003 0311 	and.w	r3, r3, #17
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <f_open+0xb6>
					res = FR_DENIED;
 80080de:	2307      	movs	r3, #7
 80080e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80080e4:	e007      	b.n	80080f6 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	f003 0304 	and.w	r3, r3, #4
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <f_open+0xc6>
 80080f0:	2308      	movs	r3, #8
 80080f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80080f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d163      	bne.n	80081c6 <f_open+0x196>
 80080fe:	79fb      	ldrb	r3, [r7, #7]
 8008100:	f003 0308 	and.w	r3, r3, #8
 8008104:	2b00      	cmp	r3, #0
 8008106:	d05e      	beq.n	80081c6 <f_open+0x196>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800810c:	4611      	mov	r1, r2
 800810e:	4618      	mov	r0, r3
 8008110:	f7ff fa2d 	bl	800756e <ld_clust>
 8008114:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 8008116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008118:	f103 040e 	add.w	r4, r3, #14
 800811c:	f7fe fb7c 	bl	8006818 <get_fattime>
 8008120:	4603      	mov	r3, r0
 8008122:	4619      	mov	r1, r3
 8008124:	4620      	mov	r0, r4
 8008126:	f7fe fbd7 	bl	80068d8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800812a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812c:	330b      	adds	r3, #11
 800812e:	2220      	movs	r2, #32
 8008130:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008136:	2200      	movs	r2, #0
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff fa37 	bl	80075ac <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800813e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008140:	331c      	adds	r3, #28
 8008142:	2100      	movs	r1, #0
 8008144:	4618      	mov	r0, r3
 8008146:	f7fe fbc7 	bl	80068d8 <st_dword>
					fs->wflag = 1;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2201      	movs	r2, #1
 800814e:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8008150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008152:	2b00      	cmp	r3, #0
 8008154:	d037      	beq.n	80081c6 <f_open+0x196>
						dw = fs->winsect;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815a:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 800815c:	f107 0318 	add.w	r3, r7, #24
 8008160:	2200      	movs	r2, #0
 8008162:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008164:	4618      	mov	r0, r3
 8008166:	f7fe ff2c 	bl	8006fc2 <remove_chain>
 800816a:	4603      	mov	r3, r0
 800816c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008170:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008174:	2b00      	cmp	r3, #0
 8008176:	d126      	bne.n	80081c6 <f_open+0x196>
							res = move_window(fs, dw);
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800817c:	4618      	mov	r0, r3
 800817e:	f7fe fcda 	bl	8006b36 <move_window>
 8008182:	4603      	mov	r3, r0
 8008184:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800818c:	3a01      	subs	r2, #1
 800818e:	60da      	str	r2, [r3, #12]
 8008190:	e019      	b.n	80081c6 <f_open+0x196>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8008192:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008196:	2b00      	cmp	r3, #0
 8008198:	d115      	bne.n	80081c6 <f_open+0x196>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800819a:	7fbb      	ldrb	r3, [r7, #30]
 800819c:	f003 0310 	and.w	r3, r3, #16
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d003      	beq.n	80081ac <f_open+0x17c>
					res = FR_NO_FILE;
 80081a4:	2304      	movs	r3, #4
 80081a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80081aa:	e00c      	b.n	80081c6 <f_open+0x196>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 80081ac:	79fb      	ldrb	r3, [r7, #7]
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d007      	beq.n	80081c6 <f_open+0x196>
 80081b6:	7fbb      	ldrb	r3, [r7, #30]
 80081b8:	f003 0301 	and.w	r3, r3, #1
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <f_open+0x196>
						res = FR_DENIED;
 80081c0:	2307      	movs	r3, #7
 80081c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80081c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10f      	bne.n	80081ee <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 80081ce:	79fb      	ldrb	r3, [r7, #7]
 80081d0:	f003 0308 	and.w	r3, r3, #8
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d003      	beq.n	80081e0 <f_open+0x1b0>
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081de:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80081e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80081ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f040 8092 	bne.w	800831c <f_open+0x2ec>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081fc:	4611      	mov	r1, r2
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff f9b5 	bl	800756e <ld_clust>
 8008204:	4602      	mov	r2, r0
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800820a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820c:	331c      	adds	r3, #28
 800820e:	4618      	mov	r0, r3
 8008210:	f7fe fb24 	bl	800685c <ld_dword>
 8008214:	4602      	mov	r2, r0
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	88da      	ldrh	r2, [r3, #6]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	79fa      	ldrb	r2, [r7, #7]
 800822c:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3328      	adds	r3, #40	; 0x28
 8008244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008248:	2100      	movs	r1, #0
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe fb91 	bl	8006972 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	f003 0320 	and.w	r3, r3, #32
 8008256:	2b00      	cmp	r3, #0
 8008258:	d060      	beq.n	800831c <f_open+0x2ec>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d05c      	beq.n	800831c <f_open+0x2ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	895b      	ldrh	r3, [r3, #10]
 800826e:	025b      	lsls	r3, r3, #9
 8008270:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	657b      	str	r3, [r7, #84]	; 0x54
 800827e:	e016      	b.n	80082ae <f_open+0x27e>
					clst = get_fat(&fp->obj, clst);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008284:	4618      	mov	r0, r3
 8008286:	f7fe fd10 	bl	8006caa <get_fat>
 800828a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800828c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800828e:	2b01      	cmp	r3, #1
 8008290:	d802      	bhi.n	8008298 <f_open+0x268>
 8008292:	2302      	movs	r3, #2
 8008294:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800829a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829e:	d102      	bne.n	80082a6 <f_open+0x276>
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	657b      	str	r3, [r7, #84]	; 0x54
 80082ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d103      	bne.n	80082be <f_open+0x28e>
 80082b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d8e0      	bhi.n	8008280 <f_open+0x250>
				}
				fp->clust = clst;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082c2:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80082c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d127      	bne.n	800831c <f_open+0x2ec>
 80082cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d022      	beq.n	800831c <f_open+0x2ec>
					if ((sc = clst2sect(fs, clst)) == 0) {
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe fcc6 	bl	8006c6c <clst2sect>
 80082e0:	6478      	str	r0, [r7, #68]	; 0x44
 80082e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d103      	bne.n	80082f0 <f_open+0x2c0>
						res = FR_INT_ERR;
 80082e8:	2302      	movs	r3, #2
 80082ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80082ee:	e015      	b.n	800831c <f_open+0x2ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80082f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082f2:	0a5a      	lsrs	r2, r3, #9
 80082f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082f6:	441a      	add	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	7858      	ldrb	r0, [r3, #1]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	69da      	ldr	r2, [r3, #28]
 800830a:	2301      	movs	r3, #1
 800830c:	f7fd ffd8 	bl	80062c0 <disk_read>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d002      	beq.n	800831c <f_open+0x2ec>
 8008316:	2301      	movs	r3, #1
 8008318:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800831c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <f_open+0x2fa>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800832a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800832e:	4618      	mov	r0, r3
 8008330:	3764      	adds	r7, #100	; 0x64
 8008332:	46bd      	mov	sp, r7
 8008334:	bd90      	pop	{r4, r7, pc}

08008336 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b08c      	sub	sp, #48	; 0x30
 800833a:	af00      	add	r7, sp, #0
 800833c:	60f8      	str	r0, [r7, #12]
 800833e:	60b9      	str	r1, [r7, #8]
 8008340:	607a      	str	r2, [r7, #4]
 8008342:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	2200      	movs	r2, #0
 800834c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f107 0210 	add.w	r2, r7, #16
 8008354:	4611      	mov	r1, r2
 8008356:	4618      	mov	r0, r3
 8008358:	f7ff fdf4 	bl	8007f44 <validate>
 800835c:	4603      	mov	r3, r0
 800835e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008366:	2b00      	cmp	r3, #0
 8008368:	d107      	bne.n	800837a <f_write+0x44>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	7c5b      	ldrb	r3, [r3, #17]
 800836e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <f_write+0x4a>
 800837a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800837e:	e13f      	b.n	8008600 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	7c1b      	ldrb	r3, [r3, #16]
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <f_write+0x5a>
 800838c:	2307      	movs	r3, #7
 800838e:	e137      	b.n	8008600 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	695a      	ldr	r2, [r3, #20]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	441a      	add	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	429a      	cmp	r2, r3
 800839e:	f080 8121 	bcs.w	80085e4 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	43db      	mvns	r3, r3
 80083a8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80083aa:	e11b      	b.n	80085e4 <f_write+0x2ae>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f040 80d7 	bne.w	8008568 <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	0a5b      	lsrs	r3, r3, #9
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	8952      	ldrh	r2, [r2, #10]
 80083c4:	3a01      	subs	r2, #1
 80083c6:	4013      	ands	r3, r2
 80083c8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d137      	bne.n	8008440 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10c      	bne.n	80083f2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80083de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10e      	bne.n	8008402 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2100      	movs	r1, #0
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe fe4f 	bl	800708c <create_chain>
 80083ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80083f0:	e007      	b.n	8008402 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	4619      	mov	r1, r3
 80083fa:	4610      	mov	r0, r2
 80083fc:	f7fe fe46 	bl	800708c <create_chain>
 8008400:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 80f2 	beq.w	80085ee <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	2b01      	cmp	r3, #1
 800840e:	d104      	bne.n	800841a <f_write+0xe4>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2202      	movs	r2, #2
 8008414:	745a      	strb	r2, [r3, #17]
 8008416:	2302      	movs	r3, #2
 8008418:	e0f2      	b.n	8008600 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008420:	d104      	bne.n	800842c <f_write+0xf6>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2201      	movs	r2, #1
 8008426:	745a      	strb	r2, [r3, #17]
 8008428:	2301      	movs	r3, #1
 800842a:	e0e9      	b.n	8008600 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008430:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d102      	bne.n	8008440 <f_write+0x10a>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800843e:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	7c1b      	ldrb	r3, [r3, #16]
 8008444:	b25b      	sxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	da18      	bge.n	800847c <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	7858      	ldrb	r0, [r3, #1]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	69da      	ldr	r2, [r3, #28]
 8008458:	2301      	movs	r3, #1
 800845a:	f7fd ff9b 	bl	8006394 <disk_write>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d004      	beq.n	800846e <f_write+0x138>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2201      	movs	r2, #1
 8008468:	745a      	strb	r2, [r3, #17]
 800846a:	2301      	movs	r3, #1
 800846c:	e0c8      	b.n	8008600 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	7c1b      	ldrb	r3, [r3, #16]
 8008472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008476:	b2da      	uxtb	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	4619      	mov	r1, r3
 8008484:	4610      	mov	r0, r2
 8008486:	f7fe fbf1 	bl	8006c6c <clst2sect>
 800848a:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d104      	bne.n	800849c <f_write+0x166>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2202      	movs	r2, #2
 8008496:	745a      	strb	r2, [r3, #17]
 8008498:	2302      	movs	r3, #2
 800849a:	e0b1      	b.n	8008600 <f_write+0x2ca>
			sect += csect;
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	4413      	add	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	0a5b      	lsrs	r3, r3, #9
 80084a8:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d03c      	beq.n	800852a <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	6a3b      	ldr	r3, [r7, #32]
 80084b4:	4413      	add	r3, r2
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	8952      	ldrh	r2, [r2, #10]
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d905      	bls.n	80084ca <f_write+0x194>
					cc = fs->csize - csect;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	895b      	ldrh	r3, [r3, #10]
 80084c2:	461a      	mov	r2, r3
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	7858      	ldrb	r0, [r3, #1]
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	69f9      	ldr	r1, [r7, #28]
 80084d4:	f7fd ff5e 	bl	8006394 <disk_write>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d004      	beq.n	80084e8 <f_write+0x1b2>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2201      	movs	r2, #1
 80084e2:	745a      	strb	r2, [r3, #17]
 80084e4:	2301      	movs	r3, #1
 80084e6:	e08b      	b.n	8008600 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	69da      	ldr	r2, [r3, #28]
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	6a3a      	ldr	r2, [r7, #32]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d915      	bls.n	8008522 <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	69da      	ldr	r2, [r3, #28]
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	025b      	lsls	r3, r3, #9
 8008506:	69fa      	ldr	r2, [r7, #28]
 8008508:	4413      	add	r3, r2
 800850a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800850e:	4619      	mov	r1, r3
 8008510:	f7fe fa0e 	bl	8006930 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	7c1b      	ldrb	r3, [r3, #16]
 8008518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800851c:	b2da      	uxtb	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	025b      	lsls	r3, r3, #9
 8008526:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008528:	e03f      	b.n	80085aa <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	429a      	cmp	r2, r3
 8008532:	d016      	beq.n	8008562 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	695a      	ldr	r2, [r3, #20]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800853c:	429a      	cmp	r2, r3
 800853e:	d210      	bcs.n	8008562 <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	7858      	ldrb	r0, [r3, #1]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800854a:	2301      	movs	r3, #1
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	f7fd feb7 	bl	80062c0 <disk_read>
 8008552:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008554:	2b00      	cmp	r3, #0
 8008556:	d004      	beq.n	8008562 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2201      	movs	r2, #1
 800855c:	745a      	strb	r2, [r3, #17]
 800855e:	2301      	movs	r3, #1
 8008560:	e04e      	b.n	8008600 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	695b      	ldr	r3, [r3, #20]
 800856c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008570:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008574:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	429a      	cmp	r2, r3
 800857c:	d901      	bls.n	8008582 <f_write+0x24c>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008590:	4413      	add	r3, r2
 8008592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008594:	69f9      	ldr	r1, [r7, #28]
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe f9ca 	bl	8006930 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	7c1b      	ldrb	r3, [r3, #16]
 80085a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	741a      	strb	r2, [r3, #16]
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	607b      	str	r3, [r7, #4]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	441a      	add	r2, r3
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	69fa      	ldr	r2, [r7, #28]
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	4413      	add	r3, r2
 80085c4:	61fb      	str	r3, [r7, #28]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	695a      	ldr	r2, [r3, #20]
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	441a      	add	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	615a      	str	r2, [r3, #20]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	429a      	cmp	r2, r3
 80085dc:	bf38      	it	cc
 80085de:	461a      	movcc	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	60da      	str	r2, [r3, #12]
	for ( ;  btw;							/* Repeat until all data written */
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f47f aee0 	bne.w	80083ac <f_write+0x76>
 80085ec:	e000      	b.n	80085f0 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80085ee:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	7c1b      	ldrb	r3, [r3, #16]
 80085f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3730      	adds	r7, #48	; 0x30
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f107 0208 	add.w	r2, r7, #8
 8008616:	4611      	mov	r1, r2
 8008618:	4618      	mov	r0, r3
 800861a:	f7ff fc93 	bl	8007f44 <validate>
 800861e:	4603      	mov	r3, r0
 8008620:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d168      	bne.n	80086fa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	7c1b      	ldrb	r3, [r3, #16]
 800862c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008630:	2b00      	cmp	r3, #0
 8008632:	d062      	beq.n	80086fa <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	7c1b      	ldrb	r3, [r3, #16]
 8008638:	b25b      	sxtb	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	da15      	bge.n	800866a <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	7858      	ldrb	r0, [r3, #1]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	69da      	ldr	r2, [r3, #28]
 800864c:	2301      	movs	r3, #1
 800864e:	f7fd fea1 	bl	8006394 <disk_write>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d001      	beq.n	800865c <f_sync+0x54>
 8008658:	2301      	movs	r3, #1
 800865a:	e04f      	b.n	80086fc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	7c1b      	ldrb	r3, [r3, #16]
 8008660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008664:	b2da      	uxtb	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800866a:	f7fe f8d5 	bl	8006818 <get_fattime>
 800866e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	4619      	mov	r1, r3
 8008678:	4610      	mov	r0, r2
 800867a:	f7fe fa5c 	bl	8006b36 <move_window>
 800867e:	4603      	mov	r3, r0
 8008680:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008682:	7dfb      	ldrb	r3, [r7, #23]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d138      	bne.n	80086fa <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	330b      	adds	r3, #11
 8008692:	781a      	ldrb	r2, [r3, #0]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	330b      	adds	r3, #11
 8008698:	f042 0220 	orr.w	r2, r2, #32
 800869c:	b2d2      	uxtb	r2, r2
 800869e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	461a      	mov	r2, r3
 80086aa:	68f9      	ldr	r1, [r7, #12]
 80086ac:	f7fe ff7e 	bl	80075ac <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f103 021c 	add.w	r2, r3, #28
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	4619      	mov	r1, r3
 80086bc:	4610      	mov	r0, r2
 80086be:	f7fe f90b 	bl	80068d8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3316      	adds	r3, #22
 80086c6:	6939      	ldr	r1, [r7, #16]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fe f905 	bl	80068d8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3312      	adds	r3, #18
 80086d2:	2100      	movs	r1, #0
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fe f8e4 	bl	80068a2 <st_word>
					fs->wflag = 1;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2201      	movs	r2, #1
 80086de:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe fa54 	bl	8006b90 <sync_fs>
 80086e8:	4603      	mov	r3, r0
 80086ea:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	7c1b      	ldrb	r3, [r3, #16]
 80086f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3718      	adds	r7, #24
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7ff ff7b 	bl	8008608 <f_sync>
 8008712:	4603      	mov	r3, r0
 8008714:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10e      	bne.n	800873a <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f107 0208 	add.w	r2, r7, #8
 8008722:	4611      	mov	r1, r2
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff fc0d 	bl	8007f44 <validate>
 800872a:	4603      	mov	r3, r0
 800872c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800872e:	7bfb      	ldrb	r3, [r7, #15]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d102      	bne.n	800873a <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800873a:	7bfb      	ldrb	r3, [r7, #15]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800874c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008750:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	2b00      	cmp	r3, #0
 800875a:	d013      	beq.n	8008784 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800875c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008760:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8008764:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00b      	beq.n	8008784 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800876c:	e000      	b.n	8008770 <ITM_SendChar+0x2c>
    {
      __NOP();
 800876e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8008770:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d0f9      	beq.n	800876e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800877a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	b2d2      	uxtb	r2, r2
 8008782:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8008784:	687b      	ldr	r3, [r7, #4]
}
 8008786:	4618      	mov	r0, r3
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <_write>:
static void MX_DCMI_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len){ // do fprint
 8008792:	b580      	push	{r7, lr}
 8008794:	b086      	sub	sp, #24
 8008796:	af00      	add	r7, sp, #0
 8008798:	60f8      	str	r0, [r7, #12]
 800879a:	60b9      	str	r1, [r7, #8]
 800879c:	607a      	str	r2, [r7, #4]
	int i=0;
 800879e:	2300      	movs	r3, #0
 80087a0:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++){
 80087a2:	2300      	movs	r3, #0
 80087a4:	617b      	str	r3, [r7, #20]
 80087a6:	e009      	b.n	80087bc <_write+0x2a>
		ITM_SendChar(*ptr++);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	1c5a      	adds	r2, r3, #1
 80087ac:	60ba      	str	r2, [r7, #8]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7ff ffc7 	bl	8008744 <ITM_SendChar>
	for(i=0; i<len; i++){
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	3301      	adds	r3, #1
 80087ba:	617b      	str	r3, [r7, #20]
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	dbf1      	blt.n	80087a8 <_write+0x16>

	}
	return len;
 80087c4:	687b      	ldr	r3, [r7, #4]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3718      	adds	r7, #24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
	...

080087d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80087d0:	b590      	push	{r4, r7, lr}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80087d6:	f7f7 fecb 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80087da:	f000 f8af 	bl	800893c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80087de:	f000 f9f5 	bl	8008bcc <MX_GPIO_Init>
  MX_DMA_Init();
 80087e2:	f000 f9d3 	bl	8008b8c <MX_DMA_Init>
  MX_I2C1_Init();
 80087e6:	f000 f943 	bl	8008a70 <MX_I2C1_Init>
  MX_DCMI_Init();
 80087ea:	f000 f919 	bl	8008a20 <MX_DCMI_Init>
  MX_SPI1_Init();
 80087ee:	f000 f96d 	bl	8008acc <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80087f2:	f000 f9a1 	bl	8008b38 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  fresult = f_mount(&FatFs, "", 0);
 80087f6:	2200      	movs	r2, #0
 80087f8:	4944      	ldr	r1, [pc, #272]	; (800890c <main+0x13c>)
 80087fa:	4845      	ldr	r0, [pc, #276]	; (8008910 <main+0x140>)
 80087fc:	f7ff fbd8 	bl	8007fb0 <f_mount>
 8008800:	4603      	mov	r3, r0
 8008802:	461a      	mov	r2, r3
 8008804:	4b43      	ldr	r3, [pc, #268]	; (8008914 <main+0x144>)
 8008806:	701a      	strb	r2, [r3, #0]
  fresult = f_open(&file, "write.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8008808:	2212      	movs	r2, #18
 800880a:	4943      	ldr	r1, [pc, #268]	; (8008918 <main+0x148>)
 800880c:	4843      	ldr	r0, [pc, #268]	; (800891c <main+0x14c>)
 800880e:	f7ff fc0f 	bl	8008030 <f_open>
 8008812:	4603      	mov	r3, r0
 8008814:	461a      	mov	r2, r3
 8008816:	4b3f      	ldr	r3, [pc, #252]	; (8008914 <main+0x144>)
 8008818:	701a      	strb	r2, [r3, #0]
  int len = sprintf( buffer, "Hello PTM!\r\n");
 800881a:	4a41      	ldr	r2, [pc, #260]	; (8008920 <main+0x150>)
 800881c:	4b41      	ldr	r3, [pc, #260]	; (8008924 <main+0x154>)
 800881e:	4614      	mov	r4, r2
 8008820:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008822:	6020      	str	r0, [r4, #0]
 8008824:	6061      	str	r1, [r4, #4]
 8008826:	60a2      	str	r2, [r4, #8]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	7323      	strb	r3, [r4, #12]
 800882c:	230c      	movs	r3, #12
 800882e:	60bb      	str	r3, [r7, #8]
  UINT bw;
 // uint16_t bw_uart;
  fresult = f_write(&file, buffer, len, &bw);
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	1d3b      	adds	r3, r7, #4
 8008834:	493a      	ldr	r1, [pc, #232]	; (8008920 <main+0x150>)
 8008836:	4839      	ldr	r0, [pc, #228]	; (800891c <main+0x14c>)
 8008838:	f7ff fd7d 	bl	8008336 <f_write>
 800883c:	4603      	mov	r3, r0
 800883e:	461a      	mov	r2, r3
 8008840:	4b34      	ldr	r3, [pc, #208]	; (8008914 <main+0x144>)
 8008842:	701a      	strb	r2, [r3, #0]
  fresult = f_close (&file);
 8008844:	4835      	ldr	r0, [pc, #212]	; (800891c <main+0x14c>)
 8008846:	f7ff ff5d 	bl	8008704 <f_close>
 800884a:	4603      	mov	r3, r0
 800884c:	461a      	mov	r2, r3
 800884e:	4b31      	ldr	r3, [pc, #196]	; (8008914 <main+0x144>)
 8008850:	701a      	strb	r2, [r3, #0]



  if (camera_init() == RET_OK)
 8008852:	f7fd fa31 	bl	8005cb8 <camera_init>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10b      	bne.n	8008874 <main+0xa4>
  {
	  if (camera_config(CAMERA_MODE_QVGA_RGB565) == RET_OK) // CAMERA_MODE_QVGA_RGB565 -> ignored
 800885c:	2000      	movs	r0, #0
 800885e:	f7fd fa3b 	bl	8005cd8 <camera_config>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d105      	bne.n	8008874 <main+0xa4>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // init OK
 8008868:	2201      	movs	r2, #1
 800886a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800886e:	482e      	ldr	r0, [pc, #184]	; (8008928 <main+0x158>)
 8008870:	f7fa f9e6 	bl	8002c40 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  if (camera_startCap(CAMERA_CAP_SINGLE_FRAME, (uint32_t)cam_buf)  == RET_OK)
 8008874:	4b2d      	ldr	r3, [pc, #180]	; (800892c <main+0x15c>)
 8008876:	4619      	mov	r1, r3
 8008878:	2001      	movs	r0, #1
 800887a:	f7fd fa49 	bl	8005d10 <camera_startCap>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d13f      	bne.n	8008904 <main+0x134>
	  //if (camera_startCap(CAMERA_CAP_SINGLE_FRAME, cam_buf)  == RET_OK)
	  {
		  camera_stopCap();
 8008884:	f7fd fa62 	bl	8005d4c <camera_stopCap>
		  f_mount(&FatFs, "", 0);
 8008888:	2200      	movs	r2, #0
 800888a:	4920      	ldr	r1, [pc, #128]	; (800890c <main+0x13c>)
 800888c:	4820      	ldr	r0, [pc, #128]	; (8008910 <main+0x140>)
 800888e:	f7ff fb8f 	bl	8007fb0 <f_mount>
		  f_open(&file, "image.raw", FA_OPEN_ALWAYS | FA_CREATE_ALWAYS | FA_WRITE);
 8008892:	221a      	movs	r2, #26
 8008894:	4926      	ldr	r1, [pc, #152]	; (8008930 <main+0x160>)
 8008896:	4821      	ldr	r0, [pc, #132]	; (800891c <main+0x14c>)
 8008898:	f7ff fbca 	bl	8008030 <f_open>
		//   arr2[i] = *ptr; //pass data to other array
		//   ptr++;          //move your pointer
		//  }


		  for (int i = 0; i < 320 * 120; i++)
 800889c:	2300      	movs	r3, #0
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	e014      	b.n	80088cc <main+0xfc>
		  {

			 // YValues[i] = ((cam_buf[i] << 8) >> 8);

			  f_write(&file, &cam_buf[i], 2, &bw);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	4a21      	ldr	r2, [pc, #132]	; (800892c <main+0x15c>)
 80088a8:	1899      	adds	r1, r3, r2
 80088aa:	1d3b      	adds	r3, r7, #4
 80088ac:	2202      	movs	r2, #2
 80088ae:	481b      	ldr	r0, [pc, #108]	; (800891c <main+0x14c>)
 80088b0:	f7ff fd41 	bl	8008336 <f_write>
			  HAL_UART_Transmit_IT(&huart3, &cam_buf[i], 16);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	4a1c      	ldr	r2, [pc, #112]	; (800892c <main+0x15c>)
 80088ba:	4413      	add	r3, r2
 80088bc:	2210      	movs	r2, #16
 80088be:	4619      	mov	r1, r3
 80088c0:	481c      	ldr	r0, [pc, #112]	; (8008934 <main+0x164>)
 80088c2:	f7fc fbf8 	bl	80050b6 <HAL_UART_Transmit_IT>
		  for (int i = 0; i < 320 * 120; i++)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3301      	adds	r3, #1
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 80088d2:	dbe6      	blt.n	80088a2 <main+0xd2>


		  //n = sizeof(cam_buf);
		  //HAL_UART_Transmit_IT(&huart3, cam_buf, n);

		  fresult = f_close (&file);
 80088d4:	4811      	ldr	r0, [pc, #68]	; (800891c <main+0x14c>)
 80088d6:	f7ff ff15 	bl	8008704 <f_close>
 80088da:	4603      	mov	r3, r0
 80088dc:	461a      	mov	r2, r3
 80088de:	4b0d      	ldr	r3, [pc, #52]	; (8008914 <main+0x144>)
 80088e0:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // captured
 80088e2:	2201      	movs	r2, #1
 80088e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80088e8:	480f      	ldr	r0, [pc, #60]	; (8008928 <main+0x158>)
 80088ea:	f7fa f9a9 	bl	8002c40 <HAL_GPIO_WritePin>
		  HAL_Delay(3000);
 80088ee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80088f2:	f7f7 feaf 	bl	8000654 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80088f6:	2200      	movs	r2, #0
 80088f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80088fc:	480a      	ldr	r0, [pc, #40]	; (8008928 <main+0x158>)
 80088fe:	f7fa f99f 	bl	8002c40 <HAL_GPIO_WritePin>
 8008902:	e7b7      	b.n	8008874 <main+0xa4>

	  } else {
		  printf("not good");
 8008904:	480c      	ldr	r0, [pc, #48]	; (8008938 <main+0x168>)
 8008906:	f000 fe6f 	bl	80095e8 <iprintf>
	  if (camera_startCap(CAMERA_CAP_SINGLE_FRAME, (uint32_t)cam_buf)  == RET_OK)
 800890a:	e7b3      	b.n	8008874 <main+0xa4>
 800890c:	0800a3e4 	.word	0x0800a3e4
 8008910:	20000098 	.word	0x20000098
 8008914:	20013359 	.word	0x20013359
 8008918:	0800a3e8 	.word	0x0800a3e8
 800891c:	20012fec 	.word	0x20012fec
 8008920:	20013258 	.word	0x20013258
 8008924:	0800a3f4 	.word	0x0800a3f4
 8008928:	40020c00 	.word	0x40020c00
 800892c:	200002f8 	.word	0x200002f8
 8008930:	0800a404 	.word	0x0800a404
 8008934:	20012ef8 	.word	0x20012ef8
 8008938:	0800a410 	.word	0x0800a410

0800893c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b094      	sub	sp, #80	; 0x50
 8008940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008942:	f107 0320 	add.w	r3, r7, #32
 8008946:	2230      	movs	r2, #48	; 0x30
 8008948:	2100      	movs	r1, #0
 800894a:	4618      	mov	r0, r3
 800894c:	f000 fe44 	bl	80095d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008950:	f107 030c 	add.w	r3, r7, #12
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	605a      	str	r2, [r3, #4]
 800895a:	609a      	str	r2, [r3, #8]
 800895c:	60da      	str	r2, [r3, #12]
 800895e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008960:	2300      	movs	r3, #0
 8008962:	60bb      	str	r3, [r7, #8]
 8008964:	4b2c      	ldr	r3, [pc, #176]	; (8008a18 <SystemClock_Config+0xdc>)
 8008966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008968:	4a2b      	ldr	r2, [pc, #172]	; (8008a18 <SystemClock_Config+0xdc>)
 800896a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800896e:	6413      	str	r3, [r2, #64]	; 0x40
 8008970:	4b29      	ldr	r3, [pc, #164]	; (8008a18 <SystemClock_Config+0xdc>)
 8008972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008978:	60bb      	str	r3, [r7, #8]
 800897a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800897c:	2300      	movs	r3, #0
 800897e:	607b      	str	r3, [r7, #4]
 8008980:	4b26      	ldr	r3, [pc, #152]	; (8008a1c <SystemClock_Config+0xe0>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a25      	ldr	r2, [pc, #148]	; (8008a1c <SystemClock_Config+0xe0>)
 8008986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800898a:	6013      	str	r3, [r2, #0]
 800898c:	4b23      	ldr	r3, [pc, #140]	; (8008a1c <SystemClock_Config+0xe0>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008994:	607b      	str	r3, [r7, #4]
 8008996:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8008998:	2303      	movs	r3, #3
 800899a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800899c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80089a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80089a2:	2301      	movs	r3, #1
 80089a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80089a6:	2310      	movs	r3, #16
 80089a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80089aa:	2302      	movs	r3, #2
 80089ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80089ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80089b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80089b4:	2304      	movs	r3, #4
 80089b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80089b8:	23a8      	movs	r3, #168	; 0xa8
 80089ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80089bc:	2302      	movs	r3, #2
 80089be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80089c0:	2304      	movs	r3, #4
 80089c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80089c4:	f107 0320 	add.w	r3, r7, #32
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fb fa69 	bl	8003ea0 <HAL_RCC_OscConfig>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80089d4:	f000 f990 	bl	8008cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80089d8:	230f      	movs	r3, #15
 80089da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80089dc:	2302      	movs	r3, #2
 80089de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80089e0:	2300      	movs	r3, #0
 80089e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80089e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80089e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80089ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80089f0:	f107 030c 	add.w	r3, r7, #12
 80089f4:	2105      	movs	r1, #5
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fb fcc2 	bl	8004380 <HAL_RCC_ClockConfig>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8008a02:	f000 f979 	bl	8008cf8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8008a06:	2200      	movs	r2, #0
 8008a08:	2100      	movs	r1, #0
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	f7fb fd9e 	bl	800454c <HAL_RCC_MCOConfig>
}
 8008a10:	bf00      	nop
 8008a12:	3750      	adds	r7, #80	; 0x50
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	40023800 	.word	0x40023800
 8008a1c:	40007000 	.word	0x40007000

08008a20 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8008a24:	4b10      	ldr	r3, [pc, #64]	; (8008a68 <MX_DCMI_Init+0x48>)
 8008a26:	4a11      	ldr	r2, [pc, #68]	; (8008a6c <MX_DCMI_Init+0x4c>)
 8008a28:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8008a2a:	4b0f      	ldr	r3, [pc, #60]	; (8008a68 <MX_DCMI_Init+0x48>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8008a30:	4b0d      	ldr	r3, [pc, #52]	; (8008a68 <MX_DCMI_Init+0x48>)
 8008a32:	2220      	movs	r2, #32
 8008a34:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8008a36:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <MX_DCMI_Init+0x48>)
 8008a38:	2280      	movs	r2, #128	; 0x80
 8008a3a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <MX_DCMI_Init+0x48>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8008a42:	4b09      	ldr	r3, [pc, #36]	; (8008a68 <MX_DCMI_Init+0x48>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8008a48:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <MX_DCMI_Init+0x48>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8008a4e:	4b06      	ldr	r3, [pc, #24]	; (8008a68 <MX_DCMI_Init+0x48>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8008a54:	4804      	ldr	r0, [pc, #16]	; (8008a68 <MX_DCMI_Init+0x48>)
 8008a56:	f7f8 f96b 	bl	8000d30 <HAL_DCMI_Init>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8008a60:	f000 f94a 	bl	8008cf8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8008a64:	bf00      	nop
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	20013214 	.word	0x20013214
 8008a6c:	50050000 	.word	0x50050000

08008a70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008a74:	4b12      	ldr	r3, [pc, #72]	; (8008ac0 <MX_I2C1_Init+0x50>)
 8008a76:	4a13      	ldr	r2, [pc, #76]	; (8008ac4 <MX_I2C1_Init+0x54>)
 8008a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8008a7a:	4b11      	ldr	r3, [pc, #68]	; (8008ac0 <MX_I2C1_Init+0x50>)
 8008a7c:	4a12      	ldr	r2, [pc, #72]	; (8008ac8 <MX_I2C1_Init+0x58>)
 8008a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008a80:	4b0f      	ldr	r3, [pc, #60]	; (8008ac0 <MX_I2C1_Init+0x50>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008a86:	4b0e      	ldr	r3, [pc, #56]	; (8008ac0 <MX_I2C1_Init+0x50>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008a8c:	4b0c      	ldr	r3, [pc, #48]	; (8008ac0 <MX_I2C1_Init+0x50>)
 8008a8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008a92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008a94:	4b0a      	ldr	r3, [pc, #40]	; (8008ac0 <MX_I2C1_Init+0x50>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008a9a:	4b09      	ldr	r3, [pc, #36]	; (8008ac0 <MX_I2C1_Init+0x50>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008aa0:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <MX_I2C1_Init+0x50>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008aa6:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <MX_I2C1_Init+0x50>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008aac:	4804      	ldr	r0, [pc, #16]	; (8008ac0 <MX_I2C1_Init+0x50>)
 8008aae:	f7fa f8e1 	bl	8002c74 <HAL_I2C_Init>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008ab8:	f000 f91e 	bl	8008cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008abc:	bf00      	nop
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	20012f38 	.word	0x20012f38
 8008ac4:	40005400 	.word	0x40005400
 8008ac8:	000186a0 	.word	0x000186a0

08008acc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008ad0:	4b17      	ldr	r3, [pc, #92]	; (8008b30 <MX_SPI1_Init+0x64>)
 8008ad2:	4a18      	ldr	r2, [pc, #96]	; (8008b34 <MX_SPI1_Init+0x68>)
 8008ad4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008ad6:	4b16      	ldr	r3, [pc, #88]	; (8008b30 <MX_SPI1_Init+0x64>)
 8008ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008adc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008ade:	4b14      	ldr	r3, [pc, #80]	; (8008b30 <MX_SPI1_Init+0x64>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008ae4:	4b12      	ldr	r3, [pc, #72]	; (8008b30 <MX_SPI1_Init+0x64>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008aea:	4b11      	ldr	r3, [pc, #68]	; (8008b30 <MX_SPI1_Init+0x64>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008af0:	4b0f      	ldr	r3, [pc, #60]	; (8008b30 <MX_SPI1_Init+0x64>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008af6:	4b0e      	ldr	r3, [pc, #56]	; (8008b30 <MX_SPI1_Init+0x64>)
 8008af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008afc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008afe:	4b0c      	ldr	r3, [pc, #48]	; (8008b30 <MX_SPI1_Init+0x64>)
 8008b00:	2218      	movs	r2, #24
 8008b02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008b04:	4b0a      	ldr	r3, [pc, #40]	; (8008b30 <MX_SPI1_Init+0x64>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008b0a:	4b09      	ldr	r3, [pc, #36]	; (8008b30 <MX_SPI1_Init+0x64>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b10:	4b07      	ldr	r3, [pc, #28]	; (8008b30 <MX_SPI1_Init+0x64>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008b16:	4b06      	ldr	r3, [pc, #24]	; (8008b30 <MX_SPI1_Init+0x64>)
 8008b18:	220a      	movs	r2, #10
 8008b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008b1c:	4804      	ldr	r0, [pc, #16]	; (8008b30 <MX_SPI1_Init+0x64>)
 8008b1e:	f7fb fe89 	bl	8004834 <HAL_SPI_Init>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008b28:	f000 f8e6 	bl	8008cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008b2c:	bf00      	nop
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	2001335c 	.word	0x2001335c
 8008b34:	40013000 	.word	0x40013000

08008b38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008b3c:	4b11      	ldr	r3, [pc, #68]	; (8008b84 <MX_USART3_UART_Init+0x4c>)
 8008b3e:	4a12      	ldr	r2, [pc, #72]	; (8008b88 <MX_USART3_UART_Init+0x50>)
 8008b40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8008b42:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <MX_USART3_UART_Init+0x4c>)
 8008b44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008b48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008b4a:	4b0e      	ldr	r3, [pc, #56]	; (8008b84 <MX_USART3_UART_Init+0x4c>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008b50:	4b0c      	ldr	r3, [pc, #48]	; (8008b84 <MX_USART3_UART_Init+0x4c>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008b56:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <MX_USART3_UART_Init+0x4c>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008b5c:	4b09      	ldr	r3, [pc, #36]	; (8008b84 <MX_USART3_UART_Init+0x4c>)
 8008b5e:	220c      	movs	r2, #12
 8008b60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b62:	4b08      	ldr	r3, [pc, #32]	; (8008b84 <MX_USART3_UART_Init+0x4c>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008b68:	4b06      	ldr	r3, [pc, #24]	; (8008b84 <MX_USART3_UART_Init+0x4c>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008b6e:	4805      	ldr	r0, [pc, #20]	; (8008b84 <MX_USART3_UART_Init+0x4c>)
 8008b70:	f7fc fa54 	bl	800501c <HAL_UART_Init>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008b7a:	f000 f8bd 	bl	8008cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008b7e:	bf00      	nop
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	20012ef8 	.word	0x20012ef8
 8008b88:	40004800 	.word	0x40004800

08008b8c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008b92:	2300      	movs	r3, #0
 8008b94:	607b      	str	r3, [r7, #4]
 8008b96:	4b0c      	ldr	r3, [pc, #48]	; (8008bc8 <MX_DMA_Init+0x3c>)
 8008b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9a:	4a0b      	ldr	r2, [pc, #44]	; (8008bc8 <MX_DMA_Init+0x3c>)
 8008b9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ba2:	4b09      	ldr	r3, [pc, #36]	; (8008bc8 <MX_DMA_Init+0x3c>)
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008baa:	607b      	str	r3, [r7, #4]
 8008bac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	2039      	movs	r0, #57	; 0x39
 8008bb4:	f7f7 fe4b 	bl	800084e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8008bb8:	2039      	movs	r0, #57	; 0x39
 8008bba:	f7f7 fe64 	bl	8000886 <HAL_NVIC_EnableIRQ>

}
 8008bbe:	bf00      	nop
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	40023800 	.word	0x40023800

08008bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08c      	sub	sp, #48	; 0x30
 8008bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bd2:	f107 031c 	add.w	r3, r7, #28
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]
 8008bda:	605a      	str	r2, [r3, #4]
 8008bdc:	609a      	str	r2, [r3, #8]
 8008bde:	60da      	str	r2, [r3, #12]
 8008be0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008be2:	2300      	movs	r3, #0
 8008be4:	61bb      	str	r3, [r7, #24]
 8008be6:	4b41      	ldr	r3, [pc, #260]	; (8008cec <MX_GPIO_Init+0x120>)
 8008be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bea:	4a40      	ldr	r2, [pc, #256]	; (8008cec <MX_GPIO_Init+0x120>)
 8008bec:	f043 0310 	orr.w	r3, r3, #16
 8008bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8008bf2:	4b3e      	ldr	r3, [pc, #248]	; (8008cec <MX_GPIO_Init+0x120>)
 8008bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf6:	f003 0310 	and.w	r3, r3, #16
 8008bfa:	61bb      	str	r3, [r7, #24]
 8008bfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008bfe:	2300      	movs	r3, #0
 8008c00:	617b      	str	r3, [r7, #20]
 8008c02:	4b3a      	ldr	r3, [pc, #232]	; (8008cec <MX_GPIO_Init+0x120>)
 8008c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c06:	4a39      	ldr	r2, [pc, #228]	; (8008cec <MX_GPIO_Init+0x120>)
 8008c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8008c0e:	4b37      	ldr	r3, [pc, #220]	; (8008cec <MX_GPIO_Init+0x120>)
 8008c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c16:	617b      	str	r3, [r7, #20]
 8008c18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	613b      	str	r3, [r7, #16]
 8008c1e:	4b33      	ldr	r3, [pc, #204]	; (8008cec <MX_GPIO_Init+0x120>)
 8008c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c22:	4a32      	ldr	r2, [pc, #200]	; (8008cec <MX_GPIO_Init+0x120>)
 8008c24:	f043 0301 	orr.w	r3, r3, #1
 8008c28:	6313      	str	r3, [r2, #48]	; 0x30
 8008c2a:	4b30      	ldr	r3, [pc, #192]	; (8008cec <MX_GPIO_Init+0x120>)
 8008c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	613b      	str	r3, [r7, #16]
 8008c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008c36:	2300      	movs	r3, #0
 8008c38:	60fb      	str	r3, [r7, #12]
 8008c3a:	4b2c      	ldr	r3, [pc, #176]	; (8008cec <MX_GPIO_Init+0x120>)
 8008c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3e:	4a2b      	ldr	r2, [pc, #172]	; (8008cec <MX_GPIO_Init+0x120>)
 8008c40:	f043 0308 	orr.w	r3, r3, #8
 8008c44:	6313      	str	r3, [r2, #48]	; 0x30
 8008c46:	4b29      	ldr	r3, [pc, #164]	; (8008cec <MX_GPIO_Init+0x120>)
 8008c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4a:	f003 0308 	and.w	r3, r3, #8
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c52:	2300      	movs	r3, #0
 8008c54:	60bb      	str	r3, [r7, #8]
 8008c56:	4b25      	ldr	r3, [pc, #148]	; (8008cec <MX_GPIO_Init+0x120>)
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	4a24      	ldr	r2, [pc, #144]	; (8008cec <MX_GPIO_Init+0x120>)
 8008c5c:	f043 0304 	orr.w	r3, r3, #4
 8008c60:	6313      	str	r3, [r2, #48]	; 0x30
 8008c62:	4b22      	ldr	r3, [pc, #136]	; (8008cec <MX_GPIO_Init+0x120>)
 8008c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c66:	f003 0304 	and.w	r3, r3, #4
 8008c6a:	60bb      	str	r3, [r7, #8]
 8008c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c6e:	2300      	movs	r3, #0
 8008c70:	607b      	str	r3, [r7, #4]
 8008c72:	4b1e      	ldr	r3, [pc, #120]	; (8008cec <MX_GPIO_Init+0x120>)
 8008c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c76:	4a1d      	ldr	r2, [pc, #116]	; (8008cec <MX_GPIO_Init+0x120>)
 8008c78:	f043 0302 	orr.w	r3, r3, #2
 8008c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8008c7e:	4b1b      	ldr	r3, [pc, #108]	; (8008cec <MX_GPIO_Init+0x120>)
 8008c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c82:	f003 0302 	and.w	r3, r3, #2
 8008c86:	607b      	str	r3, [r7, #4]
 8008c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8008c90:	4817      	ldr	r0, [pc, #92]	; (8008cf0 <MX_GPIO_Init+0x124>)
 8008c92:	f7f9 ffd5 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8008c96:	2201      	movs	r2, #1
 8008c98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008c9c:	4814      	ldr	r0, [pc, #80]	; (8008cf0 <MX_GPIO_Init+0x124>)
 8008c9e:	f7f9 ffcf 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8008ca2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8008ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cac:	2300      	movs	r3, #0
 8008cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008cb4:	f107 031c 	add.w	r3, r7, #28
 8008cb8:	4619      	mov	r1, r3
 8008cba:	480d      	ldr	r0, [pc, #52]	; (8008cf0 <MX_GPIO_Init+0x124>)
 8008cbc:	f7f9 fe26 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cd6:	f107 031c 	add.w	r3, r7, #28
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4805      	ldr	r0, [pc, #20]	; (8008cf4 <MX_GPIO_Init+0x128>)
 8008cde:	f7f9 fe15 	bl	800290c <HAL_GPIO_Init>

}
 8008ce2:	bf00      	nop
 8008ce4:	3730      	adds	r7, #48	; 0x30
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	40023800 	.word	0x40023800
 8008cf0:	40020c00 	.word	0x40020c00
 8008cf4:	40020000 	.word	0x40020000

08008cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008cfc:	bf00      	nop
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
	...

08008d08 <ov7670_init>:
//static RET ov7670_write(uint8_t regAddr, uint8_t data);
//static RET ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
RET ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 8008d14:	4a1a      	ldr	r2, [pc, #104]	; (8008d80 <ov7670_init+0x78>)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 8008d1a:	4a1a      	ldr	r2, [pc, #104]	; (8008d84 <ov7670_init+0x7c>)
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 8008d20:	4a19      	ldr	r2, [pc, #100]	; (8008d88 <ov7670_init+0x80>)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 8008d26:	4b19      	ldr	r3, [pc, #100]	; (8008d8c <ov7670_init+0x84>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	601a      	str	r2, [r3, #0]

  // PD14
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008d32:	4817      	ldr	r0, [pc, #92]	; (8008d90 <ov7670_init+0x88>)
 8008d34:	f7f9 ff84 	bl	8002c40 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8008d38:	2064      	movs	r0, #100	; 0x64
 8008d3a:	f7f7 fc8b 	bl	8000654 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008d44:	4812      	ldr	r0, [pc, #72]	; (8008d90 <ov7670_init+0x88>)
 8008d46:	f7f9 ff7b 	bl	8002c40 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8008d4a:	2064      	movs	r0, #100	; 0x64
 8008d4c:	f7f7 fc82 	bl	8000654 <HAL_Delay>

  ov7670_write(0x12, 0x80);  // RESET
 8008d50:	2180      	movs	r1, #128	; 0x80
 8008d52:	2012      	movs	r0, #18
 8008d54:	f000 f8c6 	bl	8008ee4 <ov7670_write>
  HAL_Delay(30);
 8008d58:	201e      	movs	r0, #30
 8008d5a:	f7f7 fc7b 	bl	8000654 <HAL_Delay>

  uint8_t buffer[4];
//  RET stat =
ov7670_read(0x0b, buffer);
 8008d5e:	f107 0314 	add.w	r3, r7, #20
 8008d62:	4619      	mov	r1, r3
 8008d64:	200b      	movs	r0, #11
 8008d66:	f000 f8dd 	bl	8008f24 <ov7670_read>
  printf("[OV7670] dev id = %02X\n", buffer[0]);
 8008d6a:	7d3b      	ldrb	r3, [r7, #20]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	4809      	ldr	r0, [pc, #36]	; (8008d94 <ov7670_init+0x8c>)
 8008d70:	f000 fc3a 	bl	80095e8 <iprintf>


  return RET_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	200002c8 	.word	0x200002c8
 8008d84:	200002cc 	.word	0x200002cc
 8008d88:	200002d0 	.word	0x200002d0
 8008d8c:	200002d4 	.word	0x200002d4
 8008d90:	40020c00 	.word	0x40020c00
 8008d94:	0800a41c 	.word	0x0800a41c

08008d98 <ov7670_config>:

RET ov7670_config(uint32_t mode)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  ov7670_stopCap();
 8008da0:	f000 f858 	bl	8008e54 <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 8008da4:	2180      	movs	r1, #128	; 0x80
 8008da6:	2012      	movs	r0, #18
 8008da8:	f000 f89c 	bl	8008ee4 <ov7670_write>
  HAL_Delay(30);
 8008dac:	201e      	movs	r0, #30
 8008dae:	f7f7 fc51 	bl	8000654 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8008db2:	2300      	movs	r3, #0
 8008db4:	60fb      	str	r3, [r7, #12]
 8008db6:	e011      	b.n	8008ddc <ov7670_config+0x44>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 8008db8:	4a0e      	ldr	r2, [pc, #56]	; (8008df4 <ov7670_config+0x5c>)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8008dc0:	4a0c      	ldr	r2, [pc, #48]	; (8008df4 <ov7670_config+0x5c>)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	005b      	lsls	r3, r3, #1
 8008dc6:	4413      	add	r3, r2
 8008dc8:	785b      	ldrb	r3, [r3, #1]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	f000 f88a 	bl	8008ee4 <ov7670_write>
    HAL_Delay(1);
 8008dd0:	2001      	movs	r0, #1
 8008dd2:	f7f7 fc3f 	bl	8000654 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	60fb      	str	r3, [r7, #12]
 8008ddc:	4a05      	ldr	r2, [pc, #20]	; (8008df4 <ov7670_config+0x5c>)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008de4:	2bff      	cmp	r3, #255	; 0xff
 8008de6:	d1e7      	bne.n	8008db8 <ov7670_config+0x20>
  }
  return RET_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	0800a43c 	.word	0x0800a43c

08008df8 <ov7670_startCap>:

RET ov7670_startCap(uint32_t capMode, uint32_t destAddress)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  ov7670_stopCap();
 8008e02:	f000 f827 	bl	8008e54 <ov7670_stopCap>
  if (capMode == OV7670_CAP_CONTINUOUS) {
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10b      	bne.n	8008e24 <ov7670_startCap+0x2c>
    /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
    s_destAddressForContiuousMode = destAddress;
 8008e0c:	4a0f      	ldr	r2, [pc, #60]	; (8008e4c <ov7670_startCap+0x54>)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	6013      	str	r3, [r2, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8008e12:	4b0f      	ldr	r3, [pc, #60]	; (8008e50 <ov7670_startCap+0x58>)
 8008e14:	6818      	ldr	r0, [r3, #0]
 8008e16:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	f7f7 fd4d 	bl	80008bc <HAL_DCMI_Start_DMA>
 8008e22:	e00d      	b.n	8008e40 <ov7670_startCap+0x48>
  } else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d10a      	bne.n	8008e40 <ov7670_startCap+0x48>
    s_destAddressForContiuousMode = 0;
 8008e2a:	4b08      	ldr	r3, [pc, #32]	; (8008e4c <ov7670_startCap+0x54>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	601a      	str	r2, [r3, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8008e30:	4b07      	ldr	r3, [pc, #28]	; (8008e50 <ov7670_startCap+0x58>)
 8008e32:	6818      	ldr	r0, [r3, #0]
 8008e34:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	2102      	movs	r1, #2
 8008e3c:	f7f7 fd3e 	bl	80008bc <HAL_DCMI_Start_DMA>
   // HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT);
  }

  return RET_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	200002d4 	.word	0x200002d4
 8008e50:	200002c8 	.word	0x200002c8

08008e54 <ov7670_stopCap>:

RET ov7670_stopCap()
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 8008e58:	4b03      	ldr	r3, [pc, #12]	; (8008e68 <ov7670_stopCap+0x14>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7f7 fdcd 	bl	80009fc <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return RET_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	200002c8 	.word	0x200002c8

08008e6c <HAL_DCMI_FrameEventCallback>:
  s_cbHsync = cbHsync;
  s_cbVsync = cbVsync;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
//  printf("FRAME %d\n", HAL_GetTick());
  if(s_cbVsync)s_cbVsync(s_currentV);
 8008e74:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <HAL_DCMI_FrameEventCallback+0x54>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d005      	beq.n	8008e88 <HAL_DCMI_FrameEventCallback+0x1c>
 8008e7c:	4b10      	ldr	r3, [pc, #64]	; (8008ec0 <HAL_DCMI_FrameEventCallback+0x54>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a10      	ldr	r2, [pc, #64]	; (8008ec4 <HAL_DCMI_FrameEventCallback+0x58>)
 8008e82:	6812      	ldr	r2, [r2, #0]
 8008e84:	4610      	mov	r0, r2
 8008e86:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 8008e88:	4b0f      	ldr	r3, [pc, #60]	; (8008ec8 <HAL_DCMI_FrameEventCallback+0x5c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00b      	beq.n	8008ea8 <HAL_DCMI_FrameEventCallback+0x3c>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3328      	adds	r3, #40	; 0x28
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <HAL_DCMI_FrameEventCallback+0x5c>)
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8008ea4:	f7f8 f858 	bl	8000f58 <HAL_DMA_Start_IT>
  }
  s_currentV++;
 8008ea8:	4b06      	ldr	r3, [pc, #24]	; (8008ec4 <HAL_DCMI_FrameEventCallback+0x58>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3301      	adds	r3, #1
 8008eae:	4a05      	ldr	r2, [pc, #20]	; (8008ec4 <HAL_DCMI_FrameEventCallback+0x58>)
 8008eb0:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 8008eb2:	4b06      	ldr	r3, [pc, #24]	; (8008ecc <HAL_DCMI_FrameEventCallback+0x60>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	601a      	str	r2, [r3, #0]
}
 8008eb8:	bf00      	nop
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	200002d8 	.word	0x200002d8
 8008ec4:	200002e0 	.word	0x200002e0
 8008ec8:	200002d4 	.word	0x200002d4
 8008ecc:	200002dc 	.word	0x200002dc

08008ed0 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
//  printf("VSYNC %d\n", HAL_GetTick());
//  HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <ov7670_write>:
//  s_currentH++;
//}

/*** Internal Function Defines ***/
RET ov7670_write(uint8_t regAddr, uint8_t data)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b088      	sub	sp, #32
 8008ee8:	af04      	add	r7, sp, #16
 8008eea:	4603      	mov	r3, r0
 8008eec:	460a      	mov	r2, r1
 8008eee:	71fb      	strb	r3, [r7, #7]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8008ef4:	4b0a      	ldr	r3, [pc, #40]	; (8008f20 <ov7670_write+0x3c>)
 8008ef6:	6818      	ldr	r0, [r3, #0]
 8008ef8:	79fb      	ldrb	r3, [r7, #7]
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	2364      	movs	r3, #100	; 0x64
 8008efe:	9302      	str	r3, [sp, #8]
 8008f00:	2301      	movs	r3, #1
 8008f02:	9301      	str	r3, [sp, #4]
 8008f04:	1dbb      	adds	r3, r7, #6
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	2301      	movs	r3, #1
 8008f0a:	2142      	movs	r1, #66	; 0x42
 8008f0c:	f7fa fb0e 	bl	800352c <HAL_I2C_Mem_Write>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	200002d0 	.word	0x200002d0

08008f24 <ov7670_read>:

RET ov7670_read(uint8_t regAddr, uint8_t *data)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af02      	add	r7, sp, #8
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	6039      	str	r1, [r7, #0]
 8008f2e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  do {
    // HAL_I2C_Mem_Read doesn't work (because of SCCB protocol(doesn't have ack))? */
//    ret = HAL_I2C_Mem_Read(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
    ret = HAL_I2C_Master_Transmit(sp_hi2c, SLAVE_ADDR, &regAddr, 1, 100);
 8008f30:	4b0e      	ldr	r3, [pc, #56]	; (8008f6c <ov7670_read+0x48>)
 8008f32:	6818      	ldr	r0, [r3, #0]
 8008f34:	1dfa      	adds	r2, r7, #7
 8008f36:	2364      	movs	r3, #100	; 0x64
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	2142      	movs	r1, #66	; 0x42
 8008f3e:	f7f9 ffd1 	bl	8002ee4 <HAL_I2C_Master_Transmit>
 8008f42:	4603      	mov	r3, r0
 8008f44:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, SLAVE_ADDR, data, 1, 100);
 8008f46:	4b09      	ldr	r3, [pc, #36]	; (8008f6c <ov7670_read+0x48>)
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	2364      	movs	r3, #100	; 0x64
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	2301      	movs	r3, #1
 8008f50:	683a      	ldr	r2, [r7, #0]
 8008f52:	2142      	movs	r1, #66	; 0x42
 8008f54:	f7fa f8c4 	bl	80030e0 <HAL_I2C_Master_Receive>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	200002d0 	.word	0x200002d0

08008f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f76:	2300      	movs	r3, #0
 8008f78:	607b      	str	r3, [r7, #4]
 8008f7a:	4b10      	ldr	r3, [pc, #64]	; (8008fbc <HAL_MspInit+0x4c>)
 8008f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f7e:	4a0f      	ldr	r2, [pc, #60]	; (8008fbc <HAL_MspInit+0x4c>)
 8008f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f84:	6453      	str	r3, [r2, #68]	; 0x44
 8008f86:	4b0d      	ldr	r3, [pc, #52]	; (8008fbc <HAL_MspInit+0x4c>)
 8008f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f8e:	607b      	str	r3, [r7, #4]
 8008f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f92:	2300      	movs	r3, #0
 8008f94:	603b      	str	r3, [r7, #0]
 8008f96:	4b09      	ldr	r3, [pc, #36]	; (8008fbc <HAL_MspInit+0x4c>)
 8008f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9a:	4a08      	ldr	r2, [pc, #32]	; (8008fbc <HAL_MspInit+0x4c>)
 8008f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8008fa2:	4b06      	ldr	r3, [pc, #24]	; (8008fbc <HAL_MspInit+0x4c>)
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008faa:	603b      	str	r3, [r7, #0]
 8008fac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008fae:	bf00      	nop
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	40023800 	.word	0x40023800

08008fc0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08c      	sub	sp, #48	; 0x30
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fc8:	f107 031c 	add.w	r3, r7, #28
 8008fcc:	2200      	movs	r2, #0
 8008fce:	601a      	str	r2, [r3, #0]
 8008fd0:	605a      	str	r2, [r3, #4]
 8008fd2:	609a      	str	r2, [r3, #8]
 8008fd4:	60da      	str	r2, [r3, #12]
 8008fd6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a6b      	ldr	r2, [pc, #428]	; (800918c <HAL_DCMI_MspInit+0x1cc>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	f040 80d0 	bne.w	8009184 <HAL_DCMI_MspInit+0x1c4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	61bb      	str	r3, [r7, #24]
 8008fe8:	4b69      	ldr	r3, [pc, #420]	; (8009190 <HAL_DCMI_MspInit+0x1d0>)
 8008fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fec:	4a68      	ldr	r2, [pc, #416]	; (8009190 <HAL_DCMI_MspInit+0x1d0>)
 8008fee:	f043 0301 	orr.w	r3, r3, #1
 8008ff2:	6353      	str	r3, [r2, #52]	; 0x34
 8008ff4:	4b66      	ldr	r3, [pc, #408]	; (8009190 <HAL_DCMI_MspInit+0x1d0>)
 8008ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	61bb      	str	r3, [r7, #24]
 8008ffe:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009000:	2300      	movs	r3, #0
 8009002:	617b      	str	r3, [r7, #20]
 8009004:	4b62      	ldr	r3, [pc, #392]	; (8009190 <HAL_DCMI_MspInit+0x1d0>)
 8009006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009008:	4a61      	ldr	r2, [pc, #388]	; (8009190 <HAL_DCMI_MspInit+0x1d0>)
 800900a:	f043 0310 	orr.w	r3, r3, #16
 800900e:	6313      	str	r3, [r2, #48]	; 0x30
 8009010:	4b5f      	ldr	r3, [pc, #380]	; (8009190 <HAL_DCMI_MspInit+0x1d0>)
 8009012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009014:	f003 0310 	and.w	r3, r3, #16
 8009018:	617b      	str	r3, [r7, #20]
 800901a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800901c:	2300      	movs	r3, #0
 800901e:	613b      	str	r3, [r7, #16]
 8009020:	4b5b      	ldr	r3, [pc, #364]	; (8009190 <HAL_DCMI_MspInit+0x1d0>)
 8009022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009024:	4a5a      	ldr	r2, [pc, #360]	; (8009190 <HAL_DCMI_MspInit+0x1d0>)
 8009026:	f043 0301 	orr.w	r3, r3, #1
 800902a:	6313      	str	r3, [r2, #48]	; 0x30
 800902c:	4b58      	ldr	r3, [pc, #352]	; (8009190 <HAL_DCMI_MspInit+0x1d0>)
 800902e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	613b      	str	r3, [r7, #16]
 8009036:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009038:	2300      	movs	r3, #0
 800903a:	60fb      	str	r3, [r7, #12]
 800903c:	4b54      	ldr	r3, [pc, #336]	; (8009190 <HAL_DCMI_MspInit+0x1d0>)
 800903e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009040:	4a53      	ldr	r2, [pc, #332]	; (8009190 <HAL_DCMI_MspInit+0x1d0>)
 8009042:	f043 0304 	orr.w	r3, r3, #4
 8009046:	6313      	str	r3, [r2, #48]	; 0x30
 8009048:	4b51      	ldr	r3, [pc, #324]	; (8009190 <HAL_DCMI_MspInit+0x1d0>)
 800904a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	60fb      	str	r3, [r7, #12]
 8009052:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009054:	2300      	movs	r3, #0
 8009056:	60bb      	str	r3, [r7, #8]
 8009058:	4b4d      	ldr	r3, [pc, #308]	; (8009190 <HAL_DCMI_MspInit+0x1d0>)
 800905a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905c:	4a4c      	ldr	r2, [pc, #304]	; (8009190 <HAL_DCMI_MspInit+0x1d0>)
 800905e:	f043 0302 	orr.w	r3, r3, #2
 8009062:	6313      	str	r3, [r2, #48]	; 0x30
 8009064:	4b4a      	ldr	r3, [pc, #296]	; (8009190 <HAL_DCMI_MspInit+0x1d0>)
 8009066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009068:	f003 0302 	and.w	r3, r3, #2
 800906c:	60bb      	str	r3, [r7, #8]
 800906e:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8009070:	2370      	movs	r3, #112	; 0x70
 8009072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009074:	2302      	movs	r3, #2
 8009076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009078:	2300      	movs	r3, #0
 800907a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800907c:	2300      	movs	r3, #0
 800907e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009080:	230d      	movs	r3, #13
 8009082:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009084:	f107 031c 	add.w	r3, r7, #28
 8009088:	4619      	mov	r1, r3
 800908a:	4842      	ldr	r0, [pc, #264]	; (8009194 <HAL_DCMI_MspInit+0x1d4>)
 800908c:	f7f9 fc3e 	bl	800290c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8009090:	2350      	movs	r3, #80	; 0x50
 8009092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009094:	2302      	movs	r3, #2
 8009096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009098:	2300      	movs	r3, #0
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800909c:	2303      	movs	r3, #3
 800909e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80090a0:	230d      	movs	r3, #13
 80090a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090a4:	f107 031c 	add.w	r3, r7, #28
 80090a8:	4619      	mov	r1, r3
 80090aa:	483b      	ldr	r0, [pc, #236]	; (8009198 <HAL_DCMI_MspInit+0x1d8>)
 80090ac:	f7f9 fc2e 	bl	800290c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80090b0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80090b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090b6:	2302      	movs	r3, #2
 80090b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090ba:	2300      	movs	r3, #0
 80090bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090be:	2300      	movs	r3, #0
 80090c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80090c2:	230d      	movs	r3, #13
 80090c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80090c6:	f107 031c 	add.w	r3, r7, #28
 80090ca:	4619      	mov	r1, r3
 80090cc:	4833      	ldr	r0, [pc, #204]	; (800919c <HAL_DCMI_MspInit+0x1dc>)
 80090ce:	f7f9 fc1d 	bl	800290c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80090d2:	2340      	movs	r3, #64	; 0x40
 80090d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090d6:	2302      	movs	r3, #2
 80090d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090da:	2300      	movs	r3, #0
 80090dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090de:	2300      	movs	r3, #0
 80090e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80090e2:	230d      	movs	r3, #13
 80090e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090e6:	f107 031c 	add.w	r3, r7, #28
 80090ea:	4619      	mov	r1, r3
 80090ec:	482c      	ldr	r0, [pc, #176]	; (80091a0 <HAL_DCMI_MspInit+0x1e0>)
 80090ee:	f7f9 fc0d 	bl	800290c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80090f2:	2380      	movs	r3, #128	; 0x80
 80090f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090f6:	2302      	movs	r3, #2
 80090f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090fe:	2303      	movs	r3, #3
 8009100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009102:	230d      	movs	r3, #13
 8009104:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009106:	f107 031c 	add.w	r3, r7, #28
 800910a:	4619      	mov	r1, r3
 800910c:	4824      	ldr	r0, [pc, #144]	; (80091a0 <HAL_DCMI_MspInit+0x1e0>)
 800910e:	f7f9 fbfd 	bl	800290c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8009112:	4b24      	ldr	r3, [pc, #144]	; (80091a4 <HAL_DCMI_MspInit+0x1e4>)
 8009114:	4a24      	ldr	r2, [pc, #144]	; (80091a8 <HAL_DCMI_MspInit+0x1e8>)
 8009116:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8009118:	4b22      	ldr	r3, [pc, #136]	; (80091a4 <HAL_DCMI_MspInit+0x1e4>)
 800911a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800911e:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009120:	4b20      	ldr	r3, [pc, #128]	; (80091a4 <HAL_DCMI_MspInit+0x1e4>)
 8009122:	2200      	movs	r2, #0
 8009124:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8009126:	4b1f      	ldr	r3, [pc, #124]	; (80091a4 <HAL_DCMI_MspInit+0x1e4>)
 8009128:	2200      	movs	r2, #0
 800912a:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800912c:	4b1d      	ldr	r3, [pc, #116]	; (80091a4 <HAL_DCMI_MspInit+0x1e4>)
 800912e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009132:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009134:	4b1b      	ldr	r3, [pc, #108]	; (80091a4 <HAL_DCMI_MspInit+0x1e4>)
 8009136:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800913a:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800913c:	4b19      	ldr	r3, [pc, #100]	; (80091a4 <HAL_DCMI_MspInit+0x1e4>)
 800913e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009142:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8009144:	4b17      	ldr	r3, [pc, #92]	; (80091a4 <HAL_DCMI_MspInit+0x1e4>)
 8009146:	2200      	movs	r2, #0
 8009148:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_MEDIUM;
 800914a:	4b16      	ldr	r3, [pc, #88]	; (80091a4 <HAL_DCMI_MspInit+0x1e4>)
 800914c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009150:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009152:	4b14      	ldr	r3, [pc, #80]	; (80091a4 <HAL_DCMI_MspInit+0x1e4>)
 8009154:	2200      	movs	r2, #0
 8009156:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8009158:	4812      	ldr	r0, [pc, #72]	; (80091a4 <HAL_DCMI_MspInit+0x1e4>)
 800915a:	f7f7 fe4f 	bl	8000dfc <HAL_DMA_Init>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d001      	beq.n	8009168 <HAL_DCMI_MspInit+0x1a8>
    {
      Error_Handler();
 8009164:	f7ff fdc8 	bl	8008cf8 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a0e      	ldr	r2, [pc, #56]	; (80091a4 <HAL_DCMI_MspInit+0x1e4>)
 800916c:	639a      	str	r2, [r3, #56]	; 0x38
 800916e:	4a0d      	ldr	r2, [pc, #52]	; (80091a4 <HAL_DCMI_MspInit+0x1e4>)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8009174:	2200      	movs	r2, #0
 8009176:	2100      	movs	r1, #0
 8009178:	204e      	movs	r0, #78	; 0x4e
 800917a:	f7f7 fb68 	bl	800084e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800917e:	204e      	movs	r0, #78	; 0x4e
 8009180:	f7f7 fb81 	bl	8000886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8009184:	bf00      	nop
 8009186:	3730      	adds	r7, #48	; 0x30
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	50050000 	.word	0x50050000
 8009190:	40023800 	.word	0x40023800
 8009194:	40021000 	.word	0x40021000
 8009198:	40020000 	.word	0x40020000
 800919c:	40020800 	.word	0x40020800
 80091a0:	40020400 	.word	0x40020400
 80091a4:	20012f8c 	.word	0x20012f8c
 80091a8:	40026428 	.word	0x40026428

080091ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b08a      	sub	sp, #40	; 0x28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091b4:	f107 0314 	add.w	r3, r7, #20
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	605a      	str	r2, [r3, #4]
 80091be:	609a      	str	r2, [r3, #8]
 80091c0:	60da      	str	r2, [r3, #12]
 80091c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a19      	ldr	r2, [pc, #100]	; (8009230 <HAL_I2C_MspInit+0x84>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d12c      	bne.n	8009228 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80091ce:	2300      	movs	r3, #0
 80091d0:	613b      	str	r3, [r7, #16]
 80091d2:	4b18      	ldr	r3, [pc, #96]	; (8009234 <HAL_I2C_MspInit+0x88>)
 80091d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d6:	4a17      	ldr	r2, [pc, #92]	; (8009234 <HAL_I2C_MspInit+0x88>)
 80091d8:	f043 0302 	orr.w	r3, r3, #2
 80091dc:	6313      	str	r3, [r2, #48]	; 0x30
 80091de:	4b15      	ldr	r3, [pc, #84]	; (8009234 <HAL_I2C_MspInit+0x88>)
 80091e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e2:	f003 0302 	and.w	r3, r3, #2
 80091e6:	613b      	str	r3, [r7, #16]
 80091e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80091ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80091ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80091f0:	2312      	movs	r3, #18
 80091f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80091f4:	2301      	movs	r3, #1
 80091f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091f8:	2303      	movs	r3, #3
 80091fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80091fc:	2304      	movs	r3, #4
 80091fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009200:	f107 0314 	add.w	r3, r7, #20
 8009204:	4619      	mov	r1, r3
 8009206:	480c      	ldr	r0, [pc, #48]	; (8009238 <HAL_I2C_MspInit+0x8c>)
 8009208:	f7f9 fb80 	bl	800290c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800920c:	2300      	movs	r3, #0
 800920e:	60fb      	str	r3, [r7, #12]
 8009210:	4b08      	ldr	r3, [pc, #32]	; (8009234 <HAL_I2C_MspInit+0x88>)
 8009212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009214:	4a07      	ldr	r2, [pc, #28]	; (8009234 <HAL_I2C_MspInit+0x88>)
 8009216:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800921a:	6413      	str	r3, [r2, #64]	; 0x40
 800921c:	4b05      	ldr	r3, [pc, #20]	; (8009234 <HAL_I2C_MspInit+0x88>)
 800921e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009228:	bf00      	nop
 800922a:	3728      	adds	r7, #40	; 0x28
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	40005400 	.word	0x40005400
 8009234:	40023800 	.word	0x40023800
 8009238:	40020400 	.word	0x40020400

0800923c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08a      	sub	sp, #40	; 0x28
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009244:	f107 0314 	add.w	r3, r7, #20
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]
 800924c:	605a      	str	r2, [r3, #4]
 800924e:	609a      	str	r2, [r3, #8]
 8009250:	60da      	str	r2, [r3, #12]
 8009252:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a19      	ldr	r2, [pc, #100]	; (80092c0 <HAL_SPI_MspInit+0x84>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d12b      	bne.n	80092b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800925e:	2300      	movs	r3, #0
 8009260:	613b      	str	r3, [r7, #16]
 8009262:	4b18      	ldr	r3, [pc, #96]	; (80092c4 <HAL_SPI_MspInit+0x88>)
 8009264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009266:	4a17      	ldr	r2, [pc, #92]	; (80092c4 <HAL_SPI_MspInit+0x88>)
 8009268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800926c:	6453      	str	r3, [r2, #68]	; 0x44
 800926e:	4b15      	ldr	r3, [pc, #84]	; (80092c4 <HAL_SPI_MspInit+0x88>)
 8009270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009276:	613b      	str	r3, [r7, #16]
 8009278:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]
 800927e:	4b11      	ldr	r3, [pc, #68]	; (80092c4 <HAL_SPI_MspInit+0x88>)
 8009280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009282:	4a10      	ldr	r2, [pc, #64]	; (80092c4 <HAL_SPI_MspInit+0x88>)
 8009284:	f043 0302 	orr.w	r3, r3, #2
 8009288:	6313      	str	r3, [r2, #48]	; 0x30
 800928a:	4b0e      	ldr	r3, [pc, #56]	; (80092c4 <HAL_SPI_MspInit+0x88>)
 800928c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	60fb      	str	r3, [r7, #12]
 8009294:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8009296:	2338      	movs	r3, #56	; 0x38
 8009298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800929a:	2302      	movs	r3, #2
 800929c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800929e:	2300      	movs	r3, #0
 80092a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092a2:	2303      	movs	r3, #3
 80092a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80092a6:	2305      	movs	r3, #5
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092aa:	f107 0314 	add.w	r3, r7, #20
 80092ae:	4619      	mov	r1, r3
 80092b0:	4805      	ldr	r0, [pc, #20]	; (80092c8 <HAL_SPI_MspInit+0x8c>)
 80092b2:	f7f9 fb2b 	bl	800290c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80092b6:	bf00      	nop
 80092b8:	3728      	adds	r7, #40	; 0x28
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	40013000 	.word	0x40013000
 80092c4:	40023800 	.word	0x40023800
 80092c8:	40020400 	.word	0x40020400

080092cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b08a      	sub	sp, #40	; 0x28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092d4:	f107 0314 	add.w	r3, r7, #20
 80092d8:	2200      	movs	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	605a      	str	r2, [r3, #4]
 80092de:	609a      	str	r2, [r3, #8]
 80092e0:	60da      	str	r2, [r3, #12]
 80092e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a1d      	ldr	r2, [pc, #116]	; (8009360 <HAL_UART_MspInit+0x94>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d134      	bne.n	8009358 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80092ee:	2300      	movs	r3, #0
 80092f0:	613b      	str	r3, [r7, #16]
 80092f2:	4b1c      	ldr	r3, [pc, #112]	; (8009364 <HAL_UART_MspInit+0x98>)
 80092f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f6:	4a1b      	ldr	r2, [pc, #108]	; (8009364 <HAL_UART_MspInit+0x98>)
 80092f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092fc:	6413      	str	r3, [r2, #64]	; 0x40
 80092fe:	4b19      	ldr	r3, [pc, #100]	; (8009364 <HAL_UART_MspInit+0x98>)
 8009300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009306:	613b      	str	r3, [r7, #16]
 8009308:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800930a:	2300      	movs	r3, #0
 800930c:	60fb      	str	r3, [r7, #12]
 800930e:	4b15      	ldr	r3, [pc, #84]	; (8009364 <HAL_UART_MspInit+0x98>)
 8009310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009312:	4a14      	ldr	r2, [pc, #80]	; (8009364 <HAL_UART_MspInit+0x98>)
 8009314:	f043 0304 	orr.w	r3, r3, #4
 8009318:	6313      	str	r3, [r2, #48]	; 0x30
 800931a:	4b12      	ldr	r3, [pc, #72]	; (8009364 <HAL_UART_MspInit+0x98>)
 800931c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931e:	f003 0304 	and.w	r3, r3, #4
 8009322:	60fb      	str	r3, [r7, #12]
 8009324:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009326:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800932a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800932c:	2302      	movs	r3, #2
 800932e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009330:	2300      	movs	r3, #0
 8009332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009334:	2303      	movs	r3, #3
 8009336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009338:	2307      	movs	r3, #7
 800933a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800933c:	f107 0314 	add.w	r3, r7, #20
 8009340:	4619      	mov	r1, r3
 8009342:	4809      	ldr	r0, [pc, #36]	; (8009368 <HAL_UART_MspInit+0x9c>)
 8009344:	f7f9 fae2 	bl	800290c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8009348:	2200      	movs	r2, #0
 800934a:	2100      	movs	r1, #0
 800934c:	2027      	movs	r0, #39	; 0x27
 800934e:	f7f7 fa7e 	bl	800084e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8009352:	2027      	movs	r0, #39	; 0x27
 8009354:	f7f7 fa97 	bl	8000886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8009358:	bf00      	nop
 800935a:	3728      	adds	r7, #40	; 0x28
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	40004800 	.word	0x40004800
 8009364:	40023800 	.word	0x40023800
 8009368:	40020800 	.word	0x40020800

0800936c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800936c:	b480      	push	{r7}
 800936e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009370:	bf00      	nop
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <HardFault_Handler>:
/**
  * @brief This function handles Hard fault interrupt.
  */

void HardFault_Handler(void)
{
 800937a:	b480      	push	{r7}
 800937c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800937e:	e7fe      	b.n	800937e <HardFault_Handler+0x4>

08009380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009380:	b480      	push	{r7}
 8009382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009384:	e7fe      	b.n	8009384 <MemManage_Handler+0x4>

08009386 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009386:	b480      	push	{r7}
 8009388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800938a:	e7fe      	b.n	800938a <BusFault_Handler+0x4>

0800938c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800938c:	b480      	push	{r7}
 800938e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009390:	e7fe      	b.n	8009390 <UsageFault_Handler+0x4>

08009392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009392:	b480      	push	{r7}
 8009394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009396:	bf00      	nop
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80093a0:	b480      	push	{r7}
 80093a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80093a4:	bf00      	nop
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr

080093ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80093ae:	b480      	push	{r7}
 80093b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80093b2:	bf00      	nop
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  sdcard_systick_timerproc();
 80093c0:	f7fd fa12 	bl	80067e8 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80093c4:	f7f7 f926 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80093c8:	bf00      	nop
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80093d0:	4802      	ldr	r0, [pc, #8]	; (80093dc <USART3_IRQHandler+0x10>)
 80093d2:	f7fb feb5 	bl	8005140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80093d6:	bf00      	nop
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20012ef8 	.word	0x20012ef8

080093e0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80093e4:	4802      	ldr	r0, [pc, #8]	; (80093f0 <DMA2_Stream1_IRQHandler+0x10>)
 80093e6:	f7f7 fea1 	bl	800112c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80093ea:	bf00      	nop
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	20012f8c 	.word	0x20012f8c

080093f4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80093f8:	4802      	ldr	r0, [pc, #8]	; (8009404 <DCMI_IRQHandler+0x10>)
 80093fa:	f7f7 fb5b 	bl	8000ab4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80093fe:	bf00      	nop
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20013214 	.word	0x20013214

08009408 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009414:	2300      	movs	r3, #0
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	e00a      	b.n	8009430 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800941a:	f3af 8000 	nop.w
 800941e:	4601      	mov	r1, r0
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	60ba      	str	r2, [r7, #8]
 8009426:	b2ca      	uxtb	r2, r1
 8009428:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	3301      	adds	r3, #1
 800942e:	617b      	str	r3, [r7, #20]
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	429a      	cmp	r2, r3
 8009436:	dbf0      	blt.n	800941a <_read+0x12>
	}

return len;
 8009438:	687b      	ldr	r3, [r7, #4]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3718      	adds	r7, #24
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <_close>:
	}
	return len;
}

int _close(int file)
{
 8009442:	b480      	push	{r7}
 8009444:	b083      	sub	sp, #12
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
	return -1;
 800944a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800944e:	4618      	mov	r0, r3
 8009450:	370c      	adds	r7, #12
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800945a:	b480      	push	{r7}
 800945c:	b083      	sub	sp, #12
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800946a:	605a      	str	r2, [r3, #4]
	return 0;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <_isatty>:

int _isatty(int file)
{
 800947a:	b480      	push	{r7}
 800947c:	b083      	sub	sp, #12
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
	return 1;
 8009482:	2301      	movs	r3, #1
}
 8009484:	4618      	mov	r0, r3
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
	return 0;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
	...

080094ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80094b4:	4b11      	ldr	r3, [pc, #68]	; (80094fc <_sbrk+0x50>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d102      	bne.n	80094c2 <_sbrk+0x16>
		heap_end = &end;
 80094bc:	4b0f      	ldr	r3, [pc, #60]	; (80094fc <_sbrk+0x50>)
 80094be:	4a10      	ldr	r2, [pc, #64]	; (8009500 <_sbrk+0x54>)
 80094c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80094c2:	4b0e      	ldr	r3, [pc, #56]	; (80094fc <_sbrk+0x50>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80094c8:	4b0c      	ldr	r3, [pc, #48]	; (80094fc <_sbrk+0x50>)
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4413      	add	r3, r2
 80094d0:	466a      	mov	r2, sp
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d907      	bls.n	80094e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80094d6:	f000 f855 	bl	8009584 <__errno>
 80094da:	4602      	mov	r2, r0
 80094dc:	230c      	movs	r3, #12
 80094de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80094e0:	f04f 33ff 	mov.w	r3, #4294967295
 80094e4:	e006      	b.n	80094f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80094e6:	4b05      	ldr	r3, [pc, #20]	; (80094fc <_sbrk+0x50>)
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4413      	add	r3, r2
 80094ee:	4a03      	ldr	r2, [pc, #12]	; (80094fc <_sbrk+0x50>)
 80094f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80094f2:	68fb      	ldr	r3, [r7, #12]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	200002e4 	.word	0x200002e4
 8009500:	200133c0 	.word	0x200133c0

08009504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009504:	b480      	push	{r7}
 8009506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009508:	4b08      	ldr	r3, [pc, #32]	; (800952c <SystemInit+0x28>)
 800950a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800950e:	4a07      	ldr	r2, [pc, #28]	; (800952c <SystemInit+0x28>)
 8009510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009518:	4b04      	ldr	r3, [pc, #16]	; (800952c <SystemInit+0x28>)
 800951a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800951e:	609a      	str	r2, [r3, #8]
#endif
}
 8009520:	bf00      	nop
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	e000ed00 	.word	0xe000ed00

08009530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009568 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009534:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009536:	e003      	b.n	8009540 <LoopCopyDataInit>

08009538 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009538:	4b0c      	ldr	r3, [pc, #48]	; (800956c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800953a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800953c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800953e:	3104      	adds	r1, #4

08009540 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009540:	480b      	ldr	r0, [pc, #44]	; (8009570 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009542:	4b0c      	ldr	r3, [pc, #48]	; (8009574 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009544:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009546:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009548:	d3f6      	bcc.n	8009538 <CopyDataInit>
  ldr  r2, =_sbss
 800954a:	4a0b      	ldr	r2, [pc, #44]	; (8009578 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800954c:	e002      	b.n	8009554 <LoopFillZerobss>

0800954e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800954e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009550:	f842 3b04 	str.w	r3, [r2], #4

08009554 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009554:	4b09      	ldr	r3, [pc, #36]	; (800957c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009556:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009558:	d3f9      	bcc.n	800954e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800955a:	f7ff ffd3 	bl	8009504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800955e:	f000 f817 	bl	8009590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009562:	f7ff f935 	bl	80087d0 <main>
  bx  lr    
 8009566:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009568:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800956c:	0800a558 	.word	0x0800a558
  ldr  r0, =_sdata
 8009570:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009574:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8009578:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800957c:	200133bc 	.word	0x200133bc

08009580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009580:	e7fe      	b.n	8009580 <ADC_IRQHandler>
	...

08009584 <__errno>:
 8009584:	4b01      	ldr	r3, [pc, #4]	; (800958c <__errno+0x8>)
 8009586:	6818      	ldr	r0, [r3, #0]
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	2000000c 	.word	0x2000000c

08009590 <__libc_init_array>:
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	4e0d      	ldr	r6, [pc, #52]	; (80095c8 <__libc_init_array+0x38>)
 8009594:	4c0d      	ldr	r4, [pc, #52]	; (80095cc <__libc_init_array+0x3c>)
 8009596:	1ba4      	subs	r4, r4, r6
 8009598:	10a4      	asrs	r4, r4, #2
 800959a:	2500      	movs	r5, #0
 800959c:	42a5      	cmp	r5, r4
 800959e:	d109      	bne.n	80095b4 <__libc_init_array+0x24>
 80095a0:	4e0b      	ldr	r6, [pc, #44]	; (80095d0 <__libc_init_array+0x40>)
 80095a2:	4c0c      	ldr	r4, [pc, #48]	; (80095d4 <__libc_init_array+0x44>)
 80095a4:	f000 ff04 	bl	800a3b0 <_init>
 80095a8:	1ba4      	subs	r4, r4, r6
 80095aa:	10a4      	asrs	r4, r4, #2
 80095ac:	2500      	movs	r5, #0
 80095ae:	42a5      	cmp	r5, r4
 80095b0:	d105      	bne.n	80095be <__libc_init_array+0x2e>
 80095b2:	bd70      	pop	{r4, r5, r6, pc}
 80095b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095b8:	4798      	blx	r3
 80095ba:	3501      	adds	r5, #1
 80095bc:	e7ee      	b.n	800959c <__libc_init_array+0xc>
 80095be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095c2:	4798      	blx	r3
 80095c4:	3501      	adds	r5, #1
 80095c6:	e7f2      	b.n	80095ae <__libc_init_array+0x1e>
 80095c8:	0800a550 	.word	0x0800a550
 80095cc:	0800a550 	.word	0x0800a550
 80095d0:	0800a550 	.word	0x0800a550
 80095d4:	0800a554 	.word	0x0800a554

080095d8 <memset>:
 80095d8:	4402      	add	r2, r0
 80095da:	4603      	mov	r3, r0
 80095dc:	4293      	cmp	r3, r2
 80095de:	d100      	bne.n	80095e2 <memset+0xa>
 80095e0:	4770      	bx	lr
 80095e2:	f803 1b01 	strb.w	r1, [r3], #1
 80095e6:	e7f9      	b.n	80095dc <memset+0x4>

080095e8 <iprintf>:
 80095e8:	b40f      	push	{r0, r1, r2, r3}
 80095ea:	4b0a      	ldr	r3, [pc, #40]	; (8009614 <iprintf+0x2c>)
 80095ec:	b513      	push	{r0, r1, r4, lr}
 80095ee:	681c      	ldr	r4, [r3, #0]
 80095f0:	b124      	cbz	r4, 80095fc <iprintf+0x14>
 80095f2:	69a3      	ldr	r3, [r4, #24]
 80095f4:	b913      	cbnz	r3, 80095fc <iprintf+0x14>
 80095f6:	4620      	mov	r0, r4
 80095f8:	f000 f84e 	bl	8009698 <__sinit>
 80095fc:	ab05      	add	r3, sp, #20
 80095fe:	9a04      	ldr	r2, [sp, #16]
 8009600:	68a1      	ldr	r1, [r4, #8]
 8009602:	9301      	str	r3, [sp, #4]
 8009604:	4620      	mov	r0, r4
 8009606:	f000 f955 	bl	80098b4 <_vfiprintf_r>
 800960a:	b002      	add	sp, #8
 800960c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009610:	b004      	add	sp, #16
 8009612:	4770      	bx	lr
 8009614:	2000000c 	.word	0x2000000c

08009618 <std>:
 8009618:	2300      	movs	r3, #0
 800961a:	b510      	push	{r4, lr}
 800961c:	4604      	mov	r4, r0
 800961e:	e9c0 3300 	strd	r3, r3, [r0]
 8009622:	6083      	str	r3, [r0, #8]
 8009624:	8181      	strh	r1, [r0, #12]
 8009626:	6643      	str	r3, [r0, #100]	; 0x64
 8009628:	81c2      	strh	r2, [r0, #14]
 800962a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800962e:	6183      	str	r3, [r0, #24]
 8009630:	4619      	mov	r1, r3
 8009632:	2208      	movs	r2, #8
 8009634:	305c      	adds	r0, #92	; 0x5c
 8009636:	f7ff ffcf 	bl	80095d8 <memset>
 800963a:	4b05      	ldr	r3, [pc, #20]	; (8009650 <std+0x38>)
 800963c:	6263      	str	r3, [r4, #36]	; 0x24
 800963e:	4b05      	ldr	r3, [pc, #20]	; (8009654 <std+0x3c>)
 8009640:	62a3      	str	r3, [r4, #40]	; 0x28
 8009642:	4b05      	ldr	r3, [pc, #20]	; (8009658 <std+0x40>)
 8009644:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009646:	4b05      	ldr	r3, [pc, #20]	; (800965c <std+0x44>)
 8009648:	6224      	str	r4, [r4, #32]
 800964a:	6323      	str	r3, [r4, #48]	; 0x30
 800964c:	bd10      	pop	{r4, pc}
 800964e:	bf00      	nop
 8009650:	08009e11 	.word	0x08009e11
 8009654:	08009e33 	.word	0x08009e33
 8009658:	08009e6b 	.word	0x08009e6b
 800965c:	08009e8f 	.word	0x08009e8f

08009660 <_cleanup_r>:
 8009660:	4901      	ldr	r1, [pc, #4]	; (8009668 <_cleanup_r+0x8>)
 8009662:	f000 b885 	b.w	8009770 <_fwalk_reent>
 8009666:	bf00      	nop
 8009668:	0800a169 	.word	0x0800a169

0800966c <__sfmoreglue>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	1e4a      	subs	r2, r1, #1
 8009670:	2568      	movs	r5, #104	; 0x68
 8009672:	4355      	muls	r5, r2
 8009674:	460e      	mov	r6, r1
 8009676:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800967a:	f000 f897 	bl	80097ac <_malloc_r>
 800967e:	4604      	mov	r4, r0
 8009680:	b140      	cbz	r0, 8009694 <__sfmoreglue+0x28>
 8009682:	2100      	movs	r1, #0
 8009684:	e9c0 1600 	strd	r1, r6, [r0]
 8009688:	300c      	adds	r0, #12
 800968a:	60a0      	str	r0, [r4, #8]
 800968c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009690:	f7ff ffa2 	bl	80095d8 <memset>
 8009694:	4620      	mov	r0, r4
 8009696:	bd70      	pop	{r4, r5, r6, pc}

08009698 <__sinit>:
 8009698:	6983      	ldr	r3, [r0, #24]
 800969a:	b510      	push	{r4, lr}
 800969c:	4604      	mov	r4, r0
 800969e:	bb33      	cbnz	r3, 80096ee <__sinit+0x56>
 80096a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80096a4:	6503      	str	r3, [r0, #80]	; 0x50
 80096a6:	4b12      	ldr	r3, [pc, #72]	; (80096f0 <__sinit+0x58>)
 80096a8:	4a12      	ldr	r2, [pc, #72]	; (80096f4 <__sinit+0x5c>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6282      	str	r2, [r0, #40]	; 0x28
 80096ae:	4298      	cmp	r0, r3
 80096b0:	bf04      	itt	eq
 80096b2:	2301      	moveq	r3, #1
 80096b4:	6183      	streq	r3, [r0, #24]
 80096b6:	f000 f81f 	bl	80096f8 <__sfp>
 80096ba:	6060      	str	r0, [r4, #4]
 80096bc:	4620      	mov	r0, r4
 80096be:	f000 f81b 	bl	80096f8 <__sfp>
 80096c2:	60a0      	str	r0, [r4, #8]
 80096c4:	4620      	mov	r0, r4
 80096c6:	f000 f817 	bl	80096f8 <__sfp>
 80096ca:	2200      	movs	r2, #0
 80096cc:	60e0      	str	r0, [r4, #12]
 80096ce:	2104      	movs	r1, #4
 80096d0:	6860      	ldr	r0, [r4, #4]
 80096d2:	f7ff ffa1 	bl	8009618 <std>
 80096d6:	2201      	movs	r2, #1
 80096d8:	2109      	movs	r1, #9
 80096da:	68a0      	ldr	r0, [r4, #8]
 80096dc:	f7ff ff9c 	bl	8009618 <std>
 80096e0:	2202      	movs	r2, #2
 80096e2:	2112      	movs	r1, #18
 80096e4:	68e0      	ldr	r0, [r4, #12]
 80096e6:	f7ff ff97 	bl	8009618 <std>
 80096ea:	2301      	movs	r3, #1
 80096ec:	61a3      	str	r3, [r4, #24]
 80096ee:	bd10      	pop	{r4, pc}
 80096f0:	0800a4b0 	.word	0x0800a4b0
 80096f4:	08009661 	.word	0x08009661

080096f8 <__sfp>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	4b1b      	ldr	r3, [pc, #108]	; (8009768 <__sfp+0x70>)
 80096fc:	681e      	ldr	r6, [r3, #0]
 80096fe:	69b3      	ldr	r3, [r6, #24]
 8009700:	4607      	mov	r7, r0
 8009702:	b913      	cbnz	r3, 800970a <__sfp+0x12>
 8009704:	4630      	mov	r0, r6
 8009706:	f7ff ffc7 	bl	8009698 <__sinit>
 800970a:	3648      	adds	r6, #72	; 0x48
 800970c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009710:	3b01      	subs	r3, #1
 8009712:	d503      	bpl.n	800971c <__sfp+0x24>
 8009714:	6833      	ldr	r3, [r6, #0]
 8009716:	b133      	cbz	r3, 8009726 <__sfp+0x2e>
 8009718:	6836      	ldr	r6, [r6, #0]
 800971a:	e7f7      	b.n	800970c <__sfp+0x14>
 800971c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009720:	b16d      	cbz	r5, 800973e <__sfp+0x46>
 8009722:	3468      	adds	r4, #104	; 0x68
 8009724:	e7f4      	b.n	8009710 <__sfp+0x18>
 8009726:	2104      	movs	r1, #4
 8009728:	4638      	mov	r0, r7
 800972a:	f7ff ff9f 	bl	800966c <__sfmoreglue>
 800972e:	6030      	str	r0, [r6, #0]
 8009730:	2800      	cmp	r0, #0
 8009732:	d1f1      	bne.n	8009718 <__sfp+0x20>
 8009734:	230c      	movs	r3, #12
 8009736:	603b      	str	r3, [r7, #0]
 8009738:	4604      	mov	r4, r0
 800973a:	4620      	mov	r0, r4
 800973c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800973e:	4b0b      	ldr	r3, [pc, #44]	; (800976c <__sfp+0x74>)
 8009740:	6665      	str	r5, [r4, #100]	; 0x64
 8009742:	e9c4 5500 	strd	r5, r5, [r4]
 8009746:	60a5      	str	r5, [r4, #8]
 8009748:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800974c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009750:	2208      	movs	r2, #8
 8009752:	4629      	mov	r1, r5
 8009754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009758:	f7ff ff3e 	bl	80095d8 <memset>
 800975c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009764:	e7e9      	b.n	800973a <__sfp+0x42>
 8009766:	bf00      	nop
 8009768:	0800a4b0 	.word	0x0800a4b0
 800976c:	ffff0001 	.word	0xffff0001

08009770 <_fwalk_reent>:
 8009770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009774:	4680      	mov	r8, r0
 8009776:	4689      	mov	r9, r1
 8009778:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800977c:	2600      	movs	r6, #0
 800977e:	b914      	cbnz	r4, 8009786 <_fwalk_reent+0x16>
 8009780:	4630      	mov	r0, r6
 8009782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009786:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800978a:	3f01      	subs	r7, #1
 800978c:	d501      	bpl.n	8009792 <_fwalk_reent+0x22>
 800978e:	6824      	ldr	r4, [r4, #0]
 8009790:	e7f5      	b.n	800977e <_fwalk_reent+0xe>
 8009792:	89ab      	ldrh	r3, [r5, #12]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d907      	bls.n	80097a8 <_fwalk_reent+0x38>
 8009798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800979c:	3301      	adds	r3, #1
 800979e:	d003      	beq.n	80097a8 <_fwalk_reent+0x38>
 80097a0:	4629      	mov	r1, r5
 80097a2:	4640      	mov	r0, r8
 80097a4:	47c8      	blx	r9
 80097a6:	4306      	orrs	r6, r0
 80097a8:	3568      	adds	r5, #104	; 0x68
 80097aa:	e7ee      	b.n	800978a <_fwalk_reent+0x1a>

080097ac <_malloc_r>:
 80097ac:	b570      	push	{r4, r5, r6, lr}
 80097ae:	1ccd      	adds	r5, r1, #3
 80097b0:	f025 0503 	bic.w	r5, r5, #3
 80097b4:	3508      	adds	r5, #8
 80097b6:	2d0c      	cmp	r5, #12
 80097b8:	bf38      	it	cc
 80097ba:	250c      	movcc	r5, #12
 80097bc:	2d00      	cmp	r5, #0
 80097be:	4606      	mov	r6, r0
 80097c0:	db01      	blt.n	80097c6 <_malloc_r+0x1a>
 80097c2:	42a9      	cmp	r1, r5
 80097c4:	d903      	bls.n	80097ce <_malloc_r+0x22>
 80097c6:	230c      	movs	r3, #12
 80097c8:	6033      	str	r3, [r6, #0]
 80097ca:	2000      	movs	r0, #0
 80097cc:	bd70      	pop	{r4, r5, r6, pc}
 80097ce:	f000 fd6b 	bl	800a2a8 <__malloc_lock>
 80097d2:	4a21      	ldr	r2, [pc, #132]	; (8009858 <_malloc_r+0xac>)
 80097d4:	6814      	ldr	r4, [r2, #0]
 80097d6:	4621      	mov	r1, r4
 80097d8:	b991      	cbnz	r1, 8009800 <_malloc_r+0x54>
 80097da:	4c20      	ldr	r4, [pc, #128]	; (800985c <_malloc_r+0xb0>)
 80097dc:	6823      	ldr	r3, [r4, #0]
 80097de:	b91b      	cbnz	r3, 80097e8 <_malloc_r+0x3c>
 80097e0:	4630      	mov	r0, r6
 80097e2:	f000 fb05 	bl	8009df0 <_sbrk_r>
 80097e6:	6020      	str	r0, [r4, #0]
 80097e8:	4629      	mov	r1, r5
 80097ea:	4630      	mov	r0, r6
 80097ec:	f000 fb00 	bl	8009df0 <_sbrk_r>
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	d124      	bne.n	800983e <_malloc_r+0x92>
 80097f4:	230c      	movs	r3, #12
 80097f6:	6033      	str	r3, [r6, #0]
 80097f8:	4630      	mov	r0, r6
 80097fa:	f000 fd56 	bl	800a2aa <__malloc_unlock>
 80097fe:	e7e4      	b.n	80097ca <_malloc_r+0x1e>
 8009800:	680b      	ldr	r3, [r1, #0]
 8009802:	1b5b      	subs	r3, r3, r5
 8009804:	d418      	bmi.n	8009838 <_malloc_r+0x8c>
 8009806:	2b0b      	cmp	r3, #11
 8009808:	d90f      	bls.n	800982a <_malloc_r+0x7e>
 800980a:	600b      	str	r3, [r1, #0]
 800980c:	50cd      	str	r5, [r1, r3]
 800980e:	18cc      	adds	r4, r1, r3
 8009810:	4630      	mov	r0, r6
 8009812:	f000 fd4a 	bl	800a2aa <__malloc_unlock>
 8009816:	f104 000b 	add.w	r0, r4, #11
 800981a:	1d23      	adds	r3, r4, #4
 800981c:	f020 0007 	bic.w	r0, r0, #7
 8009820:	1ac3      	subs	r3, r0, r3
 8009822:	d0d3      	beq.n	80097cc <_malloc_r+0x20>
 8009824:	425a      	negs	r2, r3
 8009826:	50e2      	str	r2, [r4, r3]
 8009828:	e7d0      	b.n	80097cc <_malloc_r+0x20>
 800982a:	428c      	cmp	r4, r1
 800982c:	684b      	ldr	r3, [r1, #4]
 800982e:	bf16      	itet	ne
 8009830:	6063      	strne	r3, [r4, #4]
 8009832:	6013      	streq	r3, [r2, #0]
 8009834:	460c      	movne	r4, r1
 8009836:	e7eb      	b.n	8009810 <_malloc_r+0x64>
 8009838:	460c      	mov	r4, r1
 800983a:	6849      	ldr	r1, [r1, #4]
 800983c:	e7cc      	b.n	80097d8 <_malloc_r+0x2c>
 800983e:	1cc4      	adds	r4, r0, #3
 8009840:	f024 0403 	bic.w	r4, r4, #3
 8009844:	42a0      	cmp	r0, r4
 8009846:	d005      	beq.n	8009854 <_malloc_r+0xa8>
 8009848:	1a21      	subs	r1, r4, r0
 800984a:	4630      	mov	r0, r6
 800984c:	f000 fad0 	bl	8009df0 <_sbrk_r>
 8009850:	3001      	adds	r0, #1
 8009852:	d0cf      	beq.n	80097f4 <_malloc_r+0x48>
 8009854:	6025      	str	r5, [r4, #0]
 8009856:	e7db      	b.n	8009810 <_malloc_r+0x64>
 8009858:	200002e8 	.word	0x200002e8
 800985c:	200002ec 	.word	0x200002ec

08009860 <__sfputc_r>:
 8009860:	6893      	ldr	r3, [r2, #8]
 8009862:	3b01      	subs	r3, #1
 8009864:	2b00      	cmp	r3, #0
 8009866:	b410      	push	{r4}
 8009868:	6093      	str	r3, [r2, #8]
 800986a:	da08      	bge.n	800987e <__sfputc_r+0x1e>
 800986c:	6994      	ldr	r4, [r2, #24]
 800986e:	42a3      	cmp	r3, r4
 8009870:	db01      	blt.n	8009876 <__sfputc_r+0x16>
 8009872:	290a      	cmp	r1, #10
 8009874:	d103      	bne.n	800987e <__sfputc_r+0x1e>
 8009876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800987a:	f000 bb0d 	b.w	8009e98 <__swbuf_r>
 800987e:	6813      	ldr	r3, [r2, #0]
 8009880:	1c58      	adds	r0, r3, #1
 8009882:	6010      	str	r0, [r2, #0]
 8009884:	7019      	strb	r1, [r3, #0]
 8009886:	4608      	mov	r0, r1
 8009888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800988c:	4770      	bx	lr

0800988e <__sfputs_r>:
 800988e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009890:	4606      	mov	r6, r0
 8009892:	460f      	mov	r7, r1
 8009894:	4614      	mov	r4, r2
 8009896:	18d5      	adds	r5, r2, r3
 8009898:	42ac      	cmp	r4, r5
 800989a:	d101      	bne.n	80098a0 <__sfputs_r+0x12>
 800989c:	2000      	movs	r0, #0
 800989e:	e007      	b.n	80098b0 <__sfputs_r+0x22>
 80098a0:	463a      	mov	r2, r7
 80098a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a6:	4630      	mov	r0, r6
 80098a8:	f7ff ffda 	bl	8009860 <__sfputc_r>
 80098ac:	1c43      	adds	r3, r0, #1
 80098ae:	d1f3      	bne.n	8009898 <__sfputs_r+0xa>
 80098b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098b4 <_vfiprintf_r>:
 80098b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b8:	460c      	mov	r4, r1
 80098ba:	b09d      	sub	sp, #116	; 0x74
 80098bc:	4617      	mov	r7, r2
 80098be:	461d      	mov	r5, r3
 80098c0:	4606      	mov	r6, r0
 80098c2:	b118      	cbz	r0, 80098cc <_vfiprintf_r+0x18>
 80098c4:	6983      	ldr	r3, [r0, #24]
 80098c6:	b90b      	cbnz	r3, 80098cc <_vfiprintf_r+0x18>
 80098c8:	f7ff fee6 	bl	8009698 <__sinit>
 80098cc:	4b7c      	ldr	r3, [pc, #496]	; (8009ac0 <_vfiprintf_r+0x20c>)
 80098ce:	429c      	cmp	r4, r3
 80098d0:	d158      	bne.n	8009984 <_vfiprintf_r+0xd0>
 80098d2:	6874      	ldr	r4, [r6, #4]
 80098d4:	89a3      	ldrh	r3, [r4, #12]
 80098d6:	0718      	lsls	r0, r3, #28
 80098d8:	d55e      	bpl.n	8009998 <_vfiprintf_r+0xe4>
 80098da:	6923      	ldr	r3, [r4, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d05b      	beq.n	8009998 <_vfiprintf_r+0xe4>
 80098e0:	2300      	movs	r3, #0
 80098e2:	9309      	str	r3, [sp, #36]	; 0x24
 80098e4:	2320      	movs	r3, #32
 80098e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098ea:	2330      	movs	r3, #48	; 0x30
 80098ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098f0:	9503      	str	r5, [sp, #12]
 80098f2:	f04f 0b01 	mov.w	fp, #1
 80098f6:	46b8      	mov	r8, r7
 80098f8:	4645      	mov	r5, r8
 80098fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80098fe:	b10b      	cbz	r3, 8009904 <_vfiprintf_r+0x50>
 8009900:	2b25      	cmp	r3, #37	; 0x25
 8009902:	d154      	bne.n	80099ae <_vfiprintf_r+0xfa>
 8009904:	ebb8 0a07 	subs.w	sl, r8, r7
 8009908:	d00b      	beq.n	8009922 <_vfiprintf_r+0x6e>
 800990a:	4653      	mov	r3, sl
 800990c:	463a      	mov	r2, r7
 800990e:	4621      	mov	r1, r4
 8009910:	4630      	mov	r0, r6
 8009912:	f7ff ffbc 	bl	800988e <__sfputs_r>
 8009916:	3001      	adds	r0, #1
 8009918:	f000 80c2 	beq.w	8009aa0 <_vfiprintf_r+0x1ec>
 800991c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800991e:	4453      	add	r3, sl
 8009920:	9309      	str	r3, [sp, #36]	; 0x24
 8009922:	f898 3000 	ldrb.w	r3, [r8]
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 80ba 	beq.w	8009aa0 <_vfiprintf_r+0x1ec>
 800992c:	2300      	movs	r3, #0
 800992e:	f04f 32ff 	mov.w	r2, #4294967295
 8009932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009936:	9304      	str	r3, [sp, #16]
 8009938:	9307      	str	r3, [sp, #28]
 800993a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800993e:	931a      	str	r3, [sp, #104]	; 0x68
 8009940:	46a8      	mov	r8, r5
 8009942:	2205      	movs	r2, #5
 8009944:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009948:	485e      	ldr	r0, [pc, #376]	; (8009ac4 <_vfiprintf_r+0x210>)
 800994a:	f7f6 fc41 	bl	80001d0 <memchr>
 800994e:	9b04      	ldr	r3, [sp, #16]
 8009950:	bb78      	cbnz	r0, 80099b2 <_vfiprintf_r+0xfe>
 8009952:	06d9      	lsls	r1, r3, #27
 8009954:	bf44      	itt	mi
 8009956:	2220      	movmi	r2, #32
 8009958:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800995c:	071a      	lsls	r2, r3, #28
 800995e:	bf44      	itt	mi
 8009960:	222b      	movmi	r2, #43	; 0x2b
 8009962:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009966:	782a      	ldrb	r2, [r5, #0]
 8009968:	2a2a      	cmp	r2, #42	; 0x2a
 800996a:	d02a      	beq.n	80099c2 <_vfiprintf_r+0x10e>
 800996c:	9a07      	ldr	r2, [sp, #28]
 800996e:	46a8      	mov	r8, r5
 8009970:	2000      	movs	r0, #0
 8009972:	250a      	movs	r5, #10
 8009974:	4641      	mov	r1, r8
 8009976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800997a:	3b30      	subs	r3, #48	; 0x30
 800997c:	2b09      	cmp	r3, #9
 800997e:	d969      	bls.n	8009a54 <_vfiprintf_r+0x1a0>
 8009980:	b360      	cbz	r0, 80099dc <_vfiprintf_r+0x128>
 8009982:	e024      	b.n	80099ce <_vfiprintf_r+0x11a>
 8009984:	4b50      	ldr	r3, [pc, #320]	; (8009ac8 <_vfiprintf_r+0x214>)
 8009986:	429c      	cmp	r4, r3
 8009988:	d101      	bne.n	800998e <_vfiprintf_r+0xda>
 800998a:	68b4      	ldr	r4, [r6, #8]
 800998c:	e7a2      	b.n	80098d4 <_vfiprintf_r+0x20>
 800998e:	4b4f      	ldr	r3, [pc, #316]	; (8009acc <_vfiprintf_r+0x218>)
 8009990:	429c      	cmp	r4, r3
 8009992:	bf08      	it	eq
 8009994:	68f4      	ldreq	r4, [r6, #12]
 8009996:	e79d      	b.n	80098d4 <_vfiprintf_r+0x20>
 8009998:	4621      	mov	r1, r4
 800999a:	4630      	mov	r0, r6
 800999c:	f000 fae0 	bl	8009f60 <__swsetup_r>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d09d      	beq.n	80098e0 <_vfiprintf_r+0x2c>
 80099a4:	f04f 30ff 	mov.w	r0, #4294967295
 80099a8:	b01d      	add	sp, #116	; 0x74
 80099aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ae:	46a8      	mov	r8, r5
 80099b0:	e7a2      	b.n	80098f8 <_vfiprintf_r+0x44>
 80099b2:	4a44      	ldr	r2, [pc, #272]	; (8009ac4 <_vfiprintf_r+0x210>)
 80099b4:	1a80      	subs	r0, r0, r2
 80099b6:	fa0b f000 	lsl.w	r0, fp, r0
 80099ba:	4318      	orrs	r0, r3
 80099bc:	9004      	str	r0, [sp, #16]
 80099be:	4645      	mov	r5, r8
 80099c0:	e7be      	b.n	8009940 <_vfiprintf_r+0x8c>
 80099c2:	9a03      	ldr	r2, [sp, #12]
 80099c4:	1d11      	adds	r1, r2, #4
 80099c6:	6812      	ldr	r2, [r2, #0]
 80099c8:	9103      	str	r1, [sp, #12]
 80099ca:	2a00      	cmp	r2, #0
 80099cc:	db01      	blt.n	80099d2 <_vfiprintf_r+0x11e>
 80099ce:	9207      	str	r2, [sp, #28]
 80099d0:	e004      	b.n	80099dc <_vfiprintf_r+0x128>
 80099d2:	4252      	negs	r2, r2
 80099d4:	f043 0302 	orr.w	r3, r3, #2
 80099d8:	9207      	str	r2, [sp, #28]
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	f898 3000 	ldrb.w	r3, [r8]
 80099e0:	2b2e      	cmp	r3, #46	; 0x2e
 80099e2:	d10e      	bne.n	8009a02 <_vfiprintf_r+0x14e>
 80099e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80099e8:	2b2a      	cmp	r3, #42	; 0x2a
 80099ea:	d138      	bne.n	8009a5e <_vfiprintf_r+0x1aa>
 80099ec:	9b03      	ldr	r3, [sp, #12]
 80099ee:	1d1a      	adds	r2, r3, #4
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	9203      	str	r2, [sp, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	bfb8      	it	lt
 80099f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80099fc:	f108 0802 	add.w	r8, r8, #2
 8009a00:	9305      	str	r3, [sp, #20]
 8009a02:	4d33      	ldr	r5, [pc, #204]	; (8009ad0 <_vfiprintf_r+0x21c>)
 8009a04:	f898 1000 	ldrb.w	r1, [r8]
 8009a08:	2203      	movs	r2, #3
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	f7f6 fbe0 	bl	80001d0 <memchr>
 8009a10:	b140      	cbz	r0, 8009a24 <_vfiprintf_r+0x170>
 8009a12:	2340      	movs	r3, #64	; 0x40
 8009a14:	1b40      	subs	r0, r0, r5
 8009a16:	fa03 f000 	lsl.w	r0, r3, r0
 8009a1a:	9b04      	ldr	r3, [sp, #16]
 8009a1c:	4303      	orrs	r3, r0
 8009a1e:	f108 0801 	add.w	r8, r8, #1
 8009a22:	9304      	str	r3, [sp, #16]
 8009a24:	f898 1000 	ldrb.w	r1, [r8]
 8009a28:	482a      	ldr	r0, [pc, #168]	; (8009ad4 <_vfiprintf_r+0x220>)
 8009a2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a2e:	2206      	movs	r2, #6
 8009a30:	f108 0701 	add.w	r7, r8, #1
 8009a34:	f7f6 fbcc 	bl	80001d0 <memchr>
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d037      	beq.n	8009aac <_vfiprintf_r+0x1f8>
 8009a3c:	4b26      	ldr	r3, [pc, #152]	; (8009ad8 <_vfiprintf_r+0x224>)
 8009a3e:	bb1b      	cbnz	r3, 8009a88 <_vfiprintf_r+0x1d4>
 8009a40:	9b03      	ldr	r3, [sp, #12]
 8009a42:	3307      	adds	r3, #7
 8009a44:	f023 0307 	bic.w	r3, r3, #7
 8009a48:	3308      	adds	r3, #8
 8009a4a:	9303      	str	r3, [sp, #12]
 8009a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a4e:	444b      	add	r3, r9
 8009a50:	9309      	str	r3, [sp, #36]	; 0x24
 8009a52:	e750      	b.n	80098f6 <_vfiprintf_r+0x42>
 8009a54:	fb05 3202 	mla	r2, r5, r2, r3
 8009a58:	2001      	movs	r0, #1
 8009a5a:	4688      	mov	r8, r1
 8009a5c:	e78a      	b.n	8009974 <_vfiprintf_r+0xc0>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f108 0801 	add.w	r8, r8, #1
 8009a64:	9305      	str	r3, [sp, #20]
 8009a66:	4619      	mov	r1, r3
 8009a68:	250a      	movs	r5, #10
 8009a6a:	4640      	mov	r0, r8
 8009a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a70:	3a30      	subs	r2, #48	; 0x30
 8009a72:	2a09      	cmp	r2, #9
 8009a74:	d903      	bls.n	8009a7e <_vfiprintf_r+0x1ca>
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d0c3      	beq.n	8009a02 <_vfiprintf_r+0x14e>
 8009a7a:	9105      	str	r1, [sp, #20]
 8009a7c:	e7c1      	b.n	8009a02 <_vfiprintf_r+0x14e>
 8009a7e:	fb05 2101 	mla	r1, r5, r1, r2
 8009a82:	2301      	movs	r3, #1
 8009a84:	4680      	mov	r8, r0
 8009a86:	e7f0      	b.n	8009a6a <_vfiprintf_r+0x1b6>
 8009a88:	ab03      	add	r3, sp, #12
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	4622      	mov	r2, r4
 8009a8e:	4b13      	ldr	r3, [pc, #76]	; (8009adc <_vfiprintf_r+0x228>)
 8009a90:	a904      	add	r1, sp, #16
 8009a92:	4630      	mov	r0, r6
 8009a94:	f3af 8000 	nop.w
 8009a98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009a9c:	4681      	mov	r9, r0
 8009a9e:	d1d5      	bne.n	8009a4c <_vfiprintf_r+0x198>
 8009aa0:	89a3      	ldrh	r3, [r4, #12]
 8009aa2:	065b      	lsls	r3, r3, #25
 8009aa4:	f53f af7e 	bmi.w	80099a4 <_vfiprintf_r+0xf0>
 8009aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aaa:	e77d      	b.n	80099a8 <_vfiprintf_r+0xf4>
 8009aac:	ab03      	add	r3, sp, #12
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	4622      	mov	r2, r4
 8009ab2:	4b0a      	ldr	r3, [pc, #40]	; (8009adc <_vfiprintf_r+0x228>)
 8009ab4:	a904      	add	r1, sp, #16
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f000 f888 	bl	8009bcc <_printf_i>
 8009abc:	e7ec      	b.n	8009a98 <_vfiprintf_r+0x1e4>
 8009abe:	bf00      	nop
 8009ac0:	0800a4d4 	.word	0x0800a4d4
 8009ac4:	0800a514 	.word	0x0800a514
 8009ac8:	0800a4f4 	.word	0x0800a4f4
 8009acc:	0800a4b4 	.word	0x0800a4b4
 8009ad0:	0800a51a 	.word	0x0800a51a
 8009ad4:	0800a51e 	.word	0x0800a51e
 8009ad8:	00000000 	.word	0x00000000
 8009adc:	0800988f 	.word	0x0800988f

08009ae0 <_printf_common>:
 8009ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae4:	4691      	mov	r9, r2
 8009ae6:	461f      	mov	r7, r3
 8009ae8:	688a      	ldr	r2, [r1, #8]
 8009aea:	690b      	ldr	r3, [r1, #16]
 8009aec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009af0:	4293      	cmp	r3, r2
 8009af2:	bfb8      	it	lt
 8009af4:	4613      	movlt	r3, r2
 8009af6:	f8c9 3000 	str.w	r3, [r9]
 8009afa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009afe:	4606      	mov	r6, r0
 8009b00:	460c      	mov	r4, r1
 8009b02:	b112      	cbz	r2, 8009b0a <_printf_common+0x2a>
 8009b04:	3301      	adds	r3, #1
 8009b06:	f8c9 3000 	str.w	r3, [r9]
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	0699      	lsls	r1, r3, #26
 8009b0e:	bf42      	ittt	mi
 8009b10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009b14:	3302      	addmi	r3, #2
 8009b16:	f8c9 3000 	strmi.w	r3, [r9]
 8009b1a:	6825      	ldr	r5, [r4, #0]
 8009b1c:	f015 0506 	ands.w	r5, r5, #6
 8009b20:	d107      	bne.n	8009b32 <_printf_common+0x52>
 8009b22:	f104 0a19 	add.w	sl, r4, #25
 8009b26:	68e3      	ldr	r3, [r4, #12]
 8009b28:	f8d9 2000 	ldr.w	r2, [r9]
 8009b2c:	1a9b      	subs	r3, r3, r2
 8009b2e:	42ab      	cmp	r3, r5
 8009b30:	dc28      	bgt.n	8009b84 <_printf_common+0xa4>
 8009b32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009b36:	6822      	ldr	r2, [r4, #0]
 8009b38:	3300      	adds	r3, #0
 8009b3a:	bf18      	it	ne
 8009b3c:	2301      	movne	r3, #1
 8009b3e:	0692      	lsls	r2, r2, #26
 8009b40:	d42d      	bmi.n	8009b9e <_printf_common+0xbe>
 8009b42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b46:	4639      	mov	r1, r7
 8009b48:	4630      	mov	r0, r6
 8009b4a:	47c0      	blx	r8
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d020      	beq.n	8009b92 <_printf_common+0xb2>
 8009b50:	6823      	ldr	r3, [r4, #0]
 8009b52:	68e5      	ldr	r5, [r4, #12]
 8009b54:	f8d9 2000 	ldr.w	r2, [r9]
 8009b58:	f003 0306 	and.w	r3, r3, #6
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	bf08      	it	eq
 8009b60:	1aad      	subeq	r5, r5, r2
 8009b62:	68a3      	ldr	r3, [r4, #8]
 8009b64:	6922      	ldr	r2, [r4, #16]
 8009b66:	bf0c      	ite	eq
 8009b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b6c:	2500      	movne	r5, #0
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	bfc4      	itt	gt
 8009b72:	1a9b      	subgt	r3, r3, r2
 8009b74:	18ed      	addgt	r5, r5, r3
 8009b76:	f04f 0900 	mov.w	r9, #0
 8009b7a:	341a      	adds	r4, #26
 8009b7c:	454d      	cmp	r5, r9
 8009b7e:	d11a      	bne.n	8009bb6 <_printf_common+0xd6>
 8009b80:	2000      	movs	r0, #0
 8009b82:	e008      	b.n	8009b96 <_printf_common+0xb6>
 8009b84:	2301      	movs	r3, #1
 8009b86:	4652      	mov	r2, sl
 8009b88:	4639      	mov	r1, r7
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	47c0      	blx	r8
 8009b8e:	3001      	adds	r0, #1
 8009b90:	d103      	bne.n	8009b9a <_printf_common+0xba>
 8009b92:	f04f 30ff 	mov.w	r0, #4294967295
 8009b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b9a:	3501      	adds	r5, #1
 8009b9c:	e7c3      	b.n	8009b26 <_printf_common+0x46>
 8009b9e:	18e1      	adds	r1, r4, r3
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	2030      	movs	r0, #48	; 0x30
 8009ba4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ba8:	4422      	add	r2, r4
 8009baa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bb2:	3302      	adds	r3, #2
 8009bb4:	e7c5      	b.n	8009b42 <_printf_common+0x62>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	4622      	mov	r2, r4
 8009bba:	4639      	mov	r1, r7
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	47c0      	blx	r8
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	d0e6      	beq.n	8009b92 <_printf_common+0xb2>
 8009bc4:	f109 0901 	add.w	r9, r9, #1
 8009bc8:	e7d8      	b.n	8009b7c <_printf_common+0x9c>
	...

08009bcc <_printf_i>:
 8009bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bd0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	7e09      	ldrb	r1, [r1, #24]
 8009bd8:	b085      	sub	sp, #20
 8009bda:	296e      	cmp	r1, #110	; 0x6e
 8009bdc:	4617      	mov	r7, r2
 8009bde:	4606      	mov	r6, r0
 8009be0:	4698      	mov	r8, r3
 8009be2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009be4:	f000 80b3 	beq.w	8009d4e <_printf_i+0x182>
 8009be8:	d822      	bhi.n	8009c30 <_printf_i+0x64>
 8009bea:	2963      	cmp	r1, #99	; 0x63
 8009bec:	d036      	beq.n	8009c5c <_printf_i+0x90>
 8009bee:	d80a      	bhi.n	8009c06 <_printf_i+0x3a>
 8009bf0:	2900      	cmp	r1, #0
 8009bf2:	f000 80b9 	beq.w	8009d68 <_printf_i+0x19c>
 8009bf6:	2958      	cmp	r1, #88	; 0x58
 8009bf8:	f000 8083 	beq.w	8009d02 <_printf_i+0x136>
 8009bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009c04:	e032      	b.n	8009c6c <_printf_i+0xa0>
 8009c06:	2964      	cmp	r1, #100	; 0x64
 8009c08:	d001      	beq.n	8009c0e <_printf_i+0x42>
 8009c0a:	2969      	cmp	r1, #105	; 0x69
 8009c0c:	d1f6      	bne.n	8009bfc <_printf_i+0x30>
 8009c0e:	6820      	ldr	r0, [r4, #0]
 8009c10:	6813      	ldr	r3, [r2, #0]
 8009c12:	0605      	lsls	r5, r0, #24
 8009c14:	f103 0104 	add.w	r1, r3, #4
 8009c18:	d52a      	bpl.n	8009c70 <_printf_i+0xa4>
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	6011      	str	r1, [r2, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	da03      	bge.n	8009c2a <_printf_i+0x5e>
 8009c22:	222d      	movs	r2, #45	; 0x2d
 8009c24:	425b      	negs	r3, r3
 8009c26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009c2a:	486f      	ldr	r0, [pc, #444]	; (8009de8 <_printf_i+0x21c>)
 8009c2c:	220a      	movs	r2, #10
 8009c2e:	e039      	b.n	8009ca4 <_printf_i+0xd8>
 8009c30:	2973      	cmp	r1, #115	; 0x73
 8009c32:	f000 809d 	beq.w	8009d70 <_printf_i+0x1a4>
 8009c36:	d808      	bhi.n	8009c4a <_printf_i+0x7e>
 8009c38:	296f      	cmp	r1, #111	; 0x6f
 8009c3a:	d020      	beq.n	8009c7e <_printf_i+0xb2>
 8009c3c:	2970      	cmp	r1, #112	; 0x70
 8009c3e:	d1dd      	bne.n	8009bfc <_printf_i+0x30>
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	f043 0320 	orr.w	r3, r3, #32
 8009c46:	6023      	str	r3, [r4, #0]
 8009c48:	e003      	b.n	8009c52 <_printf_i+0x86>
 8009c4a:	2975      	cmp	r1, #117	; 0x75
 8009c4c:	d017      	beq.n	8009c7e <_printf_i+0xb2>
 8009c4e:	2978      	cmp	r1, #120	; 0x78
 8009c50:	d1d4      	bne.n	8009bfc <_printf_i+0x30>
 8009c52:	2378      	movs	r3, #120	; 0x78
 8009c54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c58:	4864      	ldr	r0, [pc, #400]	; (8009dec <_printf_i+0x220>)
 8009c5a:	e055      	b.n	8009d08 <_printf_i+0x13c>
 8009c5c:	6813      	ldr	r3, [r2, #0]
 8009c5e:	1d19      	adds	r1, r3, #4
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	6011      	str	r1, [r2, #0]
 8009c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e08c      	b.n	8009d8a <_printf_i+0x1be>
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6011      	str	r1, [r2, #0]
 8009c74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c78:	bf18      	it	ne
 8009c7a:	b21b      	sxthne	r3, r3
 8009c7c:	e7cf      	b.n	8009c1e <_printf_i+0x52>
 8009c7e:	6813      	ldr	r3, [r2, #0]
 8009c80:	6825      	ldr	r5, [r4, #0]
 8009c82:	1d18      	adds	r0, r3, #4
 8009c84:	6010      	str	r0, [r2, #0]
 8009c86:	0628      	lsls	r0, r5, #24
 8009c88:	d501      	bpl.n	8009c8e <_printf_i+0xc2>
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	e002      	b.n	8009c94 <_printf_i+0xc8>
 8009c8e:	0668      	lsls	r0, r5, #25
 8009c90:	d5fb      	bpl.n	8009c8a <_printf_i+0xbe>
 8009c92:	881b      	ldrh	r3, [r3, #0]
 8009c94:	4854      	ldr	r0, [pc, #336]	; (8009de8 <_printf_i+0x21c>)
 8009c96:	296f      	cmp	r1, #111	; 0x6f
 8009c98:	bf14      	ite	ne
 8009c9a:	220a      	movne	r2, #10
 8009c9c:	2208      	moveq	r2, #8
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ca4:	6865      	ldr	r5, [r4, #4]
 8009ca6:	60a5      	str	r5, [r4, #8]
 8009ca8:	2d00      	cmp	r5, #0
 8009caa:	f2c0 8095 	blt.w	8009dd8 <_printf_i+0x20c>
 8009cae:	6821      	ldr	r1, [r4, #0]
 8009cb0:	f021 0104 	bic.w	r1, r1, #4
 8009cb4:	6021      	str	r1, [r4, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d13d      	bne.n	8009d36 <_printf_i+0x16a>
 8009cba:	2d00      	cmp	r5, #0
 8009cbc:	f040 808e 	bne.w	8009ddc <_printf_i+0x210>
 8009cc0:	4665      	mov	r5, ip
 8009cc2:	2a08      	cmp	r2, #8
 8009cc4:	d10b      	bne.n	8009cde <_printf_i+0x112>
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	07db      	lsls	r3, r3, #31
 8009cca:	d508      	bpl.n	8009cde <_printf_i+0x112>
 8009ccc:	6923      	ldr	r3, [r4, #16]
 8009cce:	6862      	ldr	r2, [r4, #4]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	bfde      	ittt	le
 8009cd4:	2330      	movle	r3, #48	; 0x30
 8009cd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cde:	ebac 0305 	sub.w	r3, ip, r5
 8009ce2:	6123      	str	r3, [r4, #16]
 8009ce4:	f8cd 8000 	str.w	r8, [sp]
 8009ce8:	463b      	mov	r3, r7
 8009cea:	aa03      	add	r2, sp, #12
 8009cec:	4621      	mov	r1, r4
 8009cee:	4630      	mov	r0, r6
 8009cf0:	f7ff fef6 	bl	8009ae0 <_printf_common>
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	d14d      	bne.n	8009d94 <_printf_i+0x1c8>
 8009cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cfc:	b005      	add	sp, #20
 8009cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d02:	4839      	ldr	r0, [pc, #228]	; (8009de8 <_printf_i+0x21c>)
 8009d04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009d08:	6813      	ldr	r3, [r2, #0]
 8009d0a:	6821      	ldr	r1, [r4, #0]
 8009d0c:	1d1d      	adds	r5, r3, #4
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6015      	str	r5, [r2, #0]
 8009d12:	060a      	lsls	r2, r1, #24
 8009d14:	d50b      	bpl.n	8009d2e <_printf_i+0x162>
 8009d16:	07ca      	lsls	r2, r1, #31
 8009d18:	bf44      	itt	mi
 8009d1a:	f041 0120 	orrmi.w	r1, r1, #32
 8009d1e:	6021      	strmi	r1, [r4, #0]
 8009d20:	b91b      	cbnz	r3, 8009d2a <_printf_i+0x15e>
 8009d22:	6822      	ldr	r2, [r4, #0]
 8009d24:	f022 0220 	bic.w	r2, r2, #32
 8009d28:	6022      	str	r2, [r4, #0]
 8009d2a:	2210      	movs	r2, #16
 8009d2c:	e7b7      	b.n	8009c9e <_printf_i+0xd2>
 8009d2e:	064d      	lsls	r5, r1, #25
 8009d30:	bf48      	it	mi
 8009d32:	b29b      	uxthmi	r3, r3
 8009d34:	e7ef      	b.n	8009d16 <_printf_i+0x14a>
 8009d36:	4665      	mov	r5, ip
 8009d38:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d3c:	fb02 3311 	mls	r3, r2, r1, r3
 8009d40:	5cc3      	ldrb	r3, [r0, r3]
 8009d42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009d46:	460b      	mov	r3, r1
 8009d48:	2900      	cmp	r1, #0
 8009d4a:	d1f5      	bne.n	8009d38 <_printf_i+0x16c>
 8009d4c:	e7b9      	b.n	8009cc2 <_printf_i+0xf6>
 8009d4e:	6813      	ldr	r3, [r2, #0]
 8009d50:	6825      	ldr	r5, [r4, #0]
 8009d52:	6961      	ldr	r1, [r4, #20]
 8009d54:	1d18      	adds	r0, r3, #4
 8009d56:	6010      	str	r0, [r2, #0]
 8009d58:	0628      	lsls	r0, r5, #24
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	d501      	bpl.n	8009d62 <_printf_i+0x196>
 8009d5e:	6019      	str	r1, [r3, #0]
 8009d60:	e002      	b.n	8009d68 <_printf_i+0x19c>
 8009d62:	066a      	lsls	r2, r5, #25
 8009d64:	d5fb      	bpl.n	8009d5e <_printf_i+0x192>
 8009d66:	8019      	strh	r1, [r3, #0]
 8009d68:	2300      	movs	r3, #0
 8009d6a:	6123      	str	r3, [r4, #16]
 8009d6c:	4665      	mov	r5, ip
 8009d6e:	e7b9      	b.n	8009ce4 <_printf_i+0x118>
 8009d70:	6813      	ldr	r3, [r2, #0]
 8009d72:	1d19      	adds	r1, r3, #4
 8009d74:	6011      	str	r1, [r2, #0]
 8009d76:	681d      	ldr	r5, [r3, #0]
 8009d78:	6862      	ldr	r2, [r4, #4]
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	f7f6 fa27 	bl	80001d0 <memchr>
 8009d82:	b108      	cbz	r0, 8009d88 <_printf_i+0x1bc>
 8009d84:	1b40      	subs	r0, r0, r5
 8009d86:	6060      	str	r0, [r4, #4]
 8009d88:	6863      	ldr	r3, [r4, #4]
 8009d8a:	6123      	str	r3, [r4, #16]
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d92:	e7a7      	b.n	8009ce4 <_printf_i+0x118>
 8009d94:	6923      	ldr	r3, [r4, #16]
 8009d96:	462a      	mov	r2, r5
 8009d98:	4639      	mov	r1, r7
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	47c0      	blx	r8
 8009d9e:	3001      	adds	r0, #1
 8009da0:	d0aa      	beq.n	8009cf8 <_printf_i+0x12c>
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	079b      	lsls	r3, r3, #30
 8009da6:	d413      	bmi.n	8009dd0 <_printf_i+0x204>
 8009da8:	68e0      	ldr	r0, [r4, #12]
 8009daa:	9b03      	ldr	r3, [sp, #12]
 8009dac:	4298      	cmp	r0, r3
 8009dae:	bfb8      	it	lt
 8009db0:	4618      	movlt	r0, r3
 8009db2:	e7a3      	b.n	8009cfc <_printf_i+0x130>
 8009db4:	2301      	movs	r3, #1
 8009db6:	464a      	mov	r2, r9
 8009db8:	4639      	mov	r1, r7
 8009dba:	4630      	mov	r0, r6
 8009dbc:	47c0      	blx	r8
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	d09a      	beq.n	8009cf8 <_printf_i+0x12c>
 8009dc2:	3501      	adds	r5, #1
 8009dc4:	68e3      	ldr	r3, [r4, #12]
 8009dc6:	9a03      	ldr	r2, [sp, #12]
 8009dc8:	1a9b      	subs	r3, r3, r2
 8009dca:	42ab      	cmp	r3, r5
 8009dcc:	dcf2      	bgt.n	8009db4 <_printf_i+0x1e8>
 8009dce:	e7eb      	b.n	8009da8 <_printf_i+0x1dc>
 8009dd0:	2500      	movs	r5, #0
 8009dd2:	f104 0919 	add.w	r9, r4, #25
 8009dd6:	e7f5      	b.n	8009dc4 <_printf_i+0x1f8>
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1ac      	bne.n	8009d36 <_printf_i+0x16a>
 8009ddc:	7803      	ldrb	r3, [r0, #0]
 8009dde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009de2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009de6:	e76c      	b.n	8009cc2 <_printf_i+0xf6>
 8009de8:	0800a525 	.word	0x0800a525
 8009dec:	0800a536 	.word	0x0800a536

08009df0 <_sbrk_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4c06      	ldr	r4, [pc, #24]	; (8009e0c <_sbrk_r+0x1c>)
 8009df4:	2300      	movs	r3, #0
 8009df6:	4605      	mov	r5, r0
 8009df8:	4608      	mov	r0, r1
 8009dfa:	6023      	str	r3, [r4, #0]
 8009dfc:	f7ff fb56 	bl	80094ac <_sbrk>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d102      	bne.n	8009e0a <_sbrk_r+0x1a>
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	b103      	cbz	r3, 8009e0a <_sbrk_r+0x1a>
 8009e08:	602b      	str	r3, [r5, #0]
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
 8009e0c:	200133b8 	.word	0x200133b8

08009e10 <__sread>:
 8009e10:	b510      	push	{r4, lr}
 8009e12:	460c      	mov	r4, r1
 8009e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e18:	f000 fa96 	bl	800a348 <_read_r>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	bfab      	itete	ge
 8009e20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e22:	89a3      	ldrhlt	r3, [r4, #12]
 8009e24:	181b      	addge	r3, r3, r0
 8009e26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e2a:	bfac      	ite	ge
 8009e2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e2e:	81a3      	strhlt	r3, [r4, #12]
 8009e30:	bd10      	pop	{r4, pc}

08009e32 <__swrite>:
 8009e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e36:	461f      	mov	r7, r3
 8009e38:	898b      	ldrh	r3, [r1, #12]
 8009e3a:	05db      	lsls	r3, r3, #23
 8009e3c:	4605      	mov	r5, r0
 8009e3e:	460c      	mov	r4, r1
 8009e40:	4616      	mov	r6, r2
 8009e42:	d505      	bpl.n	8009e50 <__swrite+0x1e>
 8009e44:	2302      	movs	r3, #2
 8009e46:	2200      	movs	r2, #0
 8009e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e4c:	f000 f9b6 	bl	800a1bc <_lseek_r>
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e5a:	81a3      	strh	r3, [r4, #12]
 8009e5c:	4632      	mov	r2, r6
 8009e5e:	463b      	mov	r3, r7
 8009e60:	4628      	mov	r0, r5
 8009e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e66:	f000 b869 	b.w	8009f3c <_write_r>

08009e6a <__sseek>:
 8009e6a:	b510      	push	{r4, lr}
 8009e6c:	460c      	mov	r4, r1
 8009e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e72:	f000 f9a3 	bl	800a1bc <_lseek_r>
 8009e76:	1c43      	adds	r3, r0, #1
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	bf15      	itete	ne
 8009e7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e86:	81a3      	strheq	r3, [r4, #12]
 8009e88:	bf18      	it	ne
 8009e8a:	81a3      	strhne	r3, [r4, #12]
 8009e8c:	bd10      	pop	{r4, pc}

08009e8e <__sclose>:
 8009e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e92:	f000 b8d3 	b.w	800a03c <_close_r>
	...

08009e98 <__swbuf_r>:
 8009e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9a:	460e      	mov	r6, r1
 8009e9c:	4614      	mov	r4, r2
 8009e9e:	4605      	mov	r5, r0
 8009ea0:	b118      	cbz	r0, 8009eaa <__swbuf_r+0x12>
 8009ea2:	6983      	ldr	r3, [r0, #24]
 8009ea4:	b90b      	cbnz	r3, 8009eaa <__swbuf_r+0x12>
 8009ea6:	f7ff fbf7 	bl	8009698 <__sinit>
 8009eaa:	4b21      	ldr	r3, [pc, #132]	; (8009f30 <__swbuf_r+0x98>)
 8009eac:	429c      	cmp	r4, r3
 8009eae:	d12a      	bne.n	8009f06 <__swbuf_r+0x6e>
 8009eb0:	686c      	ldr	r4, [r5, #4]
 8009eb2:	69a3      	ldr	r3, [r4, #24]
 8009eb4:	60a3      	str	r3, [r4, #8]
 8009eb6:	89a3      	ldrh	r3, [r4, #12]
 8009eb8:	071a      	lsls	r2, r3, #28
 8009eba:	d52e      	bpl.n	8009f1a <__swbuf_r+0x82>
 8009ebc:	6923      	ldr	r3, [r4, #16]
 8009ebe:	b363      	cbz	r3, 8009f1a <__swbuf_r+0x82>
 8009ec0:	6923      	ldr	r3, [r4, #16]
 8009ec2:	6820      	ldr	r0, [r4, #0]
 8009ec4:	1ac0      	subs	r0, r0, r3
 8009ec6:	6963      	ldr	r3, [r4, #20]
 8009ec8:	b2f6      	uxtb	r6, r6
 8009eca:	4283      	cmp	r3, r0
 8009ecc:	4637      	mov	r7, r6
 8009ece:	dc04      	bgt.n	8009eda <__swbuf_r+0x42>
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	f000 f948 	bl	800a168 <_fflush_r>
 8009ed8:	bb28      	cbnz	r0, 8009f26 <__swbuf_r+0x8e>
 8009eda:	68a3      	ldr	r3, [r4, #8]
 8009edc:	3b01      	subs	r3, #1
 8009ede:	60a3      	str	r3, [r4, #8]
 8009ee0:	6823      	ldr	r3, [r4, #0]
 8009ee2:	1c5a      	adds	r2, r3, #1
 8009ee4:	6022      	str	r2, [r4, #0]
 8009ee6:	701e      	strb	r6, [r3, #0]
 8009ee8:	6963      	ldr	r3, [r4, #20]
 8009eea:	3001      	adds	r0, #1
 8009eec:	4283      	cmp	r3, r0
 8009eee:	d004      	beq.n	8009efa <__swbuf_r+0x62>
 8009ef0:	89a3      	ldrh	r3, [r4, #12]
 8009ef2:	07db      	lsls	r3, r3, #31
 8009ef4:	d519      	bpl.n	8009f2a <__swbuf_r+0x92>
 8009ef6:	2e0a      	cmp	r6, #10
 8009ef8:	d117      	bne.n	8009f2a <__swbuf_r+0x92>
 8009efa:	4621      	mov	r1, r4
 8009efc:	4628      	mov	r0, r5
 8009efe:	f000 f933 	bl	800a168 <_fflush_r>
 8009f02:	b190      	cbz	r0, 8009f2a <__swbuf_r+0x92>
 8009f04:	e00f      	b.n	8009f26 <__swbuf_r+0x8e>
 8009f06:	4b0b      	ldr	r3, [pc, #44]	; (8009f34 <__swbuf_r+0x9c>)
 8009f08:	429c      	cmp	r4, r3
 8009f0a:	d101      	bne.n	8009f10 <__swbuf_r+0x78>
 8009f0c:	68ac      	ldr	r4, [r5, #8]
 8009f0e:	e7d0      	b.n	8009eb2 <__swbuf_r+0x1a>
 8009f10:	4b09      	ldr	r3, [pc, #36]	; (8009f38 <__swbuf_r+0xa0>)
 8009f12:	429c      	cmp	r4, r3
 8009f14:	bf08      	it	eq
 8009f16:	68ec      	ldreq	r4, [r5, #12]
 8009f18:	e7cb      	b.n	8009eb2 <__swbuf_r+0x1a>
 8009f1a:	4621      	mov	r1, r4
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	f000 f81f 	bl	8009f60 <__swsetup_r>
 8009f22:	2800      	cmp	r0, #0
 8009f24:	d0cc      	beq.n	8009ec0 <__swbuf_r+0x28>
 8009f26:	f04f 37ff 	mov.w	r7, #4294967295
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	0800a4d4 	.word	0x0800a4d4
 8009f34:	0800a4f4 	.word	0x0800a4f4
 8009f38:	0800a4b4 	.word	0x0800a4b4

08009f3c <_write_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4c07      	ldr	r4, [pc, #28]	; (8009f5c <_write_r+0x20>)
 8009f40:	4605      	mov	r5, r0
 8009f42:	4608      	mov	r0, r1
 8009f44:	4611      	mov	r1, r2
 8009f46:	2200      	movs	r2, #0
 8009f48:	6022      	str	r2, [r4, #0]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f7fe fc21 	bl	8008792 <_write>
 8009f50:	1c43      	adds	r3, r0, #1
 8009f52:	d102      	bne.n	8009f5a <_write_r+0x1e>
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	b103      	cbz	r3, 8009f5a <_write_r+0x1e>
 8009f58:	602b      	str	r3, [r5, #0]
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
 8009f5c:	200133b8 	.word	0x200133b8

08009f60 <__swsetup_r>:
 8009f60:	4b32      	ldr	r3, [pc, #200]	; (800a02c <__swsetup_r+0xcc>)
 8009f62:	b570      	push	{r4, r5, r6, lr}
 8009f64:	681d      	ldr	r5, [r3, #0]
 8009f66:	4606      	mov	r6, r0
 8009f68:	460c      	mov	r4, r1
 8009f6a:	b125      	cbz	r5, 8009f76 <__swsetup_r+0x16>
 8009f6c:	69ab      	ldr	r3, [r5, #24]
 8009f6e:	b913      	cbnz	r3, 8009f76 <__swsetup_r+0x16>
 8009f70:	4628      	mov	r0, r5
 8009f72:	f7ff fb91 	bl	8009698 <__sinit>
 8009f76:	4b2e      	ldr	r3, [pc, #184]	; (800a030 <__swsetup_r+0xd0>)
 8009f78:	429c      	cmp	r4, r3
 8009f7a:	d10f      	bne.n	8009f9c <__swsetup_r+0x3c>
 8009f7c:	686c      	ldr	r4, [r5, #4]
 8009f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	0715      	lsls	r5, r2, #28
 8009f86:	d42c      	bmi.n	8009fe2 <__swsetup_r+0x82>
 8009f88:	06d0      	lsls	r0, r2, #27
 8009f8a:	d411      	bmi.n	8009fb0 <__swsetup_r+0x50>
 8009f8c:	2209      	movs	r2, #9
 8009f8e:	6032      	str	r2, [r6, #0]
 8009f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f94:	81a3      	strh	r3, [r4, #12]
 8009f96:	f04f 30ff 	mov.w	r0, #4294967295
 8009f9a:	e03e      	b.n	800a01a <__swsetup_r+0xba>
 8009f9c:	4b25      	ldr	r3, [pc, #148]	; (800a034 <__swsetup_r+0xd4>)
 8009f9e:	429c      	cmp	r4, r3
 8009fa0:	d101      	bne.n	8009fa6 <__swsetup_r+0x46>
 8009fa2:	68ac      	ldr	r4, [r5, #8]
 8009fa4:	e7eb      	b.n	8009f7e <__swsetup_r+0x1e>
 8009fa6:	4b24      	ldr	r3, [pc, #144]	; (800a038 <__swsetup_r+0xd8>)
 8009fa8:	429c      	cmp	r4, r3
 8009faa:	bf08      	it	eq
 8009fac:	68ec      	ldreq	r4, [r5, #12]
 8009fae:	e7e6      	b.n	8009f7e <__swsetup_r+0x1e>
 8009fb0:	0751      	lsls	r1, r2, #29
 8009fb2:	d512      	bpl.n	8009fda <__swsetup_r+0x7a>
 8009fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fb6:	b141      	cbz	r1, 8009fca <__swsetup_r+0x6a>
 8009fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fbc:	4299      	cmp	r1, r3
 8009fbe:	d002      	beq.n	8009fc6 <__swsetup_r+0x66>
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	f000 f973 	bl	800a2ac <_free_r>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	6363      	str	r3, [r4, #52]	; 0x34
 8009fca:	89a3      	ldrh	r3, [r4, #12]
 8009fcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fd0:	81a3      	strh	r3, [r4, #12]
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	6063      	str	r3, [r4, #4]
 8009fd6:	6923      	ldr	r3, [r4, #16]
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	f043 0308 	orr.w	r3, r3, #8
 8009fe0:	81a3      	strh	r3, [r4, #12]
 8009fe2:	6923      	ldr	r3, [r4, #16]
 8009fe4:	b94b      	cbnz	r3, 8009ffa <__swsetup_r+0x9a>
 8009fe6:	89a3      	ldrh	r3, [r4, #12]
 8009fe8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ff0:	d003      	beq.n	8009ffa <__swsetup_r+0x9a>
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f000 f917 	bl	800a228 <__smakebuf_r>
 8009ffa:	89a2      	ldrh	r2, [r4, #12]
 8009ffc:	f012 0301 	ands.w	r3, r2, #1
 800a000:	d00c      	beq.n	800a01c <__swsetup_r+0xbc>
 800a002:	2300      	movs	r3, #0
 800a004:	60a3      	str	r3, [r4, #8]
 800a006:	6963      	ldr	r3, [r4, #20]
 800a008:	425b      	negs	r3, r3
 800a00a:	61a3      	str	r3, [r4, #24]
 800a00c:	6923      	ldr	r3, [r4, #16]
 800a00e:	b953      	cbnz	r3, 800a026 <__swsetup_r+0xc6>
 800a010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a014:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a018:	d1ba      	bne.n	8009f90 <__swsetup_r+0x30>
 800a01a:	bd70      	pop	{r4, r5, r6, pc}
 800a01c:	0792      	lsls	r2, r2, #30
 800a01e:	bf58      	it	pl
 800a020:	6963      	ldrpl	r3, [r4, #20]
 800a022:	60a3      	str	r3, [r4, #8]
 800a024:	e7f2      	b.n	800a00c <__swsetup_r+0xac>
 800a026:	2000      	movs	r0, #0
 800a028:	e7f7      	b.n	800a01a <__swsetup_r+0xba>
 800a02a:	bf00      	nop
 800a02c:	2000000c 	.word	0x2000000c
 800a030:	0800a4d4 	.word	0x0800a4d4
 800a034:	0800a4f4 	.word	0x0800a4f4
 800a038:	0800a4b4 	.word	0x0800a4b4

0800a03c <_close_r>:
 800a03c:	b538      	push	{r3, r4, r5, lr}
 800a03e:	4c06      	ldr	r4, [pc, #24]	; (800a058 <_close_r+0x1c>)
 800a040:	2300      	movs	r3, #0
 800a042:	4605      	mov	r5, r0
 800a044:	4608      	mov	r0, r1
 800a046:	6023      	str	r3, [r4, #0]
 800a048:	f7ff f9fb 	bl	8009442 <_close>
 800a04c:	1c43      	adds	r3, r0, #1
 800a04e:	d102      	bne.n	800a056 <_close_r+0x1a>
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	b103      	cbz	r3, 800a056 <_close_r+0x1a>
 800a054:	602b      	str	r3, [r5, #0]
 800a056:	bd38      	pop	{r3, r4, r5, pc}
 800a058:	200133b8 	.word	0x200133b8

0800a05c <__sflush_r>:
 800a05c:	898a      	ldrh	r2, [r1, #12]
 800a05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a062:	4605      	mov	r5, r0
 800a064:	0710      	lsls	r0, r2, #28
 800a066:	460c      	mov	r4, r1
 800a068:	d458      	bmi.n	800a11c <__sflush_r+0xc0>
 800a06a:	684b      	ldr	r3, [r1, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	dc05      	bgt.n	800a07c <__sflush_r+0x20>
 800a070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a072:	2b00      	cmp	r3, #0
 800a074:	dc02      	bgt.n	800a07c <__sflush_r+0x20>
 800a076:	2000      	movs	r0, #0
 800a078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a07c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a07e:	2e00      	cmp	r6, #0
 800a080:	d0f9      	beq.n	800a076 <__sflush_r+0x1a>
 800a082:	2300      	movs	r3, #0
 800a084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a088:	682f      	ldr	r7, [r5, #0]
 800a08a:	6a21      	ldr	r1, [r4, #32]
 800a08c:	602b      	str	r3, [r5, #0]
 800a08e:	d032      	beq.n	800a0f6 <__sflush_r+0x9a>
 800a090:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	075a      	lsls	r2, r3, #29
 800a096:	d505      	bpl.n	800a0a4 <__sflush_r+0x48>
 800a098:	6863      	ldr	r3, [r4, #4]
 800a09a:	1ac0      	subs	r0, r0, r3
 800a09c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a09e:	b10b      	cbz	r3, 800a0a4 <__sflush_r+0x48>
 800a0a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0a2:	1ac0      	subs	r0, r0, r3
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0aa:	6a21      	ldr	r1, [r4, #32]
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	47b0      	blx	r6
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	89a3      	ldrh	r3, [r4, #12]
 800a0b4:	d106      	bne.n	800a0c4 <__sflush_r+0x68>
 800a0b6:	6829      	ldr	r1, [r5, #0]
 800a0b8:	291d      	cmp	r1, #29
 800a0ba:	d848      	bhi.n	800a14e <__sflush_r+0xf2>
 800a0bc:	4a29      	ldr	r2, [pc, #164]	; (800a164 <__sflush_r+0x108>)
 800a0be:	40ca      	lsrs	r2, r1
 800a0c0:	07d6      	lsls	r6, r2, #31
 800a0c2:	d544      	bpl.n	800a14e <__sflush_r+0xf2>
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	6062      	str	r2, [r4, #4]
 800a0c8:	04d9      	lsls	r1, r3, #19
 800a0ca:	6922      	ldr	r2, [r4, #16]
 800a0cc:	6022      	str	r2, [r4, #0]
 800a0ce:	d504      	bpl.n	800a0da <__sflush_r+0x7e>
 800a0d0:	1c42      	adds	r2, r0, #1
 800a0d2:	d101      	bne.n	800a0d8 <__sflush_r+0x7c>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	b903      	cbnz	r3, 800a0da <__sflush_r+0x7e>
 800a0d8:	6560      	str	r0, [r4, #84]	; 0x54
 800a0da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0dc:	602f      	str	r7, [r5, #0]
 800a0de:	2900      	cmp	r1, #0
 800a0e0:	d0c9      	beq.n	800a076 <__sflush_r+0x1a>
 800a0e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0e6:	4299      	cmp	r1, r3
 800a0e8:	d002      	beq.n	800a0f0 <__sflush_r+0x94>
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	f000 f8de 	bl	800a2ac <_free_r>
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	6360      	str	r0, [r4, #52]	; 0x34
 800a0f4:	e7c0      	b.n	800a078 <__sflush_r+0x1c>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	47b0      	blx	r6
 800a0fc:	1c41      	adds	r1, r0, #1
 800a0fe:	d1c8      	bne.n	800a092 <__sflush_r+0x36>
 800a100:	682b      	ldr	r3, [r5, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d0c5      	beq.n	800a092 <__sflush_r+0x36>
 800a106:	2b1d      	cmp	r3, #29
 800a108:	d001      	beq.n	800a10e <__sflush_r+0xb2>
 800a10a:	2b16      	cmp	r3, #22
 800a10c:	d101      	bne.n	800a112 <__sflush_r+0xb6>
 800a10e:	602f      	str	r7, [r5, #0]
 800a110:	e7b1      	b.n	800a076 <__sflush_r+0x1a>
 800a112:	89a3      	ldrh	r3, [r4, #12]
 800a114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a118:	81a3      	strh	r3, [r4, #12]
 800a11a:	e7ad      	b.n	800a078 <__sflush_r+0x1c>
 800a11c:	690f      	ldr	r7, [r1, #16]
 800a11e:	2f00      	cmp	r7, #0
 800a120:	d0a9      	beq.n	800a076 <__sflush_r+0x1a>
 800a122:	0793      	lsls	r3, r2, #30
 800a124:	680e      	ldr	r6, [r1, #0]
 800a126:	bf08      	it	eq
 800a128:	694b      	ldreq	r3, [r1, #20]
 800a12a:	600f      	str	r7, [r1, #0]
 800a12c:	bf18      	it	ne
 800a12e:	2300      	movne	r3, #0
 800a130:	eba6 0807 	sub.w	r8, r6, r7
 800a134:	608b      	str	r3, [r1, #8]
 800a136:	f1b8 0f00 	cmp.w	r8, #0
 800a13a:	dd9c      	ble.n	800a076 <__sflush_r+0x1a>
 800a13c:	4643      	mov	r3, r8
 800a13e:	463a      	mov	r2, r7
 800a140:	6a21      	ldr	r1, [r4, #32]
 800a142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a144:	4628      	mov	r0, r5
 800a146:	47b0      	blx	r6
 800a148:	2800      	cmp	r0, #0
 800a14a:	dc06      	bgt.n	800a15a <__sflush_r+0xfe>
 800a14c:	89a3      	ldrh	r3, [r4, #12]
 800a14e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	f04f 30ff 	mov.w	r0, #4294967295
 800a158:	e78e      	b.n	800a078 <__sflush_r+0x1c>
 800a15a:	4407      	add	r7, r0
 800a15c:	eba8 0800 	sub.w	r8, r8, r0
 800a160:	e7e9      	b.n	800a136 <__sflush_r+0xda>
 800a162:	bf00      	nop
 800a164:	20400001 	.word	0x20400001

0800a168 <_fflush_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	690b      	ldr	r3, [r1, #16]
 800a16c:	4605      	mov	r5, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	b1db      	cbz	r3, 800a1aa <_fflush_r+0x42>
 800a172:	b118      	cbz	r0, 800a17c <_fflush_r+0x14>
 800a174:	6983      	ldr	r3, [r0, #24]
 800a176:	b90b      	cbnz	r3, 800a17c <_fflush_r+0x14>
 800a178:	f7ff fa8e 	bl	8009698 <__sinit>
 800a17c:	4b0c      	ldr	r3, [pc, #48]	; (800a1b0 <_fflush_r+0x48>)
 800a17e:	429c      	cmp	r4, r3
 800a180:	d109      	bne.n	800a196 <_fflush_r+0x2e>
 800a182:	686c      	ldr	r4, [r5, #4]
 800a184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a188:	b17b      	cbz	r3, 800a1aa <_fflush_r+0x42>
 800a18a:	4621      	mov	r1, r4
 800a18c:	4628      	mov	r0, r5
 800a18e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a192:	f7ff bf63 	b.w	800a05c <__sflush_r>
 800a196:	4b07      	ldr	r3, [pc, #28]	; (800a1b4 <_fflush_r+0x4c>)
 800a198:	429c      	cmp	r4, r3
 800a19a:	d101      	bne.n	800a1a0 <_fflush_r+0x38>
 800a19c:	68ac      	ldr	r4, [r5, #8]
 800a19e:	e7f1      	b.n	800a184 <_fflush_r+0x1c>
 800a1a0:	4b05      	ldr	r3, [pc, #20]	; (800a1b8 <_fflush_r+0x50>)
 800a1a2:	429c      	cmp	r4, r3
 800a1a4:	bf08      	it	eq
 800a1a6:	68ec      	ldreq	r4, [r5, #12]
 800a1a8:	e7ec      	b.n	800a184 <_fflush_r+0x1c>
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	bd38      	pop	{r3, r4, r5, pc}
 800a1ae:	bf00      	nop
 800a1b0:	0800a4d4 	.word	0x0800a4d4
 800a1b4:	0800a4f4 	.word	0x0800a4f4
 800a1b8:	0800a4b4 	.word	0x0800a4b4

0800a1bc <_lseek_r>:
 800a1bc:	b538      	push	{r3, r4, r5, lr}
 800a1be:	4c07      	ldr	r4, [pc, #28]	; (800a1dc <_lseek_r+0x20>)
 800a1c0:	4605      	mov	r5, r0
 800a1c2:	4608      	mov	r0, r1
 800a1c4:	4611      	mov	r1, r2
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	6022      	str	r2, [r4, #0]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	f7ff f960 	bl	8009490 <_lseek>
 800a1d0:	1c43      	adds	r3, r0, #1
 800a1d2:	d102      	bne.n	800a1da <_lseek_r+0x1e>
 800a1d4:	6823      	ldr	r3, [r4, #0]
 800a1d6:	b103      	cbz	r3, 800a1da <_lseek_r+0x1e>
 800a1d8:	602b      	str	r3, [r5, #0]
 800a1da:	bd38      	pop	{r3, r4, r5, pc}
 800a1dc:	200133b8 	.word	0x200133b8

0800a1e0 <__swhatbuf_r>:
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	460e      	mov	r6, r1
 800a1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e8:	2900      	cmp	r1, #0
 800a1ea:	b096      	sub	sp, #88	; 0x58
 800a1ec:	4614      	mov	r4, r2
 800a1ee:	461d      	mov	r5, r3
 800a1f0:	da07      	bge.n	800a202 <__swhatbuf_r+0x22>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	602b      	str	r3, [r5, #0]
 800a1f6:	89b3      	ldrh	r3, [r6, #12]
 800a1f8:	061a      	lsls	r2, r3, #24
 800a1fa:	d410      	bmi.n	800a21e <__swhatbuf_r+0x3e>
 800a1fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a200:	e00e      	b.n	800a220 <__swhatbuf_r+0x40>
 800a202:	466a      	mov	r2, sp
 800a204:	f000 f8b2 	bl	800a36c <_fstat_r>
 800a208:	2800      	cmp	r0, #0
 800a20a:	dbf2      	blt.n	800a1f2 <__swhatbuf_r+0x12>
 800a20c:	9a01      	ldr	r2, [sp, #4]
 800a20e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a212:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a216:	425a      	negs	r2, r3
 800a218:	415a      	adcs	r2, r3
 800a21a:	602a      	str	r2, [r5, #0]
 800a21c:	e7ee      	b.n	800a1fc <__swhatbuf_r+0x1c>
 800a21e:	2340      	movs	r3, #64	; 0x40
 800a220:	2000      	movs	r0, #0
 800a222:	6023      	str	r3, [r4, #0]
 800a224:	b016      	add	sp, #88	; 0x58
 800a226:	bd70      	pop	{r4, r5, r6, pc}

0800a228 <__smakebuf_r>:
 800a228:	898b      	ldrh	r3, [r1, #12]
 800a22a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a22c:	079d      	lsls	r5, r3, #30
 800a22e:	4606      	mov	r6, r0
 800a230:	460c      	mov	r4, r1
 800a232:	d507      	bpl.n	800a244 <__smakebuf_r+0x1c>
 800a234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	6123      	str	r3, [r4, #16]
 800a23c:	2301      	movs	r3, #1
 800a23e:	6163      	str	r3, [r4, #20]
 800a240:	b002      	add	sp, #8
 800a242:	bd70      	pop	{r4, r5, r6, pc}
 800a244:	ab01      	add	r3, sp, #4
 800a246:	466a      	mov	r2, sp
 800a248:	f7ff ffca 	bl	800a1e0 <__swhatbuf_r>
 800a24c:	9900      	ldr	r1, [sp, #0]
 800a24e:	4605      	mov	r5, r0
 800a250:	4630      	mov	r0, r6
 800a252:	f7ff faab 	bl	80097ac <_malloc_r>
 800a256:	b948      	cbnz	r0, 800a26c <__smakebuf_r+0x44>
 800a258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a25c:	059a      	lsls	r2, r3, #22
 800a25e:	d4ef      	bmi.n	800a240 <__smakebuf_r+0x18>
 800a260:	f023 0303 	bic.w	r3, r3, #3
 800a264:	f043 0302 	orr.w	r3, r3, #2
 800a268:	81a3      	strh	r3, [r4, #12]
 800a26a:	e7e3      	b.n	800a234 <__smakebuf_r+0xc>
 800a26c:	4b0d      	ldr	r3, [pc, #52]	; (800a2a4 <__smakebuf_r+0x7c>)
 800a26e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	6020      	str	r0, [r4, #0]
 800a274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a278:	81a3      	strh	r3, [r4, #12]
 800a27a:	9b00      	ldr	r3, [sp, #0]
 800a27c:	6163      	str	r3, [r4, #20]
 800a27e:	9b01      	ldr	r3, [sp, #4]
 800a280:	6120      	str	r0, [r4, #16]
 800a282:	b15b      	cbz	r3, 800a29c <__smakebuf_r+0x74>
 800a284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a288:	4630      	mov	r0, r6
 800a28a:	f000 f881 	bl	800a390 <_isatty_r>
 800a28e:	b128      	cbz	r0, 800a29c <__smakebuf_r+0x74>
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	f023 0303 	bic.w	r3, r3, #3
 800a296:	f043 0301 	orr.w	r3, r3, #1
 800a29a:	81a3      	strh	r3, [r4, #12]
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	431d      	orrs	r5, r3
 800a2a0:	81a5      	strh	r5, [r4, #12]
 800a2a2:	e7cd      	b.n	800a240 <__smakebuf_r+0x18>
 800a2a4:	08009661 	.word	0x08009661

0800a2a8 <__malloc_lock>:
 800a2a8:	4770      	bx	lr

0800a2aa <__malloc_unlock>:
 800a2aa:	4770      	bx	lr

0800a2ac <_free_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	2900      	cmp	r1, #0
 800a2b2:	d045      	beq.n	800a340 <_free_r+0x94>
 800a2b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2b8:	1f0c      	subs	r4, r1, #4
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	bfb8      	it	lt
 800a2be:	18e4      	addlt	r4, r4, r3
 800a2c0:	f7ff fff2 	bl	800a2a8 <__malloc_lock>
 800a2c4:	4a1f      	ldr	r2, [pc, #124]	; (800a344 <_free_r+0x98>)
 800a2c6:	6813      	ldr	r3, [r2, #0]
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	b933      	cbnz	r3, 800a2da <_free_r+0x2e>
 800a2cc:	6063      	str	r3, [r4, #4]
 800a2ce:	6014      	str	r4, [r2, #0]
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2d6:	f7ff bfe8 	b.w	800a2aa <__malloc_unlock>
 800a2da:	42a3      	cmp	r3, r4
 800a2dc:	d90c      	bls.n	800a2f8 <_free_r+0x4c>
 800a2de:	6821      	ldr	r1, [r4, #0]
 800a2e0:	1862      	adds	r2, r4, r1
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	bf04      	itt	eq
 800a2e6:	681a      	ldreq	r2, [r3, #0]
 800a2e8:	685b      	ldreq	r3, [r3, #4]
 800a2ea:	6063      	str	r3, [r4, #4]
 800a2ec:	bf04      	itt	eq
 800a2ee:	1852      	addeq	r2, r2, r1
 800a2f0:	6022      	streq	r2, [r4, #0]
 800a2f2:	6004      	str	r4, [r0, #0]
 800a2f4:	e7ec      	b.n	800a2d0 <_free_r+0x24>
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	685a      	ldr	r2, [r3, #4]
 800a2fa:	b10a      	cbz	r2, 800a300 <_free_r+0x54>
 800a2fc:	42a2      	cmp	r2, r4
 800a2fe:	d9fa      	bls.n	800a2f6 <_free_r+0x4a>
 800a300:	6819      	ldr	r1, [r3, #0]
 800a302:	1858      	adds	r0, r3, r1
 800a304:	42a0      	cmp	r0, r4
 800a306:	d10b      	bne.n	800a320 <_free_r+0x74>
 800a308:	6820      	ldr	r0, [r4, #0]
 800a30a:	4401      	add	r1, r0
 800a30c:	1858      	adds	r0, r3, r1
 800a30e:	4282      	cmp	r2, r0
 800a310:	6019      	str	r1, [r3, #0]
 800a312:	d1dd      	bne.n	800a2d0 <_free_r+0x24>
 800a314:	6810      	ldr	r0, [r2, #0]
 800a316:	6852      	ldr	r2, [r2, #4]
 800a318:	605a      	str	r2, [r3, #4]
 800a31a:	4401      	add	r1, r0
 800a31c:	6019      	str	r1, [r3, #0]
 800a31e:	e7d7      	b.n	800a2d0 <_free_r+0x24>
 800a320:	d902      	bls.n	800a328 <_free_r+0x7c>
 800a322:	230c      	movs	r3, #12
 800a324:	602b      	str	r3, [r5, #0]
 800a326:	e7d3      	b.n	800a2d0 <_free_r+0x24>
 800a328:	6820      	ldr	r0, [r4, #0]
 800a32a:	1821      	adds	r1, r4, r0
 800a32c:	428a      	cmp	r2, r1
 800a32e:	bf04      	itt	eq
 800a330:	6811      	ldreq	r1, [r2, #0]
 800a332:	6852      	ldreq	r2, [r2, #4]
 800a334:	6062      	str	r2, [r4, #4]
 800a336:	bf04      	itt	eq
 800a338:	1809      	addeq	r1, r1, r0
 800a33a:	6021      	streq	r1, [r4, #0]
 800a33c:	605c      	str	r4, [r3, #4]
 800a33e:	e7c7      	b.n	800a2d0 <_free_r+0x24>
 800a340:	bd38      	pop	{r3, r4, r5, pc}
 800a342:	bf00      	nop
 800a344:	200002e8 	.word	0x200002e8

0800a348 <_read_r>:
 800a348:	b538      	push	{r3, r4, r5, lr}
 800a34a:	4c07      	ldr	r4, [pc, #28]	; (800a368 <_read_r+0x20>)
 800a34c:	4605      	mov	r5, r0
 800a34e:	4608      	mov	r0, r1
 800a350:	4611      	mov	r1, r2
 800a352:	2200      	movs	r2, #0
 800a354:	6022      	str	r2, [r4, #0]
 800a356:	461a      	mov	r2, r3
 800a358:	f7ff f856 	bl	8009408 <_read>
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	d102      	bne.n	800a366 <_read_r+0x1e>
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	b103      	cbz	r3, 800a366 <_read_r+0x1e>
 800a364:	602b      	str	r3, [r5, #0]
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	200133b8 	.word	0x200133b8

0800a36c <_fstat_r>:
 800a36c:	b538      	push	{r3, r4, r5, lr}
 800a36e:	4c07      	ldr	r4, [pc, #28]	; (800a38c <_fstat_r+0x20>)
 800a370:	2300      	movs	r3, #0
 800a372:	4605      	mov	r5, r0
 800a374:	4608      	mov	r0, r1
 800a376:	4611      	mov	r1, r2
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	f7ff f86e 	bl	800945a <_fstat>
 800a37e:	1c43      	adds	r3, r0, #1
 800a380:	d102      	bne.n	800a388 <_fstat_r+0x1c>
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	b103      	cbz	r3, 800a388 <_fstat_r+0x1c>
 800a386:	602b      	str	r3, [r5, #0]
 800a388:	bd38      	pop	{r3, r4, r5, pc}
 800a38a:	bf00      	nop
 800a38c:	200133b8 	.word	0x200133b8

0800a390 <_isatty_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4c06      	ldr	r4, [pc, #24]	; (800a3ac <_isatty_r+0x1c>)
 800a394:	2300      	movs	r3, #0
 800a396:	4605      	mov	r5, r0
 800a398:	4608      	mov	r0, r1
 800a39a:	6023      	str	r3, [r4, #0]
 800a39c:	f7ff f86d 	bl	800947a <_isatty>
 800a3a0:	1c43      	adds	r3, r0, #1
 800a3a2:	d102      	bne.n	800a3aa <_isatty_r+0x1a>
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	b103      	cbz	r3, 800a3aa <_isatty_r+0x1a>
 800a3a8:	602b      	str	r3, [r5, #0]
 800a3aa:	bd38      	pop	{r3, r4, r5, pc}
 800a3ac:	200133b8 	.word	0x200133b8

0800a3b0 <_init>:
 800a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b2:	bf00      	nop
 800a3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3b6:	bc08      	pop	{r3}
 800a3b8:	469e      	mov	lr, r3
 800a3ba:	4770      	bx	lr

0800a3bc <_fini>:
 800a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3be:	bf00      	nop
 800a3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3c2:	bc08      	pop	{r3}
 800a3c4:	469e      	mov	lr, r3
 800a3c6:	4770      	bx	lr
