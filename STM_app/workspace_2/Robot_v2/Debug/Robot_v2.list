
Robot_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a160  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  0800a2f0  0800a2f0  0001a2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5bc  0800a5bc  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5bc  0800a5bc  0001a5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5c4  0800a5c4  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5c4  0800a5c4  0001a5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5c8  0800a5c8  0001a5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800a5cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000020c  0800a7d8  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  0800a7d8  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012df2  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002791  00000000  00000000  0003302e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001130  00000000  00000000  000357c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001018  00000000  00000000  000368f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002322f  00000000  00000000  00037908  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000df8a  00000000  00000000  0005ab37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce6a6  00000000  00000000  00068ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137167  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051e4  00000000  00000000  001371e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2d8 	.word	0x0800a2d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	0800a2d8 	.word	0x0800a2d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d013      	beq.n	80005c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000598:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800059c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00b      	beq.n	80005c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	e000      	b.n	80005ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80005aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0f9      	beq.n	80005aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <_write>:
static void MX_DCMI_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len){ // do fprint
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b086      	sub	sp, #24
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	60f8      	str	r0, [r7, #12]
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
	int i=0;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++){
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	e009      	b.n	80005f8 <_write+0x2a>
		ITM_SendChar(*ptr++);
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	60ba      	str	r2, [r7, #8]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffc7 	bl	8000580 <ITM_SendChar>
	for(i=0; i<len; i++){
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dbf1      	blt.n	80005e4 <_write+0x16>

	}
	return len;
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	//HAL_Delay(10);
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8000616:	2101      	movs	r1, #1
 8000618:	4812      	ldr	r0, [pc, #72]	; (8000664 <HAL_GPIO_EXTI_Callback+0x58>)
 800061a:	f003 fdcf 	bl	80041bc <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d105      	bne.n	8000630 <HAL_GPIO_EXTI_Callback+0x24>

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000624:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000628:	480f      	ldr	r0, [pc, #60]	; (8000668 <HAL_GPIO_EXTI_Callback+0x5c>)
 800062a:	f003 fdf8 	bl	800421e <HAL_GPIO_TogglePin>
 800062e:	e00b      	b.n	8000648 <HAL_GPIO_EXTI_Callback+0x3c>
		//Duty-=1;
	//	if(Duty < 100){
	//		Duty = Duty + 1;
	//	}
	} else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET){
 8000630:	2102      	movs	r1, #2
 8000632:	480c      	ldr	r0, [pc, #48]	; (8000664 <HAL_GPIO_EXTI_Callback+0x58>)
 8000634:	f003 fdc2 	bl	80041bc <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d104      	bne.n	8000648 <HAL_GPIO_EXTI_Callback+0x3c>
	//	HAL_Delay(10);
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000644:	f003 fdeb 	bl	800421e <HAL_GPIO_TogglePin>
	//		Duty = Duty - 1;
	//	}

	}

	for(int i=0; i<1000000; i++){
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e002      	b.n	8000654 <HAL_GPIO_EXTI_Callback+0x48>
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3301      	adds	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <HAL_GPIO_EXTI_Callback+0x60>)
 8000658:	4293      	cmp	r3, r2
 800065a:	ddf8      	ble.n	800064e <HAL_GPIO_EXTI_Callback+0x42>

	}

}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40020000 	.word	0x40020000
 8000668:	40020c00 	.word	0x40020c00
 800066c:	000f423f 	.word	0x000f423f

08000670 <process_pack_motor>:
	} else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
		Duty -= 10;
	}*/
	//HAL_Delay(5);
void process_pack_motor(){
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
	printf("process_motor\n");
 8000676:	486a      	ldr	r0, [pc, #424]	; (8000820 <process_pack_motor+0x1b0>)
 8000678:	f008 fe5c 	bl	8009334 <puts>
	char str_dir_right;
	char str_duty_left[5];
	char str_duty_right[5];

	//wypisanie całego pakietu
	for(int i=0; i<strlen(packet); i++){
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	e009      	b.n	8000696 <process_pack_motor+0x26>
		printf("%c",packet[i]);
 8000682:	4a68      	ldr	r2, [pc, #416]	; (8000824 <process_pack_motor+0x1b4>)
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	f008 fde2 	bl	8009254 <putchar>
	for(int i=0; i<strlen(packet); i++){
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	3301      	adds	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	4863      	ldr	r0, [pc, #396]	; (8000824 <process_pack_motor+0x1b4>)
 8000698:	f7ff fd9a 	bl	80001d0 <strlen>
 800069c:	4602      	mov	r2, r0
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d8ee      	bhi.n	8000682 <process_pack_motor+0x12>
	}
	printf("\n");
 80006a4:	200a      	movs	r0, #10
 80006a6:	f008 fdd5 	bl	8009254 <putchar>

	str_dir_left = packet[3];
 80006aa:	4b5e      	ldr	r3, [pc, #376]	; (8000824 <process_pack_motor+0x1b4>)
 80006ac:	78db      	ldrb	r3, [r3, #3]
 80006ae:	73fb      	strb	r3, [r7, #15]
	str_dir_right = packet[5];
 80006b0:	4b5c      	ldr	r3, [pc, #368]	; (8000824 <process_pack_motor+0x1b4>)
 80006b2:	795b      	ldrb	r3, [r3, #5]
 80006b4:	73bb      	strb	r3, [r7, #14]

	str_duty_left[0] = packet[7];
 80006b6:	4b5b      	ldr	r3, [pc, #364]	; (8000824 <process_pack_motor+0x1b4>)
 80006b8:	79db      	ldrb	r3, [r3, #7]
 80006ba:	723b      	strb	r3, [r7, #8]
	str_duty_left[1] = packet[8];
 80006bc:	4b59      	ldr	r3, [pc, #356]	; (8000824 <process_pack_motor+0x1b4>)
 80006be:	7a1b      	ldrb	r3, [r3, #8]
 80006c0:	727b      	strb	r3, [r7, #9]

	str_duty_right[0] = packet[10];
 80006c2:	4b58      	ldr	r3, [pc, #352]	; (8000824 <process_pack_motor+0x1b4>)
 80006c4:	7a9b      	ldrb	r3, [r3, #10]
 80006c6:	703b      	strb	r3, [r7, #0]
	str_duty_right[1] = packet[11];
 80006c8:	4b56      	ldr	r3, [pc, #344]	; (8000824 <process_pack_motor+0x1b4>)
 80006ca:	7adb      	ldrb	r3, [r3, #11]
 80006cc:	707b      	strb	r3, [r7, #1]
	//strncat(str_duty_right, &packet[10], 1);


	Duty_left = atoi(str_duty_left);
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4618      	mov	r0, r3
 80006d4:	f008 fd70 	bl	80091b8 <atoi>
 80006d8:	4602      	mov	r2, r0
 80006da:	4b53      	ldr	r3, [pc, #332]	; (8000828 <process_pack_motor+0x1b8>)
 80006dc:	601a      	str	r2, [r3, #0]
	Duty_right = atoi(str_duty_right);
 80006de:	463b      	mov	r3, r7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f008 fd69 	bl	80091b8 <atoi>
 80006e6:	4602      	mov	r2, r0
 80006e8:	4b50      	ldr	r3, [pc, #320]	; (800082c <process_pack_motor+0x1bc>)
 80006ea:	601a      	str	r2, [r3, #0]
	dir_left = str_dir_left - '0';
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	3b30      	subs	r3, #48	; 0x30
 80006f0:	4a4f      	ldr	r2, [pc, #316]	; (8000830 <process_pack_motor+0x1c0>)
 80006f2:	6013      	str	r3, [r2, #0]
    dir_right = str_dir_right - '0';
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	3b30      	subs	r3, #48	; 0x30
 80006f8:	4a4e      	ldr	r2, [pc, #312]	; (8000834 <process_pack_motor+0x1c4>)
 80006fa:	6013      	str	r3, [r2, #0]
	}
	for(int i=0; i<2; i++){
		printf("dir-left - %c\n",str_duty_right[i]);
	}*/

	printf("dir-left - %d\n",dir_left);
 80006fc:	4b4c      	ldr	r3, [pc, #304]	; (8000830 <process_pack_motor+0x1c0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	484d      	ldr	r0, [pc, #308]	; (8000838 <process_pack_motor+0x1c8>)
 8000704:	f008 fd8e 	bl	8009224 <iprintf>
	printf("dir-right - %d\n",dir_right);
 8000708:	4b4a      	ldr	r3, [pc, #296]	; (8000834 <process_pack_motor+0x1c4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	484b      	ldr	r0, [pc, #300]	; (800083c <process_pack_motor+0x1cc>)
 8000710:	f008 fd88 	bl	8009224 <iprintf>
	printf("duty-left - %d\n",Duty_left);
 8000714:	4b44      	ldr	r3, [pc, #272]	; (8000828 <process_pack_motor+0x1b8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	4849      	ldr	r0, [pc, #292]	; (8000840 <process_pack_motor+0x1d0>)
 800071c:	f008 fd82 	bl	8009224 <iprintf>
	printf("duty-right - %d\n",Duty_right);
 8000720:	4b42      	ldr	r3, [pc, #264]	; (800082c <process_pack_motor+0x1bc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	4847      	ldr	r0, [pc, #284]	; (8000844 <process_pack_motor+0x1d4>)
 8000728:	f008 fd7c 	bl	8009224 <iprintf>


	if(dir_left == 1){
 800072c:	4b40      	ldr	r3, [pc, #256]	; (8000830 <process_pack_motor+0x1c0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d10c      	bne.n	800074e <process_pack_motor+0xde>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073a:	4843      	ldr	r0, [pc, #268]	; (8000848 <process_pack_motor+0x1d8>)
 800073c:	f003 fd56 	bl	80041ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000746:	4840      	ldr	r0, [pc, #256]	; (8000848 <process_pack_motor+0x1d8>)
 8000748:	f003 fd50 	bl	80041ec <HAL_GPIO_WritePin>
 800074c:	e020      	b.n	8000790 <process_pack_motor+0x120>
	} else if(dir_left == 0){
 800074e:	4b38      	ldr	r3, [pc, #224]	; (8000830 <process_pack_motor+0x1c0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d10c      	bne.n	8000770 <process_pack_motor+0x100>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075c:	483a      	ldr	r0, [pc, #232]	; (8000848 <process_pack_motor+0x1d8>)
 800075e:	f003 fd45 	bl	80041ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000768:	4837      	ldr	r0, [pc, #220]	; (8000848 <process_pack_motor+0x1d8>)
 800076a:	f003 fd3f 	bl	80041ec <HAL_GPIO_WritePin>
 800076e:	e00f      	b.n	8000790 <process_pack_motor+0x120>
	} else if(dir_left == 2){
 8000770:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <process_pack_motor+0x1c0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b02      	cmp	r3, #2
 8000776:	d10b      	bne.n	8000790 <process_pack_motor+0x120>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800077e:	4832      	ldr	r0, [pc, #200]	; (8000848 <process_pack_motor+0x1d8>)
 8000780:	f003 fd34 	bl	80041ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078a:	482f      	ldr	r0, [pc, #188]	; (8000848 <process_pack_motor+0x1d8>)
 800078c:	f003 fd2e 	bl	80041ec <HAL_GPIO_WritePin>
	}

	if(dir_right == 1){
 8000790:	4b28      	ldr	r3, [pc, #160]	; (8000834 <process_pack_motor+0x1c4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d10c      	bne.n	80007b2 <process_pack_motor+0x142>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079e:	482a      	ldr	r0, [pc, #168]	; (8000848 <process_pack_motor+0x1d8>)
 80007a0:	f003 fd24 	bl	80041ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007aa:	4827      	ldr	r0, [pc, #156]	; (8000848 <process_pack_motor+0x1d8>)
 80007ac:	f003 fd1e 	bl	80041ec <HAL_GPIO_WritePin>
 80007b0:	e020      	b.n	80007f4 <process_pack_motor+0x184>
	} else if(dir_right == 0){
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <process_pack_motor+0x1c4>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d10c      	bne.n	80007d4 <process_pack_motor+0x164>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c0:	4821      	ldr	r0, [pc, #132]	; (8000848 <process_pack_motor+0x1d8>)
 80007c2:	f003 fd13 	bl	80041ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007cc:	481e      	ldr	r0, [pc, #120]	; (8000848 <process_pack_motor+0x1d8>)
 80007ce:	f003 fd0d 	bl	80041ec <HAL_GPIO_WritePin>
 80007d2:	e00f      	b.n	80007f4 <process_pack_motor+0x184>
	} else if(dir_right == 2){
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <process_pack_motor+0x1c4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d10b      	bne.n	80007f4 <process_pack_motor+0x184>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e2:	4819      	ldr	r0, [pc, #100]	; (8000848 <process_pack_motor+0x1d8>)
 80007e4:	f003 fd02 	bl	80041ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ee:	4816      	ldr	r0, [pc, #88]	; (8000848 <process_pack_motor+0x1d8>)
 80007f0:	f003 fcfc 	bl	80041ec <HAL_GPIO_WritePin>





	for(int i=0; i<strlen(packet); i++){
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	e007      	b.n	800080a <process_pack_motor+0x19a>
		packet[i]='\0';
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <process_pack_motor+0x1b4>)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<strlen(packet); i++){
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	3301      	adds	r3, #1
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4806      	ldr	r0, [pc, #24]	; (8000824 <process_pack_motor+0x1b4>)
 800080c:	f7ff fce0 	bl	80001d0 <strlen>
 8000810:	4602      	mov	r2, r0
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d8f0      	bhi.n	80007fa <process_pack_motor+0x18a>
	}

}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	0800a2f0 	.word	0x0800a2f0
 8000824:	2000025c 	.word	0x2000025c
 8000828:	20000460 	.word	0x20000460
 800082c:	200004e8 	.word	0x200004e8
 8000830:	20000354 	.word	0x20000354
 8000834:	2000045c 	.word	0x2000045c
 8000838:	0800a300 	.word	0x0800a300
 800083c:	0800a310 	.word	0x0800a310
 8000840:	0800a320 	.word	0x0800a320
 8000844:	0800a330 	.word	0x0800a330
 8000848:	40020c00 	.word	0x40020c00

0800084c <read_pack>:


void read_pack(char mark){
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]

	printf("read: ");
 8000856:	481e      	ldr	r0, [pc, #120]	; (80008d0 <read_pack+0x84>)
 8000858:	f008 fce4 	bl	8009224 <iprintf>
	//printf("%c",mark);
	strncat(packet, &mark, 1);
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	2201      	movs	r2, #1
 8000860:	4619      	mov	r1, r3
 8000862:	481c      	ldr	r0, [pc, #112]	; (80008d4 <read_pack+0x88>)
 8000864:	f008 fd6e 	bl	8009344 <strncat>

	if(mark == ';'){
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b3b      	cmp	r3, #59	; 0x3b
 800086c:	d12b      	bne.n	80008c6 <read_pack+0x7a>
		for(int i=0; i<strlen(packet); i++){
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	e009      	b.n	8000888 <read_pack+0x3c>
			printf("%c",packet[i]);
 8000874:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <read_pack+0x88>)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f008 fce9 	bl	8009254 <putchar>
		for(int i=0; i<strlen(packet); i++){
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	3301      	adds	r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4812      	ldr	r0, [pc, #72]	; (80008d4 <read_pack+0x88>)
 800088a:	f7ff fca1 	bl	80001d0 <strlen>
 800088e:	4602      	mov	r2, r0
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	429a      	cmp	r2, r3
 8000894:	d8ee      	bhi.n	8000874 <read_pack+0x28>
		}

		if(packet[1] == '0'){
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <read_pack+0x88>)
 8000898:	785b      	ldrb	r3, [r3, #1]
 800089a:	2b30      	cmp	r3, #48	; 0x30
 800089c:	d101      	bne.n	80008a2 <read_pack+0x56>
			process_pack_motor();
 800089e:	f7ff fee7 	bl	8000670 <process_pack_motor>
		}

		for(int i=0; i<strlen(packet); i++){
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	e007      	b.n	80008b8 <read_pack+0x6c>
			packet[i]='\0';
 80008a8:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <read_pack+0x88>)
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	4413      	add	r3, r2
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<strlen(packet); i++){
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	4806      	ldr	r0, [pc, #24]	; (80008d4 <read_pack+0x88>)
 80008ba:	f7ff fc89 	bl	80001d0 <strlen>
 80008be:	4602      	mov	r2, r0
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d8f0      	bhi.n	80008a8 <read_pack+0x5c>
			printf("%c",mark);
		}
	}*/


}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	0800a344 	.word	0x0800a344
 80008d4:	2000025c 	.word	0x2000025c

080008d8 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

	 TIM3->CCR1 = Duty_left;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008e6:	635a      	str	r2, [r3, #52]	; 0x34
	 TIM3->CCR2 = Duty_right;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008ee:	639a      	str	r2, [r3, #56]	; 0x38
	// HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);

}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	20000460 	.word	0x20000460
 8000900:	40000400 	.word	0x40000400
 8000904:	200004e8 	.word	0x200004e8

08000908 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	//printf("RX");
	if(huart->Instance == USART3){
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a22      	ldr	r2, [pc, #136]	; (80009a0 <HAL_UART_RxCpltCallback+0x98>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d13d      	bne.n	8000996 <HAL_UART_RxCpltCallback+0x8e>
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
		printf("%c", receiveUART[0]);
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <HAL_UART_RxCpltCallback+0x9c>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f008 fc98 	bl	8009254 <putchar>
		//printf("\n");
		//printf(" \n");

		if(receiveUART[0] == ':'){
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <HAL_UART_RxCpltCallback+0x9c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b3a      	cmp	r3, #58	; 0x3a
 800092a:	d102      	bne.n	8000932 <HAL_UART_RxCpltCallback+0x2a>
			read_bool=1;
 800092c:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <HAL_UART_RxCpltCallback+0xa0>)
 800092e:	2201      	movs	r2, #1
 8000930:	601a      	str	r2, [r3, #0]
		}

		if(receiveUART[0] == ';'){
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <HAL_UART_RxCpltCallback+0x9c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b3b      	cmp	r3, #59	; 0x3b
 8000938:	d112      	bne.n	8000960 <HAL_UART_RxCpltCallback+0x58>
			read_bool=0;
 800093a:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <HAL_UART_RxCpltCallback+0xa0>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
			printf("[");
 8000940:	205b      	movs	r0, #91	; 0x5b
 8000942:	f008 fc87 	bl	8009254 <putchar>
			printf("%c", receiveUART[0]);
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <HAL_UART_RxCpltCallback+0x9c>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f008 fc82 	bl	8009254 <putchar>
			printf("]");
 8000950:	205d      	movs	r0, #93	; 0x5d
 8000952:	f008 fc7f 	bl	8009254 <putchar>
			read_pack(receiveUART[0]);
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <HAL_UART_RxCpltCallback+0x9c>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff76 	bl	800084c <read_pack>

		}

		if(read_bool == 1){
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_UART_RxCpltCallback+0xa0>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d10f      	bne.n	8000988 <HAL_UART_RxCpltCallback+0x80>
			printf("[");
 8000968:	205b      	movs	r0, #91	; 0x5b
 800096a:	f008 fc73 	bl	8009254 <putchar>
			printf("%c", receiveUART[0]);
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_UART_RxCpltCallback+0x9c>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f008 fc6e 	bl	8009254 <putchar>
			printf("]");
 8000978:	205d      	movs	r0, #93	; 0x5d
 800097a:	f008 fc6b 	bl	8009254 <putchar>
			read_pack(receiveUART[0]);
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_UART_RxCpltCallback+0x9c>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff62 	bl	800084c <read_pack>
	    	//printf("%u", receiveUART[0]);

		}
		//HAL_Delay(100);
		HAL_UART_Receive_IT(&huart3, receiveUART, sizeReceiveUART);
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_UART_RxCpltCallback+0xa4>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	4905      	ldr	r1, [pc, #20]	; (80009a4 <HAL_UART_RxCpltCallback+0x9c>)
 8000990:	4807      	ldr	r0, [pc, #28]	; (80009b0 <HAL_UART_RxCpltCallback+0xa8>)
 8000992:	f007 fe09 	bl	80085a8 <HAL_UART_Receive_IT>

	}
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40004800 	.word	0x40004800
 80009a4:	200004e4 	.word	0x200004e4
 80009a8:	20000228 	.word	0x20000228
 80009ac:	2000002e 	.word	0x2000002e
 80009b0:	200002c0 	.word	0x200002c0

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ba:	f001 f893 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009be:	f000 f8b9 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c2:	f000 faaf 	bl	8000f24 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c6:	f000 fa77 	bl	8000eb8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80009ca:	f000 fa4b 	bl	8000e64 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80009ce:	f000 f9c7 	bl	8000d60 <MX_TIM3_Init>
  MX_DCMI_Init();
 80009d2:	f000 f91f 	bl	8000c14 <MX_DCMI_Init>
  MX_I2C1_Init();
 80009d6:	f000 f945 	bl	8000c64 <MX_I2C1_Init>
  MX_TIM1_Init();
 80009da:	f000 f971 	bl	8000cc0 <MX_TIM1_Init>




  //ITM_SendChar( 65 );
  Duty_left = 0;
 80009de:	4b43      	ldr	r3, [pc, #268]	; (8000aec <main+0x138>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
  Duty_right = 0;
 80009e4:	4b42      	ldr	r3, [pc, #264]	; (8000af0 <main+0x13c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f0:	4840      	ldr	r0, [pc, #256]	; (8000af4 <main+0x140>)
 80009f2:	f003 fbfb 	bl	80041ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fc:	483d      	ldr	r0, [pc, #244]	; (8000af4 <main+0x140>)
 80009fe:	f003 fbf5 	bl	80041ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a08:	483a      	ldr	r0, [pc, #232]	; (8000af4 <main+0x140>)
 8000a0a:	f003 fbef 	bl	80041ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a14:	4837      	ldr	r0, [pc, #220]	; (8000af4 <main+0x140>)
 8000a16:	f003 fbe9 	bl	80041ec <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a20:	4834      	ldr	r0, [pc, #208]	; (8000af4 <main+0x140>)
 8000a22:	f003 fbe3 	bl	80041ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2c:	4832      	ldr	r0, [pc, #200]	; (8000af8 <main+0x144>)
 8000a2e:	f003 fbdd 	bl	80041ec <HAL_GPIO_WritePin>





  HAL_TIM_Base_Start_IT(&htim3);
 8000a32:	4832      	ldr	r0, [pc, #200]	; (8000afc <main+0x148>)
 8000a34:	f006 fe41 	bl	80076ba <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4830      	ldr	r0, [pc, #192]	; (8000afc <main+0x148>)
 8000a3c:	f006 fe96 	bl	800776c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a40:	2104      	movs	r1, #4
 8000a42:	482e      	ldr	r0, [pc, #184]	; (8000afc <main+0x148>)
 8000a44:	f006 fe92 	bl	800776c <HAL_TIM_PWM_Start>
 // TIM4->CCR1 = Duty;
 // TIM4->CCR2 = Duty;

 // HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);

  HAL_UART_Receive_IT(&huart3, receiveUART, sizeReceiveUART);
 8000a48:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <main+0x14c>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	492d      	ldr	r1, [pc, #180]	; (8000b04 <main+0x150>)
 8000a50:	482d      	ldr	r0, [pc, #180]	; (8000b08 <main+0x154>)
 8000a52:	f007 fda9 	bl	80085a8 <HAL_UART_Receive_IT>
  //HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);
 // printf("%u",sendUART[0]);
  printf("CONSOLE GOOD \n");
 8000a56:	482d      	ldr	r0, [pc, #180]	; (8000b0c <main+0x158>)
 8000a58:	f008 fc6c 	bl	8009334 <puts>
 // HAL_Delay(300);
 // HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a62:	4825      	ldr	r0, [pc, #148]	; (8000af8 <main+0x144>)
 8000a64:	f003 fbc2 	bl	80041ec <HAL_GPIO_WritePin>
  HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <main+0x15c>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4929      	ldr	r1, [pc, #164]	; (8000b14 <main+0x160>)
 8000a70:	4825      	ldr	r0, [pc, #148]	; (8000b08 <main+0x154>)
 8000a72:	f007 fd54 	bl	800851e <HAL_UART_Transmit_IT>
  HAL_Delay(6000);
 8000a76:	f241 7070 	movw	r0, #6000	; 0x1770
 8000a7a:	f001 f8a5 	bl	8001bc8 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart3, s_mux_1, size_s_mux_1);
 8000a7e:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <main+0x164>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	4925      	ldr	r1, [pc, #148]	; (8000b1c <main+0x168>)
 8000a86:	4820      	ldr	r0, [pc, #128]	; (8000b08 <main+0x154>)
 8000a88:	f007 fd49 	bl	800851e <HAL_UART_Transmit_IT>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a92:	4818      	ldr	r0, [pc, #96]	; (8000af4 <main+0x140>)
 8000a94:	f003 fbaa 	bl	80041ec <HAL_GPIO_WritePin>
  HAL_Delay(6000);
 8000a98:	f241 7070 	movw	r0, #6000	; 0x1770
 8000a9c:	f001 f894 	bl	8001bc8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa6:	4813      	ldr	r0, [pc, #76]	; (8000af4 <main+0x140>)
 8000aa8:	f003 fba0 	bl	80041ec <HAL_GPIO_WritePin>
  HAL_UART_Transmit_IT(&huart3, s_serv_1, size_s_serv_1);
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <main+0x16c>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	491c      	ldr	r1, [pc, #112]	; (8000b24 <main+0x170>)
 8000ab4:	4814      	ldr	r0, [pc, #80]	; (8000b08 <main+0x154>)
 8000ab6:	f007 fd32 	bl	800851e <HAL_UART_Transmit_IT>
  HAL_Delay(6000);
 8000aba:	f241 7070 	movw	r0, #6000	; 0x1770
 8000abe:	f001 f883 	bl	8001bc8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <main+0x144>)
 8000aca:	f003 fb8f 	bl	80041ec <HAL_GPIO_WritePin>

 // printf(receiveUART[0]);


  //i2c begin
  uint32_t DCH0DSA = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]


  ov7670_init(&hdcmi, &hdma_dcmi, &hi2c1);
 8000ad2:	4a15      	ldr	r2, [pc, #84]	; (8000b28 <main+0x174>)
 8000ad4:	4915      	ldr	r1, [pc, #84]	; (8000b2c <main+0x178>)
 8000ad6:	4816      	ldr	r0, [pc, #88]	; (8000b30 <main+0x17c>)
 8000ad8:	f000 fe8a 	bl	80017f0 <ov7670_init>
  ov7670_config(OV7670_MODE_QVGA_RGB565);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 febb 	bl	8001858 <ov7670_config>
  ov7670_startCap(OV7670_CAP_CONTINUOUS, DCH0DSA);
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f000 feeb 	bl	80018c0 <ov7670_startCap>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <main+0x136>
 8000aec:	20000460 	.word	0x20000460
 8000af0:	200004e8 	.word	0x200004e8
 8000af4:	40020c00 	.word	0x40020c00
 8000af8:	40020000 	.word	0x40020000
 8000afc:	2000041c 	.word	0x2000041c
 8000b00:	2000002e 	.word	0x2000002e
 8000b04:	200004e4 	.word	0x200004e4
 8000b08:	200002c0 	.word	0x200002c0
 8000b0c:	0800a34c 	.word	0x0800a34c
 8000b10:	20000004 	.word	0x20000004
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000006 	.word	0x20000006
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000016 	.word	0x20000016
 8000b24:	20000018 	.word	0x20000018
 8000b28:	20000300 	.word	0x20000300
 8000b2c:	20000358 	.word	0x20000358
 8000b30:	20000464 	.word	0x20000464

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b094      	sub	sp, #80	; 0x50
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0320 	add.w	r3, r7, #32
 8000b3e:	2230      	movs	r2, #48	; 0x30
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f008 fb66 	bl	8009214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <SystemClock_Config+0xd8>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	4a2a      	ldr	r2, [pc, #168]	; (8000c0c <SystemClock_Config+0xd8>)
 8000b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b66:	6413      	str	r3, [r2, #64]	; 0x40
 8000b68:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <SystemClock_Config+0xd8>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <SystemClock_Config+0xdc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a24      	ldr	r2, [pc, #144]	; (8000c10 <SystemClock_Config+0xdc>)
 8000b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <SystemClock_Config+0xdc>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b90:	2301      	movs	r3, #1
 8000b92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ba8:	23a8      	movs	r3, #168	; 0xa8
 8000baa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb4:	f107 0320 	add.w	r3, r7, #32
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f006 f889 	bl	8006cd0 <HAL_RCC_OscConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bc4:	f000 fa84 	bl	80010d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc8:	230f      	movs	r3, #15
 8000bca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2105      	movs	r1, #5
 8000be6:	4618      	mov	r0, r3
 8000be8:	f006 fae2 	bl	80071b0 <HAL_RCC_ClockConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bf2:	f000 fa6d 	bl	80010d0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8000bf6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000bfa:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f006 fbbc 	bl	800737c <HAL_RCC_MCOConfig>
}
 8000c04:	bf00      	nop
 8000c06:	3750      	adds	r7, #80	; 0x50
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <MX_DCMI_Init+0x48>)
 8000c1a:	4a11      	ldr	r2, [pc, #68]	; (8000c60 <MX_DCMI_Init+0x4c>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_DCMI_Init+0x48>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <MX_DCMI_Init+0x48>)
 8000c26:	2220      	movs	r2, #32
 8000c28:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_DCMI_Init+0x48>)
 8000c2c:	2280      	movs	r2, #128	; 0x80
 8000c2e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <MX_DCMI_Init+0x48>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_DCMI_Init+0x48>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <MX_DCMI_Init+0x48>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_DCMI_Init+0x48>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_DCMI_Init+0x48>)
 8000c4a:	f001 fb21 	bl	8002290 <HAL_DCMI_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8000c54:	f000 fa3c 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000464 	.word	0x20000464
 8000c60:	50050000 	.word	0x50050000

08000c64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c6a:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <MX_I2C1_Init+0x54>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c70:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <MX_I2C1_Init+0x58>)
 8000c72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_I2C1_Init+0x50>)
 8000ca2:	f003 faef 	bl	8004284 <HAL_I2C_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cac:	f000 fa10 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000300 	.word	0x20000300
 8000cb8:	40005400 	.word	0x40005400
 8000cbc:	000186a0 	.word	0x000186a0

08000cc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000cde:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <MX_TIM1_Init+0x9c>)
 8000ce0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4999;
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000ce4:	f241 3287 	movw	r2, #4999	; 0x1387
 8000ce8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000cf2:	2263      	movs	r2, #99	; 0x63
 8000cf4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d08:	4813      	ldr	r0, [pc, #76]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000d0a:	f006 fcab 	bl	8007664 <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d14:	f000 f9dc 	bl	80010d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	4619      	mov	r1, r3
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000d26:	f006 ff2d 	bl	8007b84 <HAL_TIM_ConfigClockSource>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d30:	f000 f9ce 	bl	80010d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d34:	2300      	movs	r3, #0
 8000d36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000d42:	f007 fb0f 	bl	8008364 <HAL_TIMEx_MasterConfigSynchronization>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d4c:	f000 f9c0 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200004a4 	.word	0x200004a4
 8000d5c:	40010000 	.word	0x40010000

08000d60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08e      	sub	sp, #56	; 0x38
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	f107 0320 	add.w	r3, r7, #32
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
 8000d8c:	615a      	str	r2, [r3, #20]
 8000d8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d90:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <MX_TIM3_Init+0xfc>)
 8000d92:	4a33      	ldr	r2, [pc, #204]	; (8000e60 <MX_TIM3_Init+0x100>)
 8000d94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4999;
 8000d96:	4b31      	ldr	r3, [pc, #196]	; (8000e5c <MX_TIM3_Init+0xfc>)
 8000d98:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9e:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <MX_TIM3_Init+0xfc>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000da4:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <MX_TIM3_Init+0xfc>)
 8000da6:	2263      	movs	r2, #99	; 0x63
 8000da8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000daa:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <MX_TIM3_Init+0xfc>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <MX_TIM3_Init+0xfc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000db6:	4829      	ldr	r0, [pc, #164]	; (8000e5c <MX_TIM3_Init+0xfc>)
 8000db8:	f006 fc54 	bl	8007664 <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000dc2:	f000 f985 	bl	80010d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4822      	ldr	r0, [pc, #136]	; (8000e5c <MX_TIM3_Init+0xfc>)
 8000dd4:	f006 fed6 	bl	8007b84 <HAL_TIM_ConfigClockSource>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000dde:	f000 f977 	bl	80010d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000de2:	481e      	ldr	r0, [pc, #120]	; (8000e5c <MX_TIM3_Init+0xfc>)
 8000de4:	f006 fc8d 	bl	8007702 <HAL_TIM_PWM_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000dee:	f000 f96f 	bl	80010d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4816      	ldr	r0, [pc, #88]	; (8000e5c <MX_TIM3_Init+0xfc>)
 8000e02:	f007 faaf 	bl	8008364 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e0c:	f000 f960 	bl	80010d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	4619      	mov	r1, r3
 8000e26:	480d      	ldr	r0, [pc, #52]	; (8000e5c <MX_TIM3_Init+0xfc>)
 8000e28:	f006 fde6 	bl	80079f8 <HAL_TIM_PWM_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e32:	f000 f94d 	bl	80010d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2204      	movs	r2, #4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <MX_TIM3_Init+0xfc>)
 8000e3e:	f006 fddb 	bl	80079f8 <HAL_TIM_PWM_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000e48:	f000 f942 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <MX_TIM3_Init+0xfc>)
 8000e4e:	f000 faef 	bl	8001430 <HAL_TIM_MspPostInit>

}
 8000e52:	bf00      	nop
 8000e54:	3738      	adds	r7, #56	; 0x38
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000041c 	.word	0x2000041c
 8000e60:	40000400 	.word	0x40000400

08000e64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <MX_USART3_UART_Init+0x50>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e9c:	f007 faf2 	bl	8008484 <HAL_UART_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ea6:	f000 f913 	bl	80010d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200002c0 	.word	0x200002c0
 8000eb4:	40004800 	.word	0x40004800

08000eb8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_DMA_Init+0x68>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <MX_DMA_Init+0x68>)
 8000ec8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_DMA_Init+0x68>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <MX_DMA_Init+0x68>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <MX_DMA_Init+0x68>)
 8000ee4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <MX_DMA_Init+0x68>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	200e      	movs	r0, #14
 8000efc:	f000 ff61 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f00:	200e      	movs	r0, #14
 8000f02:	f000 ff7a 	bl	8001dfa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2039      	movs	r0, #57	; 0x39
 8000f0c:	f000 ff59 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f10:	2039      	movs	r0, #57	; 0x39
 8000f12:	f000 ff72 	bl	8001dfa <HAL_NVIC_EnableIRQ>

}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08c      	sub	sp, #48	; 0x30
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	4b60      	ldr	r3, [pc, #384]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a5f      	ldr	r2, [pc, #380]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000f44:	f043 0310 	orr.w	r3, r3, #16
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b5d      	ldr	r3, [pc, #372]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	4b59      	ldr	r3, [pc, #356]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a58      	ldr	r2, [pc, #352]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b56      	ldr	r3, [pc, #344]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b52      	ldr	r3, [pc, #328]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a51      	ldr	r2, [pc, #324]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b4f      	ldr	r3, [pc, #316]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b4b      	ldr	r3, [pc, #300]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a4a      	ldr	r2, [pc, #296]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b48      	ldr	r3, [pc, #288]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a43      	ldr	r2, [pc, #268]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a3c      	ldr	r2, [pc, #240]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <MX_GPIO_Init+0x19c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000fe8:	4836      	ldr	r0, [pc, #216]	; (80010c4 <MX_GPIO_Init+0x1a0>)
 8000fea:	f003 f8ff 	bl	80041ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 4106 	mov.w	r1, #34304	; 0x8600
 8000ff4:	4834      	ldr	r0, [pc, #208]	; (80010c8 <MX_GPIO_Init+0x1a4>)
 8000ff6:	f003 f8f9 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffe:	4b33      	ldr	r3, [pc, #204]	; (80010cc <MX_GPIO_Init+0x1a8>)
 8001000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001002:	2302      	movs	r3, #2
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4619      	mov	r1, r3
 800100c:	482e      	ldr	r0, [pc, #184]	; (80010c8 <MX_GPIO_Init+0x1a4>)
 800100e:	f002 ff3b 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001012:	2304      	movs	r3, #4
 8001014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001016:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <MX_GPIO_Init+0x1a8>)
 8001018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	4828      	ldr	r0, [pc, #160]	; (80010c8 <MX_GPIO_Init+0x1a4>)
 8001026:	f002 ff2f 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800102a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800102e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4820      	ldr	r0, [pc, #128]	; (80010c4 <MX_GPIO_Init+0x1a0>)
 8001044:	f002 ff20 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800104c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	4818      	ldr	r0, [pc, #96]	; (80010c8 <MX_GPIO_Init+0x1a4>)
 8001066:	f002 ff0f 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 800106a:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 800106e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	4619      	mov	r1, r3
 8001082:	4811      	ldr	r0, [pc, #68]	; (80010c8 <MX_GPIO_Init+0x1a4>)
 8001084:	f002 ff00 	bl	8003e88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2006      	movs	r0, #6
 800108e:	f000 fe98 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001092:	2006      	movs	r0, #6
 8001094:	f000 feb1 	bl	8001dfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2007      	movs	r0, #7
 800109e:	f000 fe90 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010a2:	2007      	movs	r0, #7
 80010a4:	f000 fea9 	bl	8001dfa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2100      	movs	r1, #0
 80010ac:	2008      	movs	r0, #8
 80010ae:	f000 fe88 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80010b2:	2008      	movs	r0, #8
 80010b4:	f000 fea1 	bl	8001dfa <HAL_NVIC_EnableIRQ>

}
 80010b8:	bf00      	nop
 80010ba:	3730      	adds	r7, #48	; 0x30
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020c00 	.word	0x40020c00
 80010c8:	40020000 	.word	0x40020000
 80010cc:	10110000 	.word	0x10110000

080010d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_MspInit+0x58>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <HAL_MspInit+0x58>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	; 0x44
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_MspInit+0x58>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <HAL_MspInit+0x58>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <HAL_MspInit+0x58>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_MspInit+0x58>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	2005      	movs	r0, #5
 8001124:	f000 fe4d 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001128:	2005      	movs	r0, #5
 800112a:	f000 fe66 	bl	8001dfa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a62      	ldr	r2, [pc, #392]	; (80012e4 <HAL_DCMI_MspInit+0x1a8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	f040 80be 	bne.w	80012dc <HAL_DCMI_MspInit+0x1a0>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	4b60      	ldr	r3, [pc, #384]	; (80012e8 <HAL_DCMI_MspInit+0x1ac>)
 8001166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001168:	4a5f      	ldr	r2, [pc, #380]	; (80012e8 <HAL_DCMI_MspInit+0x1ac>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6353      	str	r3, [r2, #52]	; 0x34
 8001170:	4b5d      	ldr	r3, [pc, #372]	; (80012e8 <HAL_DCMI_MspInit+0x1ac>)
 8001172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	61bb      	str	r3, [r7, #24]
 800117a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <HAL_DCMI_MspInit+0x1ac>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	4a58      	ldr	r2, [pc, #352]	; (80012e8 <HAL_DCMI_MspInit+0x1ac>)
 8001186:	f043 0310 	orr.w	r3, r3, #16
 800118a:	6313      	str	r3, [r2, #48]	; 0x30
 800118c:	4b56      	ldr	r3, [pc, #344]	; (80012e8 <HAL_DCMI_MspInit+0x1ac>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	f003 0310 	and.w	r3, r3, #16
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	4b52      	ldr	r3, [pc, #328]	; (80012e8 <HAL_DCMI_MspInit+0x1ac>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a51      	ldr	r2, [pc, #324]	; (80012e8 <HAL_DCMI_MspInit+0x1ac>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
 80011a8:	4b4f      	ldr	r3, [pc, #316]	; (80012e8 <HAL_DCMI_MspInit+0x1ac>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	4b4b      	ldr	r3, [pc, #300]	; (80012e8 <HAL_DCMI_MspInit+0x1ac>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	4a4a      	ldr	r2, [pc, #296]	; (80012e8 <HAL_DCMI_MspInit+0x1ac>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6313      	str	r3, [r2, #48]	; 0x30
 80011c4:	4b48      	ldr	r3, [pc, #288]	; (80012e8 <HAL_DCMI_MspInit+0x1ac>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <HAL_DCMI_MspInit+0x1ac>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	4a43      	ldr	r2, [pc, #268]	; (80012e8 <HAL_DCMI_MspInit+0x1ac>)
 80011da:	f043 0302 	orr.w	r3, r3, #2
 80011de:	6313      	str	r3, [r2, #48]	; 0x30
 80011e0:	4b41      	ldr	r3, [pc, #260]	; (80012e8 <HAL_DCMI_MspInit+0x1ac>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80011ec:	2370      	movs	r3, #112	; 0x70
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f8:	2303      	movs	r3, #3
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011fc:	230d      	movs	r3, #13
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	4839      	ldr	r0, [pc, #228]	; (80012ec <HAL_DCMI_MspInit+0x1b0>)
 8001208:	f002 fe3e 	bl	8003e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800120c:	2350      	movs	r3, #80	; 0x50
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800121c:	230d      	movs	r3, #13
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	4832      	ldr	r0, [pc, #200]	; (80012f0 <HAL_DCMI_MspInit+0x1b4>)
 8001228:	f002 fe2e 	bl	8003e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800122c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800123e:	230d      	movs	r3, #13
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4619      	mov	r1, r3
 8001248:	482a      	ldr	r0, [pc, #168]	; (80012f4 <HAL_DCMI_MspInit+0x1b8>)
 800124a:	f002 fe1d 	bl	8003e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800124e:	23c0      	movs	r3, #192	; 0xc0
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800125e:	230d      	movs	r3, #13
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	4823      	ldr	r0, [pc, #140]	; (80012f8 <HAL_DCMI_MspInit+0x1bc>)
 800126a:	f002 fe0d 	bl	8003e88 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800126e:	4b23      	ldr	r3, [pc, #140]	; (80012fc <HAL_DCMI_MspInit+0x1c0>)
 8001270:	4a23      	ldr	r2, [pc, #140]	; (8001300 <HAL_DCMI_MspInit+0x1c4>)
 8001272:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <HAL_DCMI_MspInit+0x1c0>)
 8001276:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800127a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <HAL_DCMI_MspInit+0x1c0>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_DCMI_MspInit+0x1c0>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_DISABLE;
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <HAL_DCMI_MspInit+0x1c0>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <HAL_DCMI_MspInit+0x1c0>)
 8001290:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001294:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_DCMI_MspInit+0x1c0>)
 8001298:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <HAL_DCMI_MspInit+0x1c0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_DCMI_MspInit+0x1c0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_DCMI_MspInit+0x1c0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80012b0:	4812      	ldr	r0, [pc, #72]	; (80012fc <HAL_DCMI_MspInit+0x1c0>)
 80012b2:	f001 f853 	bl	800235c <HAL_DMA_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_DCMI_MspInit+0x184>
    {
      Error_Handler();
 80012bc:	f7ff ff08 	bl	80010d0 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <HAL_DCMI_MspInit+0x1c0>)
 80012c4:	639a      	str	r2, [r3, #56]	; 0x38
 80012c6:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <HAL_DCMI_MspInit+0x1c0>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	204e      	movs	r0, #78	; 0x4e
 80012d2:	f000 fd76 	bl	8001dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80012d6:	204e      	movs	r0, #78	; 0x4e
 80012d8:	f000 fd8f 	bl	8001dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80012dc:	bf00      	nop
 80012de:	3730      	adds	r7, #48	; 0x30
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	50050000 	.word	0x50050000
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020400 	.word	0x40020400
 80012fc:	20000358 	.word	0x20000358
 8001300:	40026428 	.word	0x40026428

08001304 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <HAL_I2C_MspInit+0xa4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d13c      	bne.n	80013a0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_I2C_MspInit+0xa8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <HAL_I2C_MspInit+0xa8>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_I2C_MspInit+0xa8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001342:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001348:	2312      	movs	r3, #18
 800134a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134c:	2301      	movs	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001350:	2303      	movs	r3, #3
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001354:	2304      	movs	r3, #4
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	4814      	ldr	r0, [pc, #80]	; (80013b0 <HAL_I2C_MspInit+0xac>)
 8001360:	f002 fd92 	bl	8003e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <HAL_I2C_MspInit+0xa8>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	4a0f      	ldr	r2, [pc, #60]	; (80013ac <HAL_I2C_MspInit+0xa8>)
 800136e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001372:	6413      	str	r3, [r2, #64]	; 0x40
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <HAL_I2C_MspInit+0xa8>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	201f      	movs	r0, #31
 8001386:	f000 fd1c 	bl	8001dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800138a:	201f      	movs	r0, #31
 800138c:	f000 fd35 	bl	8001dfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	2100      	movs	r1, #0
 8001394:	2020      	movs	r0, #32
 8001396:	f000 fd14 	bl	8001dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800139a:	2020      	movs	r0, #32
 800139c:	f000 fd2d 	bl	8001dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40005400 	.word	0x40005400
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020400 	.word	0x40020400

080013b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a18      	ldr	r2, [pc, #96]	; (8001424 <HAL_TIM_Base_MspInit+0x70>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d10e      	bne.n	80013e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <HAL_TIM_Base_MspInit+0x74>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	4a16      	ldr	r2, [pc, #88]	; (8001428 <HAL_TIM_Base_MspInit+0x74>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6453      	str	r3, [r2, #68]	; 0x44
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_TIM_Base_MspInit+0x74>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013e2:	e01a      	b.n	800141a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a10      	ldr	r2, [pc, #64]	; (800142c <HAL_TIM_Base_MspInit+0x78>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d115      	bne.n	800141a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_TIM_Base_MspInit+0x74>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <HAL_TIM_Base_MspInit+0x74>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_TIM_Base_MspInit+0x74>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	201d      	movs	r0, #29
 8001410:	f000 fcd7 	bl	8001dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001414:	201d      	movs	r0, #29
 8001416:	f000 fcf0 	bl	8001dfa <HAL_NVIC_EnableIRQ>
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40010000 	.word	0x40010000
 8001428:	40023800 	.word	0x40023800
 800142c:	40000400 	.word	0x40000400

08001430 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a12      	ldr	r2, [pc, #72]	; (8001498 <HAL_TIM_MspPostInit+0x68>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d11d      	bne.n	800148e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_TIM_MspPostInit+0x6c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <HAL_TIM_MspPostInit+0x6c>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_TIM_MspPostInit+0x6c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800146e:	2330      	movs	r3, #48	; 0x30
 8001470:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800147e:	2302      	movs	r3, #2
 8001480:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	4619      	mov	r1, r3
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <HAL_TIM_MspPostInit+0x70>)
 800148a:	f002 fcfd 	bl	8003e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800148e:	bf00      	nop
 8001490:	3720      	adds	r7, #32
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40000400 	.word	0x40000400
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020400 	.word	0x40020400

080014a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a34      	ldr	r2, [pc, #208]	; (8001594 <HAL_UART_MspInit+0xf0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d162      	bne.n	800158c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b33      	ldr	r3, [pc, #204]	; (8001598 <HAL_UART_MspInit+0xf4>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a32      	ldr	r2, [pc, #200]	; (8001598 <HAL_UART_MspInit+0xf4>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b30      	ldr	r3, [pc, #192]	; (8001598 <HAL_UART_MspInit+0xf4>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <HAL_UART_MspInit+0xf4>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a2b      	ldr	r2, [pc, #172]	; (8001598 <HAL_UART_MspInit+0xf4>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <HAL_UART_MspInit+0xf4>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001510:	2307      	movs	r3, #7
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	4820      	ldr	r0, [pc, #128]	; (800159c <HAL_UART_MspInit+0xf8>)
 800151c:	f002 fcb4 	bl	8003e88 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001520:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <HAL_UART_MspInit+0xfc>)
 8001522:	4a20      	ldr	r2, [pc, #128]	; (80015a4 <HAL_UART_MspInit+0x100>)
 8001524:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <HAL_UART_MspInit+0xfc>)
 8001528:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800152c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_UART_MspInit+0xfc>)
 8001530:	2240      	movs	r2, #64	; 0x40
 8001532:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_UART_MspInit+0xfc>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_DISABLE;
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_UART_MspInit+0xfc>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_UART_MspInit+0xfc>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_UART_MspInit+0xfc>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_UART_MspInit+0xfc>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_UART_MspInit+0xfc>)
 8001554:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001558:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_UART_MspInit+0xfc>)
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001560:	480f      	ldr	r0, [pc, #60]	; (80015a0 <HAL_UART_MspInit+0xfc>)
 8001562:	f000 fefb 	bl	800235c <HAL_DMA_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800156c:	f7ff fdb0 	bl	80010d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <HAL_UART_MspInit+0xfc>)
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_UART_MspInit+0xfc>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	2027      	movs	r0, #39	; 0x27
 8001582:	f000 fc1e 	bl	8001dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001586:	2027      	movs	r0, #39	; 0x27
 8001588:	f000 fc37 	bl	8001dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	; 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40004800 	.word	0x40004800
 8001598:	40023800 	.word	0x40023800
 800159c:	40020800 	.word	0x40020800
 80015a0:	200003bc 	.word	0x200003bc
 80015a4:	40026058 	.word	0x40026058

080015a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fc:	f000 fac4 	bl	8001b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001616:	2001      	movs	r0, #1
 8001618:	f002 fe1c 	bl	8004254 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001624:	2002      	movs	r0, #2
 8001626:	f002 fe15 	bl	8004254 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}

0800162e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001632:	2004      	movs	r0, #4
 8001634:	f002 fe0e 	bl	8004254 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <DMA1_Stream3_IRQHandler+0x10>)
 8001642:	f001 f823 	bl	800268c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200003bc 	.word	0x200003bc

08001650 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <TIM3_IRQHandler+0x10>)
 8001656:	f006 f8c7 	bl	80077e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2000041c 	.word	0x2000041c

08001664 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <I2C1_EV_IRQHandler+0x10>)
 800166a:	f003 fb61 	bl	8004d30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000300 	.word	0x20000300

08001678 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <I2C1_ER_IRQHandler+0x10>)
 800167e:	f003 fcbd 	bl	8004ffc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000300 	.word	0x20000300

0800168c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <USART3_IRQHandler+0x10>)
 8001692:	f006 ffdf 	bl	8008654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200002c0 	.word	0x200002c0

080016a0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <DMA2_Stream1_IRQHandler+0x10>)
 80016a6:	f000 fff1 	bl	800268c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000358 	.word	0x20000358

080016b4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <DCMI_IRQHandler+0x10>)
 80016ba:	f000 fcb5 	bl	8002028 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000464 	.word	0x20000464

080016c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e00a      	b.n	80016f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016da:	f3af 8000 	nop.w
 80016de:	4601      	mov	r1, r0
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	60ba      	str	r2, [r7, #8]
 80016e6:	b2ca      	uxtb	r2, r1
 80016e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	dbf0      	blt.n	80016da <_read+0x12>
	}

return len;
 80016f8:	687b      	ldr	r3, [r7, #4]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
	return -1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800172a:	605a      	str	r2, [r3, #4]
	return 0;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_isatty>:

int _isatty(int file)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
	return 1;
 8001742:	2301      	movs	r3, #1
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
	return 0;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <_sbrk+0x50>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <_sbrk+0x16>
		heap_end = &end;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <_sbrk+0x50>)
 800177e:	4a10      	ldr	r2, [pc, #64]	; (80017c0 <_sbrk+0x54>)
 8001780:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <_sbrk+0x50>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <_sbrk+0x50>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	466a      	mov	r2, sp
 8001792:	4293      	cmp	r3, r2
 8001794:	d907      	bls.n	80017a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001796:	f007 fd13 	bl	80091c0 <__errno>
 800179a:	4602      	mov	r2, r0
 800179c:	230c      	movs	r3, #12
 800179e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017a4:	e006      	b.n	80017b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <_sbrk+0x50>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	4a03      	ldr	r2, [pc, #12]	; (80017bc <_sbrk+0x50>)
 80017b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017b2:	68fb      	ldr	r3, [r7, #12]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	2000022c 	.word	0x2000022c
 80017c0:	200004f8 	.word	0x200004f8

080017c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <SystemInit+0x28>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ce:	4a07      	ldr	r2, [pc, #28]	; (80017ec <SystemInit+0x28>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <SystemInit+0x28>)
 80017da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017de:	609a      	str	r2, [r3, #8]
#endif
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <ov7670_init>:
static RET ov7670_write(uint8_t regAddr, uint8_t data);
static RET ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
RET ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 80017fc:	4a11      	ldr	r2, [pc, #68]	; (8001844 <ov7670_init+0x54>)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 8001802:	4a11      	ldr	r2, [pc, #68]	; (8001848 <ov7670_init+0x58>)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 8001808:	4a10      	ldr	r2, [pc, #64]	; (800184c <ov7670_init+0x5c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <ov7670_init+0x60>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
  //HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
  //HAL_Delay(100);
  //HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 // HAL_Delay(100);

  ov7670_write(0x12, 0x80);  // RESET
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	2012      	movs	r0, #18
 8001818:	f000 f8ea 	bl	80019f0 <ov7670_write>
  HAL_Delay(30);
 800181c:	201e      	movs	r0, #30
 800181e:	f000 f9d3 	bl	8001bc8 <HAL_Delay>

  uint8_t buffer[4];
  ov7670_read(0x0b, buffer);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	200b      	movs	r0, #11
 800182a:	f000 f905 	bl	8001a38 <ov7670_read>
  printf("[OV7670] dev id = %02X\n", buffer[0]);
 800182e:	7d3b      	ldrb	r3, [r7, #20]
 8001830:	4619      	mov	r1, r3
 8001832:	4808      	ldr	r0, [pc, #32]	; (8001854 <ov7670_init+0x64>)
 8001834:	f007 fcf6 	bl	8009224 <iprintf>


  return RET_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000230 	.word	0x20000230
 8001848:	20000234 	.word	0x20000234
 800184c:	20000238 	.word	0x20000238
 8001850:	2000023c 	.word	0x2000023c
 8001854:	0800a35c 	.word	0x0800a35c

08001858 <ov7670_config>:

RET ov7670_config(uint32_t mode)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  ov7670_stopCap();
 8001860:	f000 f85c 	bl	800191c <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	2012      	movs	r0, #18
 8001868:	f000 f8c2 	bl	80019f0 <ov7670_write>
  HAL_Delay(30);
 800186c:	201e      	movs	r0, #30
 800186e:	f000 f9ab 	bl	8001bc8 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	e011      	b.n	800189c <ov7670_config+0x44>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 8001878:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <ov7670_config+0x60>)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <ov7670_config+0x60>)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	785b      	ldrb	r3, [r3, #1]
 800188a:	4619      	mov	r1, r3
 800188c:	f000 f8b0 	bl	80019f0 <ov7670_write>
    HAL_Delay(1);
 8001890:	2001      	movs	r0, #1
 8001892:	f000 f999 	bl	8001bc8 <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3301      	adds	r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <ov7670_config+0x60>)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80018a4:	2bff      	cmp	r3, #255	; 0xff
 80018a6:	d1e7      	bne.n	8001878 <ov7670_config+0x20>
  }
  printf("config OK\n");
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <ov7670_config+0x64>)
 80018aa:	f007 fd43 	bl	8009334 <puts>
  return RET_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	0800a3b4 	.word	0x0800a3b4
 80018bc:	0800a374 	.word	0x0800a374

080018c0 <ov7670_startCap>:

RET ov7670_startCap(uint32_t capMode, uint32_t destAddress)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  ov7670_stopCap();
 80018ca:	f000 f827 	bl	800191c <ov7670_stopCap>
  if (capMode == OV7670_CAP_CONTINUOUS) {
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10b      	bne.n	80018ec <ov7670_startCap+0x2c>
    /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
    s_destAddressForContiuousMode = destAddress;
 80018d4:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <ov7670_startCap+0x54>)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	6013      	str	r3, [r2, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <ov7670_startCap+0x58>)
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	2100      	movs	r1, #0
 80018e6:	f000 faa3 	bl	8001e30 <HAL_DCMI_Start_DMA>
 80018ea:	e00d      	b.n	8001908 <ov7670_startCap+0x48>
  } else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d10a      	bne.n	8001908 <ov7670_startCap+0x48>
    s_destAddressForContiuousMode = 0;
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <ov7670_startCap+0x54>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <ov7670_startCap+0x58>)
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	2102      	movs	r1, #2
 8001904:	f000 fa94 	bl	8001e30 <HAL_DCMI_Start_DMA>
  }

  return RET_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2000023c 	.word	0x2000023c
 8001918:	20000230 	.word	0x20000230

0800191c <ov7670_stopCap>:

RET ov7670_stopCap()
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <ov7670_stopCap+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fb23 	bl	8001f70 <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return RET_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000230 	.word	0x20000230

08001934 <HAL_DCMI_FrameEventCallback>:
}



void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 // printf("FRAME %d\n", HAL_GetTick());
	printf("FRAME\n");
 800193c:	4814      	ldr	r0, [pc, #80]	; (8001990 <HAL_DCMI_FrameEventCallback+0x5c>)
 800193e:	f007 fcf9 	bl	8009334 <puts>
  if(s_cbVsync)s_cbVsync(s_currentV);
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <HAL_DCMI_FrameEventCallback+0x60>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <HAL_DCMI_FrameEventCallback+0x22>
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_DCMI_FrameEventCallback+0x60>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <HAL_DCMI_FrameEventCallback+0x64>)
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	4610      	mov	r0, r2
 8001954:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_DCMI_FrameEventCallback+0x68>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00b      	beq.n	8001976 <HAL_DCMI_FrameEventCallback+0x42>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3328      	adds	r3, #40	; 0x28
 8001968:	4619      	mov	r1, r3
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_DCMI_FrameEventCallback+0x68>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001972:	f000 fda1 	bl	80024b8 <HAL_DMA_Start_IT>
  }
  s_currentV++;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_DCMI_FrameEventCallback+0x64>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	3301      	adds	r3, #1
 800197c:	4a06      	ldr	r2, [pc, #24]	; (8001998 <HAL_DCMI_FrameEventCallback+0x64>)
 800197e:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <HAL_DCMI_FrameEventCallback+0x6c>)
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	0800a384 	.word	0x0800a384
 8001994:	20000244 	.word	0x20000244
 8001998:	2000024c 	.word	0x2000024c
 800199c:	2000023c 	.word	0x2000023c
 80019a0:	20000248 	.word	0x20000248

080019a4 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  //printf("VSYNC %d\n", HAL_GetTick());
	//printf("VSYNC");
	//printf("%d",hdcmi->XferSize);
  //HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_DCMI_LineEventCallback>:

void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  //printf("HSYNC %d\n", HAL_GetTick());
	//printf("HSYNC %d\n");
  if(s_cbHsync)s_cbHsync(s_currentH);
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_DCMI_LineEventCallback+0x30>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_DCMI_LineEventCallback+0x1c>
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <HAL_DCMI_LineEventCallback+0x30>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <HAL_DCMI_LineEventCallback+0x34>)
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	4610      	mov	r0, r2
 80019d2:	4798      	blx	r3
  s_currentH++;
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_DCMI_LineEventCallback+0x34>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3301      	adds	r3, #1
 80019da:	4a04      	ldr	r2, [pc, #16]	; (80019ec <HAL_DCMI_LineEventCallback+0x34>)
 80019dc:	6013      	str	r3, [r2, #0]
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000240 	.word	0x20000240
 80019ec:	20000248 	.word	0x20000248

080019f0 <ov7670_write>:

/*** Internal Function Defines ***/
static RET ov7670_write(uint8_t regAddr, uint8_t data)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af04      	add	r7, sp, #16
 80019f6:	4603      	mov	r3, r0
 80019f8:	460a      	mov	r2, r1
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	4613      	mov	r3, r2
 80019fe:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  printf("write\n");
 8001a00:	480b      	ldr	r0, [pc, #44]	; (8001a30 <ov7670_write+0x40>)
 8001a02:	f007 fc97 	bl	8009334 <puts>
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, 00, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <ov7670_write+0x44>)
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	2364      	movs	r3, #100	; 0x64
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	2301      	movs	r3, #1
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	1dbb      	adds	r3, r7, #6
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	f003 f88d 	bl	8004b3c <HAL_I2C_Mem_Write>
 8001a22:	4603      	mov	r3, r0
 8001a24:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	0800a38c 	.word	0x0800a38c
 8001a34:	20000238 	.word	0x20000238

08001a38 <ov7670_read>:

static RET ov7670_read(uint8_t regAddr, uint8_t *data)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef ret;
  printf("read\n");
 8001a44:	4810      	ldr	r0, [pc, #64]	; (8001a88 <ov7670_read+0x50>)
 8001a46:	f007 fc75 	bl	8009334 <puts>
  do {
    // HAL_I2C_Mem_Read doesn't work (because of SCCB protocol(doesn't have ack))? */
//    ret = HAL_I2C_Mem_Read(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
    ret = HAL_I2C_Master_Transmit(sp_hi2c, 00, &regAddr, 1, 100);
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <ov7670_read+0x54>)
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	1dfa      	adds	r2, r7, #7
 8001a50:	2364      	movs	r3, #100	; 0x64
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	2301      	movs	r3, #1
 8001a56:	2100      	movs	r1, #0
 8001a58:	f002 fd4c 	bl	80044f4 <HAL_I2C_Master_Transmit>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	73fb      	strb	r3, [r7, #15]
    ret |= HAL_I2C_Master_Receive(sp_hi2c, 00, data, 1, 100);
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <ov7670_read+0x54>)
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	2364      	movs	r3, #100	; 0x64
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2301      	movs	r3, #1
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	f002 fe3f 	bl	80046f0 <HAL_I2C_Master_Receive>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	0800a394 	.word	0x0800a394
 8001a8c:	20000238 	.word	0x20000238

08001a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a96:	e003      	b.n	8001aa0 <LoopCopyDataInit>

08001a98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a9e:	3104      	adds	r1, #4

08001aa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001aa0:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001aa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001aa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001aa8:	d3f6      	bcc.n	8001a98 <CopyDataInit>
  ldr  r2, =_sbss
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001aac:	e002      	b.n	8001ab4 <LoopFillZerobss>

08001aae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001aae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ab0:	f842 3b04 	str.w	r3, [r2], #4

08001ab4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ab6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ab8:	d3f9      	bcc.n	8001aae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aba:	f7ff fe83 	bl	80017c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001abe:	f007 fb85 	bl	80091cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac2:	f7fe ff77 	bl	80009b4 <main>
  bx  lr    
 8001ac6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ac8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001acc:	0800a5cc 	.word	0x0800a5cc
  ldr  r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ad4:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 8001ad8:	2000020c 	.word	0x2000020c
  ldr  r3, = _ebss
 8001adc:	200004f4 	.word	0x200004f4

08001ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC_IRQHandler>
	...

08001ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <HAL_Init+0x40>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <HAL_Init+0x40>)
 8001afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <HAL_Init+0x40>)
 8001b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f94d 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b12:	2000      	movs	r0, #0
 8001b14:	f000 f808 	bl	8001b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b18:	f7ff fae2 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023c00 	.word	0x40023c00

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x54>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_InitTick+0x58>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f965 	bl	8001e16 <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00e      	b.n	8001b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d80a      	bhi.n	8001b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b64:	f000 f92d 	bl	8001dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b68:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <HAL_InitTick+0x5c>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000030 	.word	0x20000030
 8001b80:	20000038 	.word	0x20000038
 8001b84:	20000034 	.word	0x20000034

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000038 	.word	0x20000038
 8001bac:	200004ec 	.word	0x200004ec

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200004ec 	.word	0x200004ec

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_Delay+0x40>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
  {
  }
}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000038 	.word	0x20000038

08001c0c <__NVIC_SetPriorityGrouping>:
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_GetPriorityGrouping>:
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <__NVIC_GetPriorityGrouping+0x18>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	f003 0307 	and.w	r3, r3, #7
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_EnableIRQ>:
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	db0b      	blt.n	8001c9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	4907      	ldr	r1, [pc, #28]	; (8001ca8 <__NVIC_EnableIRQ+0x38>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	2001      	movs	r0, #1
 8001c92:	fa00 f202 	lsl.w	r2, r0, r2
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000e100 	.word	0xe000e100

08001cac <__NVIC_SetPriority>:
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	db0a      	blt.n	8001cd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	490c      	ldr	r1, [pc, #48]	; (8001cf8 <__NVIC_SetPriority+0x4c>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	0112      	lsls	r2, r2, #4
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cd4:	e00a      	b.n	8001cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4908      	ldr	r1, [pc, #32]	; (8001cfc <__NVIC_SetPriority+0x50>)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	3b04      	subs	r3, #4
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	440b      	add	r3, r1
 8001cea:	761a      	strb	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <NVIC_EncodePriority>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	; 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f1c3 0307 	rsb	r3, r3, #7
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	bf28      	it	cs
 8001d1e:	2304      	movcs	r3, #4
 8001d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3304      	adds	r3, #4
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d902      	bls.n	8001d30 <NVIC_EncodePriority+0x30>
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3b03      	subs	r3, #3
 8001d2e:	e000      	b.n	8001d32 <NVIC_EncodePriority+0x32>
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	401a      	ands	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	4313      	orrs	r3, r2
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <SysTick_Config>:
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d78:	d301      	bcc.n	8001d7e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00f      	b.n	8001d9e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <SysTick_Config+0x40>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d86:	210f      	movs	r1, #15
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d8c:	f7ff ff8e 	bl	8001cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <SysTick_Config+0x40>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <SysTick_Config+0x40>)
 8001d98:	2207      	movs	r2, #7
 8001d9a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	e000e010 	.word	0xe000e010

08001dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff29 	bl	8001c0c <__NVIC_SetPriorityGrouping>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd4:	f7ff ff3e 	bl	8001c54 <__NVIC_GetPriorityGrouping>
 8001dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f7ff ff8e 	bl	8001d00 <NVIC_EncodePriority>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff5d 	bl	8001cac <__NVIC_SetPriority>
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff31 	bl	8001c70 <__NVIC_EnableIRQ>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ffa2 	bl	8001d68 <SysTick_Config>
 8001e24:	4603      	mov	r3, r0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_DCMI_Start_DMA+0x20>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e086      	b.n	8001f5e <HAL_DCMI_Start_DMA+0x12e>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0202 	bic.w	r2, r2, #2
 8001e7e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e94:	4a34      	ldr	r2, [pc, #208]	; (8001f68 <HAL_DCMI_Start_DMA+0x138>)
 8001e96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9c:	4a33      	ldr	r2, [pc, #204]	; (8001f6c <HAL_DCMI_Start_DMA+0x13c>)
 8001e9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eba:	d20a      	bcs.n	8001ed2 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	3328      	adds	r3, #40	; 0x28
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	f000 faf4 	bl	80024b8 <HAL_DMA_Start_IT>
 8001ed0:	e038      	b.n	8001f44 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed6:	4a24      	ldr	r2, [pc, #144]	; (8001f68 <HAL_DCMI_Start_DMA+0x138>)
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001eec:	e009      	b.n	8001f02 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	085a      	lsrs	r2, r3, #1
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	005a      	lsls	r2, r3, #1
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0a:	d2f0      	bcs.n	8001eee <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	1e9a      	subs	r2, r3, #2
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3328      	adds	r3, #40	; 0x28
 8001f34:	4619      	mov	r1, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	f000 fe1a 	bl	8002b78 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	08002139 	.word	0x08002139
 8001f6c:	08002263 	.word	0x08002263

08001f70 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <HAL_DCMI_Stop+0xb0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	085b      	lsrs	r3, r3, #1
 8001f7e:	4a29      	ldr	r2, [pc, #164]	; (8002024 <HAL_DCMI_Stop+0xb4>)
 8001f80:	fba2 2303 	umull	r2, r3, r2, r3
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_DCMI_Stop+0x2a>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e03e      	b.n	8002018 <HAL_DCMI_Stop+0xa8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0201 	bic.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1e5a      	subs	r2, r3, #1
 8001fbe:	60ba      	str	r2, [r7, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d108      	bne.n	8001fd6 <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc8:	f043 0220 	orr.w	r2, r3, #32
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001fd4:	e006      	b.n	8001fe4 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1ea      	bne.n	8001fba <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fab5 	bl	8002568 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000030 	.word	0x20000030
 8002024:	92492493 	.word	0x92492493

08002028 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b00      	cmp	r3, #0
 8002040:	d016      	beq.n	8002070 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2204      	movs	r2, #4
 8002048:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	f043 0202 	orr.w	r2, r3, #2
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2204      	movs	r2, #4
 800205a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	4a2f      	ldr	r2, [pc, #188]	; (8002120 <HAL_DCMI_IRQHandler+0xf8>)
 8002064:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	4618      	mov	r0, r3
 800206c:	f000 faec 	bl	8002648 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d016      	beq.n	80020a8 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2202      	movs	r2, #2
 8002080:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002086:	f043 0201 	orr.w	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2204      	movs	r2, #4
 8002092:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	4a21      	ldr	r2, [pc, #132]	; (8002120 <HAL_DCMI_IRQHandler+0xf8>)
 800209c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fad0 	bl	8002648 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d006      	beq.n	80020c0 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2210      	movs	r2, #16
 80020b8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fc7c 	bl	80019b8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d006      	beq.n	80020d8 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2208      	movs	r2, #8
 80020d0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff fc66 	bl	80019a4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d019      	beq.n	8002116 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d107      	bne.n	8002100 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 021e 	bic.w	r2, r2, #30
 80020fe:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff fc0f 	bl	8001934 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	08002263 	.word	0x08002263

08002124 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002148:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	2b00      	cmp	r3, #0
 8002150:	d043      	beq.n	80021da <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800215e:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d118      	bne.n	800219e <DCMI_DMAXferCplt+0x66>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d015      	beq.n	800219e <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	00da      	lsls	r2, r3, #3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4413      	add	r3, r2
 800218a:	2200      	movs	r2, #0
 800218c:	4619      	mov	r1, r3
 800218e:	f001 fe3b 	bl	8003e08 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	1e5a      	subs	r2, r3, #1
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
 800219c:	e044      	b.n	8002228 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d13c      	bne.n	8002228 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	00da      	lsls	r2, r3, #3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4413      	add	r3, r2
 80021c6:	2201      	movs	r2, #1
 80021c8:	4619      	mov	r1, r3
 80021ca:	f001 fe1d 	bl	8003e08 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	1e5a      	subs	r2, r3, #1
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28
 80021d8:	e026      	b.n	8002228 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d006      	beq.n	80021f8 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	e017      	b.n	8002228 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10f      	bne.n	8002228 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220c:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	0099      	lsls	r1, r3, #2
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	440a      	add	r2, r1
 800221e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	429a      	cmp	r2, r3
 8002232:	d112      	bne.n	800225a <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b02      	cmp	r3, #2
 8002250:	d103      	bne.n	800225a <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226e:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	2b02      	cmp	r3, #2
 8002278:	d003      	beq.n	8002282 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f7ff ff4e 	bl	8002124 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e058      	b.n	8002354 <HAL_DCMI_Init+0xc4>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <HAL_DCMI_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe ff44 	bl	800113c <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80022ca:	f023 0308 	bic.w	r3, r3, #8
 80022ce:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6819      	ldr	r1, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80022e4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80022f0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode 
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80022fc:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b10      	cmp	r3, #16
 800230c:	d112      	bne.n	8002334 <HAL_DCMI_Init+0xa4>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7f1b      	ldrb	r3, [r3, #28]
 8002312:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	7f5b      	ldrb	r3, [r3, #29]
 8002318:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800231a:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7f9b      	ldrb	r3, [r3, #30]
 8002320:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8002322:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7fdb      	ldrb	r3, [r3, #31]
 800232a:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002330:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002332:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 021e 	orr.w	r2, r2, #30
 8002342:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff fc22 	bl	8001bb0 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e099      	b.n	80024ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002398:	e00f      	b.n	80023ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800239a:	f7ff fc09 	bl	8001bb0 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d908      	bls.n	80023ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2203      	movs	r2, #3
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e078      	b.n	80024ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1e8      	bne.n	800239a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	4b38      	ldr	r3, [pc, #224]	; (80024b4 <HAL_DMA_Init+0x158>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	2b04      	cmp	r3, #4
 8002412:	d107      	bne.n	8002424 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	4313      	orrs	r3, r2
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f023 0307 	bic.w	r3, r3, #7
 800243a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	2b04      	cmp	r3, #4
 800244c:	d117      	bne.n	800247e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00e      	beq.n	800247e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fb0f 	bl	8002a84 <DMA_CheckFifoParam>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2240      	movs	r2, #64	; 0x40
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800247a:	2301      	movs	r3, #1
 800247c:	e016      	b.n	80024ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fac6 	bl	8002a18 <DMA_CalcBaseAndBitshift>
 800248c:	4603      	mov	r3, r0
 800248e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	223f      	movs	r2, #63	; 0x3f
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	f010803f 	.word	0xf010803f

080024b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_DMA_Start_IT+0x26>
 80024da:	2302      	movs	r3, #2
 80024dc:	e040      	b.n	8002560 <HAL_DMA_Start_IT+0xa8>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d12f      	bne.n	8002552 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2202      	movs	r2, #2
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fa58 	bl	80029bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	223f      	movs	r2, #63	; 0x3f
 8002512:	409a      	lsls	r2, r3
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0216 	orr.w	r2, r2, #22
 8002526:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0208 	orr.w	r2, r2, #8
 800253e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	e005      	b.n	800255e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800255a:	2302      	movs	r3, #2
 800255c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800255e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002576:	f7ff fb1b 	bl	8001bb0 <HAL_GetTick>
 800257a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d008      	beq.n	800259a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e052      	b.n	8002640 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0216 	bic.w	r2, r2, #22
 80025a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d103      	bne.n	80025ca <HAL_DMA_Abort+0x62>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0208 	bic.w	r2, r2, #8
 80025d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ea:	e013      	b.n	8002614 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ec:	f7ff fae0 	bl	8001bb0 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b05      	cmp	r3, #5
 80025f8:	d90c      	bls.n	8002614 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2220      	movs	r2, #32
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2203      	movs	r2, #3
 800260c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e015      	b.n	8002640 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1e4      	bne.n	80025ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	223f      	movs	r2, #63	; 0x3f
 8002628:	409a      	lsls	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d004      	beq.n	8002666 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2280      	movs	r2, #128	; 0x80
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e00c      	b.n	8002680 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2205      	movs	r2, #5
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002698:	4b92      	ldr	r3, [pc, #584]	; (80028e4 <HAL_DMA_IRQHandler+0x258>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a92      	ldr	r2, [pc, #584]	; (80028e8 <HAL_DMA_IRQHandler+0x25c>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	0a9b      	lsrs	r3, r3, #10
 80026a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b6:	2208      	movs	r2, #8
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01a      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0204 	bic.w	r2, r2, #4
 80026de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	2208      	movs	r2, #8
 80026e6:	409a      	lsls	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	2201      	movs	r2, #1
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d012      	beq.n	800272e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	2201      	movs	r2, #1
 800271c:	409a      	lsls	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	f043 0202 	orr.w	r2, r3, #2
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002732:	2204      	movs	r2, #4
 8002734:	409a      	lsls	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d012      	beq.n	8002764 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00b      	beq.n	8002764 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	2204      	movs	r2, #4
 8002752:	409a      	lsls	r2, r3
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f043 0204 	orr.w	r2, r3, #4
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	2210      	movs	r2, #16
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d043      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d03c      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	2210      	movs	r2, #16
 8002788:	409a      	lsls	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d108      	bne.n	80027bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d024      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
 80027ba:	e01f      	b.n	80027fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01b      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
 80027cc:	e016      	b.n	80027fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d107      	bne.n	80027ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0208 	bic.w	r2, r2, #8
 80027ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	2220      	movs	r2, #32
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 808e 	beq.w	800292a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8086 	beq.w	800292a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	2220      	movs	r2, #32
 8002824:	409a      	lsls	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b05      	cmp	r3, #5
 8002834:	d136      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0216 	bic.w	r2, r2, #22
 8002844:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002854:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <HAL_DMA_IRQHandler+0x1da>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0208 	bic.w	r2, r2, #8
 8002874:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	223f      	movs	r2, #63	; 0x3f
 800287c:	409a      	lsls	r2, r3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002896:	2b00      	cmp	r3, #0
 8002898:	d07d      	beq.n	8002996 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
        }
        return;
 80028a2:	e078      	b.n	8002996 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01c      	beq.n	80028ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d108      	bne.n	80028d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d030      	beq.n	800292a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
 80028d0:	e02b      	b.n	800292a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d027      	beq.n	800292a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	4798      	blx	r3
 80028e2:	e022      	b.n	800292a <HAL_DMA_IRQHandler+0x29e>
 80028e4:	20000030 	.word	0x20000030
 80028e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10f      	bne.n	800291a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0210 	bic.w	r2, r2, #16
 8002908:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292e:	2b00      	cmp	r3, #0
 8002930:	d032      	beq.n	8002998 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d022      	beq.n	8002984 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2205      	movs	r2, #5
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	3301      	adds	r3, #1
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	429a      	cmp	r2, r3
 8002960:	d307      	bcc.n	8002972 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f2      	bne.n	8002956 <HAL_DMA_IRQHandler+0x2ca>
 8002970:	e000      	b.n	8002974 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002972:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4798      	blx	r3
 8002994:	e000      	b.n	8002998 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002996:	bf00      	nop
    }
  }
}
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop

080029a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ae:	b2db      	uxtb	r3, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	d108      	bne.n	80029fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029fa:	e007      	b.n	8002a0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	60da      	str	r2, [r3, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	3b10      	subs	r3, #16
 8002a28:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <DMA_CalcBaseAndBitshift+0x64>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	091b      	lsrs	r3, r3, #4
 8002a30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a32:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <DMA_CalcBaseAndBitshift+0x68>)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4413      	add	r3, r2
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d909      	bls.n	8002a5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a4e:	f023 0303 	bic.w	r3, r3, #3
 8002a52:	1d1a      	adds	r2, r3, #4
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	659a      	str	r2, [r3, #88]	; 0x58
 8002a58:	e007      	b.n	8002a6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a62:	f023 0303 	bic.w	r3, r3, #3
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	aaaaaaab 	.word	0xaaaaaaab
 8002a80:	0800a410 	.word	0x0800a410

08002a84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d11f      	bne.n	8002ade <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d855      	bhi.n	8002b50 <DMA_CheckFifoParam+0xcc>
 8002aa4:	a201      	add	r2, pc, #4	; (adr r2, 8002aac <DMA_CheckFifoParam+0x28>)
 8002aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aaa:	bf00      	nop
 8002aac:	08002abd 	.word	0x08002abd
 8002ab0:	08002acf 	.word	0x08002acf
 8002ab4:	08002abd 	.word	0x08002abd
 8002ab8:	08002b51 	.word	0x08002b51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d045      	beq.n	8002b54 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002acc:	e042      	b.n	8002b54 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ad6:	d13f      	bne.n	8002b58 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002adc:	e03c      	b.n	8002b58 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae6:	d121      	bne.n	8002b2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d836      	bhi.n	8002b5c <DMA_CheckFifoParam+0xd8>
 8002aee:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <DMA_CheckFifoParam+0x70>)
 8002af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af4:	08002b05 	.word	0x08002b05
 8002af8:	08002b0b 	.word	0x08002b0b
 8002afc:	08002b05 	.word	0x08002b05
 8002b00:	08002b1d 	.word	0x08002b1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
      break;
 8002b08:	e02f      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d024      	beq.n	8002b60 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1a:	e021      	b.n	8002b60 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b24:	d11e      	bne.n	8002b64 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b2a:	e01b      	b.n	8002b64 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d902      	bls.n	8002b38 <DMA_CheckFifoParam+0xb4>
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d003      	beq.n	8002b3e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b36:	e018      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3c:	e015      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00e      	beq.n	8002b68 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4e:	e00b      	b.n	8002b68 <DMA_CheckFifoParam+0xe4>
      break;
 8002b50:	bf00      	nop
 8002b52:	e00a      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      break;
 8002b54:	bf00      	nop
 8002b56:	e008      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      break;
 8002b58:	bf00      	nop
 8002b5a:	e006      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      break;
 8002b5c:	bf00      	nop
 8002b5e:	e004      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      break;
 8002b60:	bf00      	nop
 8002b62:	e002      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      break;   
 8002b64:	bf00      	nop
 8002b66:	e000      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      break;
 8002b68:	bf00      	nop
    }
  } 
  
  return status; 
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b80      	cmp	r3, #128	; 0x80
 8002b90:	d106      	bne.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f001 b913 	b.w	8003dc6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d105      	bne.n	8002bc4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2240      	movs	r2, #64	; 0x40
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	f001 b901 	b.w	8003dc6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d102      	bne.n	8002bd4 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	f001 b8f9 	b.w	8003dc6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	f041 80e7 	bne.w	8003db8 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2202      	movs	r2, #2
 8002bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c06:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f001 f910 	bl	8003e3c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b99      	ldr	r3, [pc, #612]	; (8002e88 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d960      	bls.n	8002cea <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a97      	ldr	r2, [pc, #604]	; (8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d057      	beq.n	8002ce2 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a96      	ldr	r2, [pc, #600]	; (8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d050      	beq.n	8002cde <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a94      	ldr	r2, [pc, #592]	; (8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d049      	beq.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a93      	ldr	r2, [pc, #588]	; (8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d042      	beq.n	8002cd6 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a91      	ldr	r2, [pc, #580]	; (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d03a      	beq.n	8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a90      	ldr	r2, [pc, #576]	; (8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d032      	beq.n	8002cca <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a8e      	ldr	r2, [pc, #568]	; (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d02a      	beq.n	8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a8d      	ldr	r2, [pc, #564]	; (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a8b      	ldr	r2, [pc, #556]	; (8002eac <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01a      	beq.n	8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a8a      	ldr	r2, [pc, #552]	; (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d012      	beq.n	8002cb2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a88      	ldr	r2, [pc, #544]	; (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00a      	beq.n	8002cac <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a87      	ldr	r2, [pc, #540]	; (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d102      	bne.n	8002ca6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002ca0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ca4:	e01e      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ca6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002caa:	e01b      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cb0:	e018      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cb2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cb6:	e015      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cbc:	e012      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cc2:	e00f      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cc8:	e00c      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cce:	e009      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cd4:	e006      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cd6:	2320      	movs	r3, #32
 8002cd8:	e004      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cda:	2320      	movs	r3, #32
 8002cdc:	e002      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002cde:	2320      	movs	r3, #32
 8002ce0:	e000      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	4a75      	ldr	r2, [pc, #468]	; (8002ebc <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002ce6:	60d3      	str	r3, [r2, #12]
 8002ce8:	e150      	b.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b73      	ldr	r3, [pc, #460]	; (8002ec0 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d960      	bls.n	8002db8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a64      	ldr	r2, [pc, #400]	; (8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d057      	beq.n	8002db0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a62      	ldr	r2, [pc, #392]	; (8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d050      	beq.n	8002dac <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a61      	ldr	r2, [pc, #388]	; (8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d049      	beq.n	8002da8 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a5f      	ldr	r2, [pc, #380]	; (8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d042      	beq.n	8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a5e      	ldr	r2, [pc, #376]	; (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d03a      	beq.n	8002d9e <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a5c      	ldr	r2, [pc, #368]	; (8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d032      	beq.n	8002d98 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a5b      	ldr	r2, [pc, #364]	; (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d02a      	beq.n	8002d92 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a59      	ldr	r2, [pc, #356]	; (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d022      	beq.n	8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a58      	ldr	r2, [pc, #352]	; (8002eac <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d01a      	beq.n	8002d86 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a56      	ldr	r2, [pc, #344]	; (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d012      	beq.n	8002d80 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a55      	ldr	r2, [pc, #340]	; (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00a      	beq.n	8002d7a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a53      	ldr	r2, [pc, #332]	; (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d102      	bne.n	8002d74 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002d6e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d72:	e01e      	b.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d78:	e01b      	b.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d7a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d7e:	e018      	b.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d84:	e015      	b.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d8a:	e012      	b.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d90:	e00f      	b.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d96:	e00c      	b.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d9c:	e009      	b.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002d9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002da2:	e006      	b.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002da4:	2320      	movs	r3, #32
 8002da6:	e004      	b.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002da8:	2320      	movs	r3, #32
 8002daa:	e002      	b.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002dac:	2320      	movs	r3, #32
 8002dae:	e000      	b.n	8002db2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002db0:	2320      	movs	r3, #32
 8002db2:	4a42      	ldr	r2, [pc, #264]	; (8002ebc <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002db4:	6093      	str	r3, [r2, #8]
 8002db6:	e0e9      	b.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b41      	ldr	r3, [pc, #260]	; (8002ec4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	f240 8083 	bls.w	8002ecc <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a30      	ldr	r2, [pc, #192]	; (8002e8c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d057      	beq.n	8002e80 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a2e      	ldr	r2, [pc, #184]	; (8002e90 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d050      	beq.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2d      	ldr	r2, [pc, #180]	; (8002e94 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d049      	beq.n	8002e78 <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a2b      	ldr	r2, [pc, #172]	; (8002e98 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d042      	beq.n	8002e74 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a2a      	ldr	r2, [pc, #168]	; (8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d03a      	beq.n	8002e6e <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a28      	ldr	r2, [pc, #160]	; (8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d032      	beq.n	8002e68 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d02a      	beq.n	8002e62 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a25      	ldr	r2, [pc, #148]	; (8002ea8 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d022      	beq.n	8002e5c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a24      	ldr	r2, [pc, #144]	; (8002eac <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d01a      	beq.n	8002e56 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a22      	ldr	r2, [pc, #136]	; (8002eb0 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d012      	beq.n	8002e50 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a21      	ldr	r2, [pc, #132]	; (8002eb4 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00a      	beq.n	8002e4a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1f      	ldr	r2, [pc, #124]	; (8002eb8 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d102      	bne.n	8002e44 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002e3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e42:	e01e      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e48:	e01b      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002e4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e4e:	e018      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002e50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e54:	e015      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002e56:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e5a:	e012      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002e5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e60:	e00f      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002e62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e66:	e00c      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002e68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e6c:	e009      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002e6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e72:	e006      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002e74:	2320      	movs	r3, #32
 8002e76:	e004      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002e78:	2320      	movs	r3, #32
 8002e7a:	e002      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	e000      	b.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002e80:	2320      	movs	r3, #32
 8002e82:	4a11      	ldr	r2, [pc, #68]	; (8002ec8 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8002e84:	60d3      	str	r3, [r2, #12]
 8002e86:	e081      	b.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002e88:	40026458 	.word	0x40026458
 8002e8c:	40026010 	.word	0x40026010
 8002e90:	40026410 	.word	0x40026410
 8002e94:	40026070 	.word	0x40026070
 8002e98:	40026470 	.word	0x40026470
 8002e9c:	40026028 	.word	0x40026028
 8002ea0:	40026428 	.word	0x40026428
 8002ea4:	40026088 	.word	0x40026088
 8002ea8:	40026488 	.word	0x40026488
 8002eac:	40026040 	.word	0x40026040
 8002eb0:	40026440 	.word	0x40026440
 8002eb4:	400260a0 	.word	0x400260a0
 8002eb8:	400264a0 	.word	0x400264a0
 8002ebc:	40026400 	.word	0x40026400
 8002ec0:	400260b8 	.word	0x400260b8
 8002ec4:	40026058 	.word	0x40026058
 8002ec8:	40026000 	.word	0x40026000
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a96      	ldr	r2, [pc, #600]	; (800312c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d057      	beq.n	8002f86 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a95      	ldr	r2, [pc, #596]	; (8003130 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d050      	beq.n	8002f82 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a93      	ldr	r2, [pc, #588]	; (8003134 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d049      	beq.n	8002f7e <HAL_DMAEx_MultiBufferStart_IT+0x406>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a92      	ldr	r2, [pc, #584]	; (8003138 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d042      	beq.n	8002f7a <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a90      	ldr	r2, [pc, #576]	; (800313c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d03a      	beq.n	8002f74 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a8f      	ldr	r2, [pc, #572]	; (8003140 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d032      	beq.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a8d      	ldr	r2, [pc, #564]	; (8003144 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d02a      	beq.n	8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a8c      	ldr	r2, [pc, #560]	; (8003148 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d022      	beq.n	8002f62 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a8a      	ldr	r2, [pc, #552]	; (800314c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01a      	beq.n	8002f5c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a89      	ldr	r2, [pc, #548]	; (8003150 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d012      	beq.n	8002f56 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a87      	ldr	r2, [pc, #540]	; (8003154 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00a      	beq.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a86      	ldr	r2, [pc, #536]	; (8003158 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d102      	bne.n	8002f4a <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8002f44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f48:	e01e      	b.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002f4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f4e:	e01b      	b.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002f50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f54:	e018      	b.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002f56:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f5a:	e015      	b.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002f5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f60:	e012      	b.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f66:	e00f      	b.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002f68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f6c:	e00c      	b.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002f6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f72:	e009      	b.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002f74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f78:	e006      	b.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002f7a:	2320      	movs	r3, #32
 8002f7c:	e004      	b.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002f7e:	2320      	movs	r3, #32
 8002f80:	e002      	b.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002f82:	2320      	movs	r3, #32
 8002f84:	e000      	b.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002f86:	2320      	movs	r3, #32
 8002f88:	4a74      	ldr	r2, [pc, #464]	; (800315c <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8002f8a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	4b73      	ldr	r3, [pc, #460]	; (8003160 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d960      	bls.n	800305a <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a63      	ldr	r2, [pc, #396]	; (800312c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d057      	beq.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a62      	ldr	r2, [pc, #392]	; (8003130 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d050      	beq.n	800304e <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a60      	ldr	r2, [pc, #384]	; (8003134 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d049      	beq.n	800304a <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a5f      	ldr	r2, [pc, #380]	; (8003138 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d042      	beq.n	8003046 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a5d      	ldr	r2, [pc, #372]	; (800313c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d03a      	beq.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a5c      	ldr	r2, [pc, #368]	; (8003140 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d032      	beq.n	800303a <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a5a      	ldr	r2, [pc, #360]	; (8003144 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d02a      	beq.n	8003034 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a59      	ldr	r2, [pc, #356]	; (8003148 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d022      	beq.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a57      	ldr	r2, [pc, #348]	; (800314c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01a      	beq.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a56      	ldr	r2, [pc, #344]	; (8003150 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d012      	beq.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a54      	ldr	r2, [pc, #336]	; (8003154 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00a      	beq.n	800301c <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a53      	ldr	r2, [pc, #332]	; (8003158 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d102      	bne.n	8003016 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8003010:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003014:	e01e      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003016:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800301a:	e01b      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800301c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003020:	e018      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003022:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003026:	e015      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003028:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800302c:	e012      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800302e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003032:	e00f      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003038:	e00c      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800303a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800303e:	e009      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003044:	e006      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003046:	2310      	movs	r3, #16
 8003048:	e004      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800304a:	2310      	movs	r3, #16
 800304c:	e002      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 800304e:	2310      	movs	r3, #16
 8003050:	e000      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8003052:	2310      	movs	r3, #16
 8003054:	4a43      	ldr	r2, [pc, #268]	; (8003164 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8003056:	60d3      	str	r3, [r2, #12]
 8003058:	e14f      	b.n	80032fa <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	4b41      	ldr	r3, [pc, #260]	; (8003168 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 8003062:	429a      	cmp	r2, r3
 8003064:	f240 8082 	bls.w	800316c <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2f      	ldr	r2, [pc, #188]	; (800312c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d057      	beq.n	8003122 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2e      	ldr	r2, [pc, #184]	; (8003130 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d050      	beq.n	800311e <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2c      	ldr	r2, [pc, #176]	; (8003134 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d049      	beq.n	800311a <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2b      	ldr	r2, [pc, #172]	; (8003138 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d042      	beq.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a29      	ldr	r2, [pc, #164]	; (800313c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d03a      	beq.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a28      	ldr	r2, [pc, #160]	; (8003140 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d032      	beq.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0x592>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a26      	ldr	r2, [pc, #152]	; (8003144 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d02a      	beq.n	8003104 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a25      	ldr	r2, [pc, #148]	; (8003148 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d022      	beq.n	80030fe <HAL_DMAEx_MultiBufferStart_IT+0x586>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a23      	ldr	r2, [pc, #140]	; (800314c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d01a      	beq.n	80030f8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a22      	ldr	r2, [pc, #136]	; (8003150 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d012      	beq.n	80030f2 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a20      	ldr	r2, [pc, #128]	; (8003154 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00a      	beq.n	80030ec <HAL_DMAEx_MultiBufferStart_IT+0x574>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1f      	ldr	r2, [pc, #124]	; (8003158 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d102      	bne.n	80030e6 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 80030e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030e4:	e01e      	b.n	8003124 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80030e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030ea:	e01b      	b.n	8003124 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80030ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030f0:	e018      	b.n	8003124 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80030f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030f6:	e015      	b.n	8003124 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80030f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030fc:	e012      	b.n	8003124 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 80030fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003102:	e00f      	b.n	8003124 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003108:	e00c      	b.n	8003124 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800310a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800310e:	e009      	b.n	8003124 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003114:	e006      	b.n	8003124 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003116:	2310      	movs	r3, #16
 8003118:	e004      	b.n	8003124 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800311a:	2310      	movs	r3, #16
 800311c:	e002      	b.n	8003124 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800311e:	2310      	movs	r3, #16
 8003120:	e000      	b.n	8003124 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003122:	2310      	movs	r3, #16
 8003124:	4a0f      	ldr	r2, [pc, #60]	; (8003164 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8003126:	6093      	str	r3, [r2, #8]
 8003128:	e0e7      	b.n	80032fa <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800312a:	bf00      	nop
 800312c:	40026010 	.word	0x40026010
 8003130:	40026410 	.word	0x40026410
 8003134:	40026070 	.word	0x40026070
 8003138:	40026470 	.word	0x40026470
 800313c:	40026028 	.word	0x40026028
 8003140:	40026428 	.word	0x40026428
 8003144:	40026088 	.word	0x40026088
 8003148:	40026488 	.word	0x40026488
 800314c:	40026040 	.word	0x40026040
 8003150:	40026440 	.word	0x40026440
 8003154:	400260a0 	.word	0x400260a0
 8003158:	400264a0 	.word	0x400264a0
 800315c:	40026000 	.word	0x40026000
 8003160:	40026458 	.word	0x40026458
 8003164:	40026400 	.word	0x40026400
 8003168:	400260b8 	.word	0x400260b8
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	4b96      	ldr	r3, [pc, #600]	; (80033cc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003174:	429a      	cmp	r2, r3
 8003176:	d960      	bls.n	800323a <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a94      	ldr	r2, [pc, #592]	; (80033d0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d057      	beq.n	8003232 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a93      	ldr	r2, [pc, #588]	; (80033d4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d050      	beq.n	800322e <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a91      	ldr	r2, [pc, #580]	; (80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d049      	beq.n	800322a <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a90      	ldr	r2, [pc, #576]	; (80033dc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d042      	beq.n	8003226 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a8e      	ldr	r2, [pc, #568]	; (80033e0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d03a      	beq.n	8003220 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a8d      	ldr	r2, [pc, #564]	; (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d032      	beq.n	800321a <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a8b      	ldr	r2, [pc, #556]	; (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d02a      	beq.n	8003214 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a8a      	ldr	r2, [pc, #552]	; (80033ec <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d022      	beq.n	800320e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a88      	ldr	r2, [pc, #544]	; (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01a      	beq.n	8003208 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a87      	ldr	r2, [pc, #540]	; (80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d012      	beq.n	8003202 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a85      	ldr	r2, [pc, #532]	; (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00a      	beq.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0x684>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a84      	ldr	r2, [pc, #528]	; (80033fc <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d102      	bne.n	80031f6 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 80031f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031f4:	e01e      	b.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80031f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80031fa:	e01b      	b.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80031fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003200:	e018      	b.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003202:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003206:	e015      	b.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003208:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800320c:	e012      	b.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800320e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003212:	e00f      	b.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003218:	e00c      	b.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800321a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800321e:	e009      	b.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003224:	e006      	b.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003226:	2310      	movs	r3, #16
 8003228:	e004      	b.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800322a:	2310      	movs	r3, #16
 800322c:	e002      	b.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800322e:	2310      	movs	r3, #16
 8003230:	e000      	b.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003232:	2310      	movs	r3, #16
 8003234:	4a72      	ldr	r2, [pc, #456]	; (8003400 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 8003236:	60d3      	str	r3, [r2, #12]
 8003238:	e05f      	b.n	80032fa <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a64      	ldr	r2, [pc, #400]	; (80033d0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d057      	beq.n	80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a62      	ldr	r2, [pc, #392]	; (80033d4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d050      	beq.n	80032f0 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a61      	ldr	r2, [pc, #388]	; (80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d049      	beq.n	80032ec <HAL_DMAEx_MultiBufferStart_IT+0x774>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a5f      	ldr	r2, [pc, #380]	; (80033dc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d042      	beq.n	80032e8 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a5e      	ldr	r2, [pc, #376]	; (80033e0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d03a      	beq.n	80032e2 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a5c      	ldr	r2, [pc, #368]	; (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d032      	beq.n	80032dc <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a5b      	ldr	r2, [pc, #364]	; (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d02a      	beq.n	80032d6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a59      	ldr	r2, [pc, #356]	; (80033ec <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d022      	beq.n	80032d0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a58      	ldr	r2, [pc, #352]	; (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d01a      	beq.n	80032ca <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a56      	ldr	r2, [pc, #344]	; (80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d012      	beq.n	80032c4 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a55      	ldr	r2, [pc, #340]	; (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00a      	beq.n	80032be <HAL_DMAEx_MultiBufferStart_IT+0x746>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a53      	ldr	r2, [pc, #332]	; (80033fc <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d102      	bne.n	80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 80032b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032b6:	e01e      	b.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80032b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80032bc:	e01b      	b.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80032be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032c2:	e018      	b.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80032c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032c8:	e015      	b.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80032ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032ce:	e012      	b.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80032d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032d4:	e00f      	b.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80032d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032da:	e00c      	b.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80032dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032e0:	e009      	b.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80032e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032e6:	e006      	b.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80032e8:	2310      	movs	r3, #16
 80032ea:	e004      	b.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80032ec:	2310      	movs	r3, #16
 80032ee:	e002      	b.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80032f0:	2310      	movs	r3, #16
 80032f2:	e000      	b.n	80032f6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80032f4:	2310      	movs	r3, #16
 80032f6:	4a42      	ldr	r2, [pc, #264]	; (8003400 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 80032f8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	4b40      	ldr	r3, [pc, #256]	; (8003404 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8003302:	429a      	cmp	r2, r3
 8003304:	f240 8082 	bls.w	800340c <HAL_DMAEx_MultiBufferStart_IT+0x894>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a30      	ldr	r2, [pc, #192]	; (80033d0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d057      	beq.n	80033c2 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a2f      	ldr	r2, [pc, #188]	; (80033d4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d050      	beq.n	80033be <HAL_DMAEx_MultiBufferStart_IT+0x846>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a2d      	ldr	r2, [pc, #180]	; (80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d049      	beq.n	80033ba <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2c      	ldr	r2, [pc, #176]	; (80033dc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d042      	beq.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2a      	ldr	r2, [pc, #168]	; (80033e0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d03a      	beq.n	80033b0 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a29      	ldr	r2, [pc, #164]	; (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d032      	beq.n	80033aa <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a27      	ldr	r2, [pc, #156]	; (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d02a      	beq.n	80033a4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a26      	ldr	r2, [pc, #152]	; (80033ec <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d022      	beq.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0x826>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a24      	ldr	r2, [pc, #144]	; (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d01a      	beq.n	8003398 <HAL_DMAEx_MultiBufferStart_IT+0x820>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a23      	ldr	r2, [pc, #140]	; (80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d012      	beq.n	8003392 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a21      	ldr	r2, [pc, #132]	; (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00a      	beq.n	800338c <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a20      	ldr	r2, [pc, #128]	; (80033fc <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d102      	bne.n	8003386 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8003380:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003384:	e01e      	b.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800338a:	e01b      	b.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800338c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003390:	e018      	b.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003392:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003396:	e015      	b.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 8003398:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800339c:	e012      	b.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800339e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a2:	e00f      	b.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80033a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a8:	e00c      	b.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80033aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033ae:	e009      	b.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80033b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033b4:	e006      	b.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80033b6:	2308      	movs	r3, #8
 80033b8:	e004      	b.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80033ba:	2308      	movs	r3, #8
 80033bc:	e002      	b.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80033be:	2308      	movs	r3, #8
 80033c0:	e000      	b.n	80033c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80033c2:	2308      	movs	r3, #8
 80033c4:	4a10      	ldr	r2, [pc, #64]	; (8003408 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 80033c6:	60d3      	str	r3, [r2, #12]
 80033c8:	e16f      	b.n	80036aa <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80033ca:	bf00      	nop
 80033cc:	40026058 	.word	0x40026058
 80033d0:	40026010 	.word	0x40026010
 80033d4:	40026410 	.word	0x40026410
 80033d8:	40026070 	.word	0x40026070
 80033dc:	40026470 	.word	0x40026470
 80033e0:	40026028 	.word	0x40026028
 80033e4:	40026428 	.word	0x40026428
 80033e8:	40026088 	.word	0x40026088
 80033ec:	40026488 	.word	0x40026488
 80033f0:	40026040 	.word	0x40026040
 80033f4:	40026440 	.word	0x40026440
 80033f8:	400260a0 	.word	0x400260a0
 80033fc:	400264a0 	.word	0x400264a0
 8003400:	40026000 	.word	0x40026000
 8003404:	40026458 	.word	0x40026458
 8003408:	40026400 	.word	0x40026400
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	4b94      	ldr	r3, [pc, #592]	; (8003664 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003414:	429a      	cmp	r2, r3
 8003416:	d960      	bls.n	80034da <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a92      	ldr	r2, [pc, #584]	; (8003668 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d057      	beq.n	80034d2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a91      	ldr	r2, [pc, #580]	; (800366c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d050      	beq.n	80034ce <HAL_DMAEx_MultiBufferStart_IT+0x956>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a8f      	ldr	r2, [pc, #572]	; (8003670 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d049      	beq.n	80034ca <HAL_DMAEx_MultiBufferStart_IT+0x952>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a8e      	ldr	r2, [pc, #568]	; (8003674 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d042      	beq.n	80034c6 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a8c      	ldr	r2, [pc, #560]	; (8003678 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d03a      	beq.n	80034c0 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a8b      	ldr	r2, [pc, #556]	; (800367c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d032      	beq.n	80034ba <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a89      	ldr	r2, [pc, #548]	; (8003680 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d02a      	beq.n	80034b4 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a88      	ldr	r2, [pc, #544]	; (8003684 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d022      	beq.n	80034ae <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a86      	ldr	r2, [pc, #536]	; (8003688 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d01a      	beq.n	80034a8 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a85      	ldr	r2, [pc, #532]	; (800368c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d012      	beq.n	80034a2 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a83      	ldr	r2, [pc, #524]	; (8003690 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00a      	beq.n	800349c <HAL_DMAEx_MultiBufferStart_IT+0x924>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a82      	ldr	r2, [pc, #520]	; (8003694 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d102      	bne.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 8003490:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003494:	e01e      	b.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8003496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800349a:	e01b      	b.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800349c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034a0:	e018      	b.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80034a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034a6:	e015      	b.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80034a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034ac:	e012      	b.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80034ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034b2:	e00f      	b.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80034b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034b8:	e00c      	b.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80034ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034be:	e009      	b.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80034c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034c4:	e006      	b.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80034c6:	2308      	movs	r3, #8
 80034c8:	e004      	b.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80034ca:	2308      	movs	r3, #8
 80034cc:	e002      	b.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80034ce:	2308      	movs	r3, #8
 80034d0:	e000      	b.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80034d2:	2308      	movs	r3, #8
 80034d4:	4a70      	ldr	r2, [pc, #448]	; (8003698 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 80034d6:	6093      	str	r3, [r2, #8]
 80034d8:	e0e7      	b.n	80036aa <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	4b6e      	ldr	r3, [pc, #440]	; (800369c <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d960      	bls.n	80035a8 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a5f      	ldr	r2, [pc, #380]	; (8003668 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d057      	beq.n	80035a0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a5d      	ldr	r2, [pc, #372]	; (800366c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d050      	beq.n	800359c <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a5c      	ldr	r2, [pc, #368]	; (8003670 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d049      	beq.n	8003598 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a5a      	ldr	r2, [pc, #360]	; (8003674 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d042      	beq.n	8003594 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a59      	ldr	r2, [pc, #356]	; (8003678 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d03a      	beq.n	800358e <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a57      	ldr	r2, [pc, #348]	; (800367c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d032      	beq.n	8003588 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a56      	ldr	r2, [pc, #344]	; (8003680 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d02a      	beq.n	8003582 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a54      	ldr	r2, [pc, #336]	; (8003684 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d022      	beq.n	800357c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a53      	ldr	r2, [pc, #332]	; (8003688 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d01a      	beq.n	8003576 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a51      	ldr	r2, [pc, #324]	; (800368c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d012      	beq.n	8003570 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a50      	ldr	r2, [pc, #320]	; (8003690 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00a      	beq.n	800356a <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a4e      	ldr	r2, [pc, #312]	; (8003694 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d102      	bne.n	8003564 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 800355e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003562:	e01e      	b.n	80035a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003564:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003568:	e01b      	b.n	80035a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800356a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800356e:	e018      	b.n	80035a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003570:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003574:	e015      	b.n	80035a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003576:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800357a:	e012      	b.n	80035a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800357c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003580:	e00f      	b.n	80035a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003582:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003586:	e00c      	b.n	80035a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800358c:	e009      	b.n	80035a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800358e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003592:	e006      	b.n	80035a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003594:	2308      	movs	r3, #8
 8003596:	e004      	b.n	80035a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003598:	2308      	movs	r3, #8
 800359a:	e002      	b.n	80035a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800359c:	2308      	movs	r3, #8
 800359e:	e000      	b.n	80035a2 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80035a0:	2308      	movs	r3, #8
 80035a2:	4a3f      	ldr	r2, [pc, #252]	; (80036a0 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 80035a4:	60d3      	str	r3, [r2, #12]
 80035a6:	e080      	b.n	80036aa <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a2e      	ldr	r2, [pc, #184]	; (8003668 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d078      	beq.n	80036a4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a2d      	ldr	r2, [pc, #180]	; (800366c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d050      	beq.n	800365e <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a2b      	ldr	r2, [pc, #172]	; (8003670 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d049      	beq.n	800365a <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a2a      	ldr	r2, [pc, #168]	; (8003674 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d042      	beq.n	8003656 <HAL_DMAEx_MultiBufferStart_IT+0xade>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a28      	ldr	r2, [pc, #160]	; (8003678 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d03a      	beq.n	8003650 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a27      	ldr	r2, [pc, #156]	; (800367c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d032      	beq.n	800364a <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a25      	ldr	r2, [pc, #148]	; (8003680 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d02a      	beq.n	8003644 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a24      	ldr	r2, [pc, #144]	; (8003684 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d022      	beq.n	800363e <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a22      	ldr	r2, [pc, #136]	; (8003688 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01a      	beq.n	8003638 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a21      	ldr	r2, [pc, #132]	; (800368c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d012      	beq.n	8003632 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00a      	beq.n	800362c <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1e      	ldr	r2, [pc, #120]	; (8003694 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d102      	bne.n	8003626 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8003620:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003624:	e03f      	b.n	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800362a:	e03c      	b.n	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800362c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003630:	e039      	b.n	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003632:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003636:	e036      	b.n	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003638:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800363c:	e033      	b.n	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800363e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003642:	e030      	b.n	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003648:	e02d      	b.n	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800364a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800364e:	e02a      	b.n	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003654:	e027      	b.n	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003656:	2308      	movs	r3, #8
 8003658:	e025      	b.n	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800365a:	2308      	movs	r3, #8
 800365c:	e023      	b.n	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800365e:	2308      	movs	r3, #8
 8003660:	e021      	b.n	80036a6 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003662:	bf00      	nop
 8003664:	400260b8 	.word	0x400260b8
 8003668:	40026010 	.word	0x40026010
 800366c:	40026410 	.word	0x40026410
 8003670:	40026070 	.word	0x40026070
 8003674:	40026470 	.word	0x40026470
 8003678:	40026028 	.word	0x40026028
 800367c:	40026428 	.word	0x40026428
 8003680:	40026088 	.word	0x40026088
 8003684:	40026488 	.word	0x40026488
 8003688:	40026040 	.word	0x40026040
 800368c:	40026440 	.word	0x40026440
 8003690:	400260a0 	.word	0x400260a0
 8003694:	400264a0 	.word	0x400264a0
 8003698:	40026400 	.word	0x40026400
 800369c:	40026058 	.word	0x40026058
 80036a0:	40026000 	.word	0x40026000
 80036a4:	2308      	movs	r3, #8
 80036a6:	4a9a      	ldr	r2, [pc, #616]	; (8003910 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80036a8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	4b98      	ldr	r3, [pc, #608]	; (8003914 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d960      	bls.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a97      	ldr	r2, [pc, #604]	; (8003918 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d057      	beq.n	8003770 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a95      	ldr	r2, [pc, #596]	; (800391c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d050      	beq.n	800376c <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a94      	ldr	r2, [pc, #592]	; (8003920 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d049      	beq.n	8003768 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a92      	ldr	r2, [pc, #584]	; (8003924 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d042      	beq.n	8003764 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a91      	ldr	r2, [pc, #580]	; (8003928 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d03a      	beq.n	800375e <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a8f      	ldr	r2, [pc, #572]	; (800392c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d032      	beq.n	8003758 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a8e      	ldr	r2, [pc, #568]	; (8003930 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d02a      	beq.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a8c      	ldr	r2, [pc, #560]	; (8003934 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d022      	beq.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a8b      	ldr	r2, [pc, #556]	; (8003938 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d01a      	beq.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a89      	ldr	r2, [pc, #548]	; (800393c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d012      	beq.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a88      	ldr	r2, [pc, #544]	; (8003940 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00a      	beq.n	800373a <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a86      	ldr	r2, [pc, #536]	; (8003944 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d102      	bne.n	8003734 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 800372e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003732:	e01e      	b.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003738:	e01b      	b.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800373a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800373e:	e018      	b.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003740:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003744:	e015      	b.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003746:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800374a:	e012      	b.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800374c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003750:	e00f      	b.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003756:	e00c      	b.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800375c:	e009      	b.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800375e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003762:	e006      	b.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003764:	2304      	movs	r3, #4
 8003766:	e004      	b.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003768:	2304      	movs	r3, #4
 800376a:	e002      	b.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800376c:	2304      	movs	r3, #4
 800376e:	e000      	b.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003770:	2304      	movs	r3, #4
 8003772:	4a75      	ldr	r2, [pc, #468]	; (8003948 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003774:	60d3      	str	r3, [r2, #12]
 8003776:	e151      	b.n	8003a1c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	4b73      	ldr	r3, [pc, #460]	; (800394c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8003780:	429a      	cmp	r2, r3
 8003782:	d960      	bls.n	8003846 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a63      	ldr	r2, [pc, #396]	; (8003918 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d057      	beq.n	800383e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a62      	ldr	r2, [pc, #392]	; (800391c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d050      	beq.n	800383a <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a60      	ldr	r2, [pc, #384]	; (8003920 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d049      	beq.n	8003836 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a5f      	ldr	r2, [pc, #380]	; (8003924 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d042      	beq.n	8003832 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a5d      	ldr	r2, [pc, #372]	; (8003928 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d03a      	beq.n	800382c <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a5c      	ldr	r2, [pc, #368]	; (800392c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d032      	beq.n	8003826 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a5a      	ldr	r2, [pc, #360]	; (8003930 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d02a      	beq.n	8003820 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a59      	ldr	r2, [pc, #356]	; (8003934 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d022      	beq.n	800381a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a57      	ldr	r2, [pc, #348]	; (8003938 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01a      	beq.n	8003814 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a56      	ldr	r2, [pc, #344]	; (800393c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d012      	beq.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a54      	ldr	r2, [pc, #336]	; (8003940 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00a      	beq.n	8003808 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a53      	ldr	r2, [pc, #332]	; (8003944 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d102      	bne.n	8003802 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 80037fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003800:	e01e      	b.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003802:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003806:	e01b      	b.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003808:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800380c:	e018      	b.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800380e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003812:	e015      	b.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003814:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003818:	e012      	b.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800381a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800381e:	e00f      	b.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003824:	e00c      	b.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800382a:	e009      	b.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800382c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003830:	e006      	b.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003832:	2304      	movs	r3, #4
 8003834:	e004      	b.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003836:	2304      	movs	r3, #4
 8003838:	e002      	b.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800383a:	2304      	movs	r3, #4
 800383c:	e000      	b.n	8003840 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800383e:	2304      	movs	r3, #4
 8003840:	4a41      	ldr	r2, [pc, #260]	; (8003948 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003842:	6093      	str	r3, [r2, #8]
 8003844:	e0ea      	b.n	8003a1c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	4b40      	ldr	r3, [pc, #256]	; (8003950 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 800384e:	429a      	cmp	r2, r3
 8003850:	f240 8084 	bls.w	800395c <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a2f      	ldr	r2, [pc, #188]	; (8003918 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d07a      	beq.n	8003954 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a2e      	ldr	r2, [pc, #184]	; (800391c <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d050      	beq.n	800390a <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a2c      	ldr	r2, [pc, #176]	; (8003920 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d049      	beq.n	8003906 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2b      	ldr	r2, [pc, #172]	; (8003924 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d042      	beq.n	8003902 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a29      	ldr	r2, [pc, #164]	; (8003928 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d03a      	beq.n	80038fc <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a28      	ldr	r2, [pc, #160]	; (800392c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d032      	beq.n	80038f6 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a26      	ldr	r2, [pc, #152]	; (8003930 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d02a      	beq.n	80038f0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a25      	ldr	r2, [pc, #148]	; (8003934 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d022      	beq.n	80038ea <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a23      	ldr	r2, [pc, #140]	; (8003938 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01a      	beq.n	80038e4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a22      	ldr	r2, [pc, #136]	; (800393c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d012      	beq.n	80038de <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a20      	ldr	r2, [pc, #128]	; (8003940 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00a      	beq.n	80038d8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1f      	ldr	r2, [pc, #124]	; (8003944 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d102      	bne.n	80038d2 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 80038cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038d0:	e041      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80038d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038d6:	e03e      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80038d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038dc:	e03b      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80038de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038e2:	e038      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80038e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038e8:	e035      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80038ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ee:	e032      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80038f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038f4:	e02f      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80038f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038fa:	e02c      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80038fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003900:	e029      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003902:	2304      	movs	r3, #4
 8003904:	e027      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003906:	2304      	movs	r3, #4
 8003908:	e025      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800390a:	2304      	movs	r3, #4
 800390c:	e023      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800390e:	bf00      	nop
 8003910:	40026000 	.word	0x40026000
 8003914:	40026458 	.word	0x40026458
 8003918:	40026010 	.word	0x40026010
 800391c:	40026410 	.word	0x40026410
 8003920:	40026070 	.word	0x40026070
 8003924:	40026470 	.word	0x40026470
 8003928:	40026028 	.word	0x40026028
 800392c:	40026428 	.word	0x40026428
 8003930:	40026088 	.word	0x40026088
 8003934:	40026488 	.word	0x40026488
 8003938:	40026040 	.word	0x40026040
 800393c:	40026440 	.word	0x40026440
 8003940:	400260a0 	.word	0x400260a0
 8003944:	400264a0 	.word	0x400264a0
 8003948:	40026400 	.word	0x40026400
 800394c:	400260b8 	.word	0x400260b8
 8003950:	40026058 	.word	0x40026058
 8003954:	2304      	movs	r3, #4
 8003956:	4a94      	ldr	r2, [pc, #592]	; (8003ba8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003958:	60d3      	str	r3, [r2, #12]
 800395a:	e05f      	b.n	8003a1c <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a92      	ldr	r2, [pc, #584]	; (8003bac <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d057      	beq.n	8003a16 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a91      	ldr	r2, [pc, #580]	; (8003bb0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d050      	beq.n	8003a12 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a8f      	ldr	r2, [pc, #572]	; (8003bb4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d049      	beq.n	8003a0e <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a8e      	ldr	r2, [pc, #568]	; (8003bb8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d042      	beq.n	8003a0a <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a8c      	ldr	r2, [pc, #560]	; (8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d03a      	beq.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a8b      	ldr	r2, [pc, #556]	; (8003bc0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d032      	beq.n	80039fe <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a89      	ldr	r2, [pc, #548]	; (8003bc4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d02a      	beq.n	80039f8 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a88      	ldr	r2, [pc, #544]	; (8003bc8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d022      	beq.n	80039f2 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a86      	ldr	r2, [pc, #536]	; (8003bcc <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01a      	beq.n	80039ec <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a85      	ldr	r2, [pc, #532]	; (8003bd0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d012      	beq.n	80039e6 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a83      	ldr	r2, [pc, #524]	; (8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00a      	beq.n	80039e0 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a82      	ldr	r2, [pc, #520]	; (8003bd8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d102      	bne.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 80039d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039d8:	e01e      	b.n	8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80039da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039de:	e01b      	b.n	8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80039e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039e4:	e018      	b.n	8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80039e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039ea:	e015      	b.n	8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80039ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039f0:	e012      	b.n	8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80039f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039f6:	e00f      	b.n	8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80039f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039fc:	e00c      	b.n	8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80039fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a02:	e009      	b.n	8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a08:	e006      	b.n	8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	e004      	b.n	8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003a0e:	2304      	movs	r3, #4
 8003a10:	e002      	b.n	8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003a12:	2304      	movs	r3, #4
 8003a14:	e000      	b.n	8003a18 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003a16:	2304      	movs	r3, #4
 8003a18:	4a63      	ldr	r2, [pc, #396]	; (8003ba8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003a1a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	4b6e      	ldr	r3, [pc, #440]	; (8003bdc <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d95c      	bls.n	8003ae2 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a5f      	ldr	r2, [pc, #380]	; (8003bac <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d053      	beq.n	8003ada <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a5e      	ldr	r2, [pc, #376]	; (8003bb0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d04c      	beq.n	8003ad6 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a5c      	ldr	r2, [pc, #368]	; (8003bb4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d045      	beq.n	8003ad2 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a5b      	ldr	r2, [pc, #364]	; (8003bb8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d03e      	beq.n	8003ace <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a59      	ldr	r2, [pc, #356]	; (8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d037      	beq.n	8003aca <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a58      	ldr	r2, [pc, #352]	; (8003bc0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d030      	beq.n	8003ac6 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a56      	ldr	r2, [pc, #344]	; (8003bc4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d029      	beq.n	8003ac2 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a55      	ldr	r2, [pc, #340]	; (8003bc8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d022      	beq.n	8003abe <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a53      	ldr	r2, [pc, #332]	; (8003bcc <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01a      	beq.n	8003ab8 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a52      	ldr	r2, [pc, #328]	; (8003bd0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d012      	beq.n	8003ab2 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a50      	ldr	r2, [pc, #320]	; (8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00a      	beq.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a4f      	ldr	r2, [pc, #316]	; (8003bd8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d102      	bne.n	8003aa6 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 8003aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003aa4:	e01a      	b.n	8003adc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003aa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003aaa:	e017      	b.n	8003adc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ab0:	e014      	b.n	8003adc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ab6:	e011      	b.n	8003adc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003abc:	e00e      	b.n	8003adc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003abe:	2340      	movs	r3, #64	; 0x40
 8003ac0:	e00c      	b.n	8003adc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ac2:	2340      	movs	r3, #64	; 0x40
 8003ac4:	e00a      	b.n	8003adc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ac6:	2340      	movs	r3, #64	; 0x40
 8003ac8:	e008      	b.n	8003adc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003aca:	2340      	movs	r3, #64	; 0x40
 8003acc:	e006      	b.n	8003adc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e004      	b.n	8003adc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e002      	b.n	8003adc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 8003ada:	2301      	movs	r3, #1
 8003adc:	4a40      	ldr	r2, [pc, #256]	; (8003be0 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003ade:	60d3      	str	r3, [r2, #12]
 8003ae0:	e141      	b.n	8003d66 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	4b3e      	ldr	r3, [pc, #248]	; (8003be4 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d97c      	bls.n	8003be8 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a2e      	ldr	r2, [pc, #184]	; (8003bac <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d053      	beq.n	8003ba0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2c      	ldr	r2, [pc, #176]	; (8003bb0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d04c      	beq.n	8003b9c <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a2b      	ldr	r2, [pc, #172]	; (8003bb4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d045      	beq.n	8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a29      	ldr	r2, [pc, #164]	; (8003bb8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d03e      	beq.n	8003b94 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a28      	ldr	r2, [pc, #160]	; (8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d037      	beq.n	8003b90 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a26      	ldr	r2, [pc, #152]	; (8003bc0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d030      	beq.n	8003b8c <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a25      	ldr	r2, [pc, #148]	; (8003bc4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d029      	beq.n	8003b88 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a23      	ldr	r2, [pc, #140]	; (8003bc8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d022      	beq.n	8003b84 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a22      	ldr	r2, [pc, #136]	; (8003bcc <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d01a      	beq.n	8003b7e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a20      	ldr	r2, [pc, #128]	; (8003bd0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d012      	beq.n	8003b78 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1f      	ldr	r2, [pc, #124]	; (8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00a      	beq.n	8003b72 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1d      	ldr	r2, [pc, #116]	; (8003bd8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d102      	bne.n	8003b6c <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8003b66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b6a:	e01a      	b.n	8003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b70:	e017      	b.n	8003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b76:	e014      	b.n	8003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b7c:	e011      	b.n	8003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b82:	e00e      	b.n	8003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b84:	2340      	movs	r3, #64	; 0x40
 8003b86:	e00c      	b.n	8003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b88:	2340      	movs	r3, #64	; 0x40
 8003b8a:	e00a      	b.n	8003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b8c:	2340      	movs	r3, #64	; 0x40
 8003b8e:	e008      	b.n	8003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b90:	2340      	movs	r3, #64	; 0x40
 8003b92:	e006      	b.n	8003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e004      	b.n	8003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e002      	b.n	8003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	4a0f      	ldr	r2, [pc, #60]	; (8003be0 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003ba4:	6093      	str	r3, [r2, #8]
 8003ba6:	e0de      	b.n	8003d66 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003ba8:	40026000 	.word	0x40026000
 8003bac:	40026010 	.word	0x40026010
 8003bb0:	40026410 	.word	0x40026410
 8003bb4:	40026070 	.word	0x40026070
 8003bb8:	40026470 	.word	0x40026470
 8003bbc:	40026028 	.word	0x40026028
 8003bc0:	40026428 	.word	0x40026428
 8003bc4:	40026088 	.word	0x40026088
 8003bc8:	40026488 	.word	0x40026488
 8003bcc:	40026040 	.word	0x40026040
 8003bd0:	40026440 	.word	0x40026440
 8003bd4:	400260a0 	.word	0x400260a0
 8003bd8:	400264a0 	.word	0x400264a0
 8003bdc:	40026458 	.word	0x40026458
 8003be0:	40026400 	.word	0x40026400
 8003be4:	400260b8 	.word	0x400260b8
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	461a      	mov	r2, r3
 8003bee:	4b78      	ldr	r3, [pc, #480]	; (8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d95c      	bls.n	8003cae <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a76      	ldr	r2, [pc, #472]	; (8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d053      	beq.n	8003ca6 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a75      	ldr	r2, [pc, #468]	; (8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d04c      	beq.n	8003ca2 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a73      	ldr	r2, [pc, #460]	; (8003ddc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d045      	beq.n	8003c9e <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a72      	ldr	r2, [pc, #456]	; (8003de0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d03e      	beq.n	8003c9a <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a70      	ldr	r2, [pc, #448]	; (8003de4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d037      	beq.n	8003c96 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a6f      	ldr	r2, [pc, #444]	; (8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d030      	beq.n	8003c92 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a6d      	ldr	r2, [pc, #436]	; (8003dec <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d029      	beq.n	8003c8e <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a6c      	ldr	r2, [pc, #432]	; (8003df0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d022      	beq.n	8003c8a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a6a      	ldr	r2, [pc, #424]	; (8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01a      	beq.n	8003c84 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a69      	ldr	r2, [pc, #420]	; (8003df8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d012      	beq.n	8003c7e <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a67      	ldr	r2, [pc, #412]	; (8003dfc <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00a      	beq.n	8003c78 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a66      	ldr	r2, [pc, #408]	; (8003e00 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d102      	bne.n	8003c72 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8003c6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c70:	e01a      	b.n	8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c76:	e017      	b.n	8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c7c:	e014      	b.n	8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c82:	e011      	b.n	8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c88:	e00e      	b.n	8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c8a:	2340      	movs	r3, #64	; 0x40
 8003c8c:	e00c      	b.n	8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c8e:	2340      	movs	r3, #64	; 0x40
 8003c90:	e00a      	b.n	8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c92:	2340      	movs	r3, #64	; 0x40
 8003c94:	e008      	b.n	8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c96:	2340      	movs	r3, #64	; 0x40
 8003c98:	e006      	b.n	8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e004      	b.n	8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e002      	b.n	8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	4a56      	ldr	r2, [pc, #344]	; (8003e04 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003caa:	60d3      	str	r3, [r2, #12]
 8003cac:	e05b      	b.n	8003d66 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a48      	ldr	r2, [pc, #288]	; (8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d053      	beq.n	8003d60 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a46      	ldr	r2, [pc, #280]	; (8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d04c      	beq.n	8003d5c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a45      	ldr	r2, [pc, #276]	; (8003ddc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d045      	beq.n	8003d58 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a43      	ldr	r2, [pc, #268]	; (8003de0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d03e      	beq.n	8003d54 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a42      	ldr	r2, [pc, #264]	; (8003de4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d037      	beq.n	8003d50 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a40      	ldr	r2, [pc, #256]	; (8003de8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d030      	beq.n	8003d4c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a3f      	ldr	r2, [pc, #252]	; (8003dec <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d029      	beq.n	8003d48 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a3d      	ldr	r2, [pc, #244]	; (8003df0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d022      	beq.n	8003d44 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a3c      	ldr	r2, [pc, #240]	; (8003df4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d01a      	beq.n	8003d3e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a3a      	ldr	r2, [pc, #232]	; (8003df8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d012      	beq.n	8003d38 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a39      	ldr	r2, [pc, #228]	; (8003dfc <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00a      	beq.n	8003d32 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a37      	ldr	r2, [pc, #220]	; (8003e00 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d102      	bne.n	8003d2c <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8003d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d2a:	e01a      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003d2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d30:	e017      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003d32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d36:	e014      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d3c:	e011      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d42:	e00e      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003d44:	2340      	movs	r3, #64	; 0x40
 8003d46:	e00c      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003d48:	2340      	movs	r3, #64	; 0x40
 8003d4a:	e00a      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003d4c:	2340      	movs	r3, #64	; 0x40
 8003d4e:	e008      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003d50:	2340      	movs	r3, #64	; 0x40
 8003d52:	e006      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003d54:	2301      	movs	r3, #1
 8003d56:	e004      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e002      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003d60:	2301      	movs	r3, #1
 8003d62:	4a28      	ldr	r2, [pc, #160]	; (8003e04 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003d64:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0216 	orr.w	r2, r2, #22
 8003d74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d103      	bne.n	8003d96 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0208 	orr.w	r2, r2, #8
 8003da4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0201 	orr.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e005      	b.n	8003dc4 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40026058 	.word	0x40026058
 8003dd4:	40026010 	.word	0x40026010
 8003dd8:	40026410 	.word	0x40026410
 8003ddc:	40026070 	.word	0x40026070
 8003de0:	40026470 	.word	0x40026470
 8003de4:	40026028 	.word	0x40026028
 8003de8:	40026428 	.word	0x40026428
 8003dec:	40026088 	.word	0x40026088
 8003df0:	40026488 	.word	0x40026488
 8003df4:	40026040 	.word	0x40026040
 8003df8:	40026440 	.word	0x40026440
 8003dfc:	400260a0 	.word	0x400260a0
 8003e00:	400264a0 	.word	0x400264a0
 8003e04:	40026000 	.word	0x40026000

08003e08 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d104      	bne.n	8003e26 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	60da      	str	r2, [r3, #12]
 8003e24:	e003      	b.n	8003e2e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d108      	bne.n	8003e6c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e6a:	e007      	b.n	8003e7c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	60da      	str	r2, [r3, #12]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b089      	sub	sp, #36	; 0x24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	e16b      	b.n	800417c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	f040 815a 	bne.w	8004176 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_GPIO_Init+0x5a>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d007      	beq.n	8003ee2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ed6:	2b11      	cmp	r3, #17
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b12      	cmp	r3, #18
 8003ee0:	d130      	bne.n	8003f44 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	2203      	movs	r2, #3
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f18:	2201      	movs	r2, #1
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4013      	ands	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 0201 	and.w	r2, r3, #1
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	2203      	movs	r2, #3
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d003      	beq.n	8003f84 <HAL_GPIO_Init+0xfc>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b12      	cmp	r3, #18
 8003f82:	d123      	bne.n	8003fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	08da      	lsrs	r2, r3, #3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3208      	adds	r2, #8
 8003f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	220f      	movs	r2, #15
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	08da      	lsrs	r2, r3, #3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3208      	adds	r2, #8
 8003fc6:	69b9      	ldr	r1, [r7, #24]
 8003fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 0203 	and.w	r2, r3, #3
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80b4 	beq.w	8004176 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	4b5f      	ldr	r3, [pc, #380]	; (8004190 <HAL_GPIO_Init+0x308>)
 8004014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004016:	4a5e      	ldr	r2, [pc, #376]	; (8004190 <HAL_GPIO_Init+0x308>)
 8004018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800401c:	6453      	str	r3, [r2, #68]	; 0x44
 800401e:	4b5c      	ldr	r3, [pc, #368]	; (8004190 <HAL_GPIO_Init+0x308>)
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800402a:	4a5a      	ldr	r2, [pc, #360]	; (8004194 <HAL_GPIO_Init+0x30c>)
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	089b      	lsrs	r3, r3, #2
 8004030:	3302      	adds	r3, #2
 8004032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	220f      	movs	r2, #15
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	43db      	mvns	r3, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4013      	ands	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a51      	ldr	r2, [pc, #324]	; (8004198 <HAL_GPIO_Init+0x310>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d02b      	beq.n	80040ae <HAL_GPIO_Init+0x226>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a50      	ldr	r2, [pc, #320]	; (800419c <HAL_GPIO_Init+0x314>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d025      	beq.n	80040aa <HAL_GPIO_Init+0x222>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a4f      	ldr	r2, [pc, #316]	; (80041a0 <HAL_GPIO_Init+0x318>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01f      	beq.n	80040a6 <HAL_GPIO_Init+0x21e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a4e      	ldr	r2, [pc, #312]	; (80041a4 <HAL_GPIO_Init+0x31c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d019      	beq.n	80040a2 <HAL_GPIO_Init+0x21a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a4d      	ldr	r2, [pc, #308]	; (80041a8 <HAL_GPIO_Init+0x320>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <HAL_GPIO_Init+0x216>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4c      	ldr	r2, [pc, #304]	; (80041ac <HAL_GPIO_Init+0x324>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00d      	beq.n	800409a <HAL_GPIO_Init+0x212>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a4b      	ldr	r2, [pc, #300]	; (80041b0 <HAL_GPIO_Init+0x328>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d007      	beq.n	8004096 <HAL_GPIO_Init+0x20e>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a4a      	ldr	r2, [pc, #296]	; (80041b4 <HAL_GPIO_Init+0x32c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d101      	bne.n	8004092 <HAL_GPIO_Init+0x20a>
 800408e:	2307      	movs	r3, #7
 8004090:	e00e      	b.n	80040b0 <HAL_GPIO_Init+0x228>
 8004092:	2308      	movs	r3, #8
 8004094:	e00c      	b.n	80040b0 <HAL_GPIO_Init+0x228>
 8004096:	2306      	movs	r3, #6
 8004098:	e00a      	b.n	80040b0 <HAL_GPIO_Init+0x228>
 800409a:	2305      	movs	r3, #5
 800409c:	e008      	b.n	80040b0 <HAL_GPIO_Init+0x228>
 800409e:	2304      	movs	r3, #4
 80040a0:	e006      	b.n	80040b0 <HAL_GPIO_Init+0x228>
 80040a2:	2303      	movs	r3, #3
 80040a4:	e004      	b.n	80040b0 <HAL_GPIO_Init+0x228>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e002      	b.n	80040b0 <HAL_GPIO_Init+0x228>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <HAL_GPIO_Init+0x228>
 80040ae:	2300      	movs	r3, #0
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	f002 0203 	and.w	r2, r2, #3
 80040b6:	0092      	lsls	r2, r2, #2
 80040b8:	4093      	lsls	r3, r2
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040c0:	4934      	ldr	r1, [pc, #208]	; (8004194 <HAL_GPIO_Init+0x30c>)
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	089b      	lsrs	r3, r3, #2
 80040c6:	3302      	adds	r3, #2
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040ce:	4b3a      	ldr	r3, [pc, #232]	; (80041b8 <HAL_GPIO_Init+0x330>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4013      	ands	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040f2:	4a31      	ldr	r2, [pc, #196]	; (80041b8 <HAL_GPIO_Init+0x330>)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040f8:	4b2f      	ldr	r3, [pc, #188]	; (80041b8 <HAL_GPIO_Init+0x330>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800411c:	4a26      	ldr	r2, [pc, #152]	; (80041b8 <HAL_GPIO_Init+0x330>)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004122:	4b25      	ldr	r3, [pc, #148]	; (80041b8 <HAL_GPIO_Init+0x330>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004146:	4a1c      	ldr	r2, [pc, #112]	; (80041b8 <HAL_GPIO_Init+0x330>)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800414c:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <HAL_GPIO_Init+0x330>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	43db      	mvns	r3, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4013      	ands	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004170:	4a11      	ldr	r2, [pc, #68]	; (80041b8 <HAL_GPIO_Init+0x330>)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3301      	adds	r3, #1
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	2b0f      	cmp	r3, #15
 8004180:	f67f ae90 	bls.w	8003ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004184:	bf00      	nop
 8004186:	3724      	adds	r7, #36	; 0x24
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	40023800 	.word	0x40023800
 8004194:	40013800 	.word	0x40013800
 8004198:	40020000 	.word	0x40020000
 800419c:	40020400 	.word	0x40020400
 80041a0:	40020800 	.word	0x40020800
 80041a4:	40020c00 	.word	0x40020c00
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40021400 	.word	0x40021400
 80041b0:	40021800 	.word	0x40021800
 80041b4:	40021c00 	.word	0x40021c00
 80041b8:	40013c00 	.word	0x40013c00

080041bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	887b      	ldrh	r3, [r7, #2]
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
 80041d8:	e001      	b.n	80041de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041da:	2300      	movs	r3, #0
 80041dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
 80041f8:	4613      	mov	r3, r2
 80041fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041fc:	787b      	ldrb	r3, [r7, #1]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004208:	e003      	b.n	8004212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800420a:	887b      	ldrh	r3, [r7, #2]
 800420c:	041a      	lsls	r2, r3, #16
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	619a      	str	r2, [r3, #24]
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	460b      	mov	r3, r1
 8004228:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	887b      	ldrh	r3, [r7, #2]
 8004230:	401a      	ands	r2, r3
 8004232:	887b      	ldrh	r3, [r7, #2]
 8004234:	429a      	cmp	r2, r3
 8004236:	d104      	bne.n	8004242 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004238:	887b      	ldrh	r3, [r7, #2]
 800423a:	041a      	lsls	r2, r3, #16
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004240:	e002      	b.n	8004248 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004242:	887a      	ldrh	r2, [r7, #2]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	619a      	str	r2, [r3, #24]
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	4603      	mov	r3, r0
 800425c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800425e:	4b08      	ldr	r3, [pc, #32]	; (8004280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	4013      	ands	r3, r2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d006      	beq.n	8004278 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800426a:	4a05      	ldr	r2, [pc, #20]	; (8004280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fc f9ca 	bl	800060c <HAL_GPIO_EXTI_Callback>
  }
}
 8004278:	bf00      	nop
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40013c00 	.word	0x40013c00

08004284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e11f      	b.n	80044d6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fd f82a 	bl	8001304 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2224      	movs	r2, #36	; 0x24
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042e8:	f003 f994 	bl	8007614 <HAL_RCC_GetPCLK1Freq>
 80042ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4a7b      	ldr	r2, [pc, #492]	; (80044e0 <HAL_I2C_Init+0x25c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d807      	bhi.n	8004308 <HAL_I2C_Init+0x84>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4a7a      	ldr	r2, [pc, #488]	; (80044e4 <HAL_I2C_Init+0x260>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	bf94      	ite	ls
 8004300:	2301      	movls	r3, #1
 8004302:	2300      	movhi	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	e006      	b.n	8004316 <HAL_I2C_Init+0x92>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4a77      	ldr	r2, [pc, #476]	; (80044e8 <HAL_I2C_Init+0x264>)
 800430c:	4293      	cmp	r3, r2
 800430e:	bf94      	ite	ls
 8004310:	2301      	movls	r3, #1
 8004312:	2300      	movhi	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e0db      	b.n	80044d6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4a72      	ldr	r2, [pc, #456]	; (80044ec <HAL_I2C_Init+0x268>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	0c9b      	lsrs	r3, r3, #18
 8004328:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4a64      	ldr	r2, [pc, #400]	; (80044e0 <HAL_I2C_Init+0x25c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d802      	bhi.n	8004358 <HAL_I2C_Init+0xd4>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	3301      	adds	r3, #1
 8004356:	e009      	b.n	800436c <HAL_I2C_Init+0xe8>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	4a63      	ldr	r2, [pc, #396]	; (80044f0 <HAL_I2C_Init+0x26c>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	099b      	lsrs	r3, r3, #6
 800436a:	3301      	adds	r3, #1
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	430b      	orrs	r3, r1
 8004372:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800437e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	4956      	ldr	r1, [pc, #344]	; (80044e0 <HAL_I2C_Init+0x25c>)
 8004388:	428b      	cmp	r3, r1
 800438a:	d80d      	bhi.n	80043a8 <HAL_I2C_Init+0x124>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1e59      	subs	r1, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	fbb1 f3f3 	udiv	r3, r1, r3
 800439a:	3301      	adds	r3, #1
 800439c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	bf38      	it	cc
 80043a4:	2304      	movcc	r3, #4
 80043a6:	e04f      	b.n	8004448 <HAL_I2C_Init+0x1c4>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d111      	bne.n	80043d4 <HAL_I2C_Init+0x150>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	1e58      	subs	r0, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	440b      	add	r3, r1
 80043be:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c2:	3301      	adds	r3, #1
 80043c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	e012      	b.n	80043fa <HAL_I2C_Init+0x176>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1e58      	subs	r0, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6859      	ldr	r1, [r3, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	0099      	lsls	r1, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_I2C_Init+0x17e>
 80043fe:	2301      	movs	r3, #1
 8004400:	e022      	b.n	8004448 <HAL_I2C_Init+0x1c4>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10e      	bne.n	8004428 <HAL_I2C_Init+0x1a4>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1e58      	subs	r0, r3, #1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6859      	ldr	r1, [r3, #4]
 8004412:	460b      	mov	r3, r1
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	440b      	add	r3, r1
 8004418:	fbb0 f3f3 	udiv	r3, r0, r3
 800441c:	3301      	adds	r3, #1
 800441e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004426:	e00f      	b.n	8004448 <HAL_I2C_Init+0x1c4>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1e58      	subs	r0, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	0099      	lsls	r1, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	fbb0 f3f3 	udiv	r3, r0, r3
 800443e:	3301      	adds	r3, #1
 8004440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004444:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	6809      	ldr	r1, [r1, #0]
 800444c:	4313      	orrs	r3, r2
 800444e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69da      	ldr	r2, [r3, #28]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6911      	ldr	r1, [r2, #16]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68d2      	ldr	r2, [r2, #12]
 8004482:	4311      	orrs	r1, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	430b      	orrs	r3, r1
 800448a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	000186a0 	.word	0x000186a0
 80044e4:	001e847f 	.word	0x001e847f
 80044e8:	003d08ff 	.word	0x003d08ff
 80044ec:	431bde83 	.word	0x431bde83
 80044f0:	10624dd3 	.word	0x10624dd3

080044f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	461a      	mov	r2, r3
 8004500:	460b      	mov	r3, r1
 8004502:	817b      	strh	r3, [r7, #10]
 8004504:	4613      	mov	r3, r2
 8004506:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004508:	f7fd fb52 	bl	8001bb0 <HAL_GetTick>
 800450c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b20      	cmp	r3, #32
 8004518:	f040 80e0 	bne.w	80046dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	2319      	movs	r3, #25
 8004522:	2201      	movs	r2, #1
 8004524:	4970      	ldr	r1, [pc, #448]	; (80046e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f002 f9d9 	bl	80068de <I2C_WaitOnFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004532:	2302      	movs	r3, #2
 8004534:	e0d3      	b.n	80046de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_I2C_Master_Transmit+0x50>
 8004540:	2302      	movs	r3, #2
 8004542:	e0cc      	b.n	80046de <HAL_I2C_Master_Transmit+0x1ea>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b01      	cmp	r3, #1
 8004558:	d007      	beq.n	800456a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0201 	orr.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004578:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2221      	movs	r2, #33	; 0x21
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2210      	movs	r2, #16
 8004586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	893a      	ldrh	r2, [r7, #8]
 800459a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4a50      	ldr	r2, [pc, #320]	; (80046ec <HAL_I2C_Master_Transmit+0x1f8>)
 80045aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045ac:	8979      	ldrh	r1, [r7, #10]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	6a3a      	ldr	r2, [r7, #32]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f001 ff32 	bl	800641c <I2C_MasterRequestWrite>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e08d      	b.n	80046de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c2:	2300      	movs	r3, #0
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80045d8:	e066      	b.n	80046a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	6a39      	ldr	r1, [r7, #32]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f002 fa53 	bl	8006a8a <I2C_WaitOnTXEFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00d      	beq.n	8004606 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d107      	bne.n	8004602 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004600:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e06b      	b.n	80046de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	781a      	ldrb	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b04      	cmp	r3, #4
 8004642:	d11b      	bne.n	800467c <HAL_I2C_Master_Transmit+0x188>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004648:	2b00      	cmp	r3, #0
 800464a:	d017      	beq.n	800467c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	781a      	ldrb	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	6a39      	ldr	r1, [r7, #32]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f002 fa43 	bl	8006b0c <I2C_WaitOnBTFFlagUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00d      	beq.n	80046a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	2b04      	cmp	r3, #4
 8004692:	d107      	bne.n	80046a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e01a      	b.n	80046de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d194      	bne.n	80045da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	e000      	b.n	80046de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	00100002 	.word	0x00100002
 80046ec:	ffff0000 	.word	0xffff0000

080046f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08c      	sub	sp, #48	; 0x30
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	607a      	str	r2, [r7, #4]
 80046fa:	461a      	mov	r2, r3
 80046fc:	460b      	mov	r3, r1
 80046fe:	817b      	strh	r3, [r7, #10]
 8004700:	4613      	mov	r3, r2
 8004702:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004704:	f7fd fa54 	bl	8001bb0 <HAL_GetTick>
 8004708:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b20      	cmp	r3, #32
 8004714:	f040 820b 	bne.w	8004b2e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	2319      	movs	r3, #25
 800471e:	2201      	movs	r2, #1
 8004720:	497c      	ldr	r1, [pc, #496]	; (8004914 <HAL_I2C_Master_Receive+0x224>)
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f002 f8db 	bl	80068de <I2C_WaitOnFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800472e:	2302      	movs	r3, #2
 8004730:	e1fe      	b.n	8004b30 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_I2C_Master_Receive+0x50>
 800473c:	2302      	movs	r3, #2
 800473e:	e1f7      	b.n	8004b30 <HAL_I2C_Master_Receive+0x440>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b01      	cmp	r3, #1
 8004754:	d007      	beq.n	8004766 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0201 	orr.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004774:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2222      	movs	r2, #34	; 0x22
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2210      	movs	r2, #16
 8004782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	893a      	ldrh	r2, [r7, #8]
 8004796:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4a5c      	ldr	r2, [pc, #368]	; (8004918 <HAL_I2C_Master_Receive+0x228>)
 80047a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047a8:	8979      	ldrh	r1, [r7, #10]
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f001 feb6 	bl	8006520 <I2C_MasterRequestRead>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e1b8      	b.n	8004b30 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d113      	bne.n	80047ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c6:	2300      	movs	r3, #0
 80047c8:	623b      	str	r3, [r7, #32]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	623b      	str	r3, [r7, #32]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	623b      	str	r3, [r7, #32]
 80047da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e18c      	b.n	8004b08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d11b      	bne.n	800482e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004804:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	e16c      	b.n	8004b08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004832:	2b02      	cmp	r3, #2
 8004834:	d11b      	bne.n	800486e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004844:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004854:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004856:	2300      	movs	r3, #0
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	e14c      	b.n	8004b08 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800487c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004894:	e138      	b.n	8004b08 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489a:	2b03      	cmp	r3, #3
 800489c:	f200 80f1 	bhi.w	8004a82 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d123      	bne.n	80048f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f002 f96e 	bl	8006b8e <I2C_WaitOnRXNEFlagUntilTimeout>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e139      	b.n	8004b30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048ee:	e10b      	b.n	8004b08 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d14e      	bne.n	8004996 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	2200      	movs	r2, #0
 8004900:	4906      	ldr	r1, [pc, #24]	; (800491c <HAL_I2C_Master_Receive+0x22c>)
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f001 ffeb 	bl	80068de <I2C_WaitOnFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e10e      	b.n	8004b30 <HAL_I2C_Master_Receive+0x440>
 8004912:	bf00      	nop
 8004914:	00100002 	.word	0x00100002
 8004918:	ffff0000 	.word	0xffff0000
 800491c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004994:	e0b8      	b.n	8004b08 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	2200      	movs	r2, #0
 800499e:	4966      	ldr	r1, [pc, #408]	; (8004b38 <HAL_I2C_Master_Receive+0x448>)
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f001 ff9c 	bl	80068de <I2C_WaitOnFlagUntilTimeout>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0bf      	b.n	8004b30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	2200      	movs	r2, #0
 80049fa:	494f      	ldr	r1, [pc, #316]	; (8004b38 <HAL_I2C_Master_Receive+0x448>)
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f001 ff6e 	bl	80068de <I2C_WaitOnFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e091      	b.n	8004b30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a80:	e042      	b.n	8004b08 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f002 f881 	bl	8006b8e <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e04c      	b.n	8004b30 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d118      	bne.n	8004b08 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f47f aec2 	bne.w	8004896 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e000      	b.n	8004b30 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b2e:	2302      	movs	r3, #2
  }
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3728      	adds	r7, #40	; 0x28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	00010004 	.word	0x00010004

08004b3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	4608      	mov	r0, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	817b      	strh	r3, [r7, #10]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	813b      	strh	r3, [r7, #8]
 8004b52:	4613      	mov	r3, r2
 8004b54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b56:	f7fd f82b 	bl	8001bb0 <HAL_GetTick>
 8004b5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	f040 80d9 	bne.w	8004d1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	2319      	movs	r3, #25
 8004b70:	2201      	movs	r2, #1
 8004b72:	496d      	ldr	r1, [pc, #436]	; (8004d28 <HAL_I2C_Mem_Write+0x1ec>)
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f001 feb2 	bl	80068de <I2C_WaitOnFlagUntilTimeout>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b80:	2302      	movs	r3, #2
 8004b82:	e0cc      	b.n	8004d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_I2C_Mem_Write+0x56>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e0c5      	b.n	8004d1e <HAL_I2C_Mem_Write+0x1e2>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d007      	beq.n	8004bb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2221      	movs	r2, #33	; 0x21
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2240      	movs	r2, #64	; 0x40
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a3a      	ldr	r2, [r7, #32]
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004be8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4a4d      	ldr	r2, [pc, #308]	; (8004d2c <HAL_I2C_Mem_Write+0x1f0>)
 8004bf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bfa:	88f8      	ldrh	r0, [r7, #6]
 8004bfc:	893a      	ldrh	r2, [r7, #8]
 8004bfe:	8979      	ldrh	r1, [r7, #10]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	9301      	str	r3, [sp, #4]
 8004c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	4603      	mov	r3, r0
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f001 fd54 	bl	80066b8 <I2C_RequestMemoryWrite>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d052      	beq.n	8004cbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e081      	b.n	8004d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f001 ff33 	bl	8006a8a <I2C_WaitOnTXEFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00d      	beq.n	8004c46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d107      	bne.n	8004c42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e06b      	b.n	8004d1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	781a      	ldrb	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d11b      	bne.n	8004cbc <HAL_I2C_Mem_Write+0x180>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d017      	beq.n	8004cbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	781a      	ldrb	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1aa      	bne.n	8004c1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f001 ff1f 	bl	8006b0c <I2C_WaitOnBTFFlagUntilTimeout>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00d      	beq.n	8004cf0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d107      	bne.n	8004cec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e016      	b.n	8004d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e000      	b.n	8004d1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d1c:	2302      	movs	r3, #2
  }
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	00100002 	.word	0x00100002
 8004d2c:	ffff0000 	.word	0xffff0000

08004d30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d58:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
 8004d5c:	2b10      	cmp	r3, #16
 8004d5e:	d003      	beq.n	8004d68 <HAL_I2C_EV_IRQHandler+0x38>
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b40      	cmp	r3, #64	; 0x40
 8004d64:	f040 80b6 	bne.w	8004ed4 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10d      	bne.n	8004d9e <HAL_I2C_EV_IRQHandler+0x6e>
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004d88:	d003      	beq.n	8004d92 <HAL_I2C_EV_IRQHandler+0x62>
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004d90:	d101      	bne.n	8004d96 <HAL_I2C_EV_IRQHandler+0x66>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <HAL_I2C_EV_IRQHandler+0x68>
 8004d96:	2300      	movs	r3, #0
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	f000 8127 	beq.w	8004fec <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00c      	beq.n	8004dc2 <HAL_I2C_EV_IRQHandler+0x92>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	0a5b      	lsrs	r3, r3, #9
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d006      	beq.n	8004dc2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f001 ff6f 	bl	8006c98 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fd1c 	bl	80057f8 <I2C_Master_SB>
 8004dc0:	e087      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	08db      	lsrs	r3, r3, #3
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d009      	beq.n	8004de2 <HAL_I2C_EV_IRQHandler+0xb2>
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	0a5b      	lsrs	r3, r3, #9
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fd92 	bl	8005904 <I2C_Master_ADD10>
 8004de0:	e077      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	085b      	lsrs	r3, r3, #1
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d009      	beq.n	8004e02 <HAL_I2C_EV_IRQHandler+0xd2>
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	0a5b      	lsrs	r3, r3, #9
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fdac 	bl	8005958 <I2C_Master_ADDR>
 8004e00:	e067      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	089b      	lsrs	r3, r3, #2
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d030      	beq.n	8004e70 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e1c:	f000 80e8 	beq.w	8004ff0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	09db      	lsrs	r3, r3, #7
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00f      	beq.n	8004e4c <HAL_I2C_EV_IRQHandler+0x11c>
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	0a9b      	lsrs	r3, r3, #10
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d009      	beq.n	8004e4c <HAL_I2C_EV_IRQHandler+0x11c>
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	089b      	lsrs	r3, r3, #2
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d103      	bne.n	8004e4c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f9e8 	bl	800521a <I2C_MasterTransmit_TXE>
 8004e4a:	e042      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	089b      	lsrs	r3, r3, #2
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 80cb 	beq.w	8004ff0 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	0a5b      	lsrs	r3, r3, #9
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 80c4 	beq.w	8004ff0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fa72 	bl	8005352 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e6e:	e0bf      	b.n	8004ff0 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e7e:	f000 80b7 	beq.w	8004ff0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	099b      	lsrs	r3, r3, #6
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00f      	beq.n	8004eae <HAL_I2C_EV_IRQHandler+0x17e>
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	0a9b      	lsrs	r3, r3, #10
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <HAL_I2C_EV_IRQHandler+0x17e>
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	089b      	lsrs	r3, r3, #2
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d103      	bne.n	8004eae <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fb3a 	bl	8005520 <I2C_MasterReceive_RXNE>
 8004eac:	e011      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	089b      	lsrs	r3, r3, #2
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 809a 	beq.w	8004ff0 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	0a5b      	lsrs	r3, r3, #9
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8093 	beq.w	8004ff0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fbaa 	bl	8005624 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ed0:	e08e      	b.n	8004ff0 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004ed2:	e08d      	b.n	8004ff0 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d004      	beq.n	8004ee6 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	61fb      	str	r3, [r7, #28]
 8004ee4:	e007      	b.n	8004ef6 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	085b      	lsrs	r3, r3, #1
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d012      	beq.n	8004f28 <HAL_I2C_EV_IRQHandler+0x1f8>
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	0a5b      	lsrs	r3, r3, #9
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00c      	beq.n	8004f28 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004f1e:	69b9      	ldr	r1, [r7, #24]
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 ff68 	bl	8005df6 <I2C_Slave_ADDR>
 8004f26:	e066      	b.n	8004ff6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <HAL_I2C_EV_IRQHandler+0x218>
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	0a5b      	lsrs	r3, r3, #9
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 ff9d 	bl	8005e80 <I2C_Slave_STOPF>
 8004f46:	e056      	b.n	8004ff6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f48:	7bbb      	ldrb	r3, [r7, #14]
 8004f4a:	2b21      	cmp	r3, #33	; 0x21
 8004f4c:	d002      	beq.n	8004f54 <HAL_I2C_EV_IRQHandler+0x224>
 8004f4e:	7bbb      	ldrb	r3, [r7, #14]
 8004f50:	2b29      	cmp	r3, #41	; 0x29
 8004f52:	d125      	bne.n	8004fa0 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	09db      	lsrs	r3, r3, #7
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00f      	beq.n	8004f80 <HAL_I2C_EV_IRQHandler+0x250>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	0a9b      	lsrs	r3, r3, #10
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <HAL_I2C_EV_IRQHandler+0x250>
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	089b      	lsrs	r3, r3, #2
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fe7e 	bl	8005c7a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f7e:	e039      	b.n	8004ff4 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d033      	beq.n	8004ff4 <HAL_I2C_EV_IRQHandler+0x2c4>
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	0a5b      	lsrs	r3, r3, #9
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d02d      	beq.n	8004ff4 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 feab 	bl	8005cf4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f9e:	e029      	b.n	8004ff4 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	099b      	lsrs	r3, r3, #6
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00f      	beq.n	8004fcc <HAL_I2C_EV_IRQHandler+0x29c>
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	0a9b      	lsrs	r3, r3, #10
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d009      	beq.n	8004fcc <HAL_I2C_EV_IRQHandler+0x29c>
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	089b      	lsrs	r3, r3, #2
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d103      	bne.n	8004fcc <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 feb6 	bl	8005d36 <I2C_SlaveReceive_RXNE>
 8004fca:	e014      	b.n	8004ff6 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	089b      	lsrs	r3, r3, #2
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_I2C_EV_IRQHandler+0x2c6>
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	0a5b      	lsrs	r3, r3, #9
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fee4 	bl	8005db2 <I2C_SlaveReceive_BTF>
 8004fea:	e004      	b.n	8004ff6 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8004fec:	bf00      	nop
 8004fee:	e002      	b.n	8004ff6 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ff0:	bf00      	nop
 8004ff2:	e000      	b.n	8004ff6 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ff4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08a      	sub	sp, #40	; 0x28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005014:	2300      	movs	r3, #0
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800501e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	0a1b      	lsrs	r3, r3, #8
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00e      	beq.n	800504a <HAL_I2C_ER_IRQHandler+0x4e>
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	0a1b      	lsrs	r3, r3, #8
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d008      	beq.n	800504a <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005048:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	0a5b      	lsrs	r3, r3, #9
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00e      	beq.n	8005074 <HAL_I2C_ER_IRQHandler+0x78>
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	0a1b      	lsrs	r3, r3, #8
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d008      	beq.n	8005074 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	f043 0302 	orr.w	r3, r3, #2
 8005068:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005072:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	0a9b      	lsrs	r3, r3, #10
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d03f      	beq.n	8005100 <HAL_I2C_ER_IRQHandler+0x104>
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	0a1b      	lsrs	r3, r3, #8
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d039      	beq.n	8005100 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800508c:	7efb      	ldrb	r3, [r7, #27]
 800508e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005094:	b29b      	uxth	r3, r3
 8005096:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80050a6:	7ebb      	ldrb	r3, [r7, #26]
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d112      	bne.n	80050d2 <HAL_I2C_ER_IRQHandler+0xd6>
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10f      	bne.n	80050d2 <HAL_I2C_ER_IRQHandler+0xd6>
 80050b2:	7cfb      	ldrb	r3, [r7, #19]
 80050b4:	2b21      	cmp	r3, #33	; 0x21
 80050b6:	d008      	beq.n	80050ca <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80050b8:	7cfb      	ldrb	r3, [r7, #19]
 80050ba:	2b29      	cmp	r3, #41	; 0x29
 80050bc:	d005      	beq.n	80050ca <HAL_I2C_ER_IRQHandler+0xce>
 80050be:	7cfb      	ldrb	r3, [r7, #19]
 80050c0:	2b28      	cmp	r3, #40	; 0x28
 80050c2:	d106      	bne.n	80050d2 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b21      	cmp	r3, #33	; 0x21
 80050c8:	d103      	bne.n	80050d2 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f001 f808 	bl	80060e0 <I2C_Slave_AF>
 80050d0:	e016      	b.n	8005100 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050da:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	f043 0304 	orr.w	r3, r3, #4
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80050e4:	7efb      	ldrb	r3, [r7, #27]
 80050e6:	2b10      	cmp	r3, #16
 80050e8:	d002      	beq.n	80050f0 <HAL_I2C_ER_IRQHandler+0xf4>
 80050ea:	7efb      	ldrb	r3, [r7, #27]
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d107      	bne.n	8005100 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fe:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	0adb      	lsrs	r3, r3, #11
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00e      	beq.n	800512a <HAL_I2C_ER_IRQHandler+0x12e>
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	0a1b      	lsrs	r3, r3, #8
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	f043 0308 	orr.w	r3, r3, #8
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005128:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	2b00      	cmp	r3, #0
 800512e:	d008      	beq.n	8005142 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f001 f83f 	bl	80061c0 <I2C_ITError>
  }
}
 8005142:	bf00      	nop
 8005144:	3728      	adds	r7, #40	; 0x28
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	460b      	mov	r3, r1
 80051a4:	70fb      	strb	r3, [r7, #3]
 80051a6:	4613      	mov	r3, r2
 80051a8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005228:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005230:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523c:	2b00      	cmp	r3, #0
 800523e:	d150      	bne.n	80052e2 <I2C_MasterTransmit_TXE+0xc8>
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b21      	cmp	r3, #33	; 0x21
 8005244:	d14d      	bne.n	80052e2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b08      	cmp	r3, #8
 800524a:	d01d      	beq.n	8005288 <I2C_MasterTransmit_TXE+0x6e>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b20      	cmp	r3, #32
 8005250:	d01a      	beq.n	8005288 <I2C_MasterTransmit_TXE+0x6e>
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005258:	d016      	beq.n	8005288 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005268:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2211      	movs	r2, #17
 800526e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff ff62 	bl	800514a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005286:	e060      	b.n	800534a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005296:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b40      	cmp	r3, #64	; 0x40
 80052c0:	d107      	bne.n	80052d2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff ff7d 	bl	80051ca <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052d0:	e03b      	b.n	800534a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff ff35 	bl	800514a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052e0:	e033      	b.n	800534a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	2b21      	cmp	r3, #33	; 0x21
 80052e6:	d005      	beq.n	80052f4 <I2C_MasterTransmit_TXE+0xda>
 80052e8:	7bbb      	ldrb	r3, [r7, #14]
 80052ea:	2b40      	cmp	r3, #64	; 0x40
 80052ec:	d12d      	bne.n	800534a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	2b22      	cmp	r3, #34	; 0x22
 80052f2:	d12a      	bne.n	800534a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d108      	bne.n	8005310 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800530c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800530e:	e01c      	b.n	800534a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	d103      	bne.n	8005324 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f898 	bl	8005452 <I2C_MemoryTransmit_TXE_BTF>
}
 8005322:	e012      	b.n	800534a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	781a      	ldrb	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005348:	e7ff      	b.n	800534a <I2C_MasterTransmit_TXE+0x130>
 800534a:	bf00      	nop
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b21      	cmp	r3, #33	; 0x21
 800536a:	d165      	bne.n	8005438 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d012      	beq.n	800539c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	781a      	ldrb	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800539a:	e056      	b.n	800544a <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d01d      	beq.n	80053de <I2C_MasterTransmit_BTF+0x8c>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d01a      	beq.n	80053de <I2C_MasterTransmit_BTF+0x8c>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053ae:	d016      	beq.n	80053de <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053be:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2211      	movs	r2, #17
 80053c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff feb7 	bl	800514a <HAL_I2C_MasterTxCpltCallback>
}
 80053dc:	e035      	b.n	800544a <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053ec:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053fc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b40      	cmp	r3, #64	; 0x40
 8005416:	d107      	bne.n	8005428 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff fed2 	bl	80051ca <HAL_I2C_MemTxCpltCallback>
}
 8005426:	e010      	b.n	800544a <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff fe8a 	bl	800514a <HAL_I2C_MasterTxCpltCallback>
}
 8005436:	e008      	b.n	800544a <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d102      	bne.n	800544a <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f804 	bl	8005452 <I2C_MemoryTransmit_TXE_BTF>
}
 800544a:	bf00      	nop
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800545e:	2b00      	cmp	r3, #0
 8005460:	d11d      	bne.n	800549e <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005466:	2b01      	cmp	r3, #1
 8005468:	d10b      	bne.n	8005482 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546e:	b2da      	uxtb	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547a:	1c9a      	adds	r2, r3, #2
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005480:	e048      	b.n	8005514 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005486:	b29b      	uxth	r3, r3
 8005488:	121b      	asrs	r3, r3, #8
 800548a:	b2da      	uxtb	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800549c:	e03a      	b.n	8005514 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d10b      	bne.n	80054be <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80054bc:	e02a      	b.n	8005514 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d126      	bne.n	8005514 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b22      	cmp	r3, #34	; 0x22
 80054d0:	d108      	bne.n	80054e4 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e0:	601a      	str	r2, [r3, #0]
}
 80054e2:	e017      	b.n	8005514 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b21      	cmp	r3, #33	; 0x21
 80054ee:	d111      	bne.n	8005514 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	781a      	ldrb	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b22      	cmp	r3, #34	; 0x22
 8005532:	d173      	bne.n	800561c <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005538:	b29b      	uxth	r3, r3
 800553a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b03      	cmp	r3, #3
 8005540:	d920      	bls.n	8005584 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555e:	b29b      	uxth	r3, r3
 8005560:	3b01      	subs	r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b03      	cmp	r3, #3
 8005570:	d154      	bne.n	800561c <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005580:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005582:	e04b      	b.n	800561c <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	2b02      	cmp	r3, #2
 800558a:	d047      	beq.n	800561c <I2C_MasterReceive_RXNE+0xfc>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d002      	beq.n	8005598 <I2C_MasterReceive_RXNE+0x78>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d141      	bne.n	800561c <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055b6:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	d10a      	bne.n	8005608 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff fdec 	bl	80051de <HAL_I2C_MemRxCpltCallback>
}
 8005606:	e009      	b.n	800561c <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2212      	movs	r2, #18
 8005614:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fda1 	bl	800515e <HAL_I2C_MasterRxCpltCallback>
}
 800561c:	bf00      	nop
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b04      	cmp	r3, #4
 800563a:	d11b      	bne.n	8005674 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691a      	ldr	r2, [r3, #16]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005672:	e0bd      	b.n	80057f0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005678:	b29b      	uxth	r3, r3
 800567a:	2b03      	cmp	r3, #3
 800567c:	d129      	bne.n	80056d2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800568c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b04      	cmp	r3, #4
 8005692:	d00a      	beq.n	80056aa <I2C_MasterReceive_BTF+0x86>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b02      	cmp	r3, #2
 8005698:	d007      	beq.n	80056aa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80056d0:	e08e      	b.n	80057f0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d176      	bne.n	80057ca <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d002      	beq.n	80056e8 <I2C_MasterReceive_BTF+0xc4>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b10      	cmp	r3, #16
 80056e6:	d108      	bne.n	80056fa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	e019      	b.n	800572e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d002      	beq.n	8005706 <I2C_MasterReceive_BTF+0xe2>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d108      	bne.n	8005718 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	e00a      	b.n	800572e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b10      	cmp	r3, #16
 800571c:	d007      	beq.n	800572e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800572c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	691a      	ldr	r2, [r3, #16]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005770:	b29b      	uxth	r3, r3
 8005772:	3b01      	subs	r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005788:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	d10a      	bne.n	80057b4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff fd16 	bl	80051de <HAL_I2C_MemRxCpltCallback>
}
 80057b2:	e01d      	b.n	80057f0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2212      	movs	r2, #18
 80057c0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff fccb 	bl	800515e <HAL_I2C_MasterRxCpltCallback>
}
 80057c8:	e012      	b.n	80057f0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	d117      	bne.n	800583c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005810:	2b00      	cmp	r3, #0
 8005812:	d109      	bne.n	8005828 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005818:	b2db      	uxtb	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005824:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005826:	e067      	b.n	80058f8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	b2da      	uxtb	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	611a      	str	r2, [r3, #16]
}
 800583a:	e05d      	b.n	80058f8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005844:	d133      	bne.n	80058ae <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b21      	cmp	r3, #33	; 0x21
 8005850:	d109      	bne.n	8005866 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005856:	b2db      	uxtb	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005862:	611a      	str	r2, [r3, #16]
 8005864:	e008      	b.n	8005878 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586a:	b2db      	uxtb	r3, r3
 800586c:	f043 0301 	orr.w	r3, r3, #1
 8005870:	b2da      	uxtb	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587c:	2b00      	cmp	r3, #0
 800587e:	d004      	beq.n	800588a <I2C_Master_SB+0x92>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d108      	bne.n	800589c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	2b00      	cmp	r3, #0
 8005890:	d032      	beq.n	80058f8 <I2C_Master_SB+0x100>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d02d      	beq.n	80058f8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058aa:	605a      	str	r2, [r3, #4]
}
 80058ac:	e024      	b.n	80058f8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10e      	bne.n	80058d4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	11db      	asrs	r3, r3, #7
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f003 0306 	and.w	r3, r3, #6
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	f063 030f 	orn	r3, r3, #15
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	611a      	str	r2, [r3, #16]
}
 80058d2:	e011      	b.n	80058f8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d10d      	bne.n	80058f8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	11db      	asrs	r3, r3, #7
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	f003 0306 	and.w	r3, r3, #6
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	f063 030e 	orn	r3, r3, #14
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	611a      	str	r2, [r3, #16]
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005910:	b2da      	uxtb	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591c:	2b00      	cmp	r3, #0
 800591e:	d103      	bne.n	8005928 <I2C_Master_ADD10+0x24>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	2b00      	cmp	r3, #0
 8005926:	d011      	beq.n	800594c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592e:	2b00      	cmp	r3, #0
 8005930:	d104      	bne.n	800593c <I2C_Master_ADD10+0x38>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005938:	2b00      	cmp	r3, #0
 800593a:	d007      	beq.n	800594c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800594a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005958:	b480      	push	{r7}
 800595a:	b091      	sub	sp, #68	; 0x44
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005966:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005974:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b22      	cmp	r3, #34	; 0x22
 8005980:	f040 8169 	bne.w	8005c56 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10f      	bne.n	80059ac <I2C_Master_ADDR+0x54>
 800598c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	d10b      	bne.n	80059ac <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005994:	2300      	movs	r3, #0
 8005996:	633b      	str	r3, [r7, #48]	; 0x30
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	633b      	str	r3, [r7, #48]	; 0x30
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	633b      	str	r3, [r7, #48]	; 0x30
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	e160      	b.n	8005c6e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d11d      	bne.n	80059f0 <I2C_Master_ADDR+0x98>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059bc:	d118      	bne.n	80059f0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059be:	2300      	movs	r3, #0
 80059c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059e2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	651a      	str	r2, [r3, #80]	; 0x50
 80059ee:	e13e      	b.n	8005c6e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d113      	bne.n	8005a22 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059fa:	2300      	movs	r3, #0
 80059fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	e115      	b.n	8005c4e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	f040 808a 	bne.w	8005b42 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a34:	d137      	bne.n	8005aa6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a44:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a54:	d113      	bne.n	8005a7e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a64:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a66:	2300      	movs	r3, #0
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	e0e7      	b.n	8005c4e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7e:	2300      	movs	r3, #0
 8005a80:	623b      	str	r3, [r7, #32]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	623b      	str	r3, [r7, #32]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	623b      	str	r3, [r7, #32]
 8005a92:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	e0d3      	b.n	8005c4e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d02e      	beq.n	8005b0a <I2C_Master_ADDR+0x1b2>
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d02b      	beq.n	8005b0a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab4:	2b12      	cmp	r3, #18
 8005ab6:	d102      	bne.n	8005abe <I2C_Master_ADDR+0x166>
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d125      	bne.n	8005b0a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d00e      	beq.n	8005ae2 <I2C_Master_ADDR+0x18a>
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d00b      	beq.n	8005ae2 <I2C_Master_ADDR+0x18a>
 8005aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005acc:	2b10      	cmp	r3, #16
 8005ace:	d008      	beq.n	8005ae2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	e007      	b.n	8005af2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005af0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af2:	2300      	movs	r3, #0
 8005af4:	61fb      	str	r3, [r7, #28]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	61fb      	str	r3, [r7, #28]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	61fb      	str	r3, [r7, #28]
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	e0a1      	b.n	8005c4e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b18:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e085      	b.n	8005c4e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d14d      	bne.n	8005be8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d016      	beq.n	8005b80 <I2C_Master_ADDR+0x228>
 8005b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d013      	beq.n	8005b80 <I2C_Master_ADDR+0x228>
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d010      	beq.n	8005b80 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b6c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	e007      	b.n	8005b90 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b8e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9e:	d117      	bne.n	8005bd0 <I2C_Master_ADDR+0x278>
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ba6:	d00b      	beq.n	8005bc0 <I2C_Master_ADDR+0x268>
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d008      	beq.n	8005bc0 <I2C_Master_ADDR+0x268>
 8005bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d005      	beq.n	8005bc0 <I2C_Master_ADDR+0x268>
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb6:	2b10      	cmp	r3, #16
 8005bb8:	d002      	beq.n	8005bc0 <I2C_Master_ADDR+0x268>
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d107      	bne.n	8005bd0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bce:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	617b      	str	r3, [r7, #20]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	e032      	b.n	8005c4e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bf6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c06:	d117      	bne.n	8005c38 <I2C_Master_ADDR+0x2e0>
 8005c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c0e:	d00b      	beq.n	8005c28 <I2C_Master_ADDR+0x2d0>
 8005c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d008      	beq.n	8005c28 <I2C_Master_ADDR+0x2d0>
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d005      	beq.n	8005c28 <I2C_Master_ADDR+0x2d0>
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1e:	2b10      	cmp	r3, #16
 8005c20:	d002      	beq.n	8005c28 <I2C_Master_ADDR+0x2d0>
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d107      	bne.n	8005c38 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c36:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c38:	2300      	movs	r3, #0
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005c54:	e00b      	b.n	8005c6e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
}
 8005c6c:	e7ff      	b.n	8005c6e <I2C_Master_ADDR+0x316>
 8005c6e:	bf00      	nop
 8005c70:	3744      	adds	r7, #68	; 0x44
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c88:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d02b      	beq.n	8005cec <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	781a      	ldrb	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d114      	bne.n	8005cec <I2C_SlaveTransmit_TXE+0x72>
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	2b29      	cmp	r3, #41	; 0x29
 8005cc6:	d111      	bne.n	8005cec <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2221      	movs	r2, #33	; 0x21
 8005cdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2228      	movs	r2, #40	; 0x28
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff fa43 	bl	8005172 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005cec:	bf00      	nop
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d011      	beq.n	8005d2a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	781a      	ldrb	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d44:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d02c      	beq.n	8005daa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d114      	bne.n	8005daa <I2C_SlaveReceive_RXNE+0x74>
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
 8005d82:	2b2a      	cmp	r3, #42	; 0x2a
 8005d84:	d111      	bne.n	8005daa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d94:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2222      	movs	r2, #34	; 0x22
 8005d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2228      	movs	r2, #40	; 0x28
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff f9ee 	bl	8005186 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005daa:	bf00      	nop
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d012      	beq.n	8005dea <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691a      	ldr	r2, [r3, #16]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005e00:	2300      	movs	r3, #0
 8005e02:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e10:	2b28      	cmp	r3, #40	; 0x28
 8005e12:	d127      	bne.n	8005e64 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e22:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	089b      	lsrs	r3, r3, #2
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005e30:	2301      	movs	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	09db      	lsrs	r3, r3, #7
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d103      	bne.n	8005e48 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	81bb      	strh	r3, [r7, #12]
 8005e46:	e002      	b.n	8005e4e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005e56:	89ba      	ldrh	r2, [r7, #12]
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff f99c 	bl	800519a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005e62:	e008      	b.n	8005e76 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0202 	mvn.w	r2, #2
 8005e6c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005e76:	bf00      	nop
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e9e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	60bb      	str	r3, [r7, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	60bb      	str	r3, [r7, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0201 	orr.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ecc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005edc:	d172      	bne.n	8005fc4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
 8005ee0:	2b22      	cmp	r3, #34	; 0x22
 8005ee2:	d002      	beq.n	8005eea <I2C_Slave_STOPF+0x6a>
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
 8005ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ee8:	d135      	bne.n	8005f56 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	f043 0204 	orr.w	r2, r3, #4
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f1c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fc fd3c 	bl	80029a0 <HAL_DMA_GetState>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d049      	beq.n	8005fc2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	4a69      	ldr	r2, [pc, #420]	; (80060d8 <I2C_Slave_STOPF+0x258>)
 8005f34:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fc fb84 	bl	8002648 <HAL_DMA_Abort_IT>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d03d      	beq.n	8005fc2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f50:	4610      	mov	r0, r2
 8005f52:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f54:	e035      	b.n	8005fc2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f043 0204 	orr.w	r2, r3, #4
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fc fd06 	bl	80029a0 <HAL_DMA_GetState>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d014      	beq.n	8005fc4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9e:	4a4e      	ldr	r2, [pc, #312]	; (80060d8 <I2C_Slave_STOPF+0x258>)
 8005fa0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fc fb4e 	bl	8002648 <HAL_DMA_Abort_IT>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d008      	beq.n	8005fc4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	4798      	blx	r3
 8005fc0:	e000      	b.n	8005fc4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fc2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d03e      	beq.n	800604c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d112      	bne.n	8006002 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691a      	ldr	r2, [r3, #16]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600c:	2b40      	cmp	r3, #64	; 0x40
 800600e:	d112      	bne.n	8006036 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603a:	b29b      	uxth	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	f043 0204 	orr.w	r2, r3, #4
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f8b3 	bl	80061c0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800605a:	e039      	b.n	80060d0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b2a      	cmp	r3, #42	; 0x2a
 8006060:	d109      	bne.n	8006076 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2228      	movs	r2, #40	; 0x28
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff f888 	bl	8005186 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b28      	cmp	r3, #40	; 0x28
 8006080:	d111      	bne.n	80060a6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a15      	ldr	r2, [pc, #84]	; (80060dc <I2C_Slave_STOPF+0x25c>)
 8006086:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2220      	movs	r2, #32
 8006092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff f889 	bl	80051b6 <HAL_I2C_ListenCpltCallback>
}
 80060a4:	e014      	b.n	80060d0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	2b22      	cmp	r3, #34	; 0x22
 80060ac:	d002      	beq.n	80060b4 <I2C_Slave_STOPF+0x234>
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	2b22      	cmp	r3, #34	; 0x22
 80060b2:	d10d      	bne.n	80060d0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff f85b 	bl	8005186 <HAL_I2C_SlaveRxCpltCallback>
}
 80060d0:	bf00      	nop
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	080067e1 	.word	0x080067e1
 80060dc:	ffff0000 	.word	0xffff0000

080060e0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d002      	beq.n	8006102 <I2C_Slave_AF+0x22>
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b20      	cmp	r3, #32
 8006100:	d129      	bne.n	8006156 <I2C_Slave_AF+0x76>
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	2b28      	cmp	r3, #40	; 0x28
 8006106:	d126      	bne.n	8006156 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a2c      	ldr	r2, [pc, #176]	; (80061bc <I2C_Slave_AF+0xdc>)
 800610c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800611c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006126:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006136:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2220      	movs	r2, #32
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff f831 	bl	80051b6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006154:	e02e      	b.n	80061b4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006156:	7bfb      	ldrb	r3, [r7, #15]
 8006158:	2b21      	cmp	r3, #33	; 0x21
 800615a:	d126      	bne.n	80061aa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a17      	ldr	r2, [pc, #92]	; (80061bc <I2C_Slave_AF+0xdc>)
 8006160:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2221      	movs	r2, #33	; 0x21
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006186:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006190:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fe ffe5 	bl	8005172 <HAL_I2C_SlaveTxCpltCallback>
}
 80061a8:	e004      	b.n	80061b4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061b2:	615a      	str	r2, [r3, #20]
}
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	ffff0000 	.word	0xffff0000

080061c0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ce:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b10      	cmp	r3, #16
 80061da:	d10a      	bne.n	80061f2 <I2C_ITError+0x32>
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	2b22      	cmp	r3, #34	; 0x22
 80061e0:	d107      	bne.n	80061f2 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061f0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061f8:	2b28      	cmp	r3, #40	; 0x28
 80061fa:	d107      	bne.n	800620c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2228      	movs	r2, #40	; 0x28
 8006206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800620a:	e015      	b.n	8006238 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800621a:	d006      	beq.n	800622a <I2C_ITError+0x6a>
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	2b60      	cmp	r3, #96	; 0x60
 8006220:	d003      	beq.n	800622a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006246:	d162      	bne.n	800630e <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006256:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b01      	cmp	r3, #1
 8006264:	d020      	beq.n	80062a8 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626a:	4a6a      	ldr	r2, [pc, #424]	; (8006414 <I2C_ITError+0x254>)
 800626c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006272:	4618      	mov	r0, r3
 8006274:	f7fc f9e8 	bl	8002648 <HAL_DMA_Abort_IT>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 8089 	beq.w	8006392 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0201 	bic.w	r2, r2, #1
 800628e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062a2:	4610      	mov	r0, r2
 80062a4:	4798      	blx	r3
 80062a6:	e074      	b.n	8006392 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	4a59      	ldr	r2, [pc, #356]	; (8006414 <I2C_ITError+0x254>)
 80062ae:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fc f9c7 	bl	8002648 <HAL_DMA_Abort_IT>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d068      	beq.n	8006392 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ca:	2b40      	cmp	r3, #64	; 0x40
 80062cc:	d10b      	bne.n	80062e6 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0201 	bic.w	r2, r2, #1
 80062f4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006308:	4610      	mov	r0, r2
 800630a:	4798      	blx	r3
 800630c:	e041      	b.n	8006392 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b60      	cmp	r3, #96	; 0x60
 8006318:	d125      	bne.n	8006366 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006332:	2b40      	cmp	r3, #64	; 0x40
 8006334:	d10b      	bne.n	800634e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0201 	bic.w	r2, r2, #1
 800635c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fe ff51 	bl	8005206 <HAL_I2C_AbortCpltCallback>
 8006364:	e015      	b.n	8006392 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b40      	cmp	r3, #64	; 0x40
 8006372:	d10b      	bne.n	800638c <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691a      	ldr	r2, [r3, #16]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7fe ff30 	bl	80051f2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10e      	bne.n	80063c0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d109      	bne.n	80063c0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d104      	bne.n	80063c0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d007      	beq.n	80063d0 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063ce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	d113      	bne.n	800640c <I2C_ITError+0x24c>
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	2b28      	cmp	r3, #40	; 0x28
 80063e8:	d110      	bne.n	800640c <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a0a      	ldr	r2, [pc, #40]	; (8006418 <I2C_ITError+0x258>)
 80063ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fe fed5 	bl	80051b6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800640c:	bf00      	nop
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	080067e1 	.word	0x080067e1
 8006418:	ffff0000 	.word	0xffff0000

0800641c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af02      	add	r7, sp, #8
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	607a      	str	r2, [r7, #4]
 8006426:	603b      	str	r3, [r7, #0]
 8006428:	460b      	mov	r3, r1
 800642a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2b08      	cmp	r3, #8
 8006436:	d006      	beq.n	8006446 <I2C_MasterRequestWrite+0x2a>
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d003      	beq.n	8006446 <I2C_MasterRequestWrite+0x2a>
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006444:	d108      	bne.n	8006458 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e00b      	b.n	8006470 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	2b12      	cmp	r3, #18
 800645e:	d107      	bne.n	8006470 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800646e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 fa2e 	bl	80068de <I2C_WaitOnFlagUntilTimeout>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00c      	beq.n	80064a2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800649c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e035      	b.n	800650e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064aa:	d108      	bne.n	80064be <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064ac:	897b      	ldrh	r3, [r7, #10]
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064ba:	611a      	str	r2, [r3, #16]
 80064bc:	e01b      	b.n	80064f6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80064be:	897b      	ldrh	r3, [r7, #10]
 80064c0:	11db      	asrs	r3, r3, #7
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	f003 0306 	and.w	r3, r3, #6
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	f063 030f 	orn	r3, r3, #15
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	490f      	ldr	r1, [pc, #60]	; (8006518 <I2C_MasterRequestWrite+0xfc>)
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 fa55 	bl	800698c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e010      	b.n	800650e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80064ec:	897b      	ldrh	r3, [r7, #10]
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	4908      	ldr	r1, [pc, #32]	; (800651c <I2C_MasterRequestWrite+0x100>)
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 fa45 	bl	800698c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e000      	b.n	800650e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	00010008 	.word	0x00010008
 800651c:	00010002 	.word	0x00010002

08006520 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b088      	sub	sp, #32
 8006524:	af02      	add	r7, sp, #8
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	607a      	str	r2, [r7, #4]
 800652a:	603b      	str	r3, [r7, #0]
 800652c:	460b      	mov	r3, r1
 800652e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006544:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b08      	cmp	r3, #8
 800654a:	d006      	beq.n	800655a <I2C_MasterRequestRead+0x3a>
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d003      	beq.n	800655a <I2C_MasterRequestRead+0x3a>
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006558:	d108      	bne.n	800656c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	e00b      	b.n	8006584 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	2b11      	cmp	r3, #17
 8006572:	d107      	bne.n	8006584 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006582:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f9a4 	bl	80068de <I2C_WaitOnFlagUntilTimeout>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00c      	beq.n	80065b6 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e078      	b.n	80066a8 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065be:	d108      	bne.n	80065d2 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80065c0:	897b      	ldrh	r3, [r7, #10]
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	f043 0301 	orr.w	r3, r3, #1
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	611a      	str	r2, [r3, #16]
 80065d0:	e05e      	b.n	8006690 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80065d2:	897b      	ldrh	r3, [r7, #10]
 80065d4:	11db      	asrs	r3, r3, #7
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	f003 0306 	and.w	r3, r3, #6
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	f063 030f 	orn	r3, r3, #15
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	4930      	ldr	r1, [pc, #192]	; (80066b0 <I2C_MasterRequestRead+0x190>)
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f9cb 	bl	800698c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e053      	b.n	80066a8 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006600:	897b      	ldrh	r3, [r7, #10]
 8006602:	b2da      	uxtb	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4929      	ldr	r1, [pc, #164]	; (80066b4 <I2C_MasterRequestRead+0x194>)
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 f9bb 	bl	800698c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e043      	b.n	80066a8 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006620:	2300      	movs	r3, #0
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	613b      	str	r3, [r7, #16]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006644:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f943 	bl	80068de <I2C_WaitOnFlagUntilTimeout>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006672:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e017      	b.n	80066a8 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006678:	897b      	ldrh	r3, [r7, #10]
 800667a:	11db      	asrs	r3, r3, #7
 800667c:	b2db      	uxtb	r3, r3
 800667e:	f003 0306 	and.w	r3, r3, #6
 8006682:	b2db      	uxtb	r3, r3
 8006684:	f063 030e 	orn	r3, r3, #14
 8006688:	b2da      	uxtb	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4907      	ldr	r1, [pc, #28]	; (80066b4 <I2C_MasterRequestRead+0x194>)
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 f978 	bl	800698c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e000      	b.n	80066a8 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	00010008 	.word	0x00010008
 80066b4:	00010002 	.word	0x00010002

080066b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af02      	add	r7, sp, #8
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	4608      	mov	r0, r1
 80066c2:	4611      	mov	r1, r2
 80066c4:	461a      	mov	r2, r3
 80066c6:	4603      	mov	r3, r0
 80066c8:	817b      	strh	r3, [r7, #10]
 80066ca:	460b      	mov	r3, r1
 80066cc:	813b      	strh	r3, [r7, #8]
 80066ce:	4613      	mov	r3, r2
 80066d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 f8f5 	bl	80068de <I2C_WaitOnFlagUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00c      	beq.n	8006714 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800670e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e05f      	b.n	80067d4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006714:	897b      	ldrh	r3, [r7, #10]
 8006716:	b2db      	uxtb	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006722:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	6a3a      	ldr	r2, [r7, #32]
 8006728:	492c      	ldr	r1, [pc, #176]	; (80067dc <I2C_RequestMemoryWrite+0x124>)
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 f92e 	bl	800698c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e04c      	b.n	80067d4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006752:	6a39      	ldr	r1, [r7, #32]
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 f998 	bl	8006a8a <I2C_WaitOnTXEFlagUntilTimeout>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00d      	beq.n	800677c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006764:	2b04      	cmp	r3, #4
 8006766:	d107      	bne.n	8006778 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006776:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e02b      	b.n	80067d4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800677c:	88fb      	ldrh	r3, [r7, #6]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d105      	bne.n	800678e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006782:	893b      	ldrh	r3, [r7, #8]
 8006784:	b2da      	uxtb	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	611a      	str	r2, [r3, #16]
 800678c:	e021      	b.n	80067d2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800678e:	893b      	ldrh	r3, [r7, #8]
 8006790:	0a1b      	lsrs	r3, r3, #8
 8006792:	b29b      	uxth	r3, r3
 8006794:	b2da      	uxtb	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800679c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679e:	6a39      	ldr	r1, [r7, #32]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f972 	bl	8006a8a <I2C_WaitOnTXEFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00d      	beq.n	80067c8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d107      	bne.n	80067c4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e005      	b.n	80067d4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067c8:	893b      	ldrh	r3, [r7, #8]
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	00010002 	.word	0x00010002

080067e0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ec:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006802:	2200      	movs	r2, #0
 8006804:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	2200      	movs	r2, #0
 8006814:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006824:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006838:	2200      	movs	r2, #0
 800683a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	2200      	movs	r2, #0
 800684a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0201 	bic.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b60      	cmp	r3, #96	; 0x60
 8006866:	d10e      	bne.n	8006886 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f7fe fcc1 	bl	8005206 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006884:	e027      	b.n	80068d6 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006886:	7afb      	ldrb	r3, [r7, #11]
 8006888:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800688c:	2b28      	cmp	r3, #40	; 0x28
 800688e:	d117      	bne.n	80068c0 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0201 	orr.w	r2, r2, #1
 800689e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2228      	movs	r2, #40	; 0x28
 80068ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80068be:	e007      	b.n	80068d0 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7fe fc8e 	bl	80051f2 <HAL_I2C_ErrorCallback>
}
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	60b9      	str	r1, [r7, #8]
 80068e8:	603b      	str	r3, [r7, #0]
 80068ea:	4613      	mov	r3, r2
 80068ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068ee:	e025      	b.n	800693c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f6:	d021      	beq.n	800693c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068f8:	f7fb f95a 	bl	8001bb0 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	d302      	bcc.n	800690e <I2C_WaitOnFlagUntilTimeout+0x30>
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d116      	bne.n	800693c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	f043 0220 	orr.w	r2, r3, #32
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e023      	b.n	8006984 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	0c1b      	lsrs	r3, r3, #16
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b01      	cmp	r3, #1
 8006944:	d10d      	bne.n	8006962 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	43da      	mvns	r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4013      	ands	r3, r2
 8006952:	b29b      	uxth	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	bf0c      	ite	eq
 8006958:	2301      	moveq	r3, #1
 800695a:	2300      	movne	r3, #0
 800695c:	b2db      	uxtb	r3, r3
 800695e:	461a      	mov	r2, r3
 8006960:	e00c      	b.n	800697c <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	43da      	mvns	r2, r3
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	4013      	ands	r3, r2
 800696e:	b29b      	uxth	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	bf0c      	ite	eq
 8006974:	2301      	moveq	r3, #1
 8006976:	2300      	movne	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	461a      	mov	r2, r3
 800697c:	79fb      	ldrb	r3, [r7, #7]
 800697e:	429a      	cmp	r2, r3
 8006980:	d0b6      	beq.n	80068f0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800699a:	e051      	b.n	8006a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069aa:	d123      	bne.n	80069f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2220      	movs	r2, #32
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e0:	f043 0204 	orr.w	r2, r3, #4
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e046      	b.n	8006a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069fa:	d021      	beq.n	8006a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069fc:	f7fb f8d8 	bl	8001bb0 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d302      	bcc.n	8006a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d116      	bne.n	8006a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	f043 0220 	orr.w	r2, r3, #32
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e020      	b.n	8006a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	0c1b      	lsrs	r3, r3, #16
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d10c      	bne.n	8006a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	43da      	mvns	r2, r3
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	4013      	ands	r3, r2
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	bf14      	ite	ne
 8006a5c:	2301      	movne	r3, #1
 8006a5e:	2300      	moveq	r3, #0
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	e00b      	b.n	8006a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	43da      	mvns	r2, r3
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4013      	ands	r3, r2
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	bf14      	ite	ne
 8006a76:	2301      	movne	r3, #1
 8006a78:	2300      	moveq	r3, #0
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d18d      	bne.n	800699c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a96:	e02d      	b.n	8006af4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 f8ce 	bl	8006c3a <I2C_IsAcknowledgeFailed>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e02d      	b.n	8006b04 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aae:	d021      	beq.n	8006af4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab0:	f7fb f87e 	bl	8001bb0 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d302      	bcc.n	8006ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d116      	bne.n	8006af4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae0:	f043 0220 	orr.w	r2, r3, #32
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e007      	b.n	8006b04 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afe:	2b80      	cmp	r3, #128	; 0x80
 8006b00:	d1ca      	bne.n	8006a98 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b18:	e02d      	b.n	8006b76 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 f88d 	bl	8006c3a <I2C_IsAcknowledgeFailed>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e02d      	b.n	8006b86 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b30:	d021      	beq.n	8006b76 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b32:	f7fb f83d 	bl	8001bb0 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d302      	bcc.n	8006b48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d116      	bne.n	8006b76 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	f043 0220 	orr.w	r2, r3, #32
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e007      	b.n	8006b86 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d1ca      	bne.n	8006b1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	60f8      	str	r0, [r7, #12]
 8006b96:	60b9      	str	r1, [r7, #8]
 8006b98:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b9a:	e042      	b.n	8006c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	f003 0310 	and.w	r3, r3, #16
 8006ba6:	2b10      	cmp	r3, #16
 8006ba8:	d119      	bne.n	8006bde <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f06f 0210 	mvn.w	r2, #16
 8006bb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e029      	b.n	8006c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bde:	f7fa ffe7 	bl	8001bb0 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d302      	bcc.n	8006bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d116      	bne.n	8006c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	f043 0220 	orr.w	r2, r3, #32
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e007      	b.n	8006c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2c:	2b40      	cmp	r3, #64	; 0x40
 8006c2e:	d1b5      	bne.n	8006b9c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c50:	d11b      	bne.n	8006c8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	f043 0204 	orr.w	r2, r3, #4
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006ca8:	d103      	bne.n	8006cb2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006cb0:	e007      	b.n	8006cc2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006cba:	d102      	bne.n	8006cc2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2208      	movs	r2, #8
 8006cc0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
	...

08006cd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e25b      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d075      	beq.n	8006dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006cee:	4ba3      	ldr	r3, [pc, #652]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 030c 	and.w	r3, r3, #12
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	d00c      	beq.n	8006d14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cfa:	4ba0      	ldr	r3, [pc, #640]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d02:	2b08      	cmp	r3, #8
 8006d04:	d112      	bne.n	8006d2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d06:	4b9d      	ldr	r3, [pc, #628]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d12:	d10b      	bne.n	8006d2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d14:	4b99      	ldr	r3, [pc, #612]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d05b      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x108>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d157      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e236      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d34:	d106      	bne.n	8006d44 <HAL_RCC_OscConfig+0x74>
 8006d36:	4b91      	ldr	r3, [pc, #580]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a90      	ldr	r2, [pc, #576]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	e01d      	b.n	8006d80 <HAL_RCC_OscConfig+0xb0>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d4c:	d10c      	bne.n	8006d68 <HAL_RCC_OscConfig+0x98>
 8006d4e:	4b8b      	ldr	r3, [pc, #556]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a8a      	ldr	r2, [pc, #552]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	4b88      	ldr	r3, [pc, #544]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a87      	ldr	r2, [pc, #540]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	e00b      	b.n	8006d80 <HAL_RCC_OscConfig+0xb0>
 8006d68:	4b84      	ldr	r3, [pc, #528]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a83      	ldr	r2, [pc, #524]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	4b81      	ldr	r3, [pc, #516]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a80      	ldr	r2, [pc, #512]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d013      	beq.n	8006db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d88:	f7fa ff12 	bl	8001bb0 <HAL_GetTick>
 8006d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d8e:	e008      	b.n	8006da2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d90:	f7fa ff0e 	bl	8001bb0 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	2b64      	cmp	r3, #100	; 0x64
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e1fb      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006da2:	4b76      	ldr	r3, [pc, #472]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0f0      	beq.n	8006d90 <HAL_RCC_OscConfig+0xc0>
 8006dae:	e014      	b.n	8006dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db0:	f7fa fefe 	bl	8001bb0 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006db8:	f7fa fefa 	bl	8001bb0 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b64      	cmp	r3, #100	; 0x64
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e1e7      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dca:	4b6c      	ldr	r3, [pc, #432]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f0      	bne.n	8006db8 <HAL_RCC_OscConfig+0xe8>
 8006dd6:	e000      	b.n	8006dda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d063      	beq.n	8006eae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006de6:	4b65      	ldr	r3, [pc, #404]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 030c 	and.w	r3, r3, #12
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00b      	beq.n	8006e0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006df2:	4b62      	ldr	r3, [pc, #392]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006dfa:	2b08      	cmp	r3, #8
 8006dfc:	d11c      	bne.n	8006e38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dfe:	4b5f      	ldr	r3, [pc, #380]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d116      	bne.n	8006e38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e0a:	4b5c      	ldr	r3, [pc, #368]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d005      	beq.n	8006e22 <HAL_RCC_OscConfig+0x152>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d001      	beq.n	8006e22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e1bb      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e22:	4b56      	ldr	r3, [pc, #344]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	4952      	ldr	r1, [pc, #328]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e36:	e03a      	b.n	8006eae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d020      	beq.n	8006e82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e40:	4b4f      	ldr	r3, [pc, #316]	; (8006f80 <HAL_RCC_OscConfig+0x2b0>)
 8006e42:	2201      	movs	r2, #1
 8006e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e46:	f7fa feb3 	bl	8001bb0 <HAL_GetTick>
 8006e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e4c:	e008      	b.n	8006e60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e4e:	f7fa feaf 	bl	8001bb0 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e19c      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e60:	4b46      	ldr	r3, [pc, #280]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d0f0      	beq.n	8006e4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e6c:	4b43      	ldr	r3, [pc, #268]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	4940      	ldr	r1, [pc, #256]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	600b      	str	r3, [r1, #0]
 8006e80:	e015      	b.n	8006eae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e82:	4b3f      	ldr	r3, [pc, #252]	; (8006f80 <HAL_RCC_OscConfig+0x2b0>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e88:	f7fa fe92 	bl	8001bb0 <HAL_GetTick>
 8006e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e8e:	e008      	b.n	8006ea2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e90:	f7fa fe8e 	bl	8001bb0 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d901      	bls.n	8006ea2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e17b      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ea2:	4b36      	ldr	r3, [pc, #216]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1f0      	bne.n	8006e90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0308 	and.w	r3, r3, #8
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d030      	beq.n	8006f1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d016      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ec2:	4b30      	ldr	r3, [pc, #192]	; (8006f84 <HAL_RCC_OscConfig+0x2b4>)
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec8:	f7fa fe72 	bl	8001bb0 <HAL_GetTick>
 8006ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ed0:	f7fa fe6e 	bl	8001bb0 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e15b      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ee2:	4b26      	ldr	r3, [pc, #152]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0f0      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x200>
 8006eee:	e015      	b.n	8006f1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ef0:	4b24      	ldr	r3, [pc, #144]	; (8006f84 <HAL_RCC_OscConfig+0x2b4>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ef6:	f7fa fe5b 	bl	8001bb0 <HAL_GetTick>
 8006efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006efc:	e008      	b.n	8006f10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006efe:	f7fa fe57 	bl	8001bb0 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d901      	bls.n	8006f10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e144      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f10:	4b1a      	ldr	r3, [pc, #104]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1f0      	bne.n	8006efe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 80a0 	beq.w	800706a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f2e:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10f      	bne.n	8006f5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60bb      	str	r3, [r7, #8]
 8006f3e:	4b0f      	ldr	r3, [pc, #60]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	4a0e      	ldr	r2, [pc, #56]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f48:	6413      	str	r3, [r2, #64]	; 0x40
 8006f4a:	4b0c      	ldr	r3, [pc, #48]	; (8006f7c <HAL_RCC_OscConfig+0x2ac>)
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f52:	60bb      	str	r3, [r7, #8]
 8006f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f56:	2301      	movs	r3, #1
 8006f58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f5a:	4b0b      	ldr	r3, [pc, #44]	; (8006f88 <HAL_RCC_OscConfig+0x2b8>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d121      	bne.n	8006faa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f66:	4b08      	ldr	r3, [pc, #32]	; (8006f88 <HAL_RCC_OscConfig+0x2b8>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a07      	ldr	r2, [pc, #28]	; (8006f88 <HAL_RCC_OscConfig+0x2b8>)
 8006f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f72:	f7fa fe1d 	bl	8001bb0 <HAL_GetTick>
 8006f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f78:	e011      	b.n	8006f9e <HAL_RCC_OscConfig+0x2ce>
 8006f7a:	bf00      	nop
 8006f7c:	40023800 	.word	0x40023800
 8006f80:	42470000 	.word	0x42470000
 8006f84:	42470e80 	.word	0x42470e80
 8006f88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f8c:	f7fa fe10 	bl	8001bb0 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e0fd      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f9e:	4b81      	ldr	r3, [pc, #516]	; (80071a4 <HAL_RCC_OscConfig+0x4d4>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0f0      	beq.n	8006f8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d106      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x2f0>
 8006fb2:	4b7d      	ldr	r3, [pc, #500]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 8006fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb6:	4a7c      	ldr	r2, [pc, #496]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 8006fb8:	f043 0301 	orr.w	r3, r3, #1
 8006fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8006fbe:	e01c      	b.n	8006ffa <HAL_RCC_OscConfig+0x32a>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	2b05      	cmp	r3, #5
 8006fc6:	d10c      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x312>
 8006fc8:	4b77      	ldr	r3, [pc, #476]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 8006fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fcc:	4a76      	ldr	r2, [pc, #472]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 8006fce:	f043 0304 	orr.w	r3, r3, #4
 8006fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8006fd4:	4b74      	ldr	r3, [pc, #464]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 8006fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd8:	4a73      	ldr	r2, [pc, #460]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 8006fda:	f043 0301 	orr.w	r3, r3, #1
 8006fde:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe0:	e00b      	b.n	8006ffa <HAL_RCC_OscConfig+0x32a>
 8006fe2:	4b71      	ldr	r3, [pc, #452]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe6:	4a70      	ldr	r2, [pc, #448]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 8006fe8:	f023 0301 	bic.w	r3, r3, #1
 8006fec:	6713      	str	r3, [r2, #112]	; 0x70
 8006fee:	4b6e      	ldr	r3, [pc, #440]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff2:	4a6d      	ldr	r2, [pc, #436]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 8006ff4:	f023 0304 	bic.w	r3, r3, #4
 8006ff8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d015      	beq.n	800702e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007002:	f7fa fdd5 	bl	8001bb0 <HAL_GetTick>
 8007006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007008:	e00a      	b.n	8007020 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800700a:	f7fa fdd1 	bl	8001bb0 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	f241 3288 	movw	r2, #5000	; 0x1388
 8007018:	4293      	cmp	r3, r2
 800701a:	d901      	bls.n	8007020 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e0bc      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007020:	4b61      	ldr	r3, [pc, #388]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 8007022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0ee      	beq.n	800700a <HAL_RCC_OscConfig+0x33a>
 800702c:	e014      	b.n	8007058 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800702e:	f7fa fdbf 	bl	8001bb0 <HAL_GetTick>
 8007032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007034:	e00a      	b.n	800704c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007036:	f7fa fdbb 	bl	8001bb0 <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	f241 3288 	movw	r2, #5000	; 0x1388
 8007044:	4293      	cmp	r3, r2
 8007046:	d901      	bls.n	800704c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e0a6      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800704c:	4b56      	ldr	r3, [pc, #344]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 800704e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1ee      	bne.n	8007036 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007058:	7dfb      	ldrb	r3, [r7, #23]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d105      	bne.n	800706a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800705e:	4b52      	ldr	r3, [pc, #328]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	4a51      	ldr	r2, [pc, #324]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 8007064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007068:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 8092 	beq.w	8007198 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007074:	4b4c      	ldr	r3, [pc, #304]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 030c 	and.w	r3, r3, #12
 800707c:	2b08      	cmp	r3, #8
 800707e:	d05c      	beq.n	800713a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	2b02      	cmp	r3, #2
 8007086:	d141      	bne.n	800710c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007088:	4b48      	ldr	r3, [pc, #288]	; (80071ac <HAL_RCC_OscConfig+0x4dc>)
 800708a:	2200      	movs	r2, #0
 800708c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800708e:	f7fa fd8f 	bl	8001bb0 <HAL_GetTick>
 8007092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007094:	e008      	b.n	80070a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007096:	f7fa fd8b 	bl	8001bb0 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d901      	bls.n	80070a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e078      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070a8:	4b3f      	ldr	r3, [pc, #252]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1f0      	bne.n	8007096 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	431a      	orrs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	019b      	lsls	r3, r3, #6
 80070c4:	431a      	orrs	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ca:	085b      	lsrs	r3, r3, #1
 80070cc:	3b01      	subs	r3, #1
 80070ce:	041b      	lsls	r3, r3, #16
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d6:	061b      	lsls	r3, r3, #24
 80070d8:	4933      	ldr	r1, [pc, #204]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070de:	4b33      	ldr	r3, [pc, #204]	; (80071ac <HAL_RCC_OscConfig+0x4dc>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e4:	f7fa fd64 	bl	8001bb0 <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070ec:	f7fa fd60 	bl	8001bb0 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e04d      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070fe:	4b2a      	ldr	r3, [pc, #168]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0f0      	beq.n	80070ec <HAL_RCC_OscConfig+0x41c>
 800710a:	e045      	b.n	8007198 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800710c:	4b27      	ldr	r3, [pc, #156]	; (80071ac <HAL_RCC_OscConfig+0x4dc>)
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007112:	f7fa fd4d 	bl	8001bb0 <HAL_GetTick>
 8007116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800711a:	f7fa fd49 	bl	8001bb0 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e036      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800712c:	4b1e      	ldr	r3, [pc, #120]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f0      	bne.n	800711a <HAL_RCC_OscConfig+0x44a>
 8007138:	e02e      	b.n	8007198 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d101      	bne.n	8007146 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e029      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007146:	4b18      	ldr	r3, [pc, #96]	; (80071a8 <HAL_RCC_OscConfig+0x4d8>)
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	429a      	cmp	r2, r3
 8007158:	d11c      	bne.n	8007194 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007164:	429a      	cmp	r2, r3
 8007166:	d115      	bne.n	8007194 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800716e:	4013      	ands	r3, r2
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007174:	4293      	cmp	r3, r2
 8007176:	d10d      	bne.n	8007194 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007182:	429a      	cmp	r2, r3
 8007184:	d106      	bne.n	8007194 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007190:	429a      	cmp	r2, r3
 8007192:	d001      	beq.n	8007198 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e000      	b.n	800719a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	40007000 	.word	0x40007000
 80071a8:	40023800 	.word	0x40023800
 80071ac:	42470060 	.word	0x42470060

080071b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e0cc      	b.n	800735e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071c4:	4b68      	ldr	r3, [pc, #416]	; (8007368 <HAL_RCC_ClockConfig+0x1b8>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 030f 	and.w	r3, r3, #15
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d90c      	bls.n	80071ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071d2:	4b65      	ldr	r3, [pc, #404]	; (8007368 <HAL_RCC_ClockConfig+0x1b8>)
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	b2d2      	uxtb	r2, r2
 80071d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071da:	4b63      	ldr	r3, [pc, #396]	; (8007368 <HAL_RCC_ClockConfig+0x1b8>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 030f 	and.w	r3, r3, #15
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d001      	beq.n	80071ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0b8      	b.n	800735e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d020      	beq.n	800723a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b00      	cmp	r3, #0
 8007202:	d005      	beq.n	8007210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007204:	4b59      	ldr	r3, [pc, #356]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	4a58      	ldr	r2, [pc, #352]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 800720a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800720e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0308 	and.w	r3, r3, #8
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800721c:	4b53      	ldr	r3, [pc, #332]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	4a52      	ldr	r2, [pc, #328]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 8007222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007228:	4b50      	ldr	r3, [pc, #320]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	494d      	ldr	r1, [pc, #308]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 8007236:	4313      	orrs	r3, r2
 8007238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d044      	beq.n	80072d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d107      	bne.n	800725e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800724e:	4b47      	ldr	r3, [pc, #284]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d119      	bne.n	800728e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e07f      	b.n	800735e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d003      	beq.n	800726e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800726a:	2b03      	cmp	r3, #3
 800726c:	d107      	bne.n	800727e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800726e:	4b3f      	ldr	r3, [pc, #252]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d109      	bne.n	800728e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e06f      	b.n	800735e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800727e:	4b3b      	ldr	r3, [pc, #236]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e067      	b.n	800735e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800728e:	4b37      	ldr	r3, [pc, #220]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f023 0203 	bic.w	r2, r3, #3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	4934      	ldr	r1, [pc, #208]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 800729c:	4313      	orrs	r3, r2
 800729e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072a0:	f7fa fc86 	bl	8001bb0 <HAL_GetTick>
 80072a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072a6:	e00a      	b.n	80072be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072a8:	f7fa fc82 	bl	8001bb0 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d901      	bls.n	80072be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e04f      	b.n	800735e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072be:	4b2b      	ldr	r3, [pc, #172]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f003 020c 	and.w	r2, r3, #12
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d1eb      	bne.n	80072a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072d0:	4b25      	ldr	r3, [pc, #148]	; (8007368 <HAL_RCC_ClockConfig+0x1b8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 030f 	and.w	r3, r3, #15
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d20c      	bcs.n	80072f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072de:	4b22      	ldr	r3, [pc, #136]	; (8007368 <HAL_RCC_ClockConfig+0x1b8>)
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072e6:	4b20      	ldr	r3, [pc, #128]	; (8007368 <HAL_RCC_ClockConfig+0x1b8>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 030f 	and.w	r3, r3, #15
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d001      	beq.n	80072f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e032      	b.n	800735e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d008      	beq.n	8007316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007304:	4b19      	ldr	r3, [pc, #100]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	4916      	ldr	r1, [pc, #88]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 8007312:	4313      	orrs	r3, r2
 8007314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0308 	and.w	r3, r3, #8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d009      	beq.n	8007336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007322:	4b12      	ldr	r3, [pc, #72]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	490e      	ldr	r1, [pc, #56]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 8007332:	4313      	orrs	r3, r2
 8007334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007336:	f000 f889 	bl	800744c <HAL_RCC_GetSysClockFreq>
 800733a:	4601      	mov	r1, r0
 800733c:	4b0b      	ldr	r3, [pc, #44]	; (800736c <HAL_RCC_ClockConfig+0x1bc>)
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	091b      	lsrs	r3, r3, #4
 8007342:	f003 030f 	and.w	r3, r3, #15
 8007346:	4a0a      	ldr	r2, [pc, #40]	; (8007370 <HAL_RCC_ClockConfig+0x1c0>)
 8007348:	5cd3      	ldrb	r3, [r2, r3]
 800734a:	fa21 f303 	lsr.w	r3, r1, r3
 800734e:	4a09      	ldr	r2, [pc, #36]	; (8007374 <HAL_RCC_ClockConfig+0x1c4>)
 8007350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007352:	4b09      	ldr	r3, [pc, #36]	; (8007378 <HAL_RCC_ClockConfig+0x1c8>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4618      	mov	r0, r3
 8007358:	f7fa fbe6 	bl	8001b28 <HAL_InitTick>

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	40023c00 	.word	0x40023c00
 800736c:	40023800 	.word	0x40023800
 8007370:	0800a39c 	.word	0x0800a39c
 8007374:	20000030 	.word	0x20000030
 8007378:	20000034 	.word	0x20000034

0800737c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08c      	sub	sp, #48	; 0x30
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d129      	bne.n	80073e2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800738e:	2300      	movs	r3, #0
 8007390:	61bb      	str	r3, [r7, #24]
 8007392:	4b2b      	ldr	r3, [pc, #172]	; (8007440 <HAL_RCC_MCOConfig+0xc4>)
 8007394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007396:	4a2a      	ldr	r2, [pc, #168]	; (8007440 <HAL_RCC_MCOConfig+0xc4>)
 8007398:	f043 0301 	orr.w	r3, r3, #1
 800739c:	6313      	str	r3, [r2, #48]	; 0x30
 800739e:	4b28      	ldr	r3, [pc, #160]	; (8007440 <HAL_RCC_MCOConfig+0xc4>)
 80073a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	61bb      	str	r3, [r7, #24]
 80073a8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80073aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073b0:	2302      	movs	r3, #2
 80073b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073b4:	2303      	movs	r3, #3
 80073b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b8:	2300      	movs	r3, #0
 80073ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80073bc:	2300      	movs	r3, #0
 80073be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80073c0:	f107 031c 	add.w	r3, r7, #28
 80073c4:	4619      	mov	r1, r3
 80073c6:	481f      	ldr	r0, [pc, #124]	; (8007444 <HAL_RCC_MCOConfig+0xc8>)
 80073c8:	f7fc fd5e 	bl	8003e88 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80073cc:	4b1c      	ldr	r3, [pc, #112]	; (8007440 <HAL_RCC_MCOConfig+0xc4>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	430b      	orrs	r3, r1
 80073da:	4919      	ldr	r1, [pc, #100]	; (8007440 <HAL_RCC_MCOConfig+0xc4>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80073e0:	e029      	b.n	8007436 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80073e2:	2300      	movs	r3, #0
 80073e4:	617b      	str	r3, [r7, #20]
 80073e6:	4b16      	ldr	r3, [pc, #88]	; (8007440 <HAL_RCC_MCOConfig+0xc4>)
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	4a15      	ldr	r2, [pc, #84]	; (8007440 <HAL_RCC_MCOConfig+0xc4>)
 80073ec:	f043 0304 	orr.w	r3, r3, #4
 80073f0:	6313      	str	r3, [r2, #48]	; 0x30
 80073f2:	4b13      	ldr	r3, [pc, #76]	; (8007440 <HAL_RCC_MCOConfig+0xc4>)
 80073f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f6:	f003 0304 	and.w	r3, r3, #4
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80073fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007404:	2302      	movs	r3, #2
 8007406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007408:	2303      	movs	r3, #3
 800740a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800740c:	2300      	movs	r3, #0
 800740e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007410:	2300      	movs	r3, #0
 8007412:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007414:	f107 031c 	add.w	r3, r7, #28
 8007418:	4619      	mov	r1, r3
 800741a:	480b      	ldr	r0, [pc, #44]	; (8007448 <HAL_RCC_MCOConfig+0xcc>)
 800741c:	f7fc fd34 	bl	8003e88 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8007420:	4b07      	ldr	r3, [pc, #28]	; (8007440 <HAL_RCC_MCOConfig+0xc4>)
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	00d9      	lsls	r1, r3, #3
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	430b      	orrs	r3, r1
 8007430:	4903      	ldr	r1, [pc, #12]	; (8007440 <HAL_RCC_MCOConfig+0xc4>)
 8007432:	4313      	orrs	r3, r2
 8007434:	608b      	str	r3, [r1, #8]
}
 8007436:	bf00      	nop
 8007438:	3730      	adds	r7, #48	; 0x30
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	40023800 	.word	0x40023800
 8007444:	40020000 	.word	0x40020000
 8007448:	40020800 	.word	0x40020800

0800744c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800744c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	607b      	str	r3, [r7, #4]
 8007456:	2300      	movs	r3, #0
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	2300      	movs	r3, #0
 800745c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007462:	4b63      	ldr	r3, [pc, #396]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f003 030c 	and.w	r3, r3, #12
 800746a:	2b04      	cmp	r3, #4
 800746c:	d007      	beq.n	800747e <HAL_RCC_GetSysClockFreq+0x32>
 800746e:	2b08      	cmp	r3, #8
 8007470:	d008      	beq.n	8007484 <HAL_RCC_GetSysClockFreq+0x38>
 8007472:	2b00      	cmp	r3, #0
 8007474:	f040 80b4 	bne.w	80075e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007478:	4b5e      	ldr	r3, [pc, #376]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800747a:	60bb      	str	r3, [r7, #8]
       break;
 800747c:	e0b3      	b.n	80075e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800747e:	4b5e      	ldr	r3, [pc, #376]	; (80075f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007480:	60bb      	str	r3, [r7, #8]
      break;
 8007482:	e0b0      	b.n	80075e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007484:	4b5a      	ldr	r3, [pc, #360]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800748c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800748e:	4b58      	ldr	r3, [pc, #352]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d04a      	beq.n	8007530 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800749a:	4b55      	ldr	r3, [pc, #340]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	099b      	lsrs	r3, r3, #6
 80074a0:	f04f 0400 	mov.w	r4, #0
 80074a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80074a8:	f04f 0200 	mov.w	r2, #0
 80074ac:	ea03 0501 	and.w	r5, r3, r1
 80074b0:	ea04 0602 	and.w	r6, r4, r2
 80074b4:	4629      	mov	r1, r5
 80074b6:	4632      	mov	r2, r6
 80074b8:	f04f 0300 	mov.w	r3, #0
 80074bc:	f04f 0400 	mov.w	r4, #0
 80074c0:	0154      	lsls	r4, r2, #5
 80074c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80074c6:	014b      	lsls	r3, r1, #5
 80074c8:	4619      	mov	r1, r3
 80074ca:	4622      	mov	r2, r4
 80074cc:	1b49      	subs	r1, r1, r5
 80074ce:	eb62 0206 	sbc.w	r2, r2, r6
 80074d2:	f04f 0300 	mov.w	r3, #0
 80074d6:	f04f 0400 	mov.w	r4, #0
 80074da:	0194      	lsls	r4, r2, #6
 80074dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80074e0:	018b      	lsls	r3, r1, #6
 80074e2:	1a5b      	subs	r3, r3, r1
 80074e4:	eb64 0402 	sbc.w	r4, r4, r2
 80074e8:	f04f 0100 	mov.w	r1, #0
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	00e2      	lsls	r2, r4, #3
 80074f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80074f6:	00d9      	lsls	r1, r3, #3
 80074f8:	460b      	mov	r3, r1
 80074fa:	4614      	mov	r4, r2
 80074fc:	195b      	adds	r3, r3, r5
 80074fe:	eb44 0406 	adc.w	r4, r4, r6
 8007502:	f04f 0100 	mov.w	r1, #0
 8007506:	f04f 0200 	mov.w	r2, #0
 800750a:	0262      	lsls	r2, r4, #9
 800750c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007510:	0259      	lsls	r1, r3, #9
 8007512:	460b      	mov	r3, r1
 8007514:	4614      	mov	r4, r2
 8007516:	4618      	mov	r0, r3
 8007518:	4621      	mov	r1, r4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f04f 0400 	mov.w	r4, #0
 8007520:	461a      	mov	r2, r3
 8007522:	4623      	mov	r3, r4
 8007524:	f7f8 feac 	bl	8000280 <__aeabi_uldivmod>
 8007528:	4603      	mov	r3, r0
 800752a:	460c      	mov	r4, r1
 800752c:	60fb      	str	r3, [r7, #12]
 800752e:	e049      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007530:	4b2f      	ldr	r3, [pc, #188]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	099b      	lsrs	r3, r3, #6
 8007536:	f04f 0400 	mov.w	r4, #0
 800753a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800753e:	f04f 0200 	mov.w	r2, #0
 8007542:	ea03 0501 	and.w	r5, r3, r1
 8007546:	ea04 0602 	and.w	r6, r4, r2
 800754a:	4629      	mov	r1, r5
 800754c:	4632      	mov	r2, r6
 800754e:	f04f 0300 	mov.w	r3, #0
 8007552:	f04f 0400 	mov.w	r4, #0
 8007556:	0154      	lsls	r4, r2, #5
 8007558:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800755c:	014b      	lsls	r3, r1, #5
 800755e:	4619      	mov	r1, r3
 8007560:	4622      	mov	r2, r4
 8007562:	1b49      	subs	r1, r1, r5
 8007564:	eb62 0206 	sbc.w	r2, r2, r6
 8007568:	f04f 0300 	mov.w	r3, #0
 800756c:	f04f 0400 	mov.w	r4, #0
 8007570:	0194      	lsls	r4, r2, #6
 8007572:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007576:	018b      	lsls	r3, r1, #6
 8007578:	1a5b      	subs	r3, r3, r1
 800757a:	eb64 0402 	sbc.w	r4, r4, r2
 800757e:	f04f 0100 	mov.w	r1, #0
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	00e2      	lsls	r2, r4, #3
 8007588:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800758c:	00d9      	lsls	r1, r3, #3
 800758e:	460b      	mov	r3, r1
 8007590:	4614      	mov	r4, r2
 8007592:	195b      	adds	r3, r3, r5
 8007594:	eb44 0406 	adc.w	r4, r4, r6
 8007598:	f04f 0100 	mov.w	r1, #0
 800759c:	f04f 0200 	mov.w	r2, #0
 80075a0:	02a2      	lsls	r2, r4, #10
 80075a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80075a6:	0299      	lsls	r1, r3, #10
 80075a8:	460b      	mov	r3, r1
 80075aa:	4614      	mov	r4, r2
 80075ac:	4618      	mov	r0, r3
 80075ae:	4621      	mov	r1, r4
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f04f 0400 	mov.w	r4, #0
 80075b6:	461a      	mov	r2, r3
 80075b8:	4623      	mov	r3, r4
 80075ba:	f7f8 fe61 	bl	8000280 <__aeabi_uldivmod>
 80075be:	4603      	mov	r3, r0
 80075c0:	460c      	mov	r4, r1
 80075c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80075c4:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	0c1b      	lsrs	r3, r3, #16
 80075ca:	f003 0303 	and.w	r3, r3, #3
 80075ce:	3301      	adds	r3, #1
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075dc:	60bb      	str	r3, [r7, #8]
      break;
 80075de:	e002      	b.n	80075e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075e0:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80075e2:	60bb      	str	r3, [r7, #8]
      break;
 80075e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075e6:	68bb      	ldr	r3, [r7, #8]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075f0:	40023800 	.word	0x40023800
 80075f4:	00f42400 	.word	0x00f42400
 80075f8:	007a1200 	.word	0x007a1200

080075fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007600:	4b03      	ldr	r3, [pc, #12]	; (8007610 <HAL_RCC_GetHCLKFreq+0x14>)
 8007602:	681b      	ldr	r3, [r3, #0]
}
 8007604:	4618      	mov	r0, r3
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	20000030 	.word	0x20000030

08007614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007618:	f7ff fff0 	bl	80075fc <HAL_RCC_GetHCLKFreq>
 800761c:	4601      	mov	r1, r0
 800761e:	4b05      	ldr	r3, [pc, #20]	; (8007634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	0a9b      	lsrs	r3, r3, #10
 8007624:	f003 0307 	and.w	r3, r3, #7
 8007628:	4a03      	ldr	r2, [pc, #12]	; (8007638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800762a:	5cd3      	ldrb	r3, [r2, r3]
 800762c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007630:	4618      	mov	r0, r3
 8007632:	bd80      	pop	{r7, pc}
 8007634:	40023800 	.word	0x40023800
 8007638:	0800a3ac 	.word	0x0800a3ac

0800763c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007640:	f7ff ffdc 	bl	80075fc <HAL_RCC_GetHCLKFreq>
 8007644:	4601      	mov	r1, r0
 8007646:	4b05      	ldr	r3, [pc, #20]	; (800765c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	0b5b      	lsrs	r3, r3, #13
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	4a03      	ldr	r2, [pc, #12]	; (8007660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007652:	5cd3      	ldrb	r3, [r2, r3]
 8007654:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007658:	4618      	mov	r0, r3
 800765a:	bd80      	pop	{r7, pc}
 800765c:	40023800 	.word	0x40023800
 8007660:	0800a3ac 	.word	0x0800a3ac

08007664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e01d      	b.n	80076b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d106      	bne.n	8007690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7f9 fe92 	bl	80013b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	3304      	adds	r3, #4
 80076a0:	4619      	mov	r1, r3
 80076a2:	4610      	mov	r0, r2
 80076a4:	f000 fb4e 	bl	8007d44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0201 	orr.w	r2, r2, #1
 80076d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b06      	cmp	r3, #6
 80076e2:	d007      	beq.n	80076f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f042 0201 	orr.w	r2, r2, #1
 80076f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e01d      	b.n	8007750 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	d106      	bne.n	800772e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f815 	bl	8007758 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2202      	movs	r2, #2
 8007732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	3304      	adds	r3, #4
 800773e:	4619      	mov	r1, r3
 8007740:	4610      	mov	r0, r2
 8007742:	f000 faff 	bl	8007d44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2201      	movs	r2, #1
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	4618      	mov	r0, r3
 8007780:	f000 fdca 	bl	8008318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a15      	ldr	r2, [pc, #84]	; (80077e0 <HAL_TIM_PWM_Start+0x74>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d004      	beq.n	8007798 <HAL_TIM_PWM_Start+0x2c>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a14      	ldr	r2, [pc, #80]	; (80077e4 <HAL_TIM_PWM_Start+0x78>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d101      	bne.n	800779c <HAL_TIM_PWM_Start+0x30>
 8007798:	2301      	movs	r3, #1
 800779a:	e000      	b.n	800779e <HAL_TIM_PWM_Start+0x32>
 800779c:	2300      	movs	r3, #0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d007      	beq.n	80077b2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f003 0307 	and.w	r3, r3, #7
 80077bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b06      	cmp	r3, #6
 80077c2:	d007      	beq.n	80077d4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0201 	orr.w	r2, r2, #1
 80077d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	40010000 	.word	0x40010000
 80077e4:	40010400 	.word	0x40010400

080077e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d122      	bne.n	8007844 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b02      	cmp	r3, #2
 800780a:	d11b      	bne.n	8007844 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f06f 0202 	mvn.w	r2, #2
 8007814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	f003 0303 	and.w	r3, r3, #3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fa6b 	bl	8007d06 <HAL_TIM_IC_CaptureCallback>
 8007830:	e005      	b.n	800783e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fa5d 	bl	8007cf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fa6e 	bl	8007d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	f003 0304 	and.w	r3, r3, #4
 800784e:	2b04      	cmp	r3, #4
 8007850:	d122      	bne.n	8007898 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b04      	cmp	r3, #4
 800785e:	d11b      	bne.n	8007898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f06f 0204 	mvn.w	r2, #4
 8007868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2202      	movs	r2, #2
 800786e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fa41 	bl	8007d06 <HAL_TIM_IC_CaptureCallback>
 8007884:	e005      	b.n	8007892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fa33 	bl	8007cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fa44 	bl	8007d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	f003 0308 	and.w	r3, r3, #8
 80078a2:	2b08      	cmp	r3, #8
 80078a4:	d122      	bne.n	80078ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f003 0308 	and.w	r3, r3, #8
 80078b0:	2b08      	cmp	r3, #8
 80078b2:	d11b      	bne.n	80078ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f06f 0208 	mvn.w	r2, #8
 80078bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2204      	movs	r2, #4
 80078c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa17 	bl	8007d06 <HAL_TIM_IC_CaptureCallback>
 80078d8:	e005      	b.n	80078e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fa09 	bl	8007cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fa1a 	bl	8007d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	f003 0310 	and.w	r3, r3, #16
 80078f6:	2b10      	cmp	r3, #16
 80078f8:	d122      	bne.n	8007940 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f003 0310 	and.w	r3, r3, #16
 8007904:	2b10      	cmp	r3, #16
 8007906:	d11b      	bne.n	8007940 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f06f 0210 	mvn.w	r2, #16
 8007910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2208      	movs	r2, #8
 8007916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f9ed 	bl	8007d06 <HAL_TIM_IC_CaptureCallback>
 800792c:	e005      	b.n	800793a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f9df 	bl	8007cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f9f0 	bl	8007d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b01      	cmp	r3, #1
 800794c:	d10e      	bne.n	800796c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b01      	cmp	r3, #1
 800795a:	d107      	bne.n	800796c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f06f 0201 	mvn.w	r2, #1
 8007964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7f8 ffb6 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007976:	2b80      	cmp	r3, #128	; 0x80
 8007978:	d10e      	bne.n	8007998 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007984:	2b80      	cmp	r3, #128	; 0x80
 8007986:	d107      	bne.n	8007998 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fd6c 	bl	8008470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a2:	2b40      	cmp	r3, #64	; 0x40
 80079a4:	d10e      	bne.n	80079c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b0:	2b40      	cmp	r3, #64	; 0x40
 80079b2:	d107      	bne.n	80079c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f9b5 	bl	8007d2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	f003 0320 	and.w	r3, r3, #32
 80079ce:	2b20      	cmp	r3, #32
 80079d0:	d10e      	bne.n	80079f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f003 0320 	and.w	r3, r3, #32
 80079dc:	2b20      	cmp	r3, #32
 80079de:	d107      	bne.n	80079f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f06f 0220 	mvn.w	r2, #32
 80079e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fd36 	bl	800845c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079f0:	bf00      	nop
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d101      	bne.n	8007a12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007a0e:	2302      	movs	r3, #2
 8007a10:	e0b4      	b.n	8007b7c <HAL_TIM_PWM_ConfigChannel+0x184>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b0c      	cmp	r3, #12
 8007a26:	f200 809f 	bhi.w	8007b68 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007a2a:	a201      	add	r2, pc, #4	; (adr r2, 8007a30 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a30:	08007a65 	.word	0x08007a65
 8007a34:	08007b69 	.word	0x08007b69
 8007a38:	08007b69 	.word	0x08007b69
 8007a3c:	08007b69 	.word	0x08007b69
 8007a40:	08007aa5 	.word	0x08007aa5
 8007a44:	08007b69 	.word	0x08007b69
 8007a48:	08007b69 	.word	0x08007b69
 8007a4c:	08007b69 	.word	0x08007b69
 8007a50:	08007ae7 	.word	0x08007ae7
 8007a54:	08007b69 	.word	0x08007b69
 8007a58:	08007b69 	.word	0x08007b69
 8007a5c:	08007b69 	.word	0x08007b69
 8007a60:	08007b27 	.word	0x08007b27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fa0a 	bl	8007e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699a      	ldr	r2, [r3, #24]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f042 0208 	orr.w	r2, r2, #8
 8007a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699a      	ldr	r2, [r3, #24]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0204 	bic.w	r2, r2, #4
 8007a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6999      	ldr	r1, [r3, #24]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	619a      	str	r2, [r3, #24]
      break;
 8007aa2:	e062      	b.n	8007b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68b9      	ldr	r1, [r7, #8]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fa5a 	bl	8007f64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	699a      	ldr	r2, [r3, #24]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6999      	ldr	r1, [r3, #24]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	021a      	lsls	r2, r3, #8
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	619a      	str	r2, [r3, #24]
      break;
 8007ae4:	e041      	b.n	8007b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68b9      	ldr	r1, [r7, #8]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 faaf 	bl	8008050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69da      	ldr	r2, [r3, #28]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0208 	orr.w	r2, r2, #8
 8007b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69da      	ldr	r2, [r3, #28]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0204 	bic.w	r2, r2, #4
 8007b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69d9      	ldr	r1, [r3, #28]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	61da      	str	r2, [r3, #28]
      break;
 8007b24:	e021      	b.n	8007b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fb03 	bl	8008138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69da      	ldr	r2, [r3, #28]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69da      	ldr	r2, [r3, #28]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69d9      	ldr	r1, [r3, #28]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	021a      	lsls	r2, r3, #8
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	61da      	str	r2, [r3, #28]
      break;
 8007b66:	e000      	b.n	8007b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007b68:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d101      	bne.n	8007b9c <HAL_TIM_ConfigClockSource+0x18>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e0a6      	b.n	8007cea <HAL_TIM_ConfigClockSource+0x166>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007bba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b40      	cmp	r3, #64	; 0x40
 8007bd2:	d067      	beq.n	8007ca4 <HAL_TIM_ConfigClockSource+0x120>
 8007bd4:	2b40      	cmp	r3, #64	; 0x40
 8007bd6:	d80b      	bhi.n	8007bf0 <HAL_TIM_ConfigClockSource+0x6c>
 8007bd8:	2b10      	cmp	r3, #16
 8007bda:	d073      	beq.n	8007cc4 <HAL_TIM_ConfigClockSource+0x140>
 8007bdc:	2b10      	cmp	r3, #16
 8007bde:	d802      	bhi.n	8007be6 <HAL_TIM_ConfigClockSource+0x62>
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d06f      	beq.n	8007cc4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007be4:	e078      	b.n	8007cd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007be6:	2b20      	cmp	r3, #32
 8007be8:	d06c      	beq.n	8007cc4 <HAL_TIM_ConfigClockSource+0x140>
 8007bea:	2b30      	cmp	r3, #48	; 0x30
 8007bec:	d06a      	beq.n	8007cc4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007bee:	e073      	b.n	8007cd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007bf0:	2b70      	cmp	r3, #112	; 0x70
 8007bf2:	d00d      	beq.n	8007c10 <HAL_TIM_ConfigClockSource+0x8c>
 8007bf4:	2b70      	cmp	r3, #112	; 0x70
 8007bf6:	d804      	bhi.n	8007c02 <HAL_TIM_ConfigClockSource+0x7e>
 8007bf8:	2b50      	cmp	r3, #80	; 0x50
 8007bfa:	d033      	beq.n	8007c64 <HAL_TIM_ConfigClockSource+0xe0>
 8007bfc:	2b60      	cmp	r3, #96	; 0x60
 8007bfe:	d041      	beq.n	8007c84 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007c00:	e06a      	b.n	8007cd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c06:	d066      	beq.n	8007cd6 <HAL_TIM_ConfigClockSource+0x152>
 8007c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c0c:	d017      	beq.n	8007c3e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007c0e:	e063      	b.n	8007cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6818      	ldr	r0, [r3, #0]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	6899      	ldr	r1, [r3, #8]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f000 fb5a 	bl	80082d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	609a      	str	r2, [r3, #8]
      break;
 8007c3c:	e04c      	b.n	8007cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6818      	ldr	r0, [r3, #0]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	6899      	ldr	r1, [r3, #8]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f000 fb43 	bl	80082d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c60:	609a      	str	r2, [r3, #8]
      break;
 8007c62:	e039      	b.n	8007cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6818      	ldr	r0, [r3, #0]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	6859      	ldr	r1, [r3, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	461a      	mov	r2, r3
 8007c72:	f000 fab7 	bl	80081e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2150      	movs	r1, #80	; 0x50
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 fb10 	bl	80082a2 <TIM_ITRx_SetConfig>
      break;
 8007c82:	e029      	b.n	8007cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	6859      	ldr	r1, [r3, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	461a      	mov	r2, r3
 8007c92:	f000 fad6 	bl	8008242 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2160      	movs	r1, #96	; 0x60
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 fb00 	bl	80082a2 <TIM_ITRx_SetConfig>
      break;
 8007ca2:	e019      	b.n	8007cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6818      	ldr	r0, [r3, #0]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	6859      	ldr	r1, [r3, #4]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	f000 fa97 	bl	80081e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2140      	movs	r1, #64	; 0x40
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 faf0 	bl	80082a2 <TIM_ITRx_SetConfig>
      break;
 8007cc2:	e009      	b.n	8007cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	f000 fae7 	bl	80082a2 <TIM_ITRx_SetConfig>
      break;
 8007cd4:	e000      	b.n	8007cd8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d0e:	bf00      	nop
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d36:	bf00      	nop
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
	...

08007d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a40      	ldr	r2, [pc, #256]	; (8007e58 <TIM_Base_SetConfig+0x114>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d013      	beq.n	8007d84 <TIM_Base_SetConfig+0x40>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d62:	d00f      	beq.n	8007d84 <TIM_Base_SetConfig+0x40>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a3d      	ldr	r2, [pc, #244]	; (8007e5c <TIM_Base_SetConfig+0x118>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00b      	beq.n	8007d84 <TIM_Base_SetConfig+0x40>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a3c      	ldr	r2, [pc, #240]	; (8007e60 <TIM_Base_SetConfig+0x11c>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d007      	beq.n	8007d84 <TIM_Base_SetConfig+0x40>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a3b      	ldr	r2, [pc, #236]	; (8007e64 <TIM_Base_SetConfig+0x120>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d003      	beq.n	8007d84 <TIM_Base_SetConfig+0x40>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a3a      	ldr	r2, [pc, #232]	; (8007e68 <TIM_Base_SetConfig+0x124>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d108      	bne.n	8007d96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a2f      	ldr	r2, [pc, #188]	; (8007e58 <TIM_Base_SetConfig+0x114>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d02b      	beq.n	8007df6 <TIM_Base_SetConfig+0xb2>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007da4:	d027      	beq.n	8007df6 <TIM_Base_SetConfig+0xb2>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a2c      	ldr	r2, [pc, #176]	; (8007e5c <TIM_Base_SetConfig+0x118>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d023      	beq.n	8007df6 <TIM_Base_SetConfig+0xb2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a2b      	ldr	r2, [pc, #172]	; (8007e60 <TIM_Base_SetConfig+0x11c>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d01f      	beq.n	8007df6 <TIM_Base_SetConfig+0xb2>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a2a      	ldr	r2, [pc, #168]	; (8007e64 <TIM_Base_SetConfig+0x120>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d01b      	beq.n	8007df6 <TIM_Base_SetConfig+0xb2>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a29      	ldr	r2, [pc, #164]	; (8007e68 <TIM_Base_SetConfig+0x124>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d017      	beq.n	8007df6 <TIM_Base_SetConfig+0xb2>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a28      	ldr	r2, [pc, #160]	; (8007e6c <TIM_Base_SetConfig+0x128>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d013      	beq.n	8007df6 <TIM_Base_SetConfig+0xb2>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a27      	ldr	r2, [pc, #156]	; (8007e70 <TIM_Base_SetConfig+0x12c>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d00f      	beq.n	8007df6 <TIM_Base_SetConfig+0xb2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a26      	ldr	r2, [pc, #152]	; (8007e74 <TIM_Base_SetConfig+0x130>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d00b      	beq.n	8007df6 <TIM_Base_SetConfig+0xb2>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a25      	ldr	r2, [pc, #148]	; (8007e78 <TIM_Base_SetConfig+0x134>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d007      	beq.n	8007df6 <TIM_Base_SetConfig+0xb2>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a24      	ldr	r2, [pc, #144]	; (8007e7c <TIM_Base_SetConfig+0x138>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d003      	beq.n	8007df6 <TIM_Base_SetConfig+0xb2>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a23      	ldr	r2, [pc, #140]	; (8007e80 <TIM_Base_SetConfig+0x13c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d108      	bne.n	8007e08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	689a      	ldr	r2, [r3, #8]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a0a      	ldr	r2, [pc, #40]	; (8007e58 <TIM_Base_SetConfig+0x114>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d003      	beq.n	8007e3c <TIM_Base_SetConfig+0xf8>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a0c      	ldr	r2, [pc, #48]	; (8007e68 <TIM_Base_SetConfig+0x124>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d103      	bne.n	8007e44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	691a      	ldr	r2, [r3, #16]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	615a      	str	r2, [r3, #20]
}
 8007e4a:	bf00      	nop
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	40010000 	.word	0x40010000
 8007e5c:	40000400 	.word	0x40000400
 8007e60:	40000800 	.word	0x40000800
 8007e64:	40000c00 	.word	0x40000c00
 8007e68:	40010400 	.word	0x40010400
 8007e6c:	40014000 	.word	0x40014000
 8007e70:	40014400 	.word	0x40014400
 8007e74:	40014800 	.word	0x40014800
 8007e78:	40001800 	.word	0x40001800
 8007e7c:	40001c00 	.word	0x40001c00
 8007e80:	40002000 	.word	0x40002000

08007e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	f023 0201 	bic.w	r2, r3, #1
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0303 	bic.w	r3, r3, #3
 8007eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f023 0302 	bic.w	r3, r3, #2
 8007ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a20      	ldr	r2, [pc, #128]	; (8007f5c <TIM_OC1_SetConfig+0xd8>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d003      	beq.n	8007ee8 <TIM_OC1_SetConfig+0x64>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a1f      	ldr	r2, [pc, #124]	; (8007f60 <TIM_OC1_SetConfig+0xdc>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d10c      	bne.n	8007f02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	f023 0308 	bic.w	r3, r3, #8
 8007eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f023 0304 	bic.w	r3, r3, #4
 8007f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a15      	ldr	r2, [pc, #84]	; (8007f5c <TIM_OC1_SetConfig+0xd8>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d003      	beq.n	8007f12 <TIM_OC1_SetConfig+0x8e>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a14      	ldr	r2, [pc, #80]	; (8007f60 <TIM_OC1_SetConfig+0xdc>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d111      	bne.n	8007f36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	621a      	str	r2, [r3, #32]
}
 8007f50:	bf00      	nop
 8007f52:	371c      	adds	r7, #28
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	40010000 	.word	0x40010000
 8007f60:	40010400 	.word	0x40010400

08007f64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b087      	sub	sp, #28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	f023 0210 	bic.w	r2, r3, #16
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	021b      	lsls	r3, r3, #8
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f023 0320 	bic.w	r3, r3, #32
 8007fae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a22      	ldr	r2, [pc, #136]	; (8008048 <TIM_OC2_SetConfig+0xe4>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d003      	beq.n	8007fcc <TIM_OC2_SetConfig+0x68>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a21      	ldr	r2, [pc, #132]	; (800804c <TIM_OC2_SetConfig+0xe8>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d10d      	bne.n	8007fe8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	011b      	lsls	r3, r3, #4
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fe6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a17      	ldr	r2, [pc, #92]	; (8008048 <TIM_OC2_SetConfig+0xe4>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d003      	beq.n	8007ff8 <TIM_OC2_SetConfig+0x94>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a16      	ldr	r2, [pc, #88]	; (800804c <TIM_OC2_SetConfig+0xe8>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d113      	bne.n	8008020 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	4313      	orrs	r3, r2
 8008012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	4313      	orrs	r3, r2
 800801e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	621a      	str	r2, [r3, #32]
}
 800803a:	bf00      	nop
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	40010000 	.word	0x40010000
 800804c:	40010400 	.word	0x40010400

08008050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f023 0303 	bic.w	r3, r3, #3
 8008086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	4313      	orrs	r3, r2
 8008090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	021b      	lsls	r3, r3, #8
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a21      	ldr	r2, [pc, #132]	; (8008130 <TIM_OC3_SetConfig+0xe0>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d003      	beq.n	80080b6 <TIM_OC3_SetConfig+0x66>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a20      	ldr	r2, [pc, #128]	; (8008134 <TIM_OC3_SetConfig+0xe4>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d10d      	bne.n	80080d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	021b      	lsls	r3, r3, #8
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a16      	ldr	r2, [pc, #88]	; (8008130 <TIM_OC3_SetConfig+0xe0>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d003      	beq.n	80080e2 <TIM_OC3_SetConfig+0x92>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a15      	ldr	r2, [pc, #84]	; (8008134 <TIM_OC3_SetConfig+0xe4>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d113      	bne.n	800810a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	011b      	lsls	r3, r3, #4
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4313      	orrs	r3, r2
 8008108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	621a      	str	r2, [r3, #32]
}
 8008124:	bf00      	nop
 8008126:	371c      	adds	r7, #28
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	40010000 	.word	0x40010000
 8008134:	40010400 	.word	0x40010400

08008138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800816e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	021b      	lsls	r3, r3, #8
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	4313      	orrs	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	031b      	lsls	r3, r3, #12
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	4313      	orrs	r3, r2
 800818e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a12      	ldr	r2, [pc, #72]	; (80081dc <TIM_OC4_SetConfig+0xa4>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d003      	beq.n	80081a0 <TIM_OC4_SetConfig+0x68>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a11      	ldr	r2, [pc, #68]	; (80081e0 <TIM_OC4_SetConfig+0xa8>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d109      	bne.n	80081b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	695b      	ldr	r3, [r3, #20]
 80081ac:	019b      	lsls	r3, r3, #6
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	621a      	str	r2, [r3, #32]
}
 80081ce:	bf00      	nop
 80081d0:	371c      	adds	r7, #28
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	40010000 	.word	0x40010000
 80081e0:	40010400 	.word	0x40010400

080081e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	f023 0201 	bic.w	r2, r3, #1
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800820e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4313      	orrs	r3, r2
 8008218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f023 030a 	bic.w	r3, r3, #10
 8008220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	621a      	str	r2, [r3, #32]
}
 8008236:	bf00      	nop
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008242:	b480      	push	{r7}
 8008244:	b087      	sub	sp, #28
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	f023 0210 	bic.w	r2, r3, #16
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800826c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	031b      	lsls	r3, r3, #12
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	4313      	orrs	r3, r2
 8008276:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800827e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	011b      	lsls	r3, r3, #4
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	4313      	orrs	r3, r2
 8008288:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	621a      	str	r2, [r3, #32]
}
 8008296:	bf00      	nop
 8008298:	371c      	adds	r7, #28
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b085      	sub	sp, #20
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4313      	orrs	r3, r2
 80082c0:	f043 0307 	orr.w	r3, r3, #7
 80082c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	609a      	str	r2, [r3, #8]
}
 80082cc:	bf00      	nop
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	021a      	lsls	r2, r3, #8
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	431a      	orrs	r2, r3
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	4313      	orrs	r3, r2
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	4313      	orrs	r3, r2
 8008304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	609a      	str	r2, [r3, #8]
}
 800830c:	bf00      	nop
 800830e:	371c      	adds	r7, #28
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f003 031f 	and.w	r3, r3, #31
 800832a:	2201      	movs	r2, #1
 800832c:	fa02 f303 	lsl.w	r3, r2, r3
 8008330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6a1a      	ldr	r2, [r3, #32]
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	43db      	mvns	r3, r3
 800833a:	401a      	ands	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a1a      	ldr	r2, [r3, #32]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f003 031f 	and.w	r3, r3, #31
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	fa01 f303 	lsl.w	r3, r1, r3
 8008350:	431a      	orrs	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	621a      	str	r2, [r3, #32]
}
 8008356:	bf00      	nop
 8008358:	371c      	adds	r7, #28
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
	...

08008364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008374:	2b01      	cmp	r3, #1
 8008376:	d101      	bne.n	800837c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008378:	2302      	movs	r3, #2
 800837a:	e05a      	b.n	8008432 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a21      	ldr	r2, [pc, #132]	; (8008440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d022      	beq.n	8008406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c8:	d01d      	beq.n	8008406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a1d      	ldr	r2, [pc, #116]	; (8008444 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d018      	beq.n	8008406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a1b      	ldr	r2, [pc, #108]	; (8008448 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d013      	beq.n	8008406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a1a      	ldr	r2, [pc, #104]	; (800844c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d00e      	beq.n	8008406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a18      	ldr	r2, [pc, #96]	; (8008450 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d009      	beq.n	8008406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a17      	ldr	r2, [pc, #92]	; (8008454 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d004      	beq.n	8008406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a15      	ldr	r2, [pc, #84]	; (8008458 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d10c      	bne.n	8008420 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800840c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	4313      	orrs	r3, r2
 8008416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	40010000 	.word	0x40010000
 8008444:	40000400 	.word	0x40000400
 8008448:	40000800 	.word	0x40000800
 800844c:	40000c00 	.word	0x40000c00
 8008450:	40010400 	.word	0x40010400
 8008454:	40014000 	.word	0x40014000
 8008458:	40001800 	.word	0x40001800

0800845c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e03f      	b.n	8008516 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d106      	bne.n	80084b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7f8 fffa 	bl	80014a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2224      	movs	r2, #36	; 0x24
 80084b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68da      	ldr	r2, [r3, #12]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 faf9 	bl	8008ac0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	691a      	ldr	r2, [r3, #16]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	695a      	ldr	r2, [r3, #20]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68da      	ldr	r2, [r3, #12]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2220      	movs	r2, #32
 8008508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2220      	movs	r2, #32
 8008510:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800851e:	b480      	push	{r7}
 8008520:	b085      	sub	sp, #20
 8008522:	af00      	add	r7, sp, #0
 8008524:	60f8      	str	r0, [r7, #12]
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	4613      	mov	r3, r2
 800852a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b20      	cmp	r3, #32
 8008536:	d130      	bne.n	800859a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d002      	beq.n	8008544 <HAL_UART_Transmit_IT+0x26>
 800853e:	88fb      	ldrh	r3, [r7, #6]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d101      	bne.n	8008548 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e029      	b.n	800859c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800854e:	2b01      	cmp	r3, #1
 8008550:	d101      	bne.n	8008556 <HAL_UART_Transmit_IT+0x38>
 8008552:	2302      	movs	r3, #2
 8008554:	e022      	b.n	800859c <HAL_UART_Transmit_IT+0x7e>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	88fa      	ldrh	r2, [r7, #6]
 8008568:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	88fa      	ldrh	r2, [r7, #6]
 800856e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2221      	movs	r2, #33	; 0x21
 800857a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68da      	ldr	r2, [r3, #12]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008594:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	e000      	b.n	800859c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800859a:	2302      	movs	r3, #2
  }
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	4613      	mov	r3, r2
 80085b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b20      	cmp	r3, #32
 80085c0:	d140      	bne.n	8008644 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <HAL_UART_Receive_IT+0x26>
 80085c8:	88fb      	ldrh	r3, [r7, #6]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e039      	b.n	8008646 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d101      	bne.n	80085e0 <HAL_UART_Receive_IT+0x38>
 80085dc:	2302      	movs	r3, #2
 80085de:	e032      	b.n	8008646 <HAL_UART_Receive_IT+0x9e>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	88fa      	ldrh	r2, [r7, #6]
 80085f2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	88fa      	ldrh	r2, [r7, #6]
 80085f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2222      	movs	r2, #34	; 0x22
 8008604:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68da      	ldr	r2, [r3, #12]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800861e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	695a      	ldr	r2, [r3, #20]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f042 0201 	orr.w	r2, r2, #1
 800862e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68da      	ldr	r2, [r3, #12]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f042 0220 	orr.w	r2, r2, #32
 800863e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	e000      	b.n	8008646 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008644:	2302      	movs	r3, #2
  }
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
	...

08008654 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008674:	2300      	movs	r3, #0
 8008676:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008678:	2300      	movs	r3, #0
 800867a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	f003 030f 	and.w	r3, r3, #15
 8008682:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10d      	bne.n	80086a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	f003 0320 	and.w	r3, r3, #32
 8008690:	2b00      	cmp	r3, #0
 8008692:	d008      	beq.n	80086a6 <HAL_UART_IRQHandler+0x52>
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	f003 0320 	and.w	r3, r3, #32
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f98c 	bl	80089bc <UART_Receive_IT>
      return;
 80086a4:	e0d1      	b.n	800884a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 80b0 	beq.w	800880e <HAL_UART_IRQHandler+0x1ba>
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d105      	bne.n	80086c4 <HAL_UART_IRQHandler+0x70>
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f000 80a5 	beq.w	800880e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00a      	beq.n	80086e4 <HAL_UART_IRQHandler+0x90>
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d005      	beq.n	80086e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086dc:	f043 0201 	orr.w	r2, r3, #1
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00a      	beq.n	8008704 <HAL_UART_IRQHandler+0xb0>
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d005      	beq.n	8008704 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fc:	f043 0202 	orr.w	r2, r3, #2
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <HAL_UART_IRQHandler+0xd0>
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	d005      	beq.n	8008724 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871c:	f043 0204 	orr.w	r2, r3, #4
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	f003 0308 	and.w	r3, r3, #8
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00f      	beq.n	800874e <HAL_UART_IRQHandler+0xfa>
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	f003 0320 	and.w	r3, r3, #32
 8008734:	2b00      	cmp	r3, #0
 8008736:	d104      	bne.n	8008742 <HAL_UART_IRQHandler+0xee>
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b00      	cmp	r3, #0
 8008740:	d005      	beq.n	800874e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008746:	f043 0208 	orr.w	r2, r3, #8
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008752:	2b00      	cmp	r3, #0
 8008754:	d078      	beq.n	8008848 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	f003 0320 	and.w	r3, r3, #32
 800875c:	2b00      	cmp	r3, #0
 800875e:	d007      	beq.n	8008770 <HAL_UART_IRQHandler+0x11c>
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	f003 0320 	and.w	r3, r3, #32
 8008766:	2b00      	cmp	r3, #0
 8008768:	d002      	beq.n	8008770 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f926 	bl	80089bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877a:	2b40      	cmp	r3, #64	; 0x40
 800877c:	bf0c      	ite	eq
 800877e:	2301      	moveq	r3, #1
 8008780:	2300      	movne	r3, #0
 8008782:	b2db      	uxtb	r3, r3
 8008784:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800878a:	f003 0308 	and.w	r3, r3, #8
 800878e:	2b00      	cmp	r3, #0
 8008790:	d102      	bne.n	8008798 <HAL_UART_IRQHandler+0x144>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d031      	beq.n	80087fc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f86f 	bl	800887c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	695b      	ldr	r3, [r3, #20]
 80087a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a8:	2b40      	cmp	r3, #64	; 0x40
 80087aa:	d123      	bne.n	80087f4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	695a      	ldr	r2, [r3, #20]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d013      	beq.n	80087ec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c8:	4a21      	ldr	r2, [pc, #132]	; (8008850 <HAL_UART_IRQHandler+0x1fc>)
 80087ca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7f9 ff39 	bl	8002648 <HAL_DMA_Abort_IT>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d016      	beq.n	800880a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80087e6:	4610      	mov	r0, r2
 80087e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ea:	e00e      	b.n	800880a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f83b 	bl	8008868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f2:	e00a      	b.n	800880a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f837 	bl	8008868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087fa:	e006      	b.n	800880a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f833 	bl	8008868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008808:	e01e      	b.n	8008848 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800880a:	bf00      	nop
    return;
 800880c:	e01c      	b.n	8008848 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008814:	2b00      	cmp	r3, #0
 8008816:	d008      	beq.n	800882a <HAL_UART_IRQHandler+0x1d6>
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f85c 	bl	80088e0 <UART_Transmit_IT>
    return;
 8008828:	e00f      	b.n	800884a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00a      	beq.n	800884a <HAL_UART_IRQHandler+0x1f6>
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800883a:	2b00      	cmp	r3, #0
 800883c:	d005      	beq.n	800884a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f8a4 	bl	800898c <UART_EndTransmit_IT>
    return;
 8008844:	bf00      	nop
 8008846:	e000      	b.n	800884a <HAL_UART_IRQHandler+0x1f6>
    return;
 8008848:	bf00      	nop
  }
}
 800884a:	3720      	adds	r7, #32
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	080088b9 	.word	0x080088b9

08008854 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68da      	ldr	r2, [r3, #12]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008892:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	695a      	ldr	r2, [r3, #20]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 0201 	bic.w	r2, r2, #1
 80088a2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2220      	movs	r2, #32
 80088a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f7ff ffc8 	bl	8008868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088d8:	bf00      	nop
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b21      	cmp	r3, #33	; 0x21
 80088f2:	d144      	bne.n	800897e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088fc:	d11a      	bne.n	8008934 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	461a      	mov	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008912:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d105      	bne.n	8008928 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	1c9a      	adds	r2, r3, #2
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	621a      	str	r2, [r3, #32]
 8008926:	e00e      	b.n	8008946 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	621a      	str	r2, [r3, #32]
 8008932:	e008      	b.n	8008946 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	1c59      	adds	r1, r3, #1
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	6211      	str	r1, [r2, #32]
 800893e:	781a      	ldrb	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800894a:	b29b      	uxth	r3, r3
 800894c:	3b01      	subs	r3, #1
 800894e:	b29b      	uxth	r3, r3
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	4619      	mov	r1, r3
 8008954:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10f      	bne.n	800897a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68da      	ldr	r2, [r3, #12]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008968:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68da      	ldr	r2, [r3, #12]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008978:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	e000      	b.n	8008980 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800897e:	2302      	movs	r3, #2
  }
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2220      	movs	r2, #32
 80089a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7ff ff51 	bl	8008854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b22      	cmp	r3, #34	; 0x22
 80089ce:	d171      	bne.n	8008ab4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d8:	d123      	bne.n	8008a22 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089de:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10e      	bne.n	8008a06 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fe:	1c9a      	adds	r2, r3, #2
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	629a      	str	r2, [r3, #40]	; 0x28
 8008a04:	e029      	b.n	8008a5a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1a:	1c5a      	adds	r2, r3, #1
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8008a20:	e01b      	b.n	8008a5a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10a      	bne.n	8008a40 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	6858      	ldr	r0, [r3, #4]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a34:	1c59      	adds	r1, r3, #1
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6291      	str	r1, [r2, #40]	; 0x28
 8008a3a:	b2c2      	uxtb	r2, r0
 8008a3c:	701a      	strb	r2, [r3, #0]
 8008a3e:	e00c      	b.n	8008a5a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4c:	1c58      	adds	r0, r3, #1
 8008a4e:	6879      	ldr	r1, [r7, #4]
 8008a50:	6288      	str	r0, [r1, #40]	; 0x28
 8008a52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008a56:	b2d2      	uxtb	r2, r2
 8008a58:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	3b01      	subs	r3, #1
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	4619      	mov	r1, r3
 8008a68:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d120      	bne.n	8008ab0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68da      	ldr	r2, [r3, #12]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0220 	bic.w	r2, r2, #32
 8008a7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68da      	ldr	r2, [r3, #12]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	695a      	ldr	r2, [r3, #20]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f022 0201 	bic.w	r2, r2, #1
 8008a9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7f7 ff2e 	bl	8000908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	e002      	b.n	8008ab6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e000      	b.n	8008ab6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008ab4:	2302      	movs	r3, #2
  }
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	b085      	sub	sp, #20
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68da      	ldr	r2, [r3, #12]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	430a      	orrs	r2, r1
 8008ade:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689a      	ldr	r2, [r3, #8]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008b02:	f023 030c 	bic.w	r3, r3, #12
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	6812      	ldr	r2, [r2, #0]
 8008b0a:	68f9      	ldr	r1, [r7, #12]
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699a      	ldr	r2, [r3, #24]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b2e:	f040 818b 	bne.w	8008e48 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4ac1      	ldr	r2, [pc, #772]	; (8008e3c <UART_SetConfig+0x37c>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d005      	beq.n	8008b48 <UART_SetConfig+0x88>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4abf      	ldr	r2, [pc, #764]	; (8008e40 <UART_SetConfig+0x380>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	f040 80bd 	bne.w	8008cc2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b48:	f7fe fd78 	bl	800763c <HAL_RCC_GetPCLK2Freq>
 8008b4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	461d      	mov	r5, r3
 8008b52:	f04f 0600 	mov.w	r6, #0
 8008b56:	46a8      	mov	r8, r5
 8008b58:	46b1      	mov	r9, r6
 8008b5a:	eb18 0308 	adds.w	r3, r8, r8
 8008b5e:	eb49 0409 	adc.w	r4, r9, r9
 8008b62:	4698      	mov	r8, r3
 8008b64:	46a1      	mov	r9, r4
 8008b66:	eb18 0805 	adds.w	r8, r8, r5
 8008b6a:	eb49 0906 	adc.w	r9, r9, r6
 8008b6e:	f04f 0100 	mov.w	r1, #0
 8008b72:	f04f 0200 	mov.w	r2, #0
 8008b76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008b7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008b7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008b82:	4688      	mov	r8, r1
 8008b84:	4691      	mov	r9, r2
 8008b86:	eb18 0005 	adds.w	r0, r8, r5
 8008b8a:	eb49 0106 	adc.w	r1, r9, r6
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	461d      	mov	r5, r3
 8008b94:	f04f 0600 	mov.w	r6, #0
 8008b98:	196b      	adds	r3, r5, r5
 8008b9a:	eb46 0406 	adc.w	r4, r6, r6
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	4623      	mov	r3, r4
 8008ba2:	f7f7 fb6d 	bl	8000280 <__aeabi_uldivmod>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	460c      	mov	r4, r1
 8008baa:	461a      	mov	r2, r3
 8008bac:	4ba5      	ldr	r3, [pc, #660]	; (8008e44 <UART_SetConfig+0x384>)
 8008bae:	fba3 2302 	umull	r2, r3, r3, r2
 8008bb2:	095b      	lsrs	r3, r3, #5
 8008bb4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	461d      	mov	r5, r3
 8008bbc:	f04f 0600 	mov.w	r6, #0
 8008bc0:	46a9      	mov	r9, r5
 8008bc2:	46b2      	mov	sl, r6
 8008bc4:	eb19 0309 	adds.w	r3, r9, r9
 8008bc8:	eb4a 040a 	adc.w	r4, sl, sl
 8008bcc:	4699      	mov	r9, r3
 8008bce:	46a2      	mov	sl, r4
 8008bd0:	eb19 0905 	adds.w	r9, r9, r5
 8008bd4:	eb4a 0a06 	adc.w	sl, sl, r6
 8008bd8:	f04f 0100 	mov.w	r1, #0
 8008bdc:	f04f 0200 	mov.w	r2, #0
 8008be0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008be4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008be8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008bec:	4689      	mov	r9, r1
 8008bee:	4692      	mov	sl, r2
 8008bf0:	eb19 0005 	adds.w	r0, r9, r5
 8008bf4:	eb4a 0106 	adc.w	r1, sl, r6
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	461d      	mov	r5, r3
 8008bfe:	f04f 0600 	mov.w	r6, #0
 8008c02:	196b      	adds	r3, r5, r5
 8008c04:	eb46 0406 	adc.w	r4, r6, r6
 8008c08:	461a      	mov	r2, r3
 8008c0a:	4623      	mov	r3, r4
 8008c0c:	f7f7 fb38 	bl	8000280 <__aeabi_uldivmod>
 8008c10:	4603      	mov	r3, r0
 8008c12:	460c      	mov	r4, r1
 8008c14:	461a      	mov	r2, r3
 8008c16:	4b8b      	ldr	r3, [pc, #556]	; (8008e44 <UART_SetConfig+0x384>)
 8008c18:	fba3 1302 	umull	r1, r3, r3, r2
 8008c1c:	095b      	lsrs	r3, r3, #5
 8008c1e:	2164      	movs	r1, #100	; 0x64
 8008c20:	fb01 f303 	mul.w	r3, r1, r3
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	00db      	lsls	r3, r3, #3
 8008c28:	3332      	adds	r3, #50	; 0x32
 8008c2a:	4a86      	ldr	r2, [pc, #536]	; (8008e44 <UART_SetConfig+0x384>)
 8008c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c30:	095b      	lsrs	r3, r3, #5
 8008c32:	005b      	lsls	r3, r3, #1
 8008c34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c38:	4498      	add	r8, r3
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	461d      	mov	r5, r3
 8008c3e:	f04f 0600 	mov.w	r6, #0
 8008c42:	46a9      	mov	r9, r5
 8008c44:	46b2      	mov	sl, r6
 8008c46:	eb19 0309 	adds.w	r3, r9, r9
 8008c4a:	eb4a 040a 	adc.w	r4, sl, sl
 8008c4e:	4699      	mov	r9, r3
 8008c50:	46a2      	mov	sl, r4
 8008c52:	eb19 0905 	adds.w	r9, r9, r5
 8008c56:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c5a:	f04f 0100 	mov.w	r1, #0
 8008c5e:	f04f 0200 	mov.w	r2, #0
 8008c62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c6e:	4689      	mov	r9, r1
 8008c70:	4692      	mov	sl, r2
 8008c72:	eb19 0005 	adds.w	r0, r9, r5
 8008c76:	eb4a 0106 	adc.w	r1, sl, r6
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	461d      	mov	r5, r3
 8008c80:	f04f 0600 	mov.w	r6, #0
 8008c84:	196b      	adds	r3, r5, r5
 8008c86:	eb46 0406 	adc.w	r4, r6, r6
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	4623      	mov	r3, r4
 8008c8e:	f7f7 faf7 	bl	8000280 <__aeabi_uldivmod>
 8008c92:	4603      	mov	r3, r0
 8008c94:	460c      	mov	r4, r1
 8008c96:	461a      	mov	r2, r3
 8008c98:	4b6a      	ldr	r3, [pc, #424]	; (8008e44 <UART_SetConfig+0x384>)
 8008c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c9e:	095b      	lsrs	r3, r3, #5
 8008ca0:	2164      	movs	r1, #100	; 0x64
 8008ca2:	fb01 f303 	mul.w	r3, r1, r3
 8008ca6:	1ad3      	subs	r3, r2, r3
 8008ca8:	00db      	lsls	r3, r3, #3
 8008caa:	3332      	adds	r3, #50	; 0x32
 8008cac:	4a65      	ldr	r2, [pc, #404]	; (8008e44 <UART_SetConfig+0x384>)
 8008cae:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb2:	095b      	lsrs	r3, r3, #5
 8008cb4:	f003 0207 	and.w	r2, r3, #7
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4442      	add	r2, r8
 8008cbe:	609a      	str	r2, [r3, #8]
 8008cc0:	e26f      	b.n	80091a2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cc2:	f7fe fca7 	bl	8007614 <HAL_RCC_GetPCLK1Freq>
 8008cc6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	461d      	mov	r5, r3
 8008ccc:	f04f 0600 	mov.w	r6, #0
 8008cd0:	46a8      	mov	r8, r5
 8008cd2:	46b1      	mov	r9, r6
 8008cd4:	eb18 0308 	adds.w	r3, r8, r8
 8008cd8:	eb49 0409 	adc.w	r4, r9, r9
 8008cdc:	4698      	mov	r8, r3
 8008cde:	46a1      	mov	r9, r4
 8008ce0:	eb18 0805 	adds.w	r8, r8, r5
 8008ce4:	eb49 0906 	adc.w	r9, r9, r6
 8008ce8:	f04f 0100 	mov.w	r1, #0
 8008cec:	f04f 0200 	mov.w	r2, #0
 8008cf0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008cf4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008cf8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008cfc:	4688      	mov	r8, r1
 8008cfe:	4691      	mov	r9, r2
 8008d00:	eb18 0005 	adds.w	r0, r8, r5
 8008d04:	eb49 0106 	adc.w	r1, r9, r6
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	461d      	mov	r5, r3
 8008d0e:	f04f 0600 	mov.w	r6, #0
 8008d12:	196b      	adds	r3, r5, r5
 8008d14:	eb46 0406 	adc.w	r4, r6, r6
 8008d18:	461a      	mov	r2, r3
 8008d1a:	4623      	mov	r3, r4
 8008d1c:	f7f7 fab0 	bl	8000280 <__aeabi_uldivmod>
 8008d20:	4603      	mov	r3, r0
 8008d22:	460c      	mov	r4, r1
 8008d24:	461a      	mov	r2, r3
 8008d26:	4b47      	ldr	r3, [pc, #284]	; (8008e44 <UART_SetConfig+0x384>)
 8008d28:	fba3 2302 	umull	r2, r3, r3, r2
 8008d2c:	095b      	lsrs	r3, r3, #5
 8008d2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	461d      	mov	r5, r3
 8008d36:	f04f 0600 	mov.w	r6, #0
 8008d3a:	46a9      	mov	r9, r5
 8008d3c:	46b2      	mov	sl, r6
 8008d3e:	eb19 0309 	adds.w	r3, r9, r9
 8008d42:	eb4a 040a 	adc.w	r4, sl, sl
 8008d46:	4699      	mov	r9, r3
 8008d48:	46a2      	mov	sl, r4
 8008d4a:	eb19 0905 	adds.w	r9, r9, r5
 8008d4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008d52:	f04f 0100 	mov.w	r1, #0
 8008d56:	f04f 0200 	mov.w	r2, #0
 8008d5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d66:	4689      	mov	r9, r1
 8008d68:	4692      	mov	sl, r2
 8008d6a:	eb19 0005 	adds.w	r0, r9, r5
 8008d6e:	eb4a 0106 	adc.w	r1, sl, r6
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	461d      	mov	r5, r3
 8008d78:	f04f 0600 	mov.w	r6, #0
 8008d7c:	196b      	adds	r3, r5, r5
 8008d7e:	eb46 0406 	adc.w	r4, r6, r6
 8008d82:	461a      	mov	r2, r3
 8008d84:	4623      	mov	r3, r4
 8008d86:	f7f7 fa7b 	bl	8000280 <__aeabi_uldivmod>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	461a      	mov	r2, r3
 8008d90:	4b2c      	ldr	r3, [pc, #176]	; (8008e44 <UART_SetConfig+0x384>)
 8008d92:	fba3 1302 	umull	r1, r3, r3, r2
 8008d96:	095b      	lsrs	r3, r3, #5
 8008d98:	2164      	movs	r1, #100	; 0x64
 8008d9a:	fb01 f303 	mul.w	r3, r1, r3
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	00db      	lsls	r3, r3, #3
 8008da2:	3332      	adds	r3, #50	; 0x32
 8008da4:	4a27      	ldr	r2, [pc, #156]	; (8008e44 <UART_SetConfig+0x384>)
 8008da6:	fba2 2303 	umull	r2, r3, r2, r3
 8008daa:	095b      	lsrs	r3, r3, #5
 8008dac:	005b      	lsls	r3, r3, #1
 8008dae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008db2:	4498      	add	r8, r3
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	461d      	mov	r5, r3
 8008db8:	f04f 0600 	mov.w	r6, #0
 8008dbc:	46a9      	mov	r9, r5
 8008dbe:	46b2      	mov	sl, r6
 8008dc0:	eb19 0309 	adds.w	r3, r9, r9
 8008dc4:	eb4a 040a 	adc.w	r4, sl, sl
 8008dc8:	4699      	mov	r9, r3
 8008dca:	46a2      	mov	sl, r4
 8008dcc:	eb19 0905 	adds.w	r9, r9, r5
 8008dd0:	eb4a 0a06 	adc.w	sl, sl, r6
 8008dd4:	f04f 0100 	mov.w	r1, #0
 8008dd8:	f04f 0200 	mov.w	r2, #0
 8008ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008de0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008de4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008de8:	4689      	mov	r9, r1
 8008dea:	4692      	mov	sl, r2
 8008dec:	eb19 0005 	adds.w	r0, r9, r5
 8008df0:	eb4a 0106 	adc.w	r1, sl, r6
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	461d      	mov	r5, r3
 8008dfa:	f04f 0600 	mov.w	r6, #0
 8008dfe:	196b      	adds	r3, r5, r5
 8008e00:	eb46 0406 	adc.w	r4, r6, r6
 8008e04:	461a      	mov	r2, r3
 8008e06:	4623      	mov	r3, r4
 8008e08:	f7f7 fa3a 	bl	8000280 <__aeabi_uldivmod>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	460c      	mov	r4, r1
 8008e10:	461a      	mov	r2, r3
 8008e12:	4b0c      	ldr	r3, [pc, #48]	; (8008e44 <UART_SetConfig+0x384>)
 8008e14:	fba3 1302 	umull	r1, r3, r3, r2
 8008e18:	095b      	lsrs	r3, r3, #5
 8008e1a:	2164      	movs	r1, #100	; 0x64
 8008e1c:	fb01 f303 	mul.w	r3, r1, r3
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	00db      	lsls	r3, r3, #3
 8008e24:	3332      	adds	r3, #50	; 0x32
 8008e26:	4a07      	ldr	r2, [pc, #28]	; (8008e44 <UART_SetConfig+0x384>)
 8008e28:	fba2 2303 	umull	r2, r3, r2, r3
 8008e2c:	095b      	lsrs	r3, r3, #5
 8008e2e:	f003 0207 	and.w	r2, r3, #7
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4442      	add	r2, r8
 8008e38:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008e3a:	e1b2      	b.n	80091a2 <UART_SetConfig+0x6e2>
 8008e3c:	40011000 	.word	0x40011000
 8008e40:	40011400 	.word	0x40011400
 8008e44:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4ad7      	ldr	r2, [pc, #860]	; (80091ac <UART_SetConfig+0x6ec>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d005      	beq.n	8008e5e <UART_SetConfig+0x39e>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4ad6      	ldr	r2, [pc, #856]	; (80091b0 <UART_SetConfig+0x6f0>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	f040 80d1 	bne.w	8009000 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e5e:	f7fe fbed 	bl	800763c <HAL_RCC_GetPCLK2Freq>
 8008e62:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	469a      	mov	sl, r3
 8008e68:	f04f 0b00 	mov.w	fp, #0
 8008e6c:	46d0      	mov	r8, sl
 8008e6e:	46d9      	mov	r9, fp
 8008e70:	eb18 0308 	adds.w	r3, r8, r8
 8008e74:	eb49 0409 	adc.w	r4, r9, r9
 8008e78:	4698      	mov	r8, r3
 8008e7a:	46a1      	mov	r9, r4
 8008e7c:	eb18 080a 	adds.w	r8, r8, sl
 8008e80:	eb49 090b 	adc.w	r9, r9, fp
 8008e84:	f04f 0100 	mov.w	r1, #0
 8008e88:	f04f 0200 	mov.w	r2, #0
 8008e8c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008e90:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008e94:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008e98:	4688      	mov	r8, r1
 8008e9a:	4691      	mov	r9, r2
 8008e9c:	eb1a 0508 	adds.w	r5, sl, r8
 8008ea0:	eb4b 0609 	adc.w	r6, fp, r9
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	f04f 0200 	mov.w	r2, #0
 8008eae:	f04f 0300 	mov.w	r3, #0
 8008eb2:	f04f 0400 	mov.w	r4, #0
 8008eb6:	0094      	lsls	r4, r2, #2
 8008eb8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ebc:	008b      	lsls	r3, r1, #2
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	4623      	mov	r3, r4
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	f7f7 f9db 	bl	8000280 <__aeabi_uldivmod>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	460c      	mov	r4, r1
 8008ece:	461a      	mov	r2, r3
 8008ed0:	4bb8      	ldr	r3, [pc, #736]	; (80091b4 <UART_SetConfig+0x6f4>)
 8008ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ed6:	095b      	lsrs	r3, r3, #5
 8008ed8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	469b      	mov	fp, r3
 8008ee0:	f04f 0c00 	mov.w	ip, #0
 8008ee4:	46d9      	mov	r9, fp
 8008ee6:	46e2      	mov	sl, ip
 8008ee8:	eb19 0309 	adds.w	r3, r9, r9
 8008eec:	eb4a 040a 	adc.w	r4, sl, sl
 8008ef0:	4699      	mov	r9, r3
 8008ef2:	46a2      	mov	sl, r4
 8008ef4:	eb19 090b 	adds.w	r9, r9, fp
 8008ef8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008efc:	f04f 0100 	mov.w	r1, #0
 8008f00:	f04f 0200 	mov.w	r2, #0
 8008f04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f10:	4689      	mov	r9, r1
 8008f12:	4692      	mov	sl, r2
 8008f14:	eb1b 0509 	adds.w	r5, fp, r9
 8008f18:	eb4c 060a 	adc.w	r6, ip, sl
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	4619      	mov	r1, r3
 8008f22:	f04f 0200 	mov.w	r2, #0
 8008f26:	f04f 0300 	mov.w	r3, #0
 8008f2a:	f04f 0400 	mov.w	r4, #0
 8008f2e:	0094      	lsls	r4, r2, #2
 8008f30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f34:	008b      	lsls	r3, r1, #2
 8008f36:	461a      	mov	r2, r3
 8008f38:	4623      	mov	r3, r4
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	4631      	mov	r1, r6
 8008f3e:	f7f7 f99f 	bl	8000280 <__aeabi_uldivmod>
 8008f42:	4603      	mov	r3, r0
 8008f44:	460c      	mov	r4, r1
 8008f46:	461a      	mov	r2, r3
 8008f48:	4b9a      	ldr	r3, [pc, #616]	; (80091b4 <UART_SetConfig+0x6f4>)
 8008f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8008f4e:	095b      	lsrs	r3, r3, #5
 8008f50:	2164      	movs	r1, #100	; 0x64
 8008f52:	fb01 f303 	mul.w	r3, r1, r3
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	011b      	lsls	r3, r3, #4
 8008f5a:	3332      	adds	r3, #50	; 0x32
 8008f5c:	4a95      	ldr	r2, [pc, #596]	; (80091b4 <UART_SetConfig+0x6f4>)
 8008f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f62:	095b      	lsrs	r3, r3, #5
 8008f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f68:	4498      	add	r8, r3
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	469b      	mov	fp, r3
 8008f6e:	f04f 0c00 	mov.w	ip, #0
 8008f72:	46d9      	mov	r9, fp
 8008f74:	46e2      	mov	sl, ip
 8008f76:	eb19 0309 	adds.w	r3, r9, r9
 8008f7a:	eb4a 040a 	adc.w	r4, sl, sl
 8008f7e:	4699      	mov	r9, r3
 8008f80:	46a2      	mov	sl, r4
 8008f82:	eb19 090b 	adds.w	r9, r9, fp
 8008f86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f8a:	f04f 0100 	mov.w	r1, #0
 8008f8e:	f04f 0200 	mov.w	r2, #0
 8008f92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f9e:	4689      	mov	r9, r1
 8008fa0:	4692      	mov	sl, r2
 8008fa2:	eb1b 0509 	adds.w	r5, fp, r9
 8008fa6:	eb4c 060a 	adc.w	r6, ip, sl
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	f04f 0200 	mov.w	r2, #0
 8008fb4:	f04f 0300 	mov.w	r3, #0
 8008fb8:	f04f 0400 	mov.w	r4, #0
 8008fbc:	0094      	lsls	r4, r2, #2
 8008fbe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008fc2:	008b      	lsls	r3, r1, #2
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	4623      	mov	r3, r4
 8008fc8:	4628      	mov	r0, r5
 8008fca:	4631      	mov	r1, r6
 8008fcc:	f7f7 f958 	bl	8000280 <__aeabi_uldivmod>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	4b77      	ldr	r3, [pc, #476]	; (80091b4 <UART_SetConfig+0x6f4>)
 8008fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fdc:	095b      	lsrs	r3, r3, #5
 8008fde:	2164      	movs	r1, #100	; 0x64
 8008fe0:	fb01 f303 	mul.w	r3, r1, r3
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	011b      	lsls	r3, r3, #4
 8008fe8:	3332      	adds	r3, #50	; 0x32
 8008fea:	4a72      	ldr	r2, [pc, #456]	; (80091b4 <UART_SetConfig+0x6f4>)
 8008fec:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff0:	095b      	lsrs	r3, r3, #5
 8008ff2:	f003 020f 	and.w	r2, r3, #15
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4442      	add	r2, r8
 8008ffc:	609a      	str	r2, [r3, #8]
 8008ffe:	e0d0      	b.n	80091a2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009000:	f7fe fb08 	bl	8007614 <HAL_RCC_GetPCLK1Freq>
 8009004:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	469a      	mov	sl, r3
 800900a:	f04f 0b00 	mov.w	fp, #0
 800900e:	46d0      	mov	r8, sl
 8009010:	46d9      	mov	r9, fp
 8009012:	eb18 0308 	adds.w	r3, r8, r8
 8009016:	eb49 0409 	adc.w	r4, r9, r9
 800901a:	4698      	mov	r8, r3
 800901c:	46a1      	mov	r9, r4
 800901e:	eb18 080a 	adds.w	r8, r8, sl
 8009022:	eb49 090b 	adc.w	r9, r9, fp
 8009026:	f04f 0100 	mov.w	r1, #0
 800902a:	f04f 0200 	mov.w	r2, #0
 800902e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009032:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009036:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800903a:	4688      	mov	r8, r1
 800903c:	4691      	mov	r9, r2
 800903e:	eb1a 0508 	adds.w	r5, sl, r8
 8009042:	eb4b 0609 	adc.w	r6, fp, r9
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	4619      	mov	r1, r3
 800904c:	f04f 0200 	mov.w	r2, #0
 8009050:	f04f 0300 	mov.w	r3, #0
 8009054:	f04f 0400 	mov.w	r4, #0
 8009058:	0094      	lsls	r4, r2, #2
 800905a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800905e:	008b      	lsls	r3, r1, #2
 8009060:	461a      	mov	r2, r3
 8009062:	4623      	mov	r3, r4
 8009064:	4628      	mov	r0, r5
 8009066:	4631      	mov	r1, r6
 8009068:	f7f7 f90a 	bl	8000280 <__aeabi_uldivmod>
 800906c:	4603      	mov	r3, r0
 800906e:	460c      	mov	r4, r1
 8009070:	461a      	mov	r2, r3
 8009072:	4b50      	ldr	r3, [pc, #320]	; (80091b4 <UART_SetConfig+0x6f4>)
 8009074:	fba3 2302 	umull	r2, r3, r3, r2
 8009078:	095b      	lsrs	r3, r3, #5
 800907a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	469b      	mov	fp, r3
 8009082:	f04f 0c00 	mov.w	ip, #0
 8009086:	46d9      	mov	r9, fp
 8009088:	46e2      	mov	sl, ip
 800908a:	eb19 0309 	adds.w	r3, r9, r9
 800908e:	eb4a 040a 	adc.w	r4, sl, sl
 8009092:	4699      	mov	r9, r3
 8009094:	46a2      	mov	sl, r4
 8009096:	eb19 090b 	adds.w	r9, r9, fp
 800909a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800909e:	f04f 0100 	mov.w	r1, #0
 80090a2:	f04f 0200 	mov.w	r2, #0
 80090a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80090ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80090b2:	4689      	mov	r9, r1
 80090b4:	4692      	mov	sl, r2
 80090b6:	eb1b 0509 	adds.w	r5, fp, r9
 80090ba:	eb4c 060a 	adc.w	r6, ip, sl
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	4619      	mov	r1, r3
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	f04f 0300 	mov.w	r3, #0
 80090cc:	f04f 0400 	mov.w	r4, #0
 80090d0:	0094      	lsls	r4, r2, #2
 80090d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80090d6:	008b      	lsls	r3, r1, #2
 80090d8:	461a      	mov	r2, r3
 80090da:	4623      	mov	r3, r4
 80090dc:	4628      	mov	r0, r5
 80090de:	4631      	mov	r1, r6
 80090e0:	f7f7 f8ce 	bl	8000280 <__aeabi_uldivmod>
 80090e4:	4603      	mov	r3, r0
 80090e6:	460c      	mov	r4, r1
 80090e8:	461a      	mov	r2, r3
 80090ea:	4b32      	ldr	r3, [pc, #200]	; (80091b4 <UART_SetConfig+0x6f4>)
 80090ec:	fba3 1302 	umull	r1, r3, r3, r2
 80090f0:	095b      	lsrs	r3, r3, #5
 80090f2:	2164      	movs	r1, #100	; 0x64
 80090f4:	fb01 f303 	mul.w	r3, r1, r3
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	3332      	adds	r3, #50	; 0x32
 80090fe:	4a2d      	ldr	r2, [pc, #180]	; (80091b4 <UART_SetConfig+0x6f4>)
 8009100:	fba2 2303 	umull	r2, r3, r2, r3
 8009104:	095b      	lsrs	r3, r3, #5
 8009106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800910a:	4498      	add	r8, r3
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	469b      	mov	fp, r3
 8009110:	f04f 0c00 	mov.w	ip, #0
 8009114:	46d9      	mov	r9, fp
 8009116:	46e2      	mov	sl, ip
 8009118:	eb19 0309 	adds.w	r3, r9, r9
 800911c:	eb4a 040a 	adc.w	r4, sl, sl
 8009120:	4699      	mov	r9, r3
 8009122:	46a2      	mov	sl, r4
 8009124:	eb19 090b 	adds.w	r9, r9, fp
 8009128:	eb4a 0a0c 	adc.w	sl, sl, ip
 800912c:	f04f 0100 	mov.w	r1, #0
 8009130:	f04f 0200 	mov.w	r2, #0
 8009134:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009138:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800913c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009140:	4689      	mov	r9, r1
 8009142:	4692      	mov	sl, r2
 8009144:	eb1b 0509 	adds.w	r5, fp, r9
 8009148:	eb4c 060a 	adc.w	r6, ip, sl
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	4619      	mov	r1, r3
 8009152:	f04f 0200 	mov.w	r2, #0
 8009156:	f04f 0300 	mov.w	r3, #0
 800915a:	f04f 0400 	mov.w	r4, #0
 800915e:	0094      	lsls	r4, r2, #2
 8009160:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009164:	008b      	lsls	r3, r1, #2
 8009166:	461a      	mov	r2, r3
 8009168:	4623      	mov	r3, r4
 800916a:	4628      	mov	r0, r5
 800916c:	4631      	mov	r1, r6
 800916e:	f7f7 f887 	bl	8000280 <__aeabi_uldivmod>
 8009172:	4603      	mov	r3, r0
 8009174:	460c      	mov	r4, r1
 8009176:	461a      	mov	r2, r3
 8009178:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <UART_SetConfig+0x6f4>)
 800917a:	fba3 1302 	umull	r1, r3, r3, r2
 800917e:	095b      	lsrs	r3, r3, #5
 8009180:	2164      	movs	r1, #100	; 0x64
 8009182:	fb01 f303 	mul.w	r3, r1, r3
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	011b      	lsls	r3, r3, #4
 800918a:	3332      	adds	r3, #50	; 0x32
 800918c:	4a09      	ldr	r2, [pc, #36]	; (80091b4 <UART_SetConfig+0x6f4>)
 800918e:	fba2 2303 	umull	r2, r3, r2, r3
 8009192:	095b      	lsrs	r3, r3, #5
 8009194:	f003 020f 	and.w	r2, r3, #15
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4442      	add	r2, r8
 800919e:	609a      	str	r2, [r3, #8]
}
 80091a0:	e7ff      	b.n	80091a2 <UART_SetConfig+0x6e2>
 80091a2:	bf00      	nop
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ac:	40011000 	.word	0x40011000
 80091b0:	40011400 	.word	0x40011400
 80091b4:	51eb851f 	.word	0x51eb851f

080091b8 <atoi>:
 80091b8:	220a      	movs	r2, #10
 80091ba:	2100      	movs	r1, #0
 80091bc:	f000 b952 	b.w	8009464 <strtol>

080091c0 <__errno>:
 80091c0:	4b01      	ldr	r3, [pc, #4]	; (80091c8 <__errno+0x8>)
 80091c2:	6818      	ldr	r0, [r3, #0]
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	2000003c 	.word	0x2000003c

080091cc <__libc_init_array>:
 80091cc:	b570      	push	{r4, r5, r6, lr}
 80091ce:	4e0d      	ldr	r6, [pc, #52]	; (8009204 <__libc_init_array+0x38>)
 80091d0:	4c0d      	ldr	r4, [pc, #52]	; (8009208 <__libc_init_array+0x3c>)
 80091d2:	1ba4      	subs	r4, r4, r6
 80091d4:	10a4      	asrs	r4, r4, #2
 80091d6:	2500      	movs	r5, #0
 80091d8:	42a5      	cmp	r5, r4
 80091da:	d109      	bne.n	80091f0 <__libc_init_array+0x24>
 80091dc:	4e0b      	ldr	r6, [pc, #44]	; (800920c <__libc_init_array+0x40>)
 80091de:	4c0c      	ldr	r4, [pc, #48]	; (8009210 <__libc_init_array+0x44>)
 80091e0:	f001 f87a 	bl	800a2d8 <_init>
 80091e4:	1ba4      	subs	r4, r4, r6
 80091e6:	10a4      	asrs	r4, r4, #2
 80091e8:	2500      	movs	r5, #0
 80091ea:	42a5      	cmp	r5, r4
 80091ec:	d105      	bne.n	80091fa <__libc_init_array+0x2e>
 80091ee:	bd70      	pop	{r4, r5, r6, pc}
 80091f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091f4:	4798      	blx	r3
 80091f6:	3501      	adds	r5, #1
 80091f8:	e7ee      	b.n	80091d8 <__libc_init_array+0xc>
 80091fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091fe:	4798      	blx	r3
 8009200:	3501      	adds	r5, #1
 8009202:	e7f2      	b.n	80091ea <__libc_init_array+0x1e>
 8009204:	0800a5c4 	.word	0x0800a5c4
 8009208:	0800a5c4 	.word	0x0800a5c4
 800920c:	0800a5c4 	.word	0x0800a5c4
 8009210:	0800a5c8 	.word	0x0800a5c8

08009214 <memset>:
 8009214:	4402      	add	r2, r0
 8009216:	4603      	mov	r3, r0
 8009218:	4293      	cmp	r3, r2
 800921a:	d100      	bne.n	800921e <memset+0xa>
 800921c:	4770      	bx	lr
 800921e:	f803 1b01 	strb.w	r1, [r3], #1
 8009222:	e7f9      	b.n	8009218 <memset+0x4>

08009224 <iprintf>:
 8009224:	b40f      	push	{r0, r1, r2, r3}
 8009226:	4b0a      	ldr	r3, [pc, #40]	; (8009250 <iprintf+0x2c>)
 8009228:	b513      	push	{r0, r1, r4, lr}
 800922a:	681c      	ldr	r4, [r3, #0]
 800922c:	b124      	cbz	r4, 8009238 <iprintf+0x14>
 800922e:	69a3      	ldr	r3, [r4, #24]
 8009230:	b913      	cbnz	r3, 8009238 <iprintf+0x14>
 8009232:	4620      	mov	r0, r4
 8009234:	f000 fadc 	bl	80097f0 <__sinit>
 8009238:	ab05      	add	r3, sp, #20
 800923a:	9a04      	ldr	r2, [sp, #16]
 800923c:	68a1      	ldr	r1, [r4, #8]
 800923e:	9301      	str	r3, [sp, #4]
 8009240:	4620      	mov	r0, r4
 8009242:	f000 fcab 	bl	8009b9c <_vfiprintf_r>
 8009246:	b002      	add	sp, #8
 8009248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800924c:	b004      	add	sp, #16
 800924e:	4770      	bx	lr
 8009250:	2000003c 	.word	0x2000003c

08009254 <putchar>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4b08      	ldr	r3, [pc, #32]	; (8009278 <putchar+0x24>)
 8009258:	681c      	ldr	r4, [r3, #0]
 800925a:	4605      	mov	r5, r0
 800925c:	b124      	cbz	r4, 8009268 <putchar+0x14>
 800925e:	69a3      	ldr	r3, [r4, #24]
 8009260:	b913      	cbnz	r3, 8009268 <putchar+0x14>
 8009262:	4620      	mov	r0, r4
 8009264:	f000 fac4 	bl	80097f0 <__sinit>
 8009268:	68a2      	ldr	r2, [r4, #8]
 800926a:	4629      	mov	r1, r5
 800926c:	4620      	mov	r0, r4
 800926e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009272:	f000 bf31 	b.w	800a0d8 <_putc_r>
 8009276:	bf00      	nop
 8009278:	2000003c 	.word	0x2000003c

0800927c <_puts_r>:
 800927c:	b570      	push	{r4, r5, r6, lr}
 800927e:	460e      	mov	r6, r1
 8009280:	4605      	mov	r5, r0
 8009282:	b118      	cbz	r0, 800928c <_puts_r+0x10>
 8009284:	6983      	ldr	r3, [r0, #24]
 8009286:	b90b      	cbnz	r3, 800928c <_puts_r+0x10>
 8009288:	f000 fab2 	bl	80097f0 <__sinit>
 800928c:	69ab      	ldr	r3, [r5, #24]
 800928e:	68ac      	ldr	r4, [r5, #8]
 8009290:	b913      	cbnz	r3, 8009298 <_puts_r+0x1c>
 8009292:	4628      	mov	r0, r5
 8009294:	f000 faac 	bl	80097f0 <__sinit>
 8009298:	4b23      	ldr	r3, [pc, #140]	; (8009328 <_puts_r+0xac>)
 800929a:	429c      	cmp	r4, r3
 800929c:	d117      	bne.n	80092ce <_puts_r+0x52>
 800929e:	686c      	ldr	r4, [r5, #4]
 80092a0:	89a3      	ldrh	r3, [r4, #12]
 80092a2:	071b      	lsls	r3, r3, #28
 80092a4:	d51d      	bpl.n	80092e2 <_puts_r+0x66>
 80092a6:	6923      	ldr	r3, [r4, #16]
 80092a8:	b1db      	cbz	r3, 80092e2 <_puts_r+0x66>
 80092aa:	3e01      	subs	r6, #1
 80092ac:	68a3      	ldr	r3, [r4, #8]
 80092ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80092b2:	3b01      	subs	r3, #1
 80092b4:	60a3      	str	r3, [r4, #8]
 80092b6:	b9e9      	cbnz	r1, 80092f4 <_puts_r+0x78>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	da2e      	bge.n	800931a <_puts_r+0x9e>
 80092bc:	4622      	mov	r2, r4
 80092be:	210a      	movs	r1, #10
 80092c0:	4628      	mov	r0, r5
 80092c2:	f000 f8e5 	bl	8009490 <__swbuf_r>
 80092c6:	3001      	adds	r0, #1
 80092c8:	d011      	beq.n	80092ee <_puts_r+0x72>
 80092ca:	200a      	movs	r0, #10
 80092cc:	e011      	b.n	80092f2 <_puts_r+0x76>
 80092ce:	4b17      	ldr	r3, [pc, #92]	; (800932c <_puts_r+0xb0>)
 80092d0:	429c      	cmp	r4, r3
 80092d2:	d101      	bne.n	80092d8 <_puts_r+0x5c>
 80092d4:	68ac      	ldr	r4, [r5, #8]
 80092d6:	e7e3      	b.n	80092a0 <_puts_r+0x24>
 80092d8:	4b15      	ldr	r3, [pc, #84]	; (8009330 <_puts_r+0xb4>)
 80092da:	429c      	cmp	r4, r3
 80092dc:	bf08      	it	eq
 80092de:	68ec      	ldreq	r4, [r5, #12]
 80092e0:	e7de      	b.n	80092a0 <_puts_r+0x24>
 80092e2:	4621      	mov	r1, r4
 80092e4:	4628      	mov	r0, r5
 80092e6:	f000 f925 	bl	8009534 <__swsetup_r>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	d0dd      	beq.n	80092aa <_puts_r+0x2e>
 80092ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092f2:	bd70      	pop	{r4, r5, r6, pc}
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	da04      	bge.n	8009302 <_puts_r+0x86>
 80092f8:	69a2      	ldr	r2, [r4, #24]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	dc06      	bgt.n	800930c <_puts_r+0x90>
 80092fe:	290a      	cmp	r1, #10
 8009300:	d004      	beq.n	800930c <_puts_r+0x90>
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	1c5a      	adds	r2, r3, #1
 8009306:	6022      	str	r2, [r4, #0]
 8009308:	7019      	strb	r1, [r3, #0]
 800930a:	e7cf      	b.n	80092ac <_puts_r+0x30>
 800930c:	4622      	mov	r2, r4
 800930e:	4628      	mov	r0, r5
 8009310:	f000 f8be 	bl	8009490 <__swbuf_r>
 8009314:	3001      	adds	r0, #1
 8009316:	d1c9      	bne.n	80092ac <_puts_r+0x30>
 8009318:	e7e9      	b.n	80092ee <_puts_r+0x72>
 800931a:	6823      	ldr	r3, [r4, #0]
 800931c:	200a      	movs	r0, #10
 800931e:	1c5a      	adds	r2, r3, #1
 8009320:	6022      	str	r2, [r4, #0]
 8009322:	7018      	strb	r0, [r3, #0]
 8009324:	e7e5      	b.n	80092f2 <_puts_r+0x76>
 8009326:	bf00      	nop
 8009328:	0800a43c 	.word	0x0800a43c
 800932c:	0800a45c 	.word	0x0800a45c
 8009330:	0800a41c 	.word	0x0800a41c

08009334 <puts>:
 8009334:	4b02      	ldr	r3, [pc, #8]	; (8009340 <puts+0xc>)
 8009336:	4601      	mov	r1, r0
 8009338:	6818      	ldr	r0, [r3, #0]
 800933a:	f7ff bf9f 	b.w	800927c <_puts_r>
 800933e:	bf00      	nop
 8009340:	2000003c 	.word	0x2000003c

08009344 <strncat>:
 8009344:	b530      	push	{r4, r5, lr}
 8009346:	4603      	mov	r3, r0
 8009348:	781c      	ldrb	r4, [r3, #0]
 800934a:	1c5d      	adds	r5, r3, #1
 800934c:	b944      	cbnz	r4, 8009360 <strncat+0x1c>
 800934e:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8009352:	d304      	bcc.n	800935e <strncat+0x1a>
 8009354:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009358:	f803 4b01 	strb.w	r4, [r3], #1
 800935c:	b914      	cbnz	r4, 8009364 <strncat+0x20>
 800935e:	bd30      	pop	{r4, r5, pc}
 8009360:	462b      	mov	r3, r5
 8009362:	e7f1      	b.n	8009348 <strncat+0x4>
 8009364:	2a00      	cmp	r2, #0
 8009366:	d1f2      	bne.n	800934e <strncat+0xa>
 8009368:	701a      	strb	r2, [r3, #0]
 800936a:	e7f0      	b.n	800934e <strncat+0xa>

0800936c <_strtol_l.isra.0>:
 800936c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009370:	4680      	mov	r8, r0
 8009372:	4689      	mov	r9, r1
 8009374:	4692      	mov	sl, r2
 8009376:	461e      	mov	r6, r3
 8009378:	460f      	mov	r7, r1
 800937a:	463d      	mov	r5, r7
 800937c:	9808      	ldr	r0, [sp, #32]
 800937e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009382:	f000 fabf 	bl	8009904 <__locale_ctype_ptr_l>
 8009386:	4420      	add	r0, r4
 8009388:	7843      	ldrb	r3, [r0, #1]
 800938a:	f013 0308 	ands.w	r3, r3, #8
 800938e:	d132      	bne.n	80093f6 <_strtol_l.isra.0+0x8a>
 8009390:	2c2d      	cmp	r4, #45	; 0x2d
 8009392:	d132      	bne.n	80093fa <_strtol_l.isra.0+0x8e>
 8009394:	787c      	ldrb	r4, [r7, #1]
 8009396:	1cbd      	adds	r5, r7, #2
 8009398:	2201      	movs	r2, #1
 800939a:	2e00      	cmp	r6, #0
 800939c:	d05d      	beq.n	800945a <_strtol_l.isra.0+0xee>
 800939e:	2e10      	cmp	r6, #16
 80093a0:	d109      	bne.n	80093b6 <_strtol_l.isra.0+0x4a>
 80093a2:	2c30      	cmp	r4, #48	; 0x30
 80093a4:	d107      	bne.n	80093b6 <_strtol_l.isra.0+0x4a>
 80093a6:	782b      	ldrb	r3, [r5, #0]
 80093a8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093ac:	2b58      	cmp	r3, #88	; 0x58
 80093ae:	d14f      	bne.n	8009450 <_strtol_l.isra.0+0xe4>
 80093b0:	786c      	ldrb	r4, [r5, #1]
 80093b2:	2610      	movs	r6, #16
 80093b4:	3502      	adds	r5, #2
 80093b6:	2a00      	cmp	r2, #0
 80093b8:	bf14      	ite	ne
 80093ba:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80093be:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80093c2:	2700      	movs	r7, #0
 80093c4:	fbb1 fcf6 	udiv	ip, r1, r6
 80093c8:	4638      	mov	r0, r7
 80093ca:	fb06 1e1c 	mls	lr, r6, ip, r1
 80093ce:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80093d2:	2b09      	cmp	r3, #9
 80093d4:	d817      	bhi.n	8009406 <_strtol_l.isra.0+0x9a>
 80093d6:	461c      	mov	r4, r3
 80093d8:	42a6      	cmp	r6, r4
 80093da:	dd23      	ble.n	8009424 <_strtol_l.isra.0+0xb8>
 80093dc:	1c7b      	adds	r3, r7, #1
 80093de:	d007      	beq.n	80093f0 <_strtol_l.isra.0+0x84>
 80093e0:	4584      	cmp	ip, r0
 80093e2:	d31c      	bcc.n	800941e <_strtol_l.isra.0+0xb2>
 80093e4:	d101      	bne.n	80093ea <_strtol_l.isra.0+0x7e>
 80093e6:	45a6      	cmp	lr, r4
 80093e8:	db19      	blt.n	800941e <_strtol_l.isra.0+0xb2>
 80093ea:	fb00 4006 	mla	r0, r0, r6, r4
 80093ee:	2701      	movs	r7, #1
 80093f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093f4:	e7eb      	b.n	80093ce <_strtol_l.isra.0+0x62>
 80093f6:	462f      	mov	r7, r5
 80093f8:	e7bf      	b.n	800937a <_strtol_l.isra.0+0xe>
 80093fa:	2c2b      	cmp	r4, #43	; 0x2b
 80093fc:	bf04      	itt	eq
 80093fe:	1cbd      	addeq	r5, r7, #2
 8009400:	787c      	ldrbeq	r4, [r7, #1]
 8009402:	461a      	mov	r2, r3
 8009404:	e7c9      	b.n	800939a <_strtol_l.isra.0+0x2e>
 8009406:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800940a:	2b19      	cmp	r3, #25
 800940c:	d801      	bhi.n	8009412 <_strtol_l.isra.0+0xa6>
 800940e:	3c37      	subs	r4, #55	; 0x37
 8009410:	e7e2      	b.n	80093d8 <_strtol_l.isra.0+0x6c>
 8009412:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009416:	2b19      	cmp	r3, #25
 8009418:	d804      	bhi.n	8009424 <_strtol_l.isra.0+0xb8>
 800941a:	3c57      	subs	r4, #87	; 0x57
 800941c:	e7dc      	b.n	80093d8 <_strtol_l.isra.0+0x6c>
 800941e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009422:	e7e5      	b.n	80093f0 <_strtol_l.isra.0+0x84>
 8009424:	1c7b      	adds	r3, r7, #1
 8009426:	d108      	bne.n	800943a <_strtol_l.isra.0+0xce>
 8009428:	2322      	movs	r3, #34	; 0x22
 800942a:	f8c8 3000 	str.w	r3, [r8]
 800942e:	4608      	mov	r0, r1
 8009430:	f1ba 0f00 	cmp.w	sl, #0
 8009434:	d107      	bne.n	8009446 <_strtol_l.isra.0+0xda>
 8009436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943a:	b102      	cbz	r2, 800943e <_strtol_l.isra.0+0xd2>
 800943c:	4240      	negs	r0, r0
 800943e:	f1ba 0f00 	cmp.w	sl, #0
 8009442:	d0f8      	beq.n	8009436 <_strtol_l.isra.0+0xca>
 8009444:	b10f      	cbz	r7, 800944a <_strtol_l.isra.0+0xde>
 8009446:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800944a:	f8ca 9000 	str.w	r9, [sl]
 800944e:	e7f2      	b.n	8009436 <_strtol_l.isra.0+0xca>
 8009450:	2430      	movs	r4, #48	; 0x30
 8009452:	2e00      	cmp	r6, #0
 8009454:	d1af      	bne.n	80093b6 <_strtol_l.isra.0+0x4a>
 8009456:	2608      	movs	r6, #8
 8009458:	e7ad      	b.n	80093b6 <_strtol_l.isra.0+0x4a>
 800945a:	2c30      	cmp	r4, #48	; 0x30
 800945c:	d0a3      	beq.n	80093a6 <_strtol_l.isra.0+0x3a>
 800945e:	260a      	movs	r6, #10
 8009460:	e7a9      	b.n	80093b6 <_strtol_l.isra.0+0x4a>
	...

08009464 <strtol>:
 8009464:	4b08      	ldr	r3, [pc, #32]	; (8009488 <strtol+0x24>)
 8009466:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009468:	681c      	ldr	r4, [r3, #0]
 800946a:	4d08      	ldr	r5, [pc, #32]	; (800948c <strtol+0x28>)
 800946c:	6a23      	ldr	r3, [r4, #32]
 800946e:	2b00      	cmp	r3, #0
 8009470:	bf08      	it	eq
 8009472:	462b      	moveq	r3, r5
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	4613      	mov	r3, r2
 8009478:	460a      	mov	r2, r1
 800947a:	4601      	mov	r1, r0
 800947c:	4620      	mov	r0, r4
 800947e:	f7ff ff75 	bl	800936c <_strtol_l.isra.0>
 8009482:	b003      	add	sp, #12
 8009484:	bd30      	pop	{r4, r5, pc}
 8009486:	bf00      	nop
 8009488:	2000003c 	.word	0x2000003c
 800948c:	200000a0 	.word	0x200000a0

08009490 <__swbuf_r>:
 8009490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009492:	460e      	mov	r6, r1
 8009494:	4614      	mov	r4, r2
 8009496:	4605      	mov	r5, r0
 8009498:	b118      	cbz	r0, 80094a2 <__swbuf_r+0x12>
 800949a:	6983      	ldr	r3, [r0, #24]
 800949c:	b90b      	cbnz	r3, 80094a2 <__swbuf_r+0x12>
 800949e:	f000 f9a7 	bl	80097f0 <__sinit>
 80094a2:	4b21      	ldr	r3, [pc, #132]	; (8009528 <__swbuf_r+0x98>)
 80094a4:	429c      	cmp	r4, r3
 80094a6:	d12a      	bne.n	80094fe <__swbuf_r+0x6e>
 80094a8:	686c      	ldr	r4, [r5, #4]
 80094aa:	69a3      	ldr	r3, [r4, #24]
 80094ac:	60a3      	str	r3, [r4, #8]
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	071a      	lsls	r2, r3, #28
 80094b2:	d52e      	bpl.n	8009512 <__swbuf_r+0x82>
 80094b4:	6923      	ldr	r3, [r4, #16]
 80094b6:	b363      	cbz	r3, 8009512 <__swbuf_r+0x82>
 80094b8:	6923      	ldr	r3, [r4, #16]
 80094ba:	6820      	ldr	r0, [r4, #0]
 80094bc:	1ac0      	subs	r0, r0, r3
 80094be:	6963      	ldr	r3, [r4, #20]
 80094c0:	b2f6      	uxtb	r6, r6
 80094c2:	4283      	cmp	r3, r0
 80094c4:	4637      	mov	r7, r6
 80094c6:	dc04      	bgt.n	80094d2 <__swbuf_r+0x42>
 80094c8:	4621      	mov	r1, r4
 80094ca:	4628      	mov	r0, r5
 80094cc:	f000 f926 	bl	800971c <_fflush_r>
 80094d0:	bb28      	cbnz	r0, 800951e <__swbuf_r+0x8e>
 80094d2:	68a3      	ldr	r3, [r4, #8]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	60a3      	str	r3, [r4, #8]
 80094d8:	6823      	ldr	r3, [r4, #0]
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	6022      	str	r2, [r4, #0]
 80094de:	701e      	strb	r6, [r3, #0]
 80094e0:	6963      	ldr	r3, [r4, #20]
 80094e2:	3001      	adds	r0, #1
 80094e4:	4283      	cmp	r3, r0
 80094e6:	d004      	beq.n	80094f2 <__swbuf_r+0x62>
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	07db      	lsls	r3, r3, #31
 80094ec:	d519      	bpl.n	8009522 <__swbuf_r+0x92>
 80094ee:	2e0a      	cmp	r6, #10
 80094f0:	d117      	bne.n	8009522 <__swbuf_r+0x92>
 80094f2:	4621      	mov	r1, r4
 80094f4:	4628      	mov	r0, r5
 80094f6:	f000 f911 	bl	800971c <_fflush_r>
 80094fa:	b190      	cbz	r0, 8009522 <__swbuf_r+0x92>
 80094fc:	e00f      	b.n	800951e <__swbuf_r+0x8e>
 80094fe:	4b0b      	ldr	r3, [pc, #44]	; (800952c <__swbuf_r+0x9c>)
 8009500:	429c      	cmp	r4, r3
 8009502:	d101      	bne.n	8009508 <__swbuf_r+0x78>
 8009504:	68ac      	ldr	r4, [r5, #8]
 8009506:	e7d0      	b.n	80094aa <__swbuf_r+0x1a>
 8009508:	4b09      	ldr	r3, [pc, #36]	; (8009530 <__swbuf_r+0xa0>)
 800950a:	429c      	cmp	r4, r3
 800950c:	bf08      	it	eq
 800950e:	68ec      	ldreq	r4, [r5, #12]
 8009510:	e7cb      	b.n	80094aa <__swbuf_r+0x1a>
 8009512:	4621      	mov	r1, r4
 8009514:	4628      	mov	r0, r5
 8009516:	f000 f80d 	bl	8009534 <__swsetup_r>
 800951a:	2800      	cmp	r0, #0
 800951c:	d0cc      	beq.n	80094b8 <__swbuf_r+0x28>
 800951e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009522:	4638      	mov	r0, r7
 8009524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009526:	bf00      	nop
 8009528:	0800a43c 	.word	0x0800a43c
 800952c:	0800a45c 	.word	0x0800a45c
 8009530:	0800a41c 	.word	0x0800a41c

08009534 <__swsetup_r>:
 8009534:	4b32      	ldr	r3, [pc, #200]	; (8009600 <__swsetup_r+0xcc>)
 8009536:	b570      	push	{r4, r5, r6, lr}
 8009538:	681d      	ldr	r5, [r3, #0]
 800953a:	4606      	mov	r6, r0
 800953c:	460c      	mov	r4, r1
 800953e:	b125      	cbz	r5, 800954a <__swsetup_r+0x16>
 8009540:	69ab      	ldr	r3, [r5, #24]
 8009542:	b913      	cbnz	r3, 800954a <__swsetup_r+0x16>
 8009544:	4628      	mov	r0, r5
 8009546:	f000 f953 	bl	80097f0 <__sinit>
 800954a:	4b2e      	ldr	r3, [pc, #184]	; (8009604 <__swsetup_r+0xd0>)
 800954c:	429c      	cmp	r4, r3
 800954e:	d10f      	bne.n	8009570 <__swsetup_r+0x3c>
 8009550:	686c      	ldr	r4, [r5, #4]
 8009552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009556:	b29a      	uxth	r2, r3
 8009558:	0715      	lsls	r5, r2, #28
 800955a:	d42c      	bmi.n	80095b6 <__swsetup_r+0x82>
 800955c:	06d0      	lsls	r0, r2, #27
 800955e:	d411      	bmi.n	8009584 <__swsetup_r+0x50>
 8009560:	2209      	movs	r2, #9
 8009562:	6032      	str	r2, [r6, #0]
 8009564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009568:	81a3      	strh	r3, [r4, #12]
 800956a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800956e:	e03e      	b.n	80095ee <__swsetup_r+0xba>
 8009570:	4b25      	ldr	r3, [pc, #148]	; (8009608 <__swsetup_r+0xd4>)
 8009572:	429c      	cmp	r4, r3
 8009574:	d101      	bne.n	800957a <__swsetup_r+0x46>
 8009576:	68ac      	ldr	r4, [r5, #8]
 8009578:	e7eb      	b.n	8009552 <__swsetup_r+0x1e>
 800957a:	4b24      	ldr	r3, [pc, #144]	; (800960c <__swsetup_r+0xd8>)
 800957c:	429c      	cmp	r4, r3
 800957e:	bf08      	it	eq
 8009580:	68ec      	ldreq	r4, [r5, #12]
 8009582:	e7e6      	b.n	8009552 <__swsetup_r+0x1e>
 8009584:	0751      	lsls	r1, r2, #29
 8009586:	d512      	bpl.n	80095ae <__swsetup_r+0x7a>
 8009588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800958a:	b141      	cbz	r1, 800959e <__swsetup_r+0x6a>
 800958c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009590:	4299      	cmp	r1, r3
 8009592:	d002      	beq.n	800959a <__swsetup_r+0x66>
 8009594:	4630      	mov	r0, r6
 8009596:	f000 fa2f 	bl	80099f8 <_free_r>
 800959a:	2300      	movs	r3, #0
 800959c:	6363      	str	r3, [r4, #52]	; 0x34
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095a4:	81a3      	strh	r3, [r4, #12]
 80095a6:	2300      	movs	r3, #0
 80095a8:	6063      	str	r3, [r4, #4]
 80095aa:	6923      	ldr	r3, [r4, #16]
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	f043 0308 	orr.w	r3, r3, #8
 80095b4:	81a3      	strh	r3, [r4, #12]
 80095b6:	6923      	ldr	r3, [r4, #16]
 80095b8:	b94b      	cbnz	r3, 80095ce <__swsetup_r+0x9a>
 80095ba:	89a3      	ldrh	r3, [r4, #12]
 80095bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095c4:	d003      	beq.n	80095ce <__swsetup_r+0x9a>
 80095c6:	4621      	mov	r1, r4
 80095c8:	4630      	mov	r0, r6
 80095ca:	f000 f9c3 	bl	8009954 <__smakebuf_r>
 80095ce:	89a2      	ldrh	r2, [r4, #12]
 80095d0:	f012 0301 	ands.w	r3, r2, #1
 80095d4:	d00c      	beq.n	80095f0 <__swsetup_r+0xbc>
 80095d6:	2300      	movs	r3, #0
 80095d8:	60a3      	str	r3, [r4, #8]
 80095da:	6963      	ldr	r3, [r4, #20]
 80095dc:	425b      	negs	r3, r3
 80095de:	61a3      	str	r3, [r4, #24]
 80095e0:	6923      	ldr	r3, [r4, #16]
 80095e2:	b953      	cbnz	r3, 80095fa <__swsetup_r+0xc6>
 80095e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80095ec:	d1ba      	bne.n	8009564 <__swsetup_r+0x30>
 80095ee:	bd70      	pop	{r4, r5, r6, pc}
 80095f0:	0792      	lsls	r2, r2, #30
 80095f2:	bf58      	it	pl
 80095f4:	6963      	ldrpl	r3, [r4, #20]
 80095f6:	60a3      	str	r3, [r4, #8]
 80095f8:	e7f2      	b.n	80095e0 <__swsetup_r+0xac>
 80095fa:	2000      	movs	r0, #0
 80095fc:	e7f7      	b.n	80095ee <__swsetup_r+0xba>
 80095fe:	bf00      	nop
 8009600:	2000003c 	.word	0x2000003c
 8009604:	0800a43c 	.word	0x0800a43c
 8009608:	0800a45c 	.word	0x0800a45c
 800960c:	0800a41c 	.word	0x0800a41c

08009610 <__sflush_r>:
 8009610:	898a      	ldrh	r2, [r1, #12]
 8009612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009616:	4605      	mov	r5, r0
 8009618:	0710      	lsls	r0, r2, #28
 800961a:	460c      	mov	r4, r1
 800961c:	d458      	bmi.n	80096d0 <__sflush_r+0xc0>
 800961e:	684b      	ldr	r3, [r1, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	dc05      	bgt.n	8009630 <__sflush_r+0x20>
 8009624:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009626:	2b00      	cmp	r3, #0
 8009628:	dc02      	bgt.n	8009630 <__sflush_r+0x20>
 800962a:	2000      	movs	r0, #0
 800962c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009632:	2e00      	cmp	r6, #0
 8009634:	d0f9      	beq.n	800962a <__sflush_r+0x1a>
 8009636:	2300      	movs	r3, #0
 8009638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800963c:	682f      	ldr	r7, [r5, #0]
 800963e:	6a21      	ldr	r1, [r4, #32]
 8009640:	602b      	str	r3, [r5, #0]
 8009642:	d032      	beq.n	80096aa <__sflush_r+0x9a>
 8009644:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	075a      	lsls	r2, r3, #29
 800964a:	d505      	bpl.n	8009658 <__sflush_r+0x48>
 800964c:	6863      	ldr	r3, [r4, #4]
 800964e:	1ac0      	subs	r0, r0, r3
 8009650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009652:	b10b      	cbz	r3, 8009658 <__sflush_r+0x48>
 8009654:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009656:	1ac0      	subs	r0, r0, r3
 8009658:	2300      	movs	r3, #0
 800965a:	4602      	mov	r2, r0
 800965c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800965e:	6a21      	ldr	r1, [r4, #32]
 8009660:	4628      	mov	r0, r5
 8009662:	47b0      	blx	r6
 8009664:	1c43      	adds	r3, r0, #1
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	d106      	bne.n	8009678 <__sflush_r+0x68>
 800966a:	6829      	ldr	r1, [r5, #0]
 800966c:	291d      	cmp	r1, #29
 800966e:	d848      	bhi.n	8009702 <__sflush_r+0xf2>
 8009670:	4a29      	ldr	r2, [pc, #164]	; (8009718 <__sflush_r+0x108>)
 8009672:	40ca      	lsrs	r2, r1
 8009674:	07d6      	lsls	r6, r2, #31
 8009676:	d544      	bpl.n	8009702 <__sflush_r+0xf2>
 8009678:	2200      	movs	r2, #0
 800967a:	6062      	str	r2, [r4, #4]
 800967c:	04d9      	lsls	r1, r3, #19
 800967e:	6922      	ldr	r2, [r4, #16]
 8009680:	6022      	str	r2, [r4, #0]
 8009682:	d504      	bpl.n	800968e <__sflush_r+0x7e>
 8009684:	1c42      	adds	r2, r0, #1
 8009686:	d101      	bne.n	800968c <__sflush_r+0x7c>
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	b903      	cbnz	r3, 800968e <__sflush_r+0x7e>
 800968c:	6560      	str	r0, [r4, #84]	; 0x54
 800968e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009690:	602f      	str	r7, [r5, #0]
 8009692:	2900      	cmp	r1, #0
 8009694:	d0c9      	beq.n	800962a <__sflush_r+0x1a>
 8009696:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800969a:	4299      	cmp	r1, r3
 800969c:	d002      	beq.n	80096a4 <__sflush_r+0x94>
 800969e:	4628      	mov	r0, r5
 80096a0:	f000 f9aa 	bl	80099f8 <_free_r>
 80096a4:	2000      	movs	r0, #0
 80096a6:	6360      	str	r0, [r4, #52]	; 0x34
 80096a8:	e7c0      	b.n	800962c <__sflush_r+0x1c>
 80096aa:	2301      	movs	r3, #1
 80096ac:	4628      	mov	r0, r5
 80096ae:	47b0      	blx	r6
 80096b0:	1c41      	adds	r1, r0, #1
 80096b2:	d1c8      	bne.n	8009646 <__sflush_r+0x36>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d0c5      	beq.n	8009646 <__sflush_r+0x36>
 80096ba:	2b1d      	cmp	r3, #29
 80096bc:	d001      	beq.n	80096c2 <__sflush_r+0xb2>
 80096be:	2b16      	cmp	r3, #22
 80096c0:	d101      	bne.n	80096c6 <__sflush_r+0xb6>
 80096c2:	602f      	str	r7, [r5, #0]
 80096c4:	e7b1      	b.n	800962a <__sflush_r+0x1a>
 80096c6:	89a3      	ldrh	r3, [r4, #12]
 80096c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096cc:	81a3      	strh	r3, [r4, #12]
 80096ce:	e7ad      	b.n	800962c <__sflush_r+0x1c>
 80096d0:	690f      	ldr	r7, [r1, #16]
 80096d2:	2f00      	cmp	r7, #0
 80096d4:	d0a9      	beq.n	800962a <__sflush_r+0x1a>
 80096d6:	0793      	lsls	r3, r2, #30
 80096d8:	680e      	ldr	r6, [r1, #0]
 80096da:	bf08      	it	eq
 80096dc:	694b      	ldreq	r3, [r1, #20]
 80096de:	600f      	str	r7, [r1, #0]
 80096e0:	bf18      	it	ne
 80096e2:	2300      	movne	r3, #0
 80096e4:	eba6 0807 	sub.w	r8, r6, r7
 80096e8:	608b      	str	r3, [r1, #8]
 80096ea:	f1b8 0f00 	cmp.w	r8, #0
 80096ee:	dd9c      	ble.n	800962a <__sflush_r+0x1a>
 80096f0:	4643      	mov	r3, r8
 80096f2:	463a      	mov	r2, r7
 80096f4:	6a21      	ldr	r1, [r4, #32]
 80096f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096f8:	4628      	mov	r0, r5
 80096fa:	47b0      	blx	r6
 80096fc:	2800      	cmp	r0, #0
 80096fe:	dc06      	bgt.n	800970e <__sflush_r+0xfe>
 8009700:	89a3      	ldrh	r3, [r4, #12]
 8009702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009706:	81a3      	strh	r3, [r4, #12]
 8009708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800970c:	e78e      	b.n	800962c <__sflush_r+0x1c>
 800970e:	4407      	add	r7, r0
 8009710:	eba8 0800 	sub.w	r8, r8, r0
 8009714:	e7e9      	b.n	80096ea <__sflush_r+0xda>
 8009716:	bf00      	nop
 8009718:	20400001 	.word	0x20400001

0800971c <_fflush_r>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	690b      	ldr	r3, [r1, #16]
 8009720:	4605      	mov	r5, r0
 8009722:	460c      	mov	r4, r1
 8009724:	b1db      	cbz	r3, 800975e <_fflush_r+0x42>
 8009726:	b118      	cbz	r0, 8009730 <_fflush_r+0x14>
 8009728:	6983      	ldr	r3, [r0, #24]
 800972a:	b90b      	cbnz	r3, 8009730 <_fflush_r+0x14>
 800972c:	f000 f860 	bl	80097f0 <__sinit>
 8009730:	4b0c      	ldr	r3, [pc, #48]	; (8009764 <_fflush_r+0x48>)
 8009732:	429c      	cmp	r4, r3
 8009734:	d109      	bne.n	800974a <_fflush_r+0x2e>
 8009736:	686c      	ldr	r4, [r5, #4]
 8009738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800973c:	b17b      	cbz	r3, 800975e <_fflush_r+0x42>
 800973e:	4621      	mov	r1, r4
 8009740:	4628      	mov	r0, r5
 8009742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009746:	f7ff bf63 	b.w	8009610 <__sflush_r>
 800974a:	4b07      	ldr	r3, [pc, #28]	; (8009768 <_fflush_r+0x4c>)
 800974c:	429c      	cmp	r4, r3
 800974e:	d101      	bne.n	8009754 <_fflush_r+0x38>
 8009750:	68ac      	ldr	r4, [r5, #8]
 8009752:	e7f1      	b.n	8009738 <_fflush_r+0x1c>
 8009754:	4b05      	ldr	r3, [pc, #20]	; (800976c <_fflush_r+0x50>)
 8009756:	429c      	cmp	r4, r3
 8009758:	bf08      	it	eq
 800975a:	68ec      	ldreq	r4, [r5, #12]
 800975c:	e7ec      	b.n	8009738 <_fflush_r+0x1c>
 800975e:	2000      	movs	r0, #0
 8009760:	bd38      	pop	{r3, r4, r5, pc}
 8009762:	bf00      	nop
 8009764:	0800a43c 	.word	0x0800a43c
 8009768:	0800a45c 	.word	0x0800a45c
 800976c:	0800a41c 	.word	0x0800a41c

08009770 <std>:
 8009770:	2300      	movs	r3, #0
 8009772:	b510      	push	{r4, lr}
 8009774:	4604      	mov	r4, r0
 8009776:	e9c0 3300 	strd	r3, r3, [r0]
 800977a:	6083      	str	r3, [r0, #8]
 800977c:	8181      	strh	r1, [r0, #12]
 800977e:	6643      	str	r3, [r0, #100]	; 0x64
 8009780:	81c2      	strh	r2, [r0, #14]
 8009782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009786:	6183      	str	r3, [r0, #24]
 8009788:	4619      	mov	r1, r3
 800978a:	2208      	movs	r2, #8
 800978c:	305c      	adds	r0, #92	; 0x5c
 800978e:	f7ff fd41 	bl	8009214 <memset>
 8009792:	4b05      	ldr	r3, [pc, #20]	; (80097a8 <std+0x38>)
 8009794:	6263      	str	r3, [r4, #36]	; 0x24
 8009796:	4b05      	ldr	r3, [pc, #20]	; (80097ac <std+0x3c>)
 8009798:	62a3      	str	r3, [r4, #40]	; 0x28
 800979a:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <std+0x40>)
 800979c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800979e:	4b05      	ldr	r3, [pc, #20]	; (80097b4 <std+0x44>)
 80097a0:	6224      	str	r4, [r4, #32]
 80097a2:	6323      	str	r3, [r4, #48]	; 0x30
 80097a4:	bd10      	pop	{r4, pc}
 80097a6:	bf00      	nop
 80097a8:	0800a165 	.word	0x0800a165
 80097ac:	0800a187 	.word	0x0800a187
 80097b0:	0800a1bf 	.word	0x0800a1bf
 80097b4:	0800a1e3 	.word	0x0800a1e3

080097b8 <_cleanup_r>:
 80097b8:	4901      	ldr	r1, [pc, #4]	; (80097c0 <_cleanup_r+0x8>)
 80097ba:	f000 b885 	b.w	80098c8 <_fwalk_reent>
 80097be:	bf00      	nop
 80097c0:	0800971d 	.word	0x0800971d

080097c4 <__sfmoreglue>:
 80097c4:	b570      	push	{r4, r5, r6, lr}
 80097c6:	1e4a      	subs	r2, r1, #1
 80097c8:	2568      	movs	r5, #104	; 0x68
 80097ca:	4355      	muls	r5, r2
 80097cc:	460e      	mov	r6, r1
 80097ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097d2:	f000 f95f 	bl	8009a94 <_malloc_r>
 80097d6:	4604      	mov	r4, r0
 80097d8:	b140      	cbz	r0, 80097ec <__sfmoreglue+0x28>
 80097da:	2100      	movs	r1, #0
 80097dc:	e9c0 1600 	strd	r1, r6, [r0]
 80097e0:	300c      	adds	r0, #12
 80097e2:	60a0      	str	r0, [r4, #8]
 80097e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097e8:	f7ff fd14 	bl	8009214 <memset>
 80097ec:	4620      	mov	r0, r4
 80097ee:	bd70      	pop	{r4, r5, r6, pc}

080097f0 <__sinit>:
 80097f0:	6983      	ldr	r3, [r0, #24]
 80097f2:	b510      	push	{r4, lr}
 80097f4:	4604      	mov	r4, r0
 80097f6:	bb33      	cbnz	r3, 8009846 <__sinit+0x56>
 80097f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80097fc:	6503      	str	r3, [r0, #80]	; 0x50
 80097fe:	4b12      	ldr	r3, [pc, #72]	; (8009848 <__sinit+0x58>)
 8009800:	4a12      	ldr	r2, [pc, #72]	; (800984c <__sinit+0x5c>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6282      	str	r2, [r0, #40]	; 0x28
 8009806:	4298      	cmp	r0, r3
 8009808:	bf04      	itt	eq
 800980a:	2301      	moveq	r3, #1
 800980c:	6183      	streq	r3, [r0, #24]
 800980e:	f000 f81f 	bl	8009850 <__sfp>
 8009812:	6060      	str	r0, [r4, #4]
 8009814:	4620      	mov	r0, r4
 8009816:	f000 f81b 	bl	8009850 <__sfp>
 800981a:	60a0      	str	r0, [r4, #8]
 800981c:	4620      	mov	r0, r4
 800981e:	f000 f817 	bl	8009850 <__sfp>
 8009822:	2200      	movs	r2, #0
 8009824:	60e0      	str	r0, [r4, #12]
 8009826:	2104      	movs	r1, #4
 8009828:	6860      	ldr	r0, [r4, #4]
 800982a:	f7ff ffa1 	bl	8009770 <std>
 800982e:	2201      	movs	r2, #1
 8009830:	2109      	movs	r1, #9
 8009832:	68a0      	ldr	r0, [r4, #8]
 8009834:	f7ff ff9c 	bl	8009770 <std>
 8009838:	2202      	movs	r2, #2
 800983a:	2112      	movs	r1, #18
 800983c:	68e0      	ldr	r0, [r4, #12]
 800983e:	f7ff ff97 	bl	8009770 <std>
 8009842:	2301      	movs	r3, #1
 8009844:	61a3      	str	r3, [r4, #24]
 8009846:	bd10      	pop	{r4, pc}
 8009848:	0800a418 	.word	0x0800a418
 800984c:	080097b9 	.word	0x080097b9

08009850 <__sfp>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	4b1b      	ldr	r3, [pc, #108]	; (80098c0 <__sfp+0x70>)
 8009854:	681e      	ldr	r6, [r3, #0]
 8009856:	69b3      	ldr	r3, [r6, #24]
 8009858:	4607      	mov	r7, r0
 800985a:	b913      	cbnz	r3, 8009862 <__sfp+0x12>
 800985c:	4630      	mov	r0, r6
 800985e:	f7ff ffc7 	bl	80097f0 <__sinit>
 8009862:	3648      	adds	r6, #72	; 0x48
 8009864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009868:	3b01      	subs	r3, #1
 800986a:	d503      	bpl.n	8009874 <__sfp+0x24>
 800986c:	6833      	ldr	r3, [r6, #0]
 800986e:	b133      	cbz	r3, 800987e <__sfp+0x2e>
 8009870:	6836      	ldr	r6, [r6, #0]
 8009872:	e7f7      	b.n	8009864 <__sfp+0x14>
 8009874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009878:	b16d      	cbz	r5, 8009896 <__sfp+0x46>
 800987a:	3468      	adds	r4, #104	; 0x68
 800987c:	e7f4      	b.n	8009868 <__sfp+0x18>
 800987e:	2104      	movs	r1, #4
 8009880:	4638      	mov	r0, r7
 8009882:	f7ff ff9f 	bl	80097c4 <__sfmoreglue>
 8009886:	6030      	str	r0, [r6, #0]
 8009888:	2800      	cmp	r0, #0
 800988a:	d1f1      	bne.n	8009870 <__sfp+0x20>
 800988c:	230c      	movs	r3, #12
 800988e:	603b      	str	r3, [r7, #0]
 8009890:	4604      	mov	r4, r0
 8009892:	4620      	mov	r0, r4
 8009894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009896:	4b0b      	ldr	r3, [pc, #44]	; (80098c4 <__sfp+0x74>)
 8009898:	6665      	str	r5, [r4, #100]	; 0x64
 800989a:	e9c4 5500 	strd	r5, r5, [r4]
 800989e:	60a5      	str	r5, [r4, #8]
 80098a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80098a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80098a8:	2208      	movs	r2, #8
 80098aa:	4629      	mov	r1, r5
 80098ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098b0:	f7ff fcb0 	bl	8009214 <memset>
 80098b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098bc:	e7e9      	b.n	8009892 <__sfp+0x42>
 80098be:	bf00      	nop
 80098c0:	0800a418 	.word	0x0800a418
 80098c4:	ffff0001 	.word	0xffff0001

080098c8 <_fwalk_reent>:
 80098c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098cc:	4680      	mov	r8, r0
 80098ce:	4689      	mov	r9, r1
 80098d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098d4:	2600      	movs	r6, #0
 80098d6:	b914      	cbnz	r4, 80098de <_fwalk_reent+0x16>
 80098d8:	4630      	mov	r0, r6
 80098da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80098e2:	3f01      	subs	r7, #1
 80098e4:	d501      	bpl.n	80098ea <_fwalk_reent+0x22>
 80098e6:	6824      	ldr	r4, [r4, #0]
 80098e8:	e7f5      	b.n	80098d6 <_fwalk_reent+0xe>
 80098ea:	89ab      	ldrh	r3, [r5, #12]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d907      	bls.n	8009900 <_fwalk_reent+0x38>
 80098f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098f4:	3301      	adds	r3, #1
 80098f6:	d003      	beq.n	8009900 <_fwalk_reent+0x38>
 80098f8:	4629      	mov	r1, r5
 80098fa:	4640      	mov	r0, r8
 80098fc:	47c8      	blx	r9
 80098fe:	4306      	orrs	r6, r0
 8009900:	3568      	adds	r5, #104	; 0x68
 8009902:	e7ee      	b.n	80098e2 <_fwalk_reent+0x1a>

08009904 <__locale_ctype_ptr_l>:
 8009904:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009908:	4770      	bx	lr

0800990a <__swhatbuf_r>:
 800990a:	b570      	push	{r4, r5, r6, lr}
 800990c:	460e      	mov	r6, r1
 800990e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009912:	2900      	cmp	r1, #0
 8009914:	b096      	sub	sp, #88	; 0x58
 8009916:	4614      	mov	r4, r2
 8009918:	461d      	mov	r5, r3
 800991a:	da07      	bge.n	800992c <__swhatbuf_r+0x22>
 800991c:	2300      	movs	r3, #0
 800991e:	602b      	str	r3, [r5, #0]
 8009920:	89b3      	ldrh	r3, [r6, #12]
 8009922:	061a      	lsls	r2, r3, #24
 8009924:	d410      	bmi.n	8009948 <__swhatbuf_r+0x3e>
 8009926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800992a:	e00e      	b.n	800994a <__swhatbuf_r+0x40>
 800992c:	466a      	mov	r2, sp
 800992e:	f000 fc8b 	bl	800a248 <_fstat_r>
 8009932:	2800      	cmp	r0, #0
 8009934:	dbf2      	blt.n	800991c <__swhatbuf_r+0x12>
 8009936:	9a01      	ldr	r2, [sp, #4]
 8009938:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800993c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009940:	425a      	negs	r2, r3
 8009942:	415a      	adcs	r2, r3
 8009944:	602a      	str	r2, [r5, #0]
 8009946:	e7ee      	b.n	8009926 <__swhatbuf_r+0x1c>
 8009948:	2340      	movs	r3, #64	; 0x40
 800994a:	2000      	movs	r0, #0
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	b016      	add	sp, #88	; 0x58
 8009950:	bd70      	pop	{r4, r5, r6, pc}
	...

08009954 <__smakebuf_r>:
 8009954:	898b      	ldrh	r3, [r1, #12]
 8009956:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009958:	079d      	lsls	r5, r3, #30
 800995a:	4606      	mov	r6, r0
 800995c:	460c      	mov	r4, r1
 800995e:	d507      	bpl.n	8009970 <__smakebuf_r+0x1c>
 8009960:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	6123      	str	r3, [r4, #16]
 8009968:	2301      	movs	r3, #1
 800996a:	6163      	str	r3, [r4, #20]
 800996c:	b002      	add	sp, #8
 800996e:	bd70      	pop	{r4, r5, r6, pc}
 8009970:	ab01      	add	r3, sp, #4
 8009972:	466a      	mov	r2, sp
 8009974:	f7ff ffc9 	bl	800990a <__swhatbuf_r>
 8009978:	9900      	ldr	r1, [sp, #0]
 800997a:	4605      	mov	r5, r0
 800997c:	4630      	mov	r0, r6
 800997e:	f000 f889 	bl	8009a94 <_malloc_r>
 8009982:	b948      	cbnz	r0, 8009998 <__smakebuf_r+0x44>
 8009984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009988:	059a      	lsls	r2, r3, #22
 800998a:	d4ef      	bmi.n	800996c <__smakebuf_r+0x18>
 800998c:	f023 0303 	bic.w	r3, r3, #3
 8009990:	f043 0302 	orr.w	r3, r3, #2
 8009994:	81a3      	strh	r3, [r4, #12]
 8009996:	e7e3      	b.n	8009960 <__smakebuf_r+0xc>
 8009998:	4b0d      	ldr	r3, [pc, #52]	; (80099d0 <__smakebuf_r+0x7c>)
 800999a:	62b3      	str	r3, [r6, #40]	; 0x28
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	6020      	str	r0, [r4, #0]
 80099a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a4:	81a3      	strh	r3, [r4, #12]
 80099a6:	9b00      	ldr	r3, [sp, #0]
 80099a8:	6163      	str	r3, [r4, #20]
 80099aa:	9b01      	ldr	r3, [sp, #4]
 80099ac:	6120      	str	r0, [r4, #16]
 80099ae:	b15b      	cbz	r3, 80099c8 <__smakebuf_r+0x74>
 80099b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099b4:	4630      	mov	r0, r6
 80099b6:	f000 fc59 	bl	800a26c <_isatty_r>
 80099ba:	b128      	cbz	r0, 80099c8 <__smakebuf_r+0x74>
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	f023 0303 	bic.w	r3, r3, #3
 80099c2:	f043 0301 	orr.w	r3, r3, #1
 80099c6:	81a3      	strh	r3, [r4, #12]
 80099c8:	89a3      	ldrh	r3, [r4, #12]
 80099ca:	431d      	orrs	r5, r3
 80099cc:	81a5      	strh	r5, [r4, #12]
 80099ce:	e7cd      	b.n	800996c <__smakebuf_r+0x18>
 80099d0:	080097b9 	.word	0x080097b9

080099d4 <__ascii_mbtowc>:
 80099d4:	b082      	sub	sp, #8
 80099d6:	b901      	cbnz	r1, 80099da <__ascii_mbtowc+0x6>
 80099d8:	a901      	add	r1, sp, #4
 80099da:	b142      	cbz	r2, 80099ee <__ascii_mbtowc+0x1a>
 80099dc:	b14b      	cbz	r3, 80099f2 <__ascii_mbtowc+0x1e>
 80099de:	7813      	ldrb	r3, [r2, #0]
 80099e0:	600b      	str	r3, [r1, #0]
 80099e2:	7812      	ldrb	r2, [r2, #0]
 80099e4:	1c10      	adds	r0, r2, #0
 80099e6:	bf18      	it	ne
 80099e8:	2001      	movne	r0, #1
 80099ea:	b002      	add	sp, #8
 80099ec:	4770      	bx	lr
 80099ee:	4610      	mov	r0, r2
 80099f0:	e7fb      	b.n	80099ea <__ascii_mbtowc+0x16>
 80099f2:	f06f 0001 	mvn.w	r0, #1
 80099f6:	e7f8      	b.n	80099ea <__ascii_mbtowc+0x16>

080099f8 <_free_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4605      	mov	r5, r0
 80099fc:	2900      	cmp	r1, #0
 80099fe:	d045      	beq.n	8009a8c <_free_r+0x94>
 8009a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a04:	1f0c      	subs	r4, r1, #4
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	bfb8      	it	lt
 8009a0a:	18e4      	addlt	r4, r4, r3
 8009a0c:	f000 fc50 	bl	800a2b0 <__malloc_lock>
 8009a10:	4a1f      	ldr	r2, [pc, #124]	; (8009a90 <_free_r+0x98>)
 8009a12:	6813      	ldr	r3, [r2, #0]
 8009a14:	4610      	mov	r0, r2
 8009a16:	b933      	cbnz	r3, 8009a26 <_free_r+0x2e>
 8009a18:	6063      	str	r3, [r4, #4]
 8009a1a:	6014      	str	r4, [r2, #0]
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a22:	f000 bc46 	b.w	800a2b2 <__malloc_unlock>
 8009a26:	42a3      	cmp	r3, r4
 8009a28:	d90c      	bls.n	8009a44 <_free_r+0x4c>
 8009a2a:	6821      	ldr	r1, [r4, #0]
 8009a2c:	1862      	adds	r2, r4, r1
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	bf04      	itt	eq
 8009a32:	681a      	ldreq	r2, [r3, #0]
 8009a34:	685b      	ldreq	r3, [r3, #4]
 8009a36:	6063      	str	r3, [r4, #4]
 8009a38:	bf04      	itt	eq
 8009a3a:	1852      	addeq	r2, r2, r1
 8009a3c:	6022      	streq	r2, [r4, #0]
 8009a3e:	6004      	str	r4, [r0, #0]
 8009a40:	e7ec      	b.n	8009a1c <_free_r+0x24>
 8009a42:	4613      	mov	r3, r2
 8009a44:	685a      	ldr	r2, [r3, #4]
 8009a46:	b10a      	cbz	r2, 8009a4c <_free_r+0x54>
 8009a48:	42a2      	cmp	r2, r4
 8009a4a:	d9fa      	bls.n	8009a42 <_free_r+0x4a>
 8009a4c:	6819      	ldr	r1, [r3, #0]
 8009a4e:	1858      	adds	r0, r3, r1
 8009a50:	42a0      	cmp	r0, r4
 8009a52:	d10b      	bne.n	8009a6c <_free_r+0x74>
 8009a54:	6820      	ldr	r0, [r4, #0]
 8009a56:	4401      	add	r1, r0
 8009a58:	1858      	adds	r0, r3, r1
 8009a5a:	4282      	cmp	r2, r0
 8009a5c:	6019      	str	r1, [r3, #0]
 8009a5e:	d1dd      	bne.n	8009a1c <_free_r+0x24>
 8009a60:	6810      	ldr	r0, [r2, #0]
 8009a62:	6852      	ldr	r2, [r2, #4]
 8009a64:	605a      	str	r2, [r3, #4]
 8009a66:	4401      	add	r1, r0
 8009a68:	6019      	str	r1, [r3, #0]
 8009a6a:	e7d7      	b.n	8009a1c <_free_r+0x24>
 8009a6c:	d902      	bls.n	8009a74 <_free_r+0x7c>
 8009a6e:	230c      	movs	r3, #12
 8009a70:	602b      	str	r3, [r5, #0]
 8009a72:	e7d3      	b.n	8009a1c <_free_r+0x24>
 8009a74:	6820      	ldr	r0, [r4, #0]
 8009a76:	1821      	adds	r1, r4, r0
 8009a78:	428a      	cmp	r2, r1
 8009a7a:	bf04      	itt	eq
 8009a7c:	6811      	ldreq	r1, [r2, #0]
 8009a7e:	6852      	ldreq	r2, [r2, #4]
 8009a80:	6062      	str	r2, [r4, #4]
 8009a82:	bf04      	itt	eq
 8009a84:	1809      	addeq	r1, r1, r0
 8009a86:	6021      	streq	r1, [r4, #0]
 8009a88:	605c      	str	r4, [r3, #4]
 8009a8a:	e7c7      	b.n	8009a1c <_free_r+0x24>
 8009a8c:	bd38      	pop	{r3, r4, r5, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000250 	.word	0x20000250

08009a94 <_malloc_r>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	1ccd      	adds	r5, r1, #3
 8009a98:	f025 0503 	bic.w	r5, r5, #3
 8009a9c:	3508      	adds	r5, #8
 8009a9e:	2d0c      	cmp	r5, #12
 8009aa0:	bf38      	it	cc
 8009aa2:	250c      	movcc	r5, #12
 8009aa4:	2d00      	cmp	r5, #0
 8009aa6:	4606      	mov	r6, r0
 8009aa8:	db01      	blt.n	8009aae <_malloc_r+0x1a>
 8009aaa:	42a9      	cmp	r1, r5
 8009aac:	d903      	bls.n	8009ab6 <_malloc_r+0x22>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	6033      	str	r3, [r6, #0]
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	bd70      	pop	{r4, r5, r6, pc}
 8009ab6:	f000 fbfb 	bl	800a2b0 <__malloc_lock>
 8009aba:	4a21      	ldr	r2, [pc, #132]	; (8009b40 <_malloc_r+0xac>)
 8009abc:	6814      	ldr	r4, [r2, #0]
 8009abe:	4621      	mov	r1, r4
 8009ac0:	b991      	cbnz	r1, 8009ae8 <_malloc_r+0x54>
 8009ac2:	4c20      	ldr	r4, [pc, #128]	; (8009b44 <_malloc_r+0xb0>)
 8009ac4:	6823      	ldr	r3, [r4, #0]
 8009ac6:	b91b      	cbnz	r3, 8009ad0 <_malloc_r+0x3c>
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f000 fb3b 	bl	800a144 <_sbrk_r>
 8009ace:	6020      	str	r0, [r4, #0]
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	f000 fb36 	bl	800a144 <_sbrk_r>
 8009ad8:	1c43      	adds	r3, r0, #1
 8009ada:	d124      	bne.n	8009b26 <_malloc_r+0x92>
 8009adc:	230c      	movs	r3, #12
 8009ade:	6033      	str	r3, [r6, #0]
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f000 fbe6 	bl	800a2b2 <__malloc_unlock>
 8009ae6:	e7e4      	b.n	8009ab2 <_malloc_r+0x1e>
 8009ae8:	680b      	ldr	r3, [r1, #0]
 8009aea:	1b5b      	subs	r3, r3, r5
 8009aec:	d418      	bmi.n	8009b20 <_malloc_r+0x8c>
 8009aee:	2b0b      	cmp	r3, #11
 8009af0:	d90f      	bls.n	8009b12 <_malloc_r+0x7e>
 8009af2:	600b      	str	r3, [r1, #0]
 8009af4:	50cd      	str	r5, [r1, r3]
 8009af6:	18cc      	adds	r4, r1, r3
 8009af8:	4630      	mov	r0, r6
 8009afa:	f000 fbda 	bl	800a2b2 <__malloc_unlock>
 8009afe:	f104 000b 	add.w	r0, r4, #11
 8009b02:	1d23      	adds	r3, r4, #4
 8009b04:	f020 0007 	bic.w	r0, r0, #7
 8009b08:	1ac3      	subs	r3, r0, r3
 8009b0a:	d0d3      	beq.n	8009ab4 <_malloc_r+0x20>
 8009b0c:	425a      	negs	r2, r3
 8009b0e:	50e2      	str	r2, [r4, r3]
 8009b10:	e7d0      	b.n	8009ab4 <_malloc_r+0x20>
 8009b12:	428c      	cmp	r4, r1
 8009b14:	684b      	ldr	r3, [r1, #4]
 8009b16:	bf16      	itet	ne
 8009b18:	6063      	strne	r3, [r4, #4]
 8009b1a:	6013      	streq	r3, [r2, #0]
 8009b1c:	460c      	movne	r4, r1
 8009b1e:	e7eb      	b.n	8009af8 <_malloc_r+0x64>
 8009b20:	460c      	mov	r4, r1
 8009b22:	6849      	ldr	r1, [r1, #4]
 8009b24:	e7cc      	b.n	8009ac0 <_malloc_r+0x2c>
 8009b26:	1cc4      	adds	r4, r0, #3
 8009b28:	f024 0403 	bic.w	r4, r4, #3
 8009b2c:	42a0      	cmp	r0, r4
 8009b2e:	d005      	beq.n	8009b3c <_malloc_r+0xa8>
 8009b30:	1a21      	subs	r1, r4, r0
 8009b32:	4630      	mov	r0, r6
 8009b34:	f000 fb06 	bl	800a144 <_sbrk_r>
 8009b38:	3001      	adds	r0, #1
 8009b3a:	d0cf      	beq.n	8009adc <_malloc_r+0x48>
 8009b3c:	6025      	str	r5, [r4, #0]
 8009b3e:	e7db      	b.n	8009af8 <_malloc_r+0x64>
 8009b40:	20000250 	.word	0x20000250
 8009b44:	20000254 	.word	0x20000254

08009b48 <__sfputc_r>:
 8009b48:	6893      	ldr	r3, [r2, #8]
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	b410      	push	{r4}
 8009b50:	6093      	str	r3, [r2, #8]
 8009b52:	da08      	bge.n	8009b66 <__sfputc_r+0x1e>
 8009b54:	6994      	ldr	r4, [r2, #24]
 8009b56:	42a3      	cmp	r3, r4
 8009b58:	db01      	blt.n	8009b5e <__sfputc_r+0x16>
 8009b5a:	290a      	cmp	r1, #10
 8009b5c:	d103      	bne.n	8009b66 <__sfputc_r+0x1e>
 8009b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b62:	f7ff bc95 	b.w	8009490 <__swbuf_r>
 8009b66:	6813      	ldr	r3, [r2, #0]
 8009b68:	1c58      	adds	r0, r3, #1
 8009b6a:	6010      	str	r0, [r2, #0]
 8009b6c:	7019      	strb	r1, [r3, #0]
 8009b6e:	4608      	mov	r0, r1
 8009b70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <__sfputs_r>:
 8009b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b78:	4606      	mov	r6, r0
 8009b7a:	460f      	mov	r7, r1
 8009b7c:	4614      	mov	r4, r2
 8009b7e:	18d5      	adds	r5, r2, r3
 8009b80:	42ac      	cmp	r4, r5
 8009b82:	d101      	bne.n	8009b88 <__sfputs_r+0x12>
 8009b84:	2000      	movs	r0, #0
 8009b86:	e007      	b.n	8009b98 <__sfputs_r+0x22>
 8009b88:	463a      	mov	r2, r7
 8009b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f7ff ffda 	bl	8009b48 <__sfputc_r>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d1f3      	bne.n	8009b80 <__sfputs_r+0xa>
 8009b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b9c <_vfiprintf_r>:
 8009b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	b09d      	sub	sp, #116	; 0x74
 8009ba4:	4617      	mov	r7, r2
 8009ba6:	461d      	mov	r5, r3
 8009ba8:	4606      	mov	r6, r0
 8009baa:	b118      	cbz	r0, 8009bb4 <_vfiprintf_r+0x18>
 8009bac:	6983      	ldr	r3, [r0, #24]
 8009bae:	b90b      	cbnz	r3, 8009bb4 <_vfiprintf_r+0x18>
 8009bb0:	f7ff fe1e 	bl	80097f0 <__sinit>
 8009bb4:	4b7c      	ldr	r3, [pc, #496]	; (8009da8 <_vfiprintf_r+0x20c>)
 8009bb6:	429c      	cmp	r4, r3
 8009bb8:	d158      	bne.n	8009c6c <_vfiprintf_r+0xd0>
 8009bba:	6874      	ldr	r4, [r6, #4]
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	0718      	lsls	r0, r3, #28
 8009bc0:	d55e      	bpl.n	8009c80 <_vfiprintf_r+0xe4>
 8009bc2:	6923      	ldr	r3, [r4, #16]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d05b      	beq.n	8009c80 <_vfiprintf_r+0xe4>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	9309      	str	r3, [sp, #36]	; 0x24
 8009bcc:	2320      	movs	r3, #32
 8009bce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bd2:	2330      	movs	r3, #48	; 0x30
 8009bd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bd8:	9503      	str	r5, [sp, #12]
 8009bda:	f04f 0b01 	mov.w	fp, #1
 8009bde:	46b8      	mov	r8, r7
 8009be0:	4645      	mov	r5, r8
 8009be2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009be6:	b10b      	cbz	r3, 8009bec <_vfiprintf_r+0x50>
 8009be8:	2b25      	cmp	r3, #37	; 0x25
 8009bea:	d154      	bne.n	8009c96 <_vfiprintf_r+0xfa>
 8009bec:	ebb8 0a07 	subs.w	sl, r8, r7
 8009bf0:	d00b      	beq.n	8009c0a <_vfiprintf_r+0x6e>
 8009bf2:	4653      	mov	r3, sl
 8009bf4:	463a      	mov	r2, r7
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f7ff ffbc 	bl	8009b76 <__sfputs_r>
 8009bfe:	3001      	adds	r0, #1
 8009c00:	f000 80c2 	beq.w	8009d88 <_vfiprintf_r+0x1ec>
 8009c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c06:	4453      	add	r3, sl
 8009c08:	9309      	str	r3, [sp, #36]	; 0x24
 8009c0a:	f898 3000 	ldrb.w	r3, [r8]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f000 80ba 	beq.w	8009d88 <_vfiprintf_r+0x1ec>
 8009c14:	2300      	movs	r3, #0
 8009c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c1e:	9304      	str	r3, [sp, #16]
 8009c20:	9307      	str	r3, [sp, #28]
 8009c22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c26:	931a      	str	r3, [sp, #104]	; 0x68
 8009c28:	46a8      	mov	r8, r5
 8009c2a:	2205      	movs	r2, #5
 8009c2c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009c30:	485e      	ldr	r0, [pc, #376]	; (8009dac <_vfiprintf_r+0x210>)
 8009c32:	f7f6 fad5 	bl	80001e0 <memchr>
 8009c36:	9b04      	ldr	r3, [sp, #16]
 8009c38:	bb78      	cbnz	r0, 8009c9a <_vfiprintf_r+0xfe>
 8009c3a:	06d9      	lsls	r1, r3, #27
 8009c3c:	bf44      	itt	mi
 8009c3e:	2220      	movmi	r2, #32
 8009c40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c44:	071a      	lsls	r2, r3, #28
 8009c46:	bf44      	itt	mi
 8009c48:	222b      	movmi	r2, #43	; 0x2b
 8009c4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c4e:	782a      	ldrb	r2, [r5, #0]
 8009c50:	2a2a      	cmp	r2, #42	; 0x2a
 8009c52:	d02a      	beq.n	8009caa <_vfiprintf_r+0x10e>
 8009c54:	9a07      	ldr	r2, [sp, #28]
 8009c56:	46a8      	mov	r8, r5
 8009c58:	2000      	movs	r0, #0
 8009c5a:	250a      	movs	r5, #10
 8009c5c:	4641      	mov	r1, r8
 8009c5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c62:	3b30      	subs	r3, #48	; 0x30
 8009c64:	2b09      	cmp	r3, #9
 8009c66:	d969      	bls.n	8009d3c <_vfiprintf_r+0x1a0>
 8009c68:	b360      	cbz	r0, 8009cc4 <_vfiprintf_r+0x128>
 8009c6a:	e024      	b.n	8009cb6 <_vfiprintf_r+0x11a>
 8009c6c:	4b50      	ldr	r3, [pc, #320]	; (8009db0 <_vfiprintf_r+0x214>)
 8009c6e:	429c      	cmp	r4, r3
 8009c70:	d101      	bne.n	8009c76 <_vfiprintf_r+0xda>
 8009c72:	68b4      	ldr	r4, [r6, #8]
 8009c74:	e7a2      	b.n	8009bbc <_vfiprintf_r+0x20>
 8009c76:	4b4f      	ldr	r3, [pc, #316]	; (8009db4 <_vfiprintf_r+0x218>)
 8009c78:	429c      	cmp	r4, r3
 8009c7a:	bf08      	it	eq
 8009c7c:	68f4      	ldreq	r4, [r6, #12]
 8009c7e:	e79d      	b.n	8009bbc <_vfiprintf_r+0x20>
 8009c80:	4621      	mov	r1, r4
 8009c82:	4630      	mov	r0, r6
 8009c84:	f7ff fc56 	bl	8009534 <__swsetup_r>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d09d      	beq.n	8009bc8 <_vfiprintf_r+0x2c>
 8009c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c90:	b01d      	add	sp, #116	; 0x74
 8009c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c96:	46a8      	mov	r8, r5
 8009c98:	e7a2      	b.n	8009be0 <_vfiprintf_r+0x44>
 8009c9a:	4a44      	ldr	r2, [pc, #272]	; (8009dac <_vfiprintf_r+0x210>)
 8009c9c:	1a80      	subs	r0, r0, r2
 8009c9e:	fa0b f000 	lsl.w	r0, fp, r0
 8009ca2:	4318      	orrs	r0, r3
 8009ca4:	9004      	str	r0, [sp, #16]
 8009ca6:	4645      	mov	r5, r8
 8009ca8:	e7be      	b.n	8009c28 <_vfiprintf_r+0x8c>
 8009caa:	9a03      	ldr	r2, [sp, #12]
 8009cac:	1d11      	adds	r1, r2, #4
 8009cae:	6812      	ldr	r2, [r2, #0]
 8009cb0:	9103      	str	r1, [sp, #12]
 8009cb2:	2a00      	cmp	r2, #0
 8009cb4:	db01      	blt.n	8009cba <_vfiprintf_r+0x11e>
 8009cb6:	9207      	str	r2, [sp, #28]
 8009cb8:	e004      	b.n	8009cc4 <_vfiprintf_r+0x128>
 8009cba:	4252      	negs	r2, r2
 8009cbc:	f043 0302 	orr.w	r3, r3, #2
 8009cc0:	9207      	str	r2, [sp, #28]
 8009cc2:	9304      	str	r3, [sp, #16]
 8009cc4:	f898 3000 	ldrb.w	r3, [r8]
 8009cc8:	2b2e      	cmp	r3, #46	; 0x2e
 8009cca:	d10e      	bne.n	8009cea <_vfiprintf_r+0x14e>
 8009ccc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8009cd2:	d138      	bne.n	8009d46 <_vfiprintf_r+0x1aa>
 8009cd4:	9b03      	ldr	r3, [sp, #12]
 8009cd6:	1d1a      	adds	r2, r3, #4
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	9203      	str	r2, [sp, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	bfb8      	it	lt
 8009ce0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009ce4:	f108 0802 	add.w	r8, r8, #2
 8009ce8:	9305      	str	r3, [sp, #20]
 8009cea:	4d33      	ldr	r5, [pc, #204]	; (8009db8 <_vfiprintf_r+0x21c>)
 8009cec:	f898 1000 	ldrb.w	r1, [r8]
 8009cf0:	2203      	movs	r2, #3
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f7f6 fa74 	bl	80001e0 <memchr>
 8009cf8:	b140      	cbz	r0, 8009d0c <_vfiprintf_r+0x170>
 8009cfa:	2340      	movs	r3, #64	; 0x40
 8009cfc:	1b40      	subs	r0, r0, r5
 8009cfe:	fa03 f000 	lsl.w	r0, r3, r0
 8009d02:	9b04      	ldr	r3, [sp, #16]
 8009d04:	4303      	orrs	r3, r0
 8009d06:	f108 0801 	add.w	r8, r8, #1
 8009d0a:	9304      	str	r3, [sp, #16]
 8009d0c:	f898 1000 	ldrb.w	r1, [r8]
 8009d10:	482a      	ldr	r0, [pc, #168]	; (8009dbc <_vfiprintf_r+0x220>)
 8009d12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d16:	2206      	movs	r2, #6
 8009d18:	f108 0701 	add.w	r7, r8, #1
 8009d1c:	f7f6 fa60 	bl	80001e0 <memchr>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	d037      	beq.n	8009d94 <_vfiprintf_r+0x1f8>
 8009d24:	4b26      	ldr	r3, [pc, #152]	; (8009dc0 <_vfiprintf_r+0x224>)
 8009d26:	bb1b      	cbnz	r3, 8009d70 <_vfiprintf_r+0x1d4>
 8009d28:	9b03      	ldr	r3, [sp, #12]
 8009d2a:	3307      	adds	r3, #7
 8009d2c:	f023 0307 	bic.w	r3, r3, #7
 8009d30:	3308      	adds	r3, #8
 8009d32:	9303      	str	r3, [sp, #12]
 8009d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d36:	444b      	add	r3, r9
 8009d38:	9309      	str	r3, [sp, #36]	; 0x24
 8009d3a:	e750      	b.n	8009bde <_vfiprintf_r+0x42>
 8009d3c:	fb05 3202 	mla	r2, r5, r2, r3
 8009d40:	2001      	movs	r0, #1
 8009d42:	4688      	mov	r8, r1
 8009d44:	e78a      	b.n	8009c5c <_vfiprintf_r+0xc0>
 8009d46:	2300      	movs	r3, #0
 8009d48:	f108 0801 	add.w	r8, r8, #1
 8009d4c:	9305      	str	r3, [sp, #20]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	250a      	movs	r5, #10
 8009d52:	4640      	mov	r0, r8
 8009d54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d58:	3a30      	subs	r2, #48	; 0x30
 8009d5a:	2a09      	cmp	r2, #9
 8009d5c:	d903      	bls.n	8009d66 <_vfiprintf_r+0x1ca>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d0c3      	beq.n	8009cea <_vfiprintf_r+0x14e>
 8009d62:	9105      	str	r1, [sp, #20]
 8009d64:	e7c1      	b.n	8009cea <_vfiprintf_r+0x14e>
 8009d66:	fb05 2101 	mla	r1, r5, r1, r2
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	4680      	mov	r8, r0
 8009d6e:	e7f0      	b.n	8009d52 <_vfiprintf_r+0x1b6>
 8009d70:	ab03      	add	r3, sp, #12
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	4622      	mov	r2, r4
 8009d76:	4b13      	ldr	r3, [pc, #76]	; (8009dc4 <_vfiprintf_r+0x228>)
 8009d78:	a904      	add	r1, sp, #16
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f3af 8000 	nop.w
 8009d80:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009d84:	4681      	mov	r9, r0
 8009d86:	d1d5      	bne.n	8009d34 <_vfiprintf_r+0x198>
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	065b      	lsls	r3, r3, #25
 8009d8c:	f53f af7e 	bmi.w	8009c8c <_vfiprintf_r+0xf0>
 8009d90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d92:	e77d      	b.n	8009c90 <_vfiprintf_r+0xf4>
 8009d94:	ab03      	add	r3, sp, #12
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	4622      	mov	r2, r4
 8009d9a:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <_vfiprintf_r+0x228>)
 8009d9c:	a904      	add	r1, sp, #16
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f000 f888 	bl	8009eb4 <_printf_i>
 8009da4:	e7ec      	b.n	8009d80 <_vfiprintf_r+0x1e4>
 8009da6:	bf00      	nop
 8009da8:	0800a43c 	.word	0x0800a43c
 8009dac:	0800a486 	.word	0x0800a486
 8009db0:	0800a45c 	.word	0x0800a45c
 8009db4:	0800a41c 	.word	0x0800a41c
 8009db8:	0800a48c 	.word	0x0800a48c
 8009dbc:	0800a490 	.word	0x0800a490
 8009dc0:	00000000 	.word	0x00000000
 8009dc4:	08009b77 	.word	0x08009b77

08009dc8 <_printf_common>:
 8009dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dcc:	4691      	mov	r9, r2
 8009dce:	461f      	mov	r7, r3
 8009dd0:	688a      	ldr	r2, [r1, #8]
 8009dd2:	690b      	ldr	r3, [r1, #16]
 8009dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	bfb8      	it	lt
 8009ddc:	4613      	movlt	r3, r2
 8009dde:	f8c9 3000 	str.w	r3, [r9]
 8009de2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009de6:	4606      	mov	r6, r0
 8009de8:	460c      	mov	r4, r1
 8009dea:	b112      	cbz	r2, 8009df2 <_printf_common+0x2a>
 8009dec:	3301      	adds	r3, #1
 8009dee:	f8c9 3000 	str.w	r3, [r9]
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	0699      	lsls	r1, r3, #26
 8009df6:	bf42      	ittt	mi
 8009df8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009dfc:	3302      	addmi	r3, #2
 8009dfe:	f8c9 3000 	strmi.w	r3, [r9]
 8009e02:	6825      	ldr	r5, [r4, #0]
 8009e04:	f015 0506 	ands.w	r5, r5, #6
 8009e08:	d107      	bne.n	8009e1a <_printf_common+0x52>
 8009e0a:	f104 0a19 	add.w	sl, r4, #25
 8009e0e:	68e3      	ldr	r3, [r4, #12]
 8009e10:	f8d9 2000 	ldr.w	r2, [r9]
 8009e14:	1a9b      	subs	r3, r3, r2
 8009e16:	42ab      	cmp	r3, r5
 8009e18:	dc28      	bgt.n	8009e6c <_printf_common+0xa4>
 8009e1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009e1e:	6822      	ldr	r2, [r4, #0]
 8009e20:	3300      	adds	r3, #0
 8009e22:	bf18      	it	ne
 8009e24:	2301      	movne	r3, #1
 8009e26:	0692      	lsls	r2, r2, #26
 8009e28:	d42d      	bmi.n	8009e86 <_printf_common+0xbe>
 8009e2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e2e:	4639      	mov	r1, r7
 8009e30:	4630      	mov	r0, r6
 8009e32:	47c0      	blx	r8
 8009e34:	3001      	adds	r0, #1
 8009e36:	d020      	beq.n	8009e7a <_printf_common+0xb2>
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	68e5      	ldr	r5, [r4, #12]
 8009e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8009e40:	f003 0306 	and.w	r3, r3, #6
 8009e44:	2b04      	cmp	r3, #4
 8009e46:	bf08      	it	eq
 8009e48:	1aad      	subeq	r5, r5, r2
 8009e4a:	68a3      	ldr	r3, [r4, #8]
 8009e4c:	6922      	ldr	r2, [r4, #16]
 8009e4e:	bf0c      	ite	eq
 8009e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e54:	2500      	movne	r5, #0
 8009e56:	4293      	cmp	r3, r2
 8009e58:	bfc4      	itt	gt
 8009e5a:	1a9b      	subgt	r3, r3, r2
 8009e5c:	18ed      	addgt	r5, r5, r3
 8009e5e:	f04f 0900 	mov.w	r9, #0
 8009e62:	341a      	adds	r4, #26
 8009e64:	454d      	cmp	r5, r9
 8009e66:	d11a      	bne.n	8009e9e <_printf_common+0xd6>
 8009e68:	2000      	movs	r0, #0
 8009e6a:	e008      	b.n	8009e7e <_printf_common+0xb6>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	4652      	mov	r2, sl
 8009e70:	4639      	mov	r1, r7
 8009e72:	4630      	mov	r0, r6
 8009e74:	47c0      	blx	r8
 8009e76:	3001      	adds	r0, #1
 8009e78:	d103      	bne.n	8009e82 <_printf_common+0xba>
 8009e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e82:	3501      	adds	r5, #1
 8009e84:	e7c3      	b.n	8009e0e <_printf_common+0x46>
 8009e86:	18e1      	adds	r1, r4, r3
 8009e88:	1c5a      	adds	r2, r3, #1
 8009e8a:	2030      	movs	r0, #48	; 0x30
 8009e8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e90:	4422      	add	r2, r4
 8009e92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e9a:	3302      	adds	r3, #2
 8009e9c:	e7c5      	b.n	8009e2a <_printf_common+0x62>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	4622      	mov	r2, r4
 8009ea2:	4639      	mov	r1, r7
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	47c0      	blx	r8
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d0e6      	beq.n	8009e7a <_printf_common+0xb2>
 8009eac:	f109 0901 	add.w	r9, r9, #1
 8009eb0:	e7d8      	b.n	8009e64 <_printf_common+0x9c>
	...

08009eb4 <_printf_i>:
 8009eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009eb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009ebc:	460c      	mov	r4, r1
 8009ebe:	7e09      	ldrb	r1, [r1, #24]
 8009ec0:	b085      	sub	sp, #20
 8009ec2:	296e      	cmp	r1, #110	; 0x6e
 8009ec4:	4617      	mov	r7, r2
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	4698      	mov	r8, r3
 8009eca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ecc:	f000 80b3 	beq.w	800a036 <_printf_i+0x182>
 8009ed0:	d822      	bhi.n	8009f18 <_printf_i+0x64>
 8009ed2:	2963      	cmp	r1, #99	; 0x63
 8009ed4:	d036      	beq.n	8009f44 <_printf_i+0x90>
 8009ed6:	d80a      	bhi.n	8009eee <_printf_i+0x3a>
 8009ed8:	2900      	cmp	r1, #0
 8009eda:	f000 80b9 	beq.w	800a050 <_printf_i+0x19c>
 8009ede:	2958      	cmp	r1, #88	; 0x58
 8009ee0:	f000 8083 	beq.w	8009fea <_printf_i+0x136>
 8009ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ee8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009eec:	e032      	b.n	8009f54 <_printf_i+0xa0>
 8009eee:	2964      	cmp	r1, #100	; 0x64
 8009ef0:	d001      	beq.n	8009ef6 <_printf_i+0x42>
 8009ef2:	2969      	cmp	r1, #105	; 0x69
 8009ef4:	d1f6      	bne.n	8009ee4 <_printf_i+0x30>
 8009ef6:	6820      	ldr	r0, [r4, #0]
 8009ef8:	6813      	ldr	r3, [r2, #0]
 8009efa:	0605      	lsls	r5, r0, #24
 8009efc:	f103 0104 	add.w	r1, r3, #4
 8009f00:	d52a      	bpl.n	8009f58 <_printf_i+0xa4>
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6011      	str	r1, [r2, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	da03      	bge.n	8009f12 <_printf_i+0x5e>
 8009f0a:	222d      	movs	r2, #45	; 0x2d
 8009f0c:	425b      	negs	r3, r3
 8009f0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009f12:	486f      	ldr	r0, [pc, #444]	; (800a0d0 <_printf_i+0x21c>)
 8009f14:	220a      	movs	r2, #10
 8009f16:	e039      	b.n	8009f8c <_printf_i+0xd8>
 8009f18:	2973      	cmp	r1, #115	; 0x73
 8009f1a:	f000 809d 	beq.w	800a058 <_printf_i+0x1a4>
 8009f1e:	d808      	bhi.n	8009f32 <_printf_i+0x7e>
 8009f20:	296f      	cmp	r1, #111	; 0x6f
 8009f22:	d020      	beq.n	8009f66 <_printf_i+0xb2>
 8009f24:	2970      	cmp	r1, #112	; 0x70
 8009f26:	d1dd      	bne.n	8009ee4 <_printf_i+0x30>
 8009f28:	6823      	ldr	r3, [r4, #0]
 8009f2a:	f043 0320 	orr.w	r3, r3, #32
 8009f2e:	6023      	str	r3, [r4, #0]
 8009f30:	e003      	b.n	8009f3a <_printf_i+0x86>
 8009f32:	2975      	cmp	r1, #117	; 0x75
 8009f34:	d017      	beq.n	8009f66 <_printf_i+0xb2>
 8009f36:	2978      	cmp	r1, #120	; 0x78
 8009f38:	d1d4      	bne.n	8009ee4 <_printf_i+0x30>
 8009f3a:	2378      	movs	r3, #120	; 0x78
 8009f3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f40:	4864      	ldr	r0, [pc, #400]	; (800a0d4 <_printf_i+0x220>)
 8009f42:	e055      	b.n	8009ff0 <_printf_i+0x13c>
 8009f44:	6813      	ldr	r3, [r2, #0]
 8009f46:	1d19      	adds	r1, r3, #4
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	6011      	str	r1, [r2, #0]
 8009f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f54:	2301      	movs	r3, #1
 8009f56:	e08c      	b.n	800a072 <_printf_i+0x1be>
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	6011      	str	r1, [r2, #0]
 8009f5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f60:	bf18      	it	ne
 8009f62:	b21b      	sxthne	r3, r3
 8009f64:	e7cf      	b.n	8009f06 <_printf_i+0x52>
 8009f66:	6813      	ldr	r3, [r2, #0]
 8009f68:	6825      	ldr	r5, [r4, #0]
 8009f6a:	1d18      	adds	r0, r3, #4
 8009f6c:	6010      	str	r0, [r2, #0]
 8009f6e:	0628      	lsls	r0, r5, #24
 8009f70:	d501      	bpl.n	8009f76 <_printf_i+0xc2>
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	e002      	b.n	8009f7c <_printf_i+0xc8>
 8009f76:	0668      	lsls	r0, r5, #25
 8009f78:	d5fb      	bpl.n	8009f72 <_printf_i+0xbe>
 8009f7a:	881b      	ldrh	r3, [r3, #0]
 8009f7c:	4854      	ldr	r0, [pc, #336]	; (800a0d0 <_printf_i+0x21c>)
 8009f7e:	296f      	cmp	r1, #111	; 0x6f
 8009f80:	bf14      	ite	ne
 8009f82:	220a      	movne	r2, #10
 8009f84:	2208      	moveq	r2, #8
 8009f86:	2100      	movs	r1, #0
 8009f88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f8c:	6865      	ldr	r5, [r4, #4]
 8009f8e:	60a5      	str	r5, [r4, #8]
 8009f90:	2d00      	cmp	r5, #0
 8009f92:	f2c0 8095 	blt.w	800a0c0 <_printf_i+0x20c>
 8009f96:	6821      	ldr	r1, [r4, #0]
 8009f98:	f021 0104 	bic.w	r1, r1, #4
 8009f9c:	6021      	str	r1, [r4, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d13d      	bne.n	800a01e <_printf_i+0x16a>
 8009fa2:	2d00      	cmp	r5, #0
 8009fa4:	f040 808e 	bne.w	800a0c4 <_printf_i+0x210>
 8009fa8:	4665      	mov	r5, ip
 8009faa:	2a08      	cmp	r2, #8
 8009fac:	d10b      	bne.n	8009fc6 <_printf_i+0x112>
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	07db      	lsls	r3, r3, #31
 8009fb2:	d508      	bpl.n	8009fc6 <_printf_i+0x112>
 8009fb4:	6923      	ldr	r3, [r4, #16]
 8009fb6:	6862      	ldr	r2, [r4, #4]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	bfde      	ittt	le
 8009fbc:	2330      	movle	r3, #48	; 0x30
 8009fbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fc2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009fc6:	ebac 0305 	sub.w	r3, ip, r5
 8009fca:	6123      	str	r3, [r4, #16]
 8009fcc:	f8cd 8000 	str.w	r8, [sp]
 8009fd0:	463b      	mov	r3, r7
 8009fd2:	aa03      	add	r2, sp, #12
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	f7ff fef6 	bl	8009dc8 <_printf_common>
 8009fdc:	3001      	adds	r0, #1
 8009fde:	d14d      	bne.n	800a07c <_printf_i+0x1c8>
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fe4:	b005      	add	sp, #20
 8009fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fea:	4839      	ldr	r0, [pc, #228]	; (800a0d0 <_printf_i+0x21c>)
 8009fec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009ff0:	6813      	ldr	r3, [r2, #0]
 8009ff2:	6821      	ldr	r1, [r4, #0]
 8009ff4:	1d1d      	adds	r5, r3, #4
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6015      	str	r5, [r2, #0]
 8009ffa:	060a      	lsls	r2, r1, #24
 8009ffc:	d50b      	bpl.n	800a016 <_printf_i+0x162>
 8009ffe:	07ca      	lsls	r2, r1, #31
 800a000:	bf44      	itt	mi
 800a002:	f041 0120 	orrmi.w	r1, r1, #32
 800a006:	6021      	strmi	r1, [r4, #0]
 800a008:	b91b      	cbnz	r3, 800a012 <_printf_i+0x15e>
 800a00a:	6822      	ldr	r2, [r4, #0]
 800a00c:	f022 0220 	bic.w	r2, r2, #32
 800a010:	6022      	str	r2, [r4, #0]
 800a012:	2210      	movs	r2, #16
 800a014:	e7b7      	b.n	8009f86 <_printf_i+0xd2>
 800a016:	064d      	lsls	r5, r1, #25
 800a018:	bf48      	it	mi
 800a01a:	b29b      	uxthmi	r3, r3
 800a01c:	e7ef      	b.n	8009ffe <_printf_i+0x14a>
 800a01e:	4665      	mov	r5, ip
 800a020:	fbb3 f1f2 	udiv	r1, r3, r2
 800a024:	fb02 3311 	mls	r3, r2, r1, r3
 800a028:	5cc3      	ldrb	r3, [r0, r3]
 800a02a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a02e:	460b      	mov	r3, r1
 800a030:	2900      	cmp	r1, #0
 800a032:	d1f5      	bne.n	800a020 <_printf_i+0x16c>
 800a034:	e7b9      	b.n	8009faa <_printf_i+0xf6>
 800a036:	6813      	ldr	r3, [r2, #0]
 800a038:	6825      	ldr	r5, [r4, #0]
 800a03a:	6961      	ldr	r1, [r4, #20]
 800a03c:	1d18      	adds	r0, r3, #4
 800a03e:	6010      	str	r0, [r2, #0]
 800a040:	0628      	lsls	r0, r5, #24
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	d501      	bpl.n	800a04a <_printf_i+0x196>
 800a046:	6019      	str	r1, [r3, #0]
 800a048:	e002      	b.n	800a050 <_printf_i+0x19c>
 800a04a:	066a      	lsls	r2, r5, #25
 800a04c:	d5fb      	bpl.n	800a046 <_printf_i+0x192>
 800a04e:	8019      	strh	r1, [r3, #0]
 800a050:	2300      	movs	r3, #0
 800a052:	6123      	str	r3, [r4, #16]
 800a054:	4665      	mov	r5, ip
 800a056:	e7b9      	b.n	8009fcc <_printf_i+0x118>
 800a058:	6813      	ldr	r3, [r2, #0]
 800a05a:	1d19      	adds	r1, r3, #4
 800a05c:	6011      	str	r1, [r2, #0]
 800a05e:	681d      	ldr	r5, [r3, #0]
 800a060:	6862      	ldr	r2, [r4, #4]
 800a062:	2100      	movs	r1, #0
 800a064:	4628      	mov	r0, r5
 800a066:	f7f6 f8bb 	bl	80001e0 <memchr>
 800a06a:	b108      	cbz	r0, 800a070 <_printf_i+0x1bc>
 800a06c:	1b40      	subs	r0, r0, r5
 800a06e:	6060      	str	r0, [r4, #4]
 800a070:	6863      	ldr	r3, [r4, #4]
 800a072:	6123      	str	r3, [r4, #16]
 800a074:	2300      	movs	r3, #0
 800a076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a07a:	e7a7      	b.n	8009fcc <_printf_i+0x118>
 800a07c:	6923      	ldr	r3, [r4, #16]
 800a07e:	462a      	mov	r2, r5
 800a080:	4639      	mov	r1, r7
 800a082:	4630      	mov	r0, r6
 800a084:	47c0      	blx	r8
 800a086:	3001      	adds	r0, #1
 800a088:	d0aa      	beq.n	8009fe0 <_printf_i+0x12c>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	079b      	lsls	r3, r3, #30
 800a08e:	d413      	bmi.n	800a0b8 <_printf_i+0x204>
 800a090:	68e0      	ldr	r0, [r4, #12]
 800a092:	9b03      	ldr	r3, [sp, #12]
 800a094:	4298      	cmp	r0, r3
 800a096:	bfb8      	it	lt
 800a098:	4618      	movlt	r0, r3
 800a09a:	e7a3      	b.n	8009fe4 <_printf_i+0x130>
 800a09c:	2301      	movs	r3, #1
 800a09e:	464a      	mov	r2, r9
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	47c0      	blx	r8
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	d09a      	beq.n	8009fe0 <_printf_i+0x12c>
 800a0aa:	3501      	adds	r5, #1
 800a0ac:	68e3      	ldr	r3, [r4, #12]
 800a0ae:	9a03      	ldr	r2, [sp, #12]
 800a0b0:	1a9b      	subs	r3, r3, r2
 800a0b2:	42ab      	cmp	r3, r5
 800a0b4:	dcf2      	bgt.n	800a09c <_printf_i+0x1e8>
 800a0b6:	e7eb      	b.n	800a090 <_printf_i+0x1dc>
 800a0b8:	2500      	movs	r5, #0
 800a0ba:	f104 0919 	add.w	r9, r4, #25
 800a0be:	e7f5      	b.n	800a0ac <_printf_i+0x1f8>
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1ac      	bne.n	800a01e <_printf_i+0x16a>
 800a0c4:	7803      	ldrb	r3, [r0, #0]
 800a0c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0ce:	e76c      	b.n	8009faa <_printf_i+0xf6>
 800a0d0:	0800a497 	.word	0x0800a497
 800a0d4:	0800a4a8 	.word	0x0800a4a8

0800a0d8 <_putc_r>:
 800a0d8:	b570      	push	{r4, r5, r6, lr}
 800a0da:	460d      	mov	r5, r1
 800a0dc:	4614      	mov	r4, r2
 800a0de:	4606      	mov	r6, r0
 800a0e0:	b118      	cbz	r0, 800a0ea <_putc_r+0x12>
 800a0e2:	6983      	ldr	r3, [r0, #24]
 800a0e4:	b90b      	cbnz	r3, 800a0ea <_putc_r+0x12>
 800a0e6:	f7ff fb83 	bl	80097f0 <__sinit>
 800a0ea:	4b13      	ldr	r3, [pc, #76]	; (800a138 <_putc_r+0x60>)
 800a0ec:	429c      	cmp	r4, r3
 800a0ee:	d112      	bne.n	800a116 <_putc_r+0x3e>
 800a0f0:	6874      	ldr	r4, [r6, #4]
 800a0f2:	68a3      	ldr	r3, [r4, #8]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	60a3      	str	r3, [r4, #8]
 800a0fa:	da16      	bge.n	800a12a <_putc_r+0x52>
 800a0fc:	69a2      	ldr	r2, [r4, #24]
 800a0fe:	4293      	cmp	r3, r2
 800a100:	db02      	blt.n	800a108 <_putc_r+0x30>
 800a102:	b2eb      	uxtb	r3, r5
 800a104:	2b0a      	cmp	r3, #10
 800a106:	d110      	bne.n	800a12a <_putc_r+0x52>
 800a108:	4622      	mov	r2, r4
 800a10a:	4629      	mov	r1, r5
 800a10c:	4630      	mov	r0, r6
 800a10e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a112:	f7ff b9bd 	b.w	8009490 <__swbuf_r>
 800a116:	4b09      	ldr	r3, [pc, #36]	; (800a13c <_putc_r+0x64>)
 800a118:	429c      	cmp	r4, r3
 800a11a:	d101      	bne.n	800a120 <_putc_r+0x48>
 800a11c:	68b4      	ldr	r4, [r6, #8]
 800a11e:	e7e8      	b.n	800a0f2 <_putc_r+0x1a>
 800a120:	4b07      	ldr	r3, [pc, #28]	; (800a140 <_putc_r+0x68>)
 800a122:	429c      	cmp	r4, r3
 800a124:	bf08      	it	eq
 800a126:	68f4      	ldreq	r4, [r6, #12]
 800a128:	e7e3      	b.n	800a0f2 <_putc_r+0x1a>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	1c5a      	adds	r2, r3, #1
 800a12e:	6022      	str	r2, [r4, #0]
 800a130:	701d      	strb	r5, [r3, #0]
 800a132:	b2e8      	uxtb	r0, r5
 800a134:	bd70      	pop	{r4, r5, r6, pc}
 800a136:	bf00      	nop
 800a138:	0800a43c 	.word	0x0800a43c
 800a13c:	0800a45c 	.word	0x0800a45c
 800a140:	0800a41c 	.word	0x0800a41c

0800a144 <_sbrk_r>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	4c06      	ldr	r4, [pc, #24]	; (800a160 <_sbrk_r+0x1c>)
 800a148:	2300      	movs	r3, #0
 800a14a:	4605      	mov	r5, r0
 800a14c:	4608      	mov	r0, r1
 800a14e:	6023      	str	r3, [r4, #0]
 800a150:	f7f7 fb0c 	bl	800176c <_sbrk>
 800a154:	1c43      	adds	r3, r0, #1
 800a156:	d102      	bne.n	800a15e <_sbrk_r+0x1a>
 800a158:	6823      	ldr	r3, [r4, #0]
 800a15a:	b103      	cbz	r3, 800a15e <_sbrk_r+0x1a>
 800a15c:	602b      	str	r3, [r5, #0]
 800a15e:	bd38      	pop	{r3, r4, r5, pc}
 800a160:	200004f0 	.word	0x200004f0

0800a164 <__sread>:
 800a164:	b510      	push	{r4, lr}
 800a166:	460c      	mov	r4, r1
 800a168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a16c:	f000 f8a2 	bl	800a2b4 <_read_r>
 800a170:	2800      	cmp	r0, #0
 800a172:	bfab      	itete	ge
 800a174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a176:	89a3      	ldrhlt	r3, [r4, #12]
 800a178:	181b      	addge	r3, r3, r0
 800a17a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a17e:	bfac      	ite	ge
 800a180:	6563      	strge	r3, [r4, #84]	; 0x54
 800a182:	81a3      	strhlt	r3, [r4, #12]
 800a184:	bd10      	pop	{r4, pc}

0800a186 <__swrite>:
 800a186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a18a:	461f      	mov	r7, r3
 800a18c:	898b      	ldrh	r3, [r1, #12]
 800a18e:	05db      	lsls	r3, r3, #23
 800a190:	4605      	mov	r5, r0
 800a192:	460c      	mov	r4, r1
 800a194:	4616      	mov	r6, r2
 800a196:	d505      	bpl.n	800a1a4 <__swrite+0x1e>
 800a198:	2302      	movs	r3, #2
 800a19a:	2200      	movs	r2, #0
 800a19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a0:	f000 f874 	bl	800a28c <_lseek_r>
 800a1a4:	89a3      	ldrh	r3, [r4, #12]
 800a1a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1ae:	81a3      	strh	r3, [r4, #12]
 800a1b0:	4632      	mov	r2, r6
 800a1b2:	463b      	mov	r3, r7
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ba:	f000 b823 	b.w	800a204 <_write_r>

0800a1be <__sseek>:
 800a1be:	b510      	push	{r4, lr}
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c6:	f000 f861 	bl	800a28c <_lseek_r>
 800a1ca:	1c43      	adds	r3, r0, #1
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	bf15      	itete	ne
 800a1d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1da:	81a3      	strheq	r3, [r4, #12]
 800a1dc:	bf18      	it	ne
 800a1de:	81a3      	strhne	r3, [r4, #12]
 800a1e0:	bd10      	pop	{r4, pc}

0800a1e2 <__sclose>:
 800a1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e6:	f000 b81f 	b.w	800a228 <_close_r>

0800a1ea <__ascii_wctomb>:
 800a1ea:	b149      	cbz	r1, 800a200 <__ascii_wctomb+0x16>
 800a1ec:	2aff      	cmp	r2, #255	; 0xff
 800a1ee:	bf85      	ittet	hi
 800a1f0:	238a      	movhi	r3, #138	; 0x8a
 800a1f2:	6003      	strhi	r3, [r0, #0]
 800a1f4:	700a      	strbls	r2, [r1, #0]
 800a1f6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a1fa:	bf98      	it	ls
 800a1fc:	2001      	movls	r0, #1
 800a1fe:	4770      	bx	lr
 800a200:	4608      	mov	r0, r1
 800a202:	4770      	bx	lr

0800a204 <_write_r>:
 800a204:	b538      	push	{r3, r4, r5, lr}
 800a206:	4c07      	ldr	r4, [pc, #28]	; (800a224 <_write_r+0x20>)
 800a208:	4605      	mov	r5, r0
 800a20a:	4608      	mov	r0, r1
 800a20c:	4611      	mov	r1, r2
 800a20e:	2200      	movs	r2, #0
 800a210:	6022      	str	r2, [r4, #0]
 800a212:	461a      	mov	r2, r3
 800a214:	f7f6 f9db 	bl	80005ce <_write>
 800a218:	1c43      	adds	r3, r0, #1
 800a21a:	d102      	bne.n	800a222 <_write_r+0x1e>
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	b103      	cbz	r3, 800a222 <_write_r+0x1e>
 800a220:	602b      	str	r3, [r5, #0]
 800a222:	bd38      	pop	{r3, r4, r5, pc}
 800a224:	200004f0 	.word	0x200004f0

0800a228 <_close_r>:
 800a228:	b538      	push	{r3, r4, r5, lr}
 800a22a:	4c06      	ldr	r4, [pc, #24]	; (800a244 <_close_r+0x1c>)
 800a22c:	2300      	movs	r3, #0
 800a22e:	4605      	mov	r5, r0
 800a230:	4608      	mov	r0, r1
 800a232:	6023      	str	r3, [r4, #0]
 800a234:	f7f7 fa65 	bl	8001702 <_close>
 800a238:	1c43      	adds	r3, r0, #1
 800a23a:	d102      	bne.n	800a242 <_close_r+0x1a>
 800a23c:	6823      	ldr	r3, [r4, #0]
 800a23e:	b103      	cbz	r3, 800a242 <_close_r+0x1a>
 800a240:	602b      	str	r3, [r5, #0]
 800a242:	bd38      	pop	{r3, r4, r5, pc}
 800a244:	200004f0 	.word	0x200004f0

0800a248 <_fstat_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4c07      	ldr	r4, [pc, #28]	; (800a268 <_fstat_r+0x20>)
 800a24c:	2300      	movs	r3, #0
 800a24e:	4605      	mov	r5, r0
 800a250:	4608      	mov	r0, r1
 800a252:	4611      	mov	r1, r2
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	f7f7 fa60 	bl	800171a <_fstat>
 800a25a:	1c43      	adds	r3, r0, #1
 800a25c:	d102      	bne.n	800a264 <_fstat_r+0x1c>
 800a25e:	6823      	ldr	r3, [r4, #0]
 800a260:	b103      	cbz	r3, 800a264 <_fstat_r+0x1c>
 800a262:	602b      	str	r3, [r5, #0]
 800a264:	bd38      	pop	{r3, r4, r5, pc}
 800a266:	bf00      	nop
 800a268:	200004f0 	.word	0x200004f0

0800a26c <_isatty_r>:
 800a26c:	b538      	push	{r3, r4, r5, lr}
 800a26e:	4c06      	ldr	r4, [pc, #24]	; (800a288 <_isatty_r+0x1c>)
 800a270:	2300      	movs	r3, #0
 800a272:	4605      	mov	r5, r0
 800a274:	4608      	mov	r0, r1
 800a276:	6023      	str	r3, [r4, #0]
 800a278:	f7f7 fa5f 	bl	800173a <_isatty>
 800a27c:	1c43      	adds	r3, r0, #1
 800a27e:	d102      	bne.n	800a286 <_isatty_r+0x1a>
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	b103      	cbz	r3, 800a286 <_isatty_r+0x1a>
 800a284:	602b      	str	r3, [r5, #0]
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	200004f0 	.word	0x200004f0

0800a28c <_lseek_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	4c07      	ldr	r4, [pc, #28]	; (800a2ac <_lseek_r+0x20>)
 800a290:	4605      	mov	r5, r0
 800a292:	4608      	mov	r0, r1
 800a294:	4611      	mov	r1, r2
 800a296:	2200      	movs	r2, #0
 800a298:	6022      	str	r2, [r4, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	f7f7 fa58 	bl	8001750 <_lseek>
 800a2a0:	1c43      	adds	r3, r0, #1
 800a2a2:	d102      	bne.n	800a2aa <_lseek_r+0x1e>
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	b103      	cbz	r3, 800a2aa <_lseek_r+0x1e>
 800a2a8:	602b      	str	r3, [r5, #0]
 800a2aa:	bd38      	pop	{r3, r4, r5, pc}
 800a2ac:	200004f0 	.word	0x200004f0

0800a2b0 <__malloc_lock>:
 800a2b0:	4770      	bx	lr

0800a2b2 <__malloc_unlock>:
 800a2b2:	4770      	bx	lr

0800a2b4 <_read_r>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	4c07      	ldr	r4, [pc, #28]	; (800a2d4 <_read_r+0x20>)
 800a2b8:	4605      	mov	r5, r0
 800a2ba:	4608      	mov	r0, r1
 800a2bc:	4611      	mov	r1, r2
 800a2be:	2200      	movs	r2, #0
 800a2c0:	6022      	str	r2, [r4, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	f7f7 fa00 	bl	80016c8 <_read>
 800a2c8:	1c43      	adds	r3, r0, #1
 800a2ca:	d102      	bne.n	800a2d2 <_read_r+0x1e>
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	b103      	cbz	r3, 800a2d2 <_read_r+0x1e>
 800a2d0:	602b      	str	r3, [r5, #0]
 800a2d2:	bd38      	pop	{r3, r4, r5, pc}
 800a2d4:	200004f0 	.word	0x200004f0

0800a2d8 <_init>:
 800a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2da:	bf00      	nop
 800a2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2de:	bc08      	pop	{r3}
 800a2e0:	469e      	mov	lr, r3
 800a2e2:	4770      	bx	lr

0800a2e4 <_fini>:
 800a2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e6:	bf00      	nop
 800a2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ea:	bc08      	pop	{r3}
 800a2ec:	469e      	mov	lr, r3
 800a2ee:	4770      	bx	lr
