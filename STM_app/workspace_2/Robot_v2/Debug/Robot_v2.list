
Robot_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08005150  08005150  00015150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005378  08005378  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005380  08005380  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005380  08005380  00015380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005384  08005384  00015384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08005388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000020c  08005594  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08005594  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce73  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001da6  00000000  00000000  0002d0af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb0  00000000  00000000  0002ee58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  0002fb08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021c21  00000000  00000000  000306d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009033  00000000  00000000  000522f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca700  00000000  00000000  0005b324  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125a24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e84  00000000  00000000  00125aa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005138 	.word	0x08005138

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	08005138 	.word	0x08005138

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d013      	beq.n	80005c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000598:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800059c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00b      	beq.n	80005c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	e000      	b.n	80005ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80005aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0f9      	beq.n	80005aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <_write>:
static void MX_USART3_UART_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len){ // do fprint
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b086      	sub	sp, #24
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	60f8      	str	r0, [r7, #12]
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
	int i=0;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++){
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	e009      	b.n	80005f8 <_write+0x2a>
		ITM_SendChar(*ptr++);
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	60ba      	str	r2, [r7, #8]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffc7 	bl	8000580 <ITM_SendChar>
	for(i=0; i<len; i++){
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dbf1      	blt.n	80005e4 <_write+0x16>

	}
	return len;
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	//HAL_Delay(10);
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8000616:	2101      	movs	r1, #1
 8000618:	4812      	ldr	r0, [pc, #72]	; (8000664 <HAL_GPIO_EXTI_Callback+0x58>)
 800061a:	f001 fa8d 	bl	8001b38 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d105      	bne.n	8000630 <HAL_GPIO_EXTI_Callback+0x24>

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000624:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000628:	480f      	ldr	r0, [pc, #60]	; (8000668 <HAL_GPIO_EXTI_Callback+0x5c>)
 800062a:	f001 fab6 	bl	8001b9a <HAL_GPIO_TogglePin>
 800062e:	e00b      	b.n	8000648 <HAL_GPIO_EXTI_Callback+0x3c>
		//Duty-=1;
	//	if(Duty < 100){
	//		Duty = Duty + 1;
	//	}
	} else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET){
 8000630:	2102      	movs	r1, #2
 8000632:	480c      	ldr	r0, [pc, #48]	; (8000664 <HAL_GPIO_EXTI_Callback+0x58>)
 8000634:	f001 fa80 	bl	8001b38 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d104      	bne.n	8000648 <HAL_GPIO_EXTI_Callback+0x3c>
	//	HAL_Delay(10);
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000644:	f001 faa9 	bl	8001b9a <HAL_GPIO_TogglePin>
	//		Duty = Duty - 1;
	//	}

	}

	for(int i=0; i<1000000; i++){
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e002      	b.n	8000654 <HAL_GPIO_EXTI_Callback+0x48>
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3301      	adds	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <HAL_GPIO_EXTI_Callback+0x60>)
 8000658:	4293      	cmp	r3, r2
 800065a:	ddf8      	ble.n	800064e <HAL_GPIO_EXTI_Callback+0x42>

	}

}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40020000 	.word	0x40020000
 8000668:	40020c00 	.word	0x40020c00
 800066c:	000f423f 	.word	0x000f423f

08000670 <process_pack_motor>:
	} else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
		Duty -= 10;
	}*/
	//HAL_Delay(5);
void process_pack_motor(){
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
	printf("process_motor\n");
 8000676:	486a      	ldr	r0, [pc, #424]	; (8000820 <process_pack_motor+0x1b0>)
 8000678:	f003 fd8c 	bl	8004194 <puts>
	char str_dir_right;
	char str_duty_left[5];
	char str_duty_right[5];

	//wypisanie całego pakietu
	for(int i=0; i<strlen(packet); i++){
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	e009      	b.n	8000696 <process_pack_motor+0x26>
		printf("%c",packet[i]);
 8000682:	4a68      	ldr	r2, [pc, #416]	; (8000824 <process_pack_motor+0x1b4>)
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fd12 	bl	80040b4 <putchar>
	for(int i=0; i<strlen(packet); i++){
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	3301      	adds	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	4863      	ldr	r0, [pc, #396]	; (8000824 <process_pack_motor+0x1b4>)
 8000698:	f7ff fd9a 	bl	80001d0 <strlen>
 800069c:	4602      	mov	r2, r0
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d8ee      	bhi.n	8000682 <process_pack_motor+0x12>
	}
	printf("\n");
 80006a4:	200a      	movs	r0, #10
 80006a6:	f003 fd05 	bl	80040b4 <putchar>

	str_dir_left = packet[3];
 80006aa:	4b5e      	ldr	r3, [pc, #376]	; (8000824 <process_pack_motor+0x1b4>)
 80006ac:	78db      	ldrb	r3, [r3, #3]
 80006ae:	73fb      	strb	r3, [r7, #15]
	str_dir_right = packet[5];
 80006b0:	4b5c      	ldr	r3, [pc, #368]	; (8000824 <process_pack_motor+0x1b4>)
 80006b2:	795b      	ldrb	r3, [r3, #5]
 80006b4:	73bb      	strb	r3, [r7, #14]

	str_duty_left[0] = packet[7];
 80006b6:	4b5b      	ldr	r3, [pc, #364]	; (8000824 <process_pack_motor+0x1b4>)
 80006b8:	79db      	ldrb	r3, [r3, #7]
 80006ba:	723b      	strb	r3, [r7, #8]
	str_duty_left[1] = packet[8];
 80006bc:	4b59      	ldr	r3, [pc, #356]	; (8000824 <process_pack_motor+0x1b4>)
 80006be:	7a1b      	ldrb	r3, [r3, #8]
 80006c0:	727b      	strb	r3, [r7, #9]

	str_duty_right[0] = packet[10];
 80006c2:	4b58      	ldr	r3, [pc, #352]	; (8000824 <process_pack_motor+0x1b4>)
 80006c4:	7a9b      	ldrb	r3, [r3, #10]
 80006c6:	703b      	strb	r3, [r7, #0]
	str_duty_right[1] = packet[11];
 80006c8:	4b56      	ldr	r3, [pc, #344]	; (8000824 <process_pack_motor+0x1b4>)
 80006ca:	7adb      	ldrb	r3, [r3, #11]
 80006cc:	707b      	strb	r3, [r7, #1]
	//strncat(str_duty_right, &packet[10], 1);


	Duty_left = atoi(str_duty_left);
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fca0 	bl	8004018 <atoi>
 80006d8:	4602      	mov	r2, r0
 80006da:	4b53      	ldr	r3, [pc, #332]	; (8000828 <process_pack_motor+0x1b8>)
 80006dc:	601a      	str	r2, [r3, #0]
	Duty_right = atoi(str_duty_right);
 80006de:	463b      	mov	r3, r7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fc99 	bl	8004018 <atoi>
 80006e6:	4602      	mov	r2, r0
 80006e8:	4b50      	ldr	r3, [pc, #320]	; (800082c <process_pack_motor+0x1bc>)
 80006ea:	601a      	str	r2, [r3, #0]
	dir_left = str_dir_left - '0';
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	3b30      	subs	r3, #48	; 0x30
 80006f0:	4a4f      	ldr	r2, [pc, #316]	; (8000830 <process_pack_motor+0x1c0>)
 80006f2:	6013      	str	r3, [r2, #0]
    dir_right = str_dir_right - '0';
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	3b30      	subs	r3, #48	; 0x30
 80006f8:	4a4e      	ldr	r2, [pc, #312]	; (8000834 <process_pack_motor+0x1c4>)
 80006fa:	6013      	str	r3, [r2, #0]
	}
	for(int i=0; i<2; i++){
		printf("dir-left - %c\n",str_duty_right[i]);
	}*/

	printf("dir-left - %d\n",dir_left);
 80006fc:	4b4c      	ldr	r3, [pc, #304]	; (8000830 <process_pack_motor+0x1c0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	484d      	ldr	r0, [pc, #308]	; (8000838 <process_pack_motor+0x1c8>)
 8000704:	f003 fcbe 	bl	8004084 <iprintf>
	printf("dir-right - %d\n",dir_right);
 8000708:	4b4a      	ldr	r3, [pc, #296]	; (8000834 <process_pack_motor+0x1c4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	484b      	ldr	r0, [pc, #300]	; (800083c <process_pack_motor+0x1cc>)
 8000710:	f003 fcb8 	bl	8004084 <iprintf>
	printf("duty-left - %d\n",Duty_left);
 8000714:	4b44      	ldr	r3, [pc, #272]	; (8000828 <process_pack_motor+0x1b8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	4849      	ldr	r0, [pc, #292]	; (8000840 <process_pack_motor+0x1d0>)
 800071c:	f003 fcb2 	bl	8004084 <iprintf>
	printf("duty-right - %d\n",Duty_right);
 8000720:	4b42      	ldr	r3, [pc, #264]	; (800082c <process_pack_motor+0x1bc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	4847      	ldr	r0, [pc, #284]	; (8000844 <process_pack_motor+0x1d4>)
 8000728:	f003 fcac 	bl	8004084 <iprintf>


	if(dir_left == 1){
 800072c:	4b40      	ldr	r3, [pc, #256]	; (8000830 <process_pack_motor+0x1c0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d10c      	bne.n	800074e <process_pack_motor+0xde>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073a:	4843      	ldr	r0, [pc, #268]	; (8000848 <process_pack_motor+0x1d8>)
 800073c:	f001 fa14 	bl	8001b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000746:	4840      	ldr	r0, [pc, #256]	; (8000848 <process_pack_motor+0x1d8>)
 8000748:	f001 fa0e 	bl	8001b68 <HAL_GPIO_WritePin>
 800074c:	e020      	b.n	8000790 <process_pack_motor+0x120>
	} else if(dir_left == 0){
 800074e:	4b38      	ldr	r3, [pc, #224]	; (8000830 <process_pack_motor+0x1c0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d10c      	bne.n	8000770 <process_pack_motor+0x100>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075c:	483a      	ldr	r0, [pc, #232]	; (8000848 <process_pack_motor+0x1d8>)
 800075e:	f001 fa03 	bl	8001b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000768:	4837      	ldr	r0, [pc, #220]	; (8000848 <process_pack_motor+0x1d8>)
 800076a:	f001 f9fd 	bl	8001b68 <HAL_GPIO_WritePin>
 800076e:	e00f      	b.n	8000790 <process_pack_motor+0x120>
	} else if(dir_left == 2){
 8000770:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <process_pack_motor+0x1c0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b02      	cmp	r3, #2
 8000776:	d10b      	bne.n	8000790 <process_pack_motor+0x120>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800077e:	4832      	ldr	r0, [pc, #200]	; (8000848 <process_pack_motor+0x1d8>)
 8000780:	f001 f9f2 	bl	8001b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078a:	482f      	ldr	r0, [pc, #188]	; (8000848 <process_pack_motor+0x1d8>)
 800078c:	f001 f9ec 	bl	8001b68 <HAL_GPIO_WritePin>
	}

	if(dir_right == 1){
 8000790:	4b28      	ldr	r3, [pc, #160]	; (8000834 <process_pack_motor+0x1c4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d10c      	bne.n	80007b2 <process_pack_motor+0x142>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079e:	482a      	ldr	r0, [pc, #168]	; (8000848 <process_pack_motor+0x1d8>)
 80007a0:	f001 f9e2 	bl	8001b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007aa:	4827      	ldr	r0, [pc, #156]	; (8000848 <process_pack_motor+0x1d8>)
 80007ac:	f001 f9dc 	bl	8001b68 <HAL_GPIO_WritePin>
 80007b0:	e020      	b.n	80007f4 <process_pack_motor+0x184>
	} else if(dir_right == 0){
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <process_pack_motor+0x1c4>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d10c      	bne.n	80007d4 <process_pack_motor+0x164>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c0:	4821      	ldr	r0, [pc, #132]	; (8000848 <process_pack_motor+0x1d8>)
 80007c2:	f001 f9d1 	bl	8001b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007cc:	481e      	ldr	r0, [pc, #120]	; (8000848 <process_pack_motor+0x1d8>)
 80007ce:	f001 f9cb 	bl	8001b68 <HAL_GPIO_WritePin>
 80007d2:	e00f      	b.n	80007f4 <process_pack_motor+0x184>
	} else if(dir_right == 2){
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <process_pack_motor+0x1c4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d10b      	bne.n	80007f4 <process_pack_motor+0x184>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e2:	4819      	ldr	r0, [pc, #100]	; (8000848 <process_pack_motor+0x1d8>)
 80007e4:	f001 f9c0 	bl	8001b68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ee:	4816      	ldr	r0, [pc, #88]	; (8000848 <process_pack_motor+0x1d8>)
 80007f0:	f001 f9ba 	bl	8001b68 <HAL_GPIO_WritePin>





	for(int i=0; i<strlen(packet); i++){
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	e007      	b.n	800080a <process_pack_motor+0x19a>
		packet[i]='\0';
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <process_pack_motor+0x1b4>)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<strlen(packet); i++){
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	3301      	adds	r3, #1
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4806      	ldr	r0, [pc, #24]	; (8000824 <process_pack_motor+0x1b4>)
 800080c:	f7ff fce0 	bl	80001d0 <strlen>
 8000810:	4602      	mov	r2, r0
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d8f0      	bhi.n	80007fa <process_pack_motor+0x18a>
	}

}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	08005150 	.word	0x08005150
 8000824:	2000023c 	.word	0x2000023c
 8000828:	2000032c 	.word	0x2000032c
 800082c:	20000374 	.word	0x20000374
 8000830:	200002e0 	.word	0x200002e0
 8000834:	20000328 	.word	0x20000328
 8000838:	08005160 	.word	0x08005160
 800083c:	08005170 	.word	0x08005170
 8000840:	08005180 	.word	0x08005180
 8000844:	08005190 	.word	0x08005190
 8000848:	40020c00 	.word	0x40020c00

0800084c <read_pack>:


void read_pack(char mark){
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]

	printf("read: ");
 8000856:	481e      	ldr	r0, [pc, #120]	; (80008d0 <read_pack+0x84>)
 8000858:	f003 fc14 	bl	8004084 <iprintf>
	//printf("%c",mark);
	strncat(packet, &mark, 1);
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	2201      	movs	r2, #1
 8000860:	4619      	mov	r1, r3
 8000862:	481c      	ldr	r0, [pc, #112]	; (80008d4 <read_pack+0x88>)
 8000864:	f003 fc9e 	bl	80041a4 <strncat>

	if(mark == ';'){
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b3b      	cmp	r3, #59	; 0x3b
 800086c:	d12b      	bne.n	80008c6 <read_pack+0x7a>
		for(int i=0; i<strlen(packet); i++){
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	e009      	b.n	8000888 <read_pack+0x3c>
			printf("%c",packet[i]);
 8000874:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <read_pack+0x88>)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f003 fc19 	bl	80040b4 <putchar>
		for(int i=0; i<strlen(packet); i++){
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	3301      	adds	r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4812      	ldr	r0, [pc, #72]	; (80008d4 <read_pack+0x88>)
 800088a:	f7ff fca1 	bl	80001d0 <strlen>
 800088e:	4602      	mov	r2, r0
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	429a      	cmp	r2, r3
 8000894:	d8ee      	bhi.n	8000874 <read_pack+0x28>
		}

		if(packet[1] == '0'){
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <read_pack+0x88>)
 8000898:	785b      	ldrb	r3, [r3, #1]
 800089a:	2b30      	cmp	r3, #48	; 0x30
 800089c:	d101      	bne.n	80008a2 <read_pack+0x56>
			process_pack_motor();
 800089e:	f7ff fee7 	bl	8000670 <process_pack_motor>
		}

		for(int i=0; i<strlen(packet); i++){
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	e007      	b.n	80008b8 <read_pack+0x6c>
			packet[i]='\0';
 80008a8:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <read_pack+0x88>)
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	4413      	add	r3, r2
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<strlen(packet); i++){
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	4806      	ldr	r0, [pc, #24]	; (80008d4 <read_pack+0x88>)
 80008ba:	f7ff fc89 	bl	80001d0 <strlen>
 80008be:	4602      	mov	r2, r0
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d8f0      	bhi.n	80008a8 <read_pack+0x5c>
			printf("%c",mark);
		}
	}*/


}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	080051a4 	.word	0x080051a4
 80008d4:	2000023c 	.word	0x2000023c

080008d8 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

	 TIM3->CCR1 = Duty_left;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008e6:	635a      	str	r2, [r3, #52]	; 0x34
	 TIM3->CCR2 = Duty_right;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008ee:	639a      	str	r2, [r3, #56]	; 0x38
	// HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);

}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	2000032c 	.word	0x2000032c
 8000900:	40000400 	.word	0x40000400
 8000904:	20000374 	.word	0x20000374

08000908 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	//printf("RX");
	if(huart->Instance == USART3){
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a22      	ldr	r2, [pc, #136]	; (80009a0 <HAL_UART_RxCpltCallback+0x98>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d13d      	bne.n	8000996 <HAL_UART_RxCpltCallback+0x8e>
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
		printf("%c", receiveUART[0]);
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <HAL_UART_RxCpltCallback+0x9c>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f003 fbc8 	bl	80040b4 <putchar>
		//printf("\n");
		//printf(" \n");

		if(receiveUART[0] == ':'){
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <HAL_UART_RxCpltCallback+0x9c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b3a      	cmp	r3, #58	; 0x3a
 800092a:	d102      	bne.n	8000932 <HAL_UART_RxCpltCallback+0x2a>
			read_bool=1;
 800092c:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <HAL_UART_RxCpltCallback+0xa0>)
 800092e:	2201      	movs	r2, #1
 8000930:	601a      	str	r2, [r3, #0]
		}

		if(receiveUART[0] == ';'){
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <HAL_UART_RxCpltCallback+0x9c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b3b      	cmp	r3, #59	; 0x3b
 8000938:	d112      	bne.n	8000960 <HAL_UART_RxCpltCallback+0x58>
			read_bool=0;
 800093a:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <HAL_UART_RxCpltCallback+0xa0>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
			printf("[");
 8000940:	205b      	movs	r0, #91	; 0x5b
 8000942:	f003 fbb7 	bl	80040b4 <putchar>
			printf("%c", receiveUART[0]);
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <HAL_UART_RxCpltCallback+0x9c>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f003 fbb2 	bl	80040b4 <putchar>
			printf("]");
 8000950:	205d      	movs	r0, #93	; 0x5d
 8000952:	f003 fbaf 	bl	80040b4 <putchar>
			read_pack(receiveUART[0]);
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <HAL_UART_RxCpltCallback+0x9c>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff76 	bl	800084c <read_pack>

		}

		if(read_bool == 1){
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_UART_RxCpltCallback+0xa0>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d10f      	bne.n	8000988 <HAL_UART_RxCpltCallback+0x80>
			printf("[");
 8000968:	205b      	movs	r0, #91	; 0x5b
 800096a:	f003 fba3 	bl	80040b4 <putchar>
			printf("%c", receiveUART[0]);
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_UART_RxCpltCallback+0x9c>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f003 fb9e 	bl	80040b4 <putchar>
			printf("]");
 8000978:	205d      	movs	r0, #93	; 0x5d
 800097a:	f003 fb9b 	bl	80040b4 <putchar>
			read_pack(receiveUART[0]);
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_UART_RxCpltCallback+0x9c>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff62 	bl	800084c <read_pack>
	    	//printf("%u", receiveUART[0]);

		}
		//HAL_Delay(100);
		HAL_UART_Receive_IT(&huart3, receiveUART, sizeReceiveUART);
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_UART_RxCpltCallback+0xa4>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	4905      	ldr	r1, [pc, #20]	; (80009a4 <HAL_UART_RxCpltCallback+0x9c>)
 8000990:	4807      	ldr	r0, [pc, #28]	; (80009b0 <HAL_UART_RxCpltCallback+0xa8>)
 8000992:	f002 fd39 	bl	8003408 <HAL_UART_Receive_IT>

	}
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40004800 	.word	0x40004800
 80009a4:	20000370 	.word	0x20000370
 80009a8:	20000228 	.word	0x20000228
 80009ac:	2000002e 	.word	0x2000002e
 80009b0:	200002a0 	.word	0x200002a0

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f000 fd5c 	bl	8001474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f8a0 	bl	8000b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f000 fa04 	bl	8000dcc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009c4:	f000 f9d8 	bl	8000d78 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80009c8:	f000 f954 	bl	8000c74 <MX_TIM3_Init>
  MX_TIM1_Init();
 80009cc:	f000 f902 	bl	8000bd4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //ITM_SendChar( 65 );
  Duty_left = 0;
 80009d0:	4b3c      	ldr	r3, [pc, #240]	; (8000ac4 <main+0x110>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
  Duty_right = 0;
 80009d6:	4b3c      	ldr	r3, [pc, #240]	; (8000ac8 <main+0x114>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e2:	483a      	ldr	r0, [pc, #232]	; (8000acc <main+0x118>)
 80009e4:	f001 f8c0 	bl	8001b68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ee:	4837      	ldr	r0, [pc, #220]	; (8000acc <main+0x118>)
 80009f0:	f001 f8ba 	bl	8001b68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009fa:	4834      	ldr	r0, [pc, #208]	; (8000acc <main+0x118>)
 80009fc:	f001 f8b4 	bl	8001b68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a06:	4831      	ldr	r0, [pc, #196]	; (8000acc <main+0x118>)
 8000a08:	f001 f8ae 	bl	8001b68 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a12:	482e      	ldr	r0, [pc, #184]	; (8000acc <main+0x118>)
 8000a14:	f001 f8a8 	bl	8001b68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1e:	482c      	ldr	r0, [pc, #176]	; (8000ad0 <main+0x11c>)
 8000a20:	f001 f8a2 	bl	8001b68 <HAL_GPIO_WritePin>





  HAL_TIM_Base_Start_IT(&htim3);
 8000a24:	482b      	ldr	r0, [pc, #172]	; (8000ad4 <main+0x120>)
 8000a26:	f001 fd78 	bl	800251a <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4829      	ldr	r0, [pc, #164]	; (8000ad4 <main+0x120>)
 8000a2e:	f001 fdcd 	bl	80025cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a32:	2104      	movs	r1, #4
 8000a34:	4827      	ldr	r0, [pc, #156]	; (8000ad4 <main+0x120>)
 8000a36:	f001 fdc9 	bl	80025cc <HAL_TIM_PWM_Start>
 // TIM4->CCR1 = Duty;
 // TIM4->CCR2 = Duty;

 // HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);

  HAL_UART_Receive_IT(&huart3, receiveUART, sizeReceiveUART);
 8000a3a:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <main+0x124>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4926      	ldr	r1, [pc, #152]	; (8000adc <main+0x128>)
 8000a42:	4827      	ldr	r0, [pc, #156]	; (8000ae0 <main+0x12c>)
 8000a44:	f002 fce0 	bl	8003408 <HAL_UART_Receive_IT>
  //HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);
 // printf("%u",sendUART[0]);
  printf("CONSOLE GOOD \n");
 8000a48:	4826      	ldr	r0, [pc, #152]	; (8000ae4 <main+0x130>)
 8000a4a:	f003 fba3 	bl	8004194 <puts>
 // HAL_Delay(300);
 // HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a54:	481e      	ldr	r0, [pc, #120]	; (8000ad0 <main+0x11c>)
 8000a56:	f001 f887 	bl	8001b68 <HAL_GPIO_WritePin>
  HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <main+0x134>)
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4922      	ldr	r1, [pc, #136]	; (8000aec <main+0x138>)
 8000a62:	481f      	ldr	r0, [pc, #124]	; (8000ae0 <main+0x12c>)
 8000a64:	f002 fc8b 	bl	800337e <HAL_UART_Transmit_IT>
  HAL_Delay(6000);
 8000a68:	f241 7070 	movw	r0, #6000	; 0x1770
 8000a6c:	f000 fd74 	bl	8001558 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart3, s_mux_1, size_s_mux_1);
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <main+0x13c>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	491f      	ldr	r1, [pc, #124]	; (8000af4 <main+0x140>)
 8000a78:	4819      	ldr	r0, [pc, #100]	; (8000ae0 <main+0x12c>)
 8000a7a:	f002 fc80 	bl	800337e <HAL_UART_Transmit_IT>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a84:	4811      	ldr	r0, [pc, #68]	; (8000acc <main+0x118>)
 8000a86:	f001 f86f 	bl	8001b68 <HAL_GPIO_WritePin>
  HAL_Delay(6000);
 8000a8a:	f241 7070 	movw	r0, #6000	; 0x1770
 8000a8e:	f000 fd63 	bl	8001558 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a98:	480c      	ldr	r0, [pc, #48]	; (8000acc <main+0x118>)
 8000a9a:	f001 f865 	bl	8001b68 <HAL_GPIO_WritePin>
  HAL_UART_Transmit_IT(&huart3, s_serv_1, size_s_serv_1);
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <main+0x144>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4915      	ldr	r1, [pc, #84]	; (8000afc <main+0x148>)
 8000aa6:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <main+0x12c>)
 8000aa8:	f002 fc69 	bl	800337e <HAL_UART_Transmit_IT>
  HAL_Delay(6000);
 8000aac:	f241 7070 	movw	r0, #6000	; 0x1770
 8000ab0:	f000 fd52 	bl	8001558 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <main+0x11c>)
 8000abc:	f001 f854 	bl	8001b68 <HAL_GPIO_WritePin>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <main+0x10c>
 8000ac2:	bf00      	nop
 8000ac4:	2000032c 	.word	0x2000032c
 8000ac8:	20000374 	.word	0x20000374
 8000acc:	40020c00 	.word	0x40020c00
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	200002e8 	.word	0x200002e8
 8000ad8:	2000002e 	.word	0x2000002e
 8000adc:	20000370 	.word	0x20000370
 8000ae0:	200002a0 	.word	0x200002a0
 8000ae4:	080051ac 	.word	0x080051ac
 8000ae8:	20000004 	.word	0x20000004
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000006 	.word	0x20000006
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000016 	.word	0x20000016
 8000afc:	20000018 	.word	0x20000018

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b094      	sub	sp, #80	; 0x50
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0320 	add.w	r3, r7, #32
 8000b0a:	2230      	movs	r2, #48	; 0x30
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f003 fab0 	bl	8004074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <SystemClock_Config+0xcc>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	4a27      	ldr	r2, [pc, #156]	; (8000bcc <SystemClock_Config+0xcc>)
 8000b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b32:	6413      	str	r3, [r2, #64]	; 0x40
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <SystemClock_Config+0xcc>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b40:	2300      	movs	r3, #0
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <SystemClock_Config+0xd0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a21      	ldr	r2, [pc, #132]	; (8000bd0 <SystemClock_Config+0xd0>)
 8000b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <SystemClock_Config+0xd0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b66:	2302      	movs	r3, #2
 8000b68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b74:	23a8      	movs	r3, #168	; 0xa8
 8000b76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b80:	f107 0320 	add.w	r3, r7, #32
 8000b84:	4618      	mov	r0, r3
 8000b86:	f001 f83b 	bl	8001c00 <HAL_RCC_OscConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b90:	f000 fa3a 	bl	8001008 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b94:	230f      	movs	r3, #15
 8000b96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ba0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ba4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	2105      	movs	r1, #5
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 fa94 	bl	80020e0 <HAL_RCC_ClockConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bbe:	f000 fa23 	bl	8001008 <Error_Handler>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3750      	adds	r7, #80	; 0x50
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40007000 	.word	0x40007000

08000bd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be8:	463b      	mov	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <MX_TIM1_Init+0x98>)
 8000bf2:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <MX_TIM1_Init+0x9c>)
 8000bf4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_TIM1_Init+0x98>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_TIM1_Init+0x98>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_TIM1_Init+0x98>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_TIM1_Init+0x98>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_TIM1_Init+0x98>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_TIM1_Init+0x98>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c1a:	4814      	ldr	r0, [pc, #80]	; (8000c6c <MX_TIM1_Init+0x98>)
 8000c1c:	f001 fc52 	bl	80024c4 <HAL_TIM_Base_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000c26:	f000 f9ef 	bl	8001008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	4619      	mov	r1, r3
 8000c36:	480d      	ldr	r0, [pc, #52]	; (8000c6c <MX_TIM1_Init+0x98>)
 8000c38:	f001 fed4 	bl	80029e4 <HAL_TIM_ConfigClockSource>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000c42:	f000 f9e1 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4619      	mov	r1, r3
 8000c52:	4806      	ldr	r0, [pc, #24]	; (8000c6c <MX_TIM1_Init+0x98>)
 8000c54:	f002 fab6 	bl	80031c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000c5e:	f000 f9d3 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000330 	.word	0x20000330
 8000c70:	40010000 	.word	0x40010000

08000c74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08e      	sub	sp, #56	; 0x38
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	f107 0320 	add.w	r3, r7, #32
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
 8000ca0:	615a      	str	r2, [r3, #20]
 8000ca2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ca4:	4b32      	ldr	r3, [pc, #200]	; (8000d70 <MX_TIM3_Init+0xfc>)
 8000ca6:	4a33      	ldr	r2, [pc, #204]	; (8000d74 <MX_TIM3_Init+0x100>)
 8000ca8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4999;
 8000caa:	4b31      	ldr	r3, [pc, #196]	; (8000d70 <MX_TIM3_Init+0xfc>)
 8000cac:	f241 3287 	movw	r2, #4999	; 0x1387
 8000cb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <MX_TIM3_Init+0xfc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <MX_TIM3_Init+0xfc>)
 8000cba:	2263      	movs	r2, #99	; 0x63
 8000cbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbe:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <MX_TIM3_Init+0xfc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc4:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <MX_TIM3_Init+0xfc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cca:	4829      	ldr	r0, [pc, #164]	; (8000d70 <MX_TIM3_Init+0xfc>)
 8000ccc:	f001 fbfa 	bl	80024c4 <HAL_TIM_Base_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000cd6:	f000 f997 	bl	8001008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ce0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4822      	ldr	r0, [pc, #136]	; (8000d70 <MX_TIM3_Init+0xfc>)
 8000ce8:	f001 fe7c 	bl	80029e4 <HAL_TIM_ConfigClockSource>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000cf2:	f000 f989 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cf6:	481e      	ldr	r0, [pc, #120]	; (8000d70 <MX_TIM3_Init+0xfc>)
 8000cf8:	f001 fc33 	bl	8002562 <HAL_TIM_PWM_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d02:	f000 f981 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d0e:	f107 0320 	add.w	r3, r7, #32
 8000d12:	4619      	mov	r1, r3
 8000d14:	4816      	ldr	r0, [pc, #88]	; (8000d70 <MX_TIM3_Init+0xfc>)
 8000d16:	f002 fa55 	bl	80031c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d20:	f000 f972 	bl	8001008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d24:	2360      	movs	r3, #96	; 0x60
 8000d26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2200      	movs	r2, #0
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_TIM3_Init+0xfc>)
 8000d3c:	f001 fd8c 	bl	8002858 <HAL_TIM_PWM_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d46:	f000 f95f 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4807      	ldr	r0, [pc, #28]	; (8000d70 <MX_TIM3_Init+0xfc>)
 8000d52:	f001 fd81 	bl	8002858 <HAL_TIM_PWM_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000d5c:	f000 f954 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d60:	4803      	ldr	r0, [pc, #12]	; (8000d70 <MX_TIM3_Init+0xfc>)
 8000d62:	f000 f9e7 	bl	8001134 <HAL_TIM_MspPostInit>

}
 8000d66:	bf00      	nop
 8000d68:	3738      	adds	r7, #56	; 0x38
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200002e8 	.word	0x200002e8
 8000d74:	40000400 	.word	0x40000400

08000d78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <MX_USART3_UART_Init+0x50>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USART3_UART_Init+0x4c>)
 8000db0:	f002 fa98 	bl	80032e4 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000dba:	f000 f925 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200002a0 	.word	0x200002a0
 8000dc8:	40004800 	.word	0x40004800

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
 8000de6:	4b81      	ldr	r3, [pc, #516]	; (8000fec <MX_GPIO_Init+0x220>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a80      	ldr	r2, [pc, #512]	; (8000fec <MX_GPIO_Init+0x220>)
 8000dec:	f043 0310 	orr.w	r3, r3, #16
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b7e      	ldr	r3, [pc, #504]	; (8000fec <MX_GPIO_Init+0x220>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0310 	and.w	r3, r3, #16
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	4b7a      	ldr	r3, [pc, #488]	; (8000fec <MX_GPIO_Init+0x220>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a79      	ldr	r2, [pc, #484]	; (8000fec <MX_GPIO_Init+0x220>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b77      	ldr	r3, [pc, #476]	; (8000fec <MX_GPIO_Init+0x220>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b73      	ldr	r3, [pc, #460]	; (8000fec <MX_GPIO_Init+0x220>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a72      	ldr	r2, [pc, #456]	; (8000fec <MX_GPIO_Init+0x220>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b70      	ldr	r3, [pc, #448]	; (8000fec <MX_GPIO_Init+0x220>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b6c      	ldr	r3, [pc, #432]	; (8000fec <MX_GPIO_Init+0x220>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a6b      	ldr	r2, [pc, #428]	; (8000fec <MX_GPIO_Init+0x220>)
 8000e40:	f043 0308 	orr.w	r3, r3, #8
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b69      	ldr	r3, [pc, #420]	; (8000fec <MX_GPIO_Init+0x220>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	4b65      	ldr	r3, [pc, #404]	; (8000fec <MX_GPIO_Init+0x220>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a64      	ldr	r2, [pc, #400]	; (8000fec <MX_GPIO_Init+0x220>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b62      	ldr	r3, [pc, #392]	; (8000fec <MX_GPIO_Init+0x220>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	4b5e      	ldr	r3, [pc, #376]	; (8000fec <MX_GPIO_Init+0x220>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a5d      	ldr	r2, [pc, #372]	; (8000fec <MX_GPIO_Init+0x220>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <MX_GPIO_Init+0x220>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000e90:	4857      	ldr	r0, [pc, #348]	; (8000ff0 <MX_GPIO_Init+0x224>)
 8000e92:	f000 fe69 	bl	8001b68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 4106 	mov.w	r1, #34304	; 0x8600
 8000e9c:	4855      	ldr	r0, [pc, #340]	; (8000ff4 <MX_GPIO_Init+0x228>)
 8000e9e:	f000 fe63 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ea2:	2370      	movs	r3, #112	; 0x70
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000eb2:	230d      	movs	r3, #13
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	484e      	ldr	r0, [pc, #312]	; (8000ff8 <MX_GPIO_Init+0x22c>)
 8000ebe:	f000 fca1 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec6:	4b4d      	ldr	r3, [pc, #308]	; (8000ffc <MX_GPIO_Init+0x230>)
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4847      	ldr	r0, [pc, #284]	; (8000ff4 <MX_GPIO_Init+0x228>)
 8000ed6:	f000 fc95 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eda:	2304      	movs	r3, #4
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ede:	4b47      	ldr	r3, [pc, #284]	; (8000ffc <MX_GPIO_Init+0x230>)
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	4841      	ldr	r0, [pc, #260]	; (8000ff4 <MX_GPIO_Init+0x228>)
 8000eee:	f000 fc89 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000ef2:	2350      	movs	r3, #80	; 0x50
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f02:	230d      	movs	r3, #13
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4839      	ldr	r0, [pc, #228]	; (8000ff4 <MX_GPIO_Init+0x228>)
 8000f0e:	f000 fc79 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000f12:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000f16:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4831      	ldr	r0, [pc, #196]	; (8000ff0 <MX_GPIO_Init+0x224>)
 8000f2c:	f000 fc6a 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000f30:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f42:	230d      	movs	r3, #13
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	482c      	ldr	r0, [pc, #176]	; (8001000 <MX_GPIO_Init+0x234>)
 8000f4e:	f000 fc59 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8000f52:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 8000f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4822      	ldr	r0, [pc, #136]	; (8000ff4 <MX_GPIO_Init+0x228>)
 8000f6c:	f000 fc4a 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f70:	23c0      	movs	r3, #192	; 0xc0
 8000f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f80:	230d      	movs	r3, #13
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	481e      	ldr	r0, [pc, #120]	; (8001004 <MX_GPIO_Init+0x238>)
 8000f8c:	f000 fc3a 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f96:	2312      	movs	r3, #18
 8000f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	4815      	ldr	r0, [pc, #84]	; (8001004 <MX_GPIO_Init+0x238>)
 8000fae:	f000 fc29 	bl	8001804 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2006      	movs	r0, #6
 8000fb8:	f000 fbcb 	bl	8001752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fbc:	2006      	movs	r0, #6
 8000fbe:	f000 fbe4 	bl	800178a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2007      	movs	r0, #7
 8000fc8:	f000 fbc3 	bl	8001752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000fcc:	2007      	movs	r0, #7
 8000fce:	f000 fbdc 	bl	800178a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2008      	movs	r0, #8
 8000fd8:	f000 fbbb 	bl	8001752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000fdc:	2008      	movs	r0, #8
 8000fde:	f000 fbd4 	bl	800178a <HAL_NVIC_EnableIRQ>

}
 8000fe2:	bf00      	nop
 8000fe4:	3730      	adds	r7, #48	; 0x30
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020c00 	.word	0x40020c00
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	10110000 	.word	0x10110000
 8001000:	40020800 	.word	0x40020800
 8001004:	40020400 	.word	0x40020400

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <HAL_MspInit+0x4c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a0f      	ldr	r2, [pc, #60]	; (8001064 <HAL_MspInit+0x4c>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_MspInit+0x4c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_MspInit+0x4c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a08      	ldr	r2, [pc, #32]	; (8001064 <HAL_MspInit+0x4c>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_MspInit+0x4c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800

08001068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a27      	ldr	r2, [pc, #156]	; (8001124 <HAL_TIM_Base_MspInit+0xbc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d12d      	bne.n	80010e6 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b26      	ldr	r3, [pc, #152]	; (8001128 <HAL_TIM_Base_MspInit+0xc0>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a25      	ldr	r2, [pc, #148]	; (8001128 <HAL_TIM_Base_MspInit+0xc0>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <HAL_TIM_Base_MspInit+0xc0>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <HAL_TIM_Base_MspInit+0xc0>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a1e      	ldr	r2, [pc, #120]	; (8001128 <HAL_TIM_Base_MspInit+0xc0>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <HAL_TIM_Base_MspInit+0xc0>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4813      	ldr	r0, [pc, #76]	; (800112c <HAL_TIM_Base_MspInit+0xc4>)
 80010e0:	f000 fb90 	bl	8001804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010e4:	e01a      	b.n	800111c <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a11      	ldr	r2, [pc, #68]	; (8001130 <HAL_TIM_Base_MspInit+0xc8>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d115      	bne.n	800111c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_TIM_Base_MspInit+0xc0>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <HAL_TIM_Base_MspInit+0xc0>)
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_TIM_Base_MspInit+0xc0>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	201d      	movs	r0, #29
 8001112:	f000 fb1e 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001116:	201d      	movs	r0, #29
 8001118:	f000 fb37 	bl	800178a <HAL_NVIC_EnableIRQ>
}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	; 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40010000 	.word	0x40010000
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000
 8001130:	40000400 	.word	0x40000400

08001134 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <HAL_TIM_MspPostInit+0x68>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d11d      	bne.n	8001192 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_TIM_MspPostInit+0x6c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <HAL_TIM_MspPostInit+0x6c>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_TIM_MspPostInit+0x6c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001172:	2330      	movs	r3, #48	; 0x30
 8001174:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001182:	2302      	movs	r3, #2
 8001184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_TIM_MspPostInit+0x70>)
 800118e:	f000 fb39 	bl	8001804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40000400 	.word	0x40000400
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020400 	.word	0x40020400

080011a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HAL_UART_MspInit+0x94>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d134      	bne.n	8001234 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001202:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001214:	2307      	movs	r3, #7
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4809      	ldr	r0, [pc, #36]	; (8001244 <HAL_UART_MspInit+0x9c>)
 8001220:	f000 faf0 	bl	8001804 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2027      	movs	r0, #39	; 0x27
 800122a:	f000 fa92 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800122e:	2027      	movs	r0, #39	; 0x27
 8001230:	f000 faab 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40004800 	.word	0x40004800
 8001240:	40023800 	.word	0x40023800
 8001244:	40020800 	.word	0x40020800

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <MemManage_Handler+0x4>

08001262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler+0x4>

0800126e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129c:	f000 f93c 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012a8:	2001      	movs	r0, #1
 80012aa:	f000 fc91 	bl	8001bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80012b6:	2002      	movs	r0, #2
 80012b8:	f000 fc8a 	bl	8001bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80012c4:	2004      	movs	r0, #4
 80012c6:	f000 fc83 	bl	8001bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <TIM3_IRQHandler+0x10>)
 80012d6:	f001 f9b7 	bl	8002648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200002e8 	.word	0x200002e8

080012e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <USART3_IRQHandler+0x10>)
 80012ea:	f002 f8e3 	bl	80034b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200002a0 	.word	0x200002a0

080012f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	e00a      	b.n	8001320 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800130a:	f3af 8000 	nop.w
 800130e:	4601      	mov	r1, r0
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	60ba      	str	r2, [r7, #8]
 8001316:	b2ca      	uxtb	r2, r1
 8001318:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbf0      	blt.n	800130a <_read+0x12>
	}

return len;
 8001328:	687b      	ldr	r3, [r7, #4]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
	return -1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800135a:	605a      	str	r2, [r3, #4]
	return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <_isatty>:

int _isatty(int file)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
	return 1;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
	return 0;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <_sbrk+0x50>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <_sbrk+0x16>
		heap_end = &end;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <_sbrk+0x50>)
 80013ae:	4a10      	ldr	r2, [pc, #64]	; (80013f0 <_sbrk+0x54>)
 80013b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <_sbrk+0x50>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <_sbrk+0x50>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	466a      	mov	r2, sp
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d907      	bls.n	80013d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80013c6:	f002 fe2b 	bl	8004020 <__errno>
 80013ca:	4602      	mov	r2, r0
 80013cc:	230c      	movs	r3, #12
 80013ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d4:	e006      	b.n	80013e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <_sbrk+0x50>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	4a03      	ldr	r2, [pc, #12]	; (80013ec <_sbrk+0x50>)
 80013e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000022c 	.word	0x2000022c
 80013f0:	20000380 	.word	0x20000380

080013f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <SystemInit+0x28>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fe:	4a07      	ldr	r2, [pc, #28]	; (800141c <SystemInit+0x28>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <SystemInit+0x28>)
 800140a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800140e:	609a      	str	r2, [r3, #8]
#endif
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001458 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001424:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001426:	e003      	b.n	8001430 <LoopCopyDataInit>

08001428 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800142a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800142c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800142e:	3104      	adds	r1, #4

08001430 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001434:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001436:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001438:	d3f6      	bcc.n	8001428 <CopyDataInit>
  ldr  r2, =_sbss
 800143a:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800143c:	e002      	b.n	8001444 <LoopFillZerobss>

0800143e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800143e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001440:	f842 3b04 	str.w	r3, [r2], #4

08001444 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001446:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001448:	d3f9      	bcc.n	800143e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800144a:	f7ff ffd3 	bl	80013f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800144e:	f002 fded 	bl	800402c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001452:	f7ff faaf 	bl	80009b4 <main>
  bx  lr    
 8001456:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001458:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800145c:	08005388 	.word	0x08005388
  ldr  r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001464:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 8001468:	2000020c 	.word	0x2000020c
  ldr  r3, = _ebss
 800146c:	20000380 	.word	0x20000380

08001470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC_IRQHandler>
	...

08001474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <HAL_Init+0x40>)
 800147e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <HAL_Init+0x40>)
 800148a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800148e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_Init+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_Init+0x40>)
 8001496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 f94d 	bl	800173c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 f808 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a8:	f7ff fdb6 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023c00 	.word	0x40023c00

080014b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_InitTick+0x54>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_InitTick+0x58>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f965 	bl	80017a6 <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014f4:	f000 f92d 	bl	8001752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	; (8001514 <HAL_InitTick+0x5c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000030 	.word	0x20000030
 8001510:	20000038 	.word	0x20000038
 8001514:	20000034 	.word	0x20000034

08001518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_IncTick+0x20>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_IncTick+0x24>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <HAL_IncTick+0x24>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000038 	.word	0x20000038
 800153c:	20000378 	.word	0x20000378

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000378 	.word	0x20000378

08001558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff ffee 	bl	8001540 <HAL_GetTick>
 8001564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001570:	d005      	beq.n	800157e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_Delay+0x40>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800157e:	bf00      	nop
 8001580:	f7ff ffde 	bl	8001540 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	429a      	cmp	r2, r3
 800158e:	d8f7      	bhi.n	8001580 <HAL_Delay+0x28>
  {
  }
}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000038 	.word	0x20000038

0800159c <__NVIC_SetPriorityGrouping>:
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b8:	4013      	ands	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	60d3      	str	r3, [r2, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_GetPriorityGrouping>:
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <__NVIC_GetPriorityGrouping+0x18>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	f003 0307 	and.w	r3, r3, #7
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_EnableIRQ>:
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db0b      	blt.n	800162a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	4907      	ldr	r1, [pc, #28]	; (8001638 <__NVIC_EnableIRQ+0x38>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	2001      	movs	r0, #1
 8001622:	fa00 f202 	lsl.w	r2, r0, r2
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000e100 	.word	0xe000e100

0800163c <__NVIC_SetPriority>:
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db0a      	blt.n	8001666 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	490c      	ldr	r1, [pc, #48]	; (8001688 <__NVIC_SetPriority+0x4c>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	0112      	lsls	r2, r2, #4
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	440b      	add	r3, r1
 8001660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001664:	e00a      	b.n	800167c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4908      	ldr	r1, [pc, #32]	; (800168c <__NVIC_SetPriority+0x50>)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	3b04      	subs	r3, #4
 8001674:	0112      	lsls	r2, r2, #4
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	440b      	add	r3, r1
 800167a:	761a      	strb	r2, [r3, #24]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000e100 	.word	0xe000e100
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <NVIC_EncodePriority>:
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f1c3 0307 	rsb	r3, r3, #7
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	bf28      	it	cs
 80016ae:	2304      	movcs	r3, #4
 80016b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3304      	adds	r3, #4
 80016b6:	2b06      	cmp	r3, #6
 80016b8:	d902      	bls.n	80016c0 <NVIC_EncodePriority+0x30>
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3b03      	subs	r3, #3
 80016be:	e000      	b.n	80016c2 <NVIC_EncodePriority+0x32>
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	401a      	ands	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	43d9      	mvns	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	4313      	orrs	r3, r2
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3724      	adds	r7, #36	; 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <SysTick_Config>:
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001708:	d301      	bcc.n	800170e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800170a:	2301      	movs	r3, #1
 800170c:	e00f      	b.n	800172e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <SysTick_Config+0x40>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001716:	210f      	movs	r1, #15
 8001718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800171c:	f7ff ff8e 	bl	800163c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <SysTick_Config+0x40>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <SysTick_Config+0x40>)
 8001728:	2207      	movs	r2, #7
 800172a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	e000e010 	.word	0xe000e010

0800173c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff29 	bl	800159c <__NVIC_SetPriorityGrouping>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff3e 	bl	80015e4 <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ff8e 	bl	8001690 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff5d 	bl	800163c <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff31 	bl	8001600 <__NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffa2 	bl	80016f8 <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d004      	beq.n	80017dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e00c      	b.n	80017f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2205      	movs	r2, #5
 80017e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	e16b      	b.n	8001af8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	429a      	cmp	r2, r3
 800183a:	f040 815a 	bne.w	8001af2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d00b      	beq.n	800185e <HAL_GPIO_Init+0x5a>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d007      	beq.n	800185e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001852:	2b11      	cmp	r3, #17
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b12      	cmp	r3, #18
 800185c:	d130      	bne.n	80018c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001894:	2201      	movs	r2, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 0201 	and.w	r2, r3, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0xfc>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b12      	cmp	r3, #18
 80018fe:	d123      	bne.n	8001948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	08da      	lsrs	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3208      	adds	r2, #8
 8001908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	08da      	lsrs	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3208      	adds	r2, #8
 8001942:	69b9      	ldr	r1, [r7, #24]
 8001944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0203 	and.w	r2, r3, #3
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80b4 	beq.w	8001af2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b5f      	ldr	r3, [pc, #380]	; (8001b0c <HAL_GPIO_Init+0x308>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a5e      	ldr	r2, [pc, #376]	; (8001b0c <HAL_GPIO_Init+0x308>)
 8001994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b5c      	ldr	r3, [pc, #368]	; (8001b0c <HAL_GPIO_Init+0x308>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a6:	4a5a      	ldr	r2, [pc, #360]	; (8001b10 <HAL_GPIO_Init+0x30c>)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a51      	ldr	r2, [pc, #324]	; (8001b14 <HAL_GPIO_Init+0x310>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d02b      	beq.n	8001a2a <HAL_GPIO_Init+0x226>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a50      	ldr	r2, [pc, #320]	; (8001b18 <HAL_GPIO_Init+0x314>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d025      	beq.n	8001a26 <HAL_GPIO_Init+0x222>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4f      	ldr	r2, [pc, #316]	; (8001b1c <HAL_GPIO_Init+0x318>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d01f      	beq.n	8001a22 <HAL_GPIO_Init+0x21e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4e      	ldr	r2, [pc, #312]	; (8001b20 <HAL_GPIO_Init+0x31c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d019      	beq.n	8001a1e <HAL_GPIO_Init+0x21a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4d      	ldr	r2, [pc, #308]	; (8001b24 <HAL_GPIO_Init+0x320>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d013      	beq.n	8001a1a <HAL_GPIO_Init+0x216>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4c      	ldr	r2, [pc, #304]	; (8001b28 <HAL_GPIO_Init+0x324>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d00d      	beq.n	8001a16 <HAL_GPIO_Init+0x212>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4b      	ldr	r2, [pc, #300]	; (8001b2c <HAL_GPIO_Init+0x328>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d007      	beq.n	8001a12 <HAL_GPIO_Init+0x20e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4a      	ldr	r2, [pc, #296]	; (8001b30 <HAL_GPIO_Init+0x32c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d101      	bne.n	8001a0e <HAL_GPIO_Init+0x20a>
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	e00e      	b.n	8001a2c <HAL_GPIO_Init+0x228>
 8001a0e:	2308      	movs	r3, #8
 8001a10:	e00c      	b.n	8001a2c <HAL_GPIO_Init+0x228>
 8001a12:	2306      	movs	r3, #6
 8001a14:	e00a      	b.n	8001a2c <HAL_GPIO_Init+0x228>
 8001a16:	2305      	movs	r3, #5
 8001a18:	e008      	b.n	8001a2c <HAL_GPIO_Init+0x228>
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x228>
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e004      	b.n	8001a2c <HAL_GPIO_Init+0x228>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e002      	b.n	8001a2c <HAL_GPIO_Init+0x228>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_GPIO_Init+0x228>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	f002 0203 	and.w	r2, r2, #3
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	4093      	lsls	r3, r2
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a3c:	4934      	ldr	r1, [pc, #208]	; (8001b10 <HAL_GPIO_Init+0x30c>)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a4a:	4b3a      	ldr	r3, [pc, #232]	; (8001b34 <HAL_GPIO_Init+0x330>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a6e:	4a31      	ldr	r2, [pc, #196]	; (8001b34 <HAL_GPIO_Init+0x330>)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a74:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <HAL_GPIO_Init+0x330>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a98:	4a26      	ldr	r2, [pc, #152]	; (8001b34 <HAL_GPIO_Init+0x330>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a9e:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <HAL_GPIO_Init+0x330>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ac2:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <HAL_GPIO_Init+0x330>)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <HAL_GPIO_Init+0x330>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aec:	4a11      	ldr	r2, [pc, #68]	; (8001b34 <HAL_GPIO_Init+0x330>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3301      	adds	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	2b0f      	cmp	r3, #15
 8001afc:	f67f ae90 	bls.w	8001820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b00:	bf00      	nop
 8001b02:	3724      	adds	r7, #36	; 0x24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40013800 	.word	0x40013800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40020400 	.word	0x40020400
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020c00 	.word	0x40020c00
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40021400 	.word	0x40021400
 8001b2c:	40021800 	.word	0x40021800
 8001b30:	40021c00 	.word	0x40021c00
 8001b34:	40013c00 	.word	0x40013c00

08001b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e001      	b.n	8001b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b84:	e003      	b.n	8001b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	041a      	lsls	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	619a      	str	r2, [r3, #24]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	401a      	ands	r2, r3
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d104      	bne.n	8001bbe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	041a      	lsls	r2, r3, #16
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	619a      	str	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bdc:	695a      	ldr	r2, [r3, #20]
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d006      	beq.n	8001bf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fd0c 	bl	800060c <HAL_GPIO_EXTI_Callback>
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40013c00 	.word	0x40013c00

08001c00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e25b      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d075      	beq.n	8001d0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c1e:	4ba3      	ldr	r3, [pc, #652]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d00c      	beq.n	8001c44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2a:	4ba0      	ldr	r3, [pc, #640]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d112      	bne.n	8001c5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c36:	4b9d      	ldr	r3, [pc, #628]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c42:	d10b      	bne.n	8001c5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	4b99      	ldr	r3, [pc, #612]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d05b      	beq.n	8001d08 <HAL_RCC_OscConfig+0x108>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d157      	bne.n	8001d08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e236      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c64:	d106      	bne.n	8001c74 <HAL_RCC_OscConfig+0x74>
 8001c66:	4b91      	ldr	r3, [pc, #580]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a90      	ldr	r2, [pc, #576]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e01d      	b.n	8001cb0 <HAL_RCC_OscConfig+0xb0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x98>
 8001c7e:	4b8b      	ldr	r3, [pc, #556]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a8a      	ldr	r2, [pc, #552]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b88      	ldr	r3, [pc, #544]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a87      	ldr	r2, [pc, #540]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0xb0>
 8001c98:	4b84      	ldr	r3, [pc, #528]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a83      	ldr	r2, [pc, #524]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b81      	ldr	r3, [pc, #516]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a80      	ldr	r2, [pc, #512]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fc42 	bl	8001540 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fc3e 	bl	8001540 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1fb      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	4b76      	ldr	r3, [pc, #472]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xc0>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fc2e 	bl	8001540 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fc2a 	bl	8001540 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e1e7      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfa:	4b6c      	ldr	r3, [pc, #432]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0xe8>
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d063      	beq.n	8001dde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d16:	4b65      	ldr	r3, [pc, #404]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d22:	4b62      	ldr	r3, [pc, #392]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d11c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d116      	bne.n	8001d68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3a:	4b5c      	ldr	r3, [pc, #368]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <HAL_RCC_OscConfig+0x152>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e1bb      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d52:	4b56      	ldr	r3, [pc, #344]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4952      	ldr	r1, [pc, #328]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	e03a      	b.n	8001dde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d70:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <HAL_RCC_OscConfig+0x2b0>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff fbe3 	bl	8001540 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fbdf 	bl	8001540 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e19c      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d90:	4b46      	ldr	r3, [pc, #280]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b43      	ldr	r3, [pc, #268]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4940      	ldr	r1, [pc, #256]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]
 8001db0:	e015      	b.n	8001dde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db2:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <HAL_RCC_OscConfig+0x2b0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff fbc2 	bl	8001540 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fbbe 	bl	8001540 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e17b      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd2:	4b36      	ldr	r3, [pc, #216]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d030      	beq.n	8001e4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d016      	beq.n	8001e20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df2:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <HAL_RCC_OscConfig+0x2b4>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7ff fba2 	bl	8001540 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e00:	f7ff fb9e 	bl	8001540 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e15b      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x200>
 8001e1e:	e015      	b.n	8001e4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e20:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_RCC_OscConfig+0x2b4>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e26:	f7ff fb8b 	bl	8001540 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fb87 	bl	8001540 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e144      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80a0 	beq.w	8001f9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10f      	bne.n	8001e8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_OscConfig+0x2b8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d121      	bne.n	8001eda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_RCC_OscConfig+0x2b8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_RCC_OscConfig+0x2b8>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fb4d 	bl	8001540 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	e011      	b.n	8001ece <HAL_RCC_OscConfig+0x2ce>
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	42470000 	.word	0x42470000
 8001eb4:	42470e80 	.word	0x42470e80
 8001eb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebc:	f7ff fb40 	bl	8001540 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e0fd      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ece:	4b81      	ldr	r3, [pc, #516]	; (80020d4 <HAL_RCC_OscConfig+0x4d4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d106      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x2f0>
 8001ee2:	4b7d      	ldr	r3, [pc, #500]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee6:	4a7c      	ldr	r2, [pc, #496]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6713      	str	r3, [r2, #112]	; 0x70
 8001eee:	e01c      	b.n	8001f2a <HAL_RCC_OscConfig+0x32a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d10c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x312>
 8001ef8:	4b77      	ldr	r3, [pc, #476]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	4a76      	ldr	r2, [pc, #472]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6713      	str	r3, [r2, #112]	; 0x70
 8001f04:	4b74      	ldr	r3, [pc, #464]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f08:	4a73      	ldr	r2, [pc, #460]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f10:	e00b      	b.n	8001f2a <HAL_RCC_OscConfig+0x32a>
 8001f12:	4b71      	ldr	r3, [pc, #452]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	4a70      	ldr	r2, [pc, #448]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1e:	4b6e      	ldr	r3, [pc, #440]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f22:	4a6d      	ldr	r2, [pc, #436]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d015      	beq.n	8001f5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f32:	f7ff fb05 	bl	8001540 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7ff fb01 	bl	8001540 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0bc      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	4b61      	ldr	r3, [pc, #388]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ee      	beq.n	8001f3a <HAL_RCC_OscConfig+0x33a>
 8001f5c:	e014      	b.n	8001f88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff faef 	bl	8001540 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7ff faeb 	bl	8001540 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0a6      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7c:	4b56      	ldr	r3, [pc, #344]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1ee      	bne.n	8001f66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d105      	bne.n	8001f9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8e:	4b52      	ldr	r3, [pc, #328]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a51      	ldr	r2, [pc, #324]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8001f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8092 	beq.w	80020c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fa4:	4b4c      	ldr	r3, [pc, #304]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d05c      	beq.n	800206a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d141      	bne.n	800203c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb8:	4b48      	ldr	r3, [pc, #288]	; (80020dc <HAL_RCC_OscConfig+0x4dc>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fabf 	bl	8001540 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7ff fabb 	bl	8001540 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e078      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd8:	4b3f      	ldr	r3, [pc, #252]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f0      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69da      	ldr	r2, [r3, #28]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	019b      	lsls	r3, r3, #6
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	041b      	lsls	r3, r3, #16
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	061b      	lsls	r3, r3, #24
 8002008:	4933      	ldr	r1, [pc, #204]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800200e:	4b33      	ldr	r3, [pc, #204]	; (80020dc <HAL_RCC_OscConfig+0x4dc>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7ff fa94 	bl	8001540 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201c:	f7ff fa90 	bl	8001540 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e04d      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x41c>
 800203a:	e045      	b.n	80020c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203c:	4b27      	ldr	r3, [pc, #156]	; (80020dc <HAL_RCC_OscConfig+0x4dc>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7ff fa7d 	bl	8001540 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204a:	f7ff fa79 	bl	8001540 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e036      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205c:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f0      	bne.n	800204a <HAL_RCC_OscConfig+0x44a>
 8002068:	e02e      	b.n	80020c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e029      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_RCC_OscConfig+0x4d8>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	429a      	cmp	r2, r3
 8002088:	d11c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d115      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800209e:	4013      	ands	r3, r2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d10d      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d106      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40007000 	.word	0x40007000
 80020d8:	40023800 	.word	0x40023800
 80020dc:	42470060 	.word	0x42470060

080020e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0cc      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f4:	4b68      	ldr	r3, [pc, #416]	; (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d90c      	bls.n	800211c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b65      	ldr	r3, [pc, #404]	; (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b63      	ldr	r3, [pc, #396]	; (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0b8      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002134:	4b59      	ldr	r3, [pc, #356]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4a58      	ldr	r2, [pc, #352]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800213e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800214c:	4b53      	ldr	r3, [pc, #332]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a52      	ldr	r2, [pc, #328]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002156:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002158:	4b50      	ldr	r3, [pc, #320]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	494d      	ldr	r1, [pc, #308]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d044      	beq.n	8002200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b47      	ldr	r3, [pc, #284]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d119      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e07f      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d003      	beq.n	800219e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800219a:	2b03      	cmp	r3, #3
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219e:	4b3f      	ldr	r3, [pc, #252]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e06f      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ae:	4b3b      	ldr	r3, [pc, #236]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e067      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021be:	4b37      	ldr	r3, [pc, #220]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f023 0203 	bic.w	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4934      	ldr	r1, [pc, #208]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d0:	f7ff f9b6 	bl	8001540 <HAL_GetTick>
 80021d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d8:	f7ff f9b2 	bl	8001540 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e04f      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	4b2b      	ldr	r3, [pc, #172]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 020c 	and.w	r2, r3, #12
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d1eb      	bne.n	80021d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002200:	4b25      	ldr	r3, [pc, #148]	; (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d20c      	bcs.n	8002228 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b22      	ldr	r3, [pc, #136]	; (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b20      	ldr	r3, [pc, #128]	; (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e032      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4916      	ldr	r1, [pc, #88]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	490e      	ldr	r1, [pc, #56]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002266:	f000 f821 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 800226a:	4601      	mov	r1, r0
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	5cd3      	ldrb	r3, [r2, r3]
 800227a:	fa21 f303 	lsr.w	r3, r1, r3
 800227e:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f916 	bl	80014b8 <HAL_InitTick>

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023c00 	.word	0x40023c00
 800229c:	40023800 	.word	0x40023800
 80022a0:	080051bc 	.word	0x080051bc
 80022a4:	20000030 	.word	0x20000030
 80022a8:	20000034 	.word	0x20000034

080022ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	2300      	movs	r3, #0
 80022bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022c2:	4b63      	ldr	r3, [pc, #396]	; (8002450 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d007      	beq.n	80022de <HAL_RCC_GetSysClockFreq+0x32>
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d008      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x38>
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f040 80b4 	bne.w	8002440 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022d8:	4b5e      	ldr	r3, [pc, #376]	; (8002454 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80022da:	60bb      	str	r3, [r7, #8]
       break;
 80022dc:	e0b3      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022de:	4b5e      	ldr	r3, [pc, #376]	; (8002458 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80022e0:	60bb      	str	r3, [r7, #8]
      break;
 80022e2:	e0b0      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022e4:	4b5a      	ldr	r3, [pc, #360]	; (8002450 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ee:	4b58      	ldr	r3, [pc, #352]	; (8002450 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d04a      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022fa:	4b55      	ldr	r3, [pc, #340]	; (8002450 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	099b      	lsrs	r3, r3, #6
 8002300:	f04f 0400 	mov.w	r4, #0
 8002304:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	ea03 0501 	and.w	r5, r3, r1
 8002310:	ea04 0602 	and.w	r6, r4, r2
 8002314:	4629      	mov	r1, r5
 8002316:	4632      	mov	r2, r6
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	f04f 0400 	mov.w	r4, #0
 8002320:	0154      	lsls	r4, r2, #5
 8002322:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002326:	014b      	lsls	r3, r1, #5
 8002328:	4619      	mov	r1, r3
 800232a:	4622      	mov	r2, r4
 800232c:	1b49      	subs	r1, r1, r5
 800232e:	eb62 0206 	sbc.w	r2, r2, r6
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	f04f 0400 	mov.w	r4, #0
 800233a:	0194      	lsls	r4, r2, #6
 800233c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002340:	018b      	lsls	r3, r1, #6
 8002342:	1a5b      	subs	r3, r3, r1
 8002344:	eb64 0402 	sbc.w	r4, r4, r2
 8002348:	f04f 0100 	mov.w	r1, #0
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	00e2      	lsls	r2, r4, #3
 8002352:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002356:	00d9      	lsls	r1, r3, #3
 8002358:	460b      	mov	r3, r1
 800235a:	4614      	mov	r4, r2
 800235c:	195b      	adds	r3, r3, r5
 800235e:	eb44 0406 	adc.w	r4, r4, r6
 8002362:	f04f 0100 	mov.w	r1, #0
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	0262      	lsls	r2, r4, #9
 800236c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002370:	0259      	lsls	r1, r3, #9
 8002372:	460b      	mov	r3, r1
 8002374:	4614      	mov	r4, r2
 8002376:	4618      	mov	r0, r3
 8002378:	4621      	mov	r1, r4
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f04f 0400 	mov.w	r4, #0
 8002380:	461a      	mov	r2, r3
 8002382:	4623      	mov	r3, r4
 8002384:	f7fd ff7c 	bl	8000280 <__aeabi_uldivmod>
 8002388:	4603      	mov	r3, r0
 800238a:	460c      	mov	r4, r1
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	e049      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002390:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	f04f 0400 	mov.w	r4, #0
 800239a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	ea03 0501 	and.w	r5, r3, r1
 80023a6:	ea04 0602 	and.w	r6, r4, r2
 80023aa:	4629      	mov	r1, r5
 80023ac:	4632      	mov	r2, r6
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	f04f 0400 	mov.w	r4, #0
 80023b6:	0154      	lsls	r4, r2, #5
 80023b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023bc:	014b      	lsls	r3, r1, #5
 80023be:	4619      	mov	r1, r3
 80023c0:	4622      	mov	r2, r4
 80023c2:	1b49      	subs	r1, r1, r5
 80023c4:	eb62 0206 	sbc.w	r2, r2, r6
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	f04f 0400 	mov.w	r4, #0
 80023d0:	0194      	lsls	r4, r2, #6
 80023d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023d6:	018b      	lsls	r3, r1, #6
 80023d8:	1a5b      	subs	r3, r3, r1
 80023da:	eb64 0402 	sbc.w	r4, r4, r2
 80023de:	f04f 0100 	mov.w	r1, #0
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	00e2      	lsls	r2, r4, #3
 80023e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023ec:	00d9      	lsls	r1, r3, #3
 80023ee:	460b      	mov	r3, r1
 80023f0:	4614      	mov	r4, r2
 80023f2:	195b      	adds	r3, r3, r5
 80023f4:	eb44 0406 	adc.w	r4, r4, r6
 80023f8:	f04f 0100 	mov.w	r1, #0
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	02a2      	lsls	r2, r4, #10
 8002402:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002406:	0299      	lsls	r1, r3, #10
 8002408:	460b      	mov	r3, r1
 800240a:	4614      	mov	r4, r2
 800240c:	4618      	mov	r0, r3
 800240e:	4621      	mov	r1, r4
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f04f 0400 	mov.w	r4, #0
 8002416:	461a      	mov	r2, r3
 8002418:	4623      	mov	r3, r4
 800241a:	f7fd ff31 	bl	8000280 <__aeabi_uldivmod>
 800241e:	4603      	mov	r3, r0
 8002420:	460c      	mov	r4, r1
 8002422:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002424:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	3301      	adds	r3, #1
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	fbb2 f3f3 	udiv	r3, r2, r3
 800243c:	60bb      	str	r3, [r7, #8]
      break;
 800243e:	e002      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002442:	60bb      	str	r3, [r7, #8]
      break;
 8002444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002446:	68bb      	ldr	r3, [r7, #8]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002450:	40023800 	.word	0x40023800
 8002454:	00f42400 	.word	0x00f42400
 8002458:	007a1200 	.word	0x007a1200

0800245c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <HAL_RCC_GetHCLKFreq+0x14>)
 8002462:	681b      	ldr	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000030 	.word	0x20000030

08002474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002478:	f7ff fff0 	bl	800245c <HAL_RCC_GetHCLKFreq>
 800247c:	4601      	mov	r1, r0
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	0a9b      	lsrs	r3, r3, #10
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4a03      	ldr	r2, [pc, #12]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40023800 	.word	0x40023800
 8002498:	080051cc 	.word	0x080051cc

0800249c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024a0:	f7ff ffdc 	bl	800245c <HAL_RCC_GetHCLKFreq>
 80024a4:	4601      	mov	r1, r0
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	0b5b      	lsrs	r3, r3, #13
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	4a03      	ldr	r2, [pc, #12]	; (80024c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
 80024b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800
 80024c0:	080051cc 	.word	0x080051cc

080024c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e01d      	b.n	8002512 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe fdbc 	bl	8001068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3304      	adds	r3, #4
 8002500:	4619      	mov	r1, r3
 8002502:	4610      	mov	r0, r2
 8002504:	f000 fb4e 	bl	8002ba4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800251a:	b480      	push	{r7}
 800251c:	b085      	sub	sp, #20
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b06      	cmp	r3, #6
 8002542:	d007      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e01d      	b.n	80025b0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d106      	bne.n	800258e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f815 	bl	80025b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2202      	movs	r2, #2
 8002592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3304      	adds	r3, #4
 800259e:	4619      	mov	r1, r3
 80025a0:	4610      	mov	r0, r2
 80025a2:	f000 faff 	bl	8002ba4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2201      	movs	r2, #1
 80025dc:	6839      	ldr	r1, [r7, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fdca 	bl	8003178 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a15      	ldr	r2, [pc, #84]	; (8002640 <HAL_TIM_PWM_Start+0x74>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d004      	beq.n	80025f8 <HAL_TIM_PWM_Start+0x2c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a14      	ldr	r2, [pc, #80]	; (8002644 <HAL_TIM_PWM_Start+0x78>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d101      	bne.n	80025fc <HAL_TIM_PWM_Start+0x30>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <HAL_TIM_PWM_Start+0x32>
 80025fc:	2300      	movs	r3, #0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002610:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b06      	cmp	r3, #6
 8002622:	d007      	beq.n	8002634 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40010000 	.word	0x40010000
 8002644:	40010400 	.word	0x40010400

08002648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b02      	cmp	r3, #2
 800265c:	d122      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b02      	cmp	r3, #2
 800266a:	d11b      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0202 	mvn.w	r2, #2
 8002674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fa6b 	bl	8002b66 <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fa5d 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fa6e 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d122      	bne.n	80026f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d11b      	bne.n	80026f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0204 	mvn.w	r2, #4
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2202      	movs	r2, #2
 80026ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fa41 	bl	8002b66 <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fa33 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fa44 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b08      	cmp	r3, #8
 8002704:	d122      	bne.n	800274c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b08      	cmp	r3, #8
 8002712:	d11b      	bne.n	800274c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0208 	mvn.w	r2, #8
 800271c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2204      	movs	r2, #4
 8002722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fa17 	bl	8002b66 <HAL_TIM_IC_CaptureCallback>
 8002738:	e005      	b.n	8002746 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fa09 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 fa1a 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b10      	cmp	r3, #16
 8002758:	d122      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b10      	cmp	r3, #16
 8002766:	d11b      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0210 	mvn.w	r2, #16
 8002770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2208      	movs	r2, #8
 8002776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f9ed 	bl	8002b66 <HAL_TIM_IC_CaptureCallback>
 800278c:	e005      	b.n	800279a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f9df 	bl	8002b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f9f0 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d107      	bne.n	80027cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0201 	mvn.w	r2, #1
 80027c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe f886 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d6:	2b80      	cmp	r3, #128	; 0x80
 80027d8:	d10e      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e4:	2b80      	cmp	r3, #128	; 0x80
 80027e6:	d107      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fd6c 	bl	80032d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d10e      	bne.n	8002824 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002810:	2b40      	cmp	r3, #64	; 0x40
 8002812:	d107      	bne.n	8002824 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800281c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f9b5 	bl	8002b8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b20      	cmp	r3, #32
 8002830:	d10e      	bne.n	8002850 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b20      	cmp	r3, #32
 800283e:	d107      	bne.n	8002850 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0220 	mvn.w	r2, #32
 8002848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fd36 	bl	80032bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800286e:	2302      	movs	r3, #2
 8002870:	e0b4      	b.n	80029dc <HAL_TIM_PWM_ConfigChannel+0x184>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2202      	movs	r2, #2
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b0c      	cmp	r3, #12
 8002886:	f200 809f 	bhi.w	80029c8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800288a:	a201      	add	r2, pc, #4	; (adr r2, 8002890 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800288c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002890:	080028c5 	.word	0x080028c5
 8002894:	080029c9 	.word	0x080029c9
 8002898:	080029c9 	.word	0x080029c9
 800289c:	080029c9 	.word	0x080029c9
 80028a0:	08002905 	.word	0x08002905
 80028a4:	080029c9 	.word	0x080029c9
 80028a8:	080029c9 	.word	0x080029c9
 80028ac:	080029c9 	.word	0x080029c9
 80028b0:	08002947 	.word	0x08002947
 80028b4:	080029c9 	.word	0x080029c9
 80028b8:	080029c9 	.word	0x080029c9
 80028bc:	080029c9 	.word	0x080029c9
 80028c0:	08002987 	.word	0x08002987
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fa0a 	bl	8002ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0208 	orr.w	r2, r2, #8
 80028de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0204 	bic.w	r2, r2, #4
 80028ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6999      	ldr	r1, [r3, #24]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	619a      	str	r2, [r3, #24]
      break;
 8002902:	e062      	b.n	80029ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	4618      	mov	r0, r3
 800290c:	f000 fa5a 	bl	8002dc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800291e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6999      	ldr	r1, [r3, #24]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	021a      	lsls	r2, r3, #8
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	619a      	str	r2, [r3, #24]
      break;
 8002944:	e041      	b.n	80029ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	4618      	mov	r0, r3
 800294e:	f000 faaf 	bl	8002eb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69da      	ldr	r2, [r3, #28]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0208 	orr.w	r2, r2, #8
 8002960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0204 	bic.w	r2, r2, #4
 8002970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69d9      	ldr	r1, [r3, #28]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	61da      	str	r2, [r3, #28]
      break;
 8002984:	e021      	b.n	80029ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fb03 	bl	8002f98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	69da      	ldr	r2, [r3, #28]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69da      	ldr	r2, [r3, #28]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	69d9      	ldr	r1, [r3, #28]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	021a      	lsls	r2, r3, #8
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	61da      	str	r2, [r3, #28]
      break;
 80029c6:	e000      	b.n	80029ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80029c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_TIM_ConfigClockSource+0x18>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e0a6      	b.n	8002b4a <HAL_TIM_ConfigClockSource+0x166>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b40      	cmp	r3, #64	; 0x40
 8002a32:	d067      	beq.n	8002b04 <HAL_TIM_ConfigClockSource+0x120>
 8002a34:	2b40      	cmp	r3, #64	; 0x40
 8002a36:	d80b      	bhi.n	8002a50 <HAL_TIM_ConfigClockSource+0x6c>
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d073      	beq.n	8002b24 <HAL_TIM_ConfigClockSource+0x140>
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	d802      	bhi.n	8002a46 <HAL_TIM_ConfigClockSource+0x62>
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d06f      	beq.n	8002b24 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002a44:	e078      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d06c      	beq.n	8002b24 <HAL_TIM_ConfigClockSource+0x140>
 8002a4a:	2b30      	cmp	r3, #48	; 0x30
 8002a4c:	d06a      	beq.n	8002b24 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002a4e:	e073      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a50:	2b70      	cmp	r3, #112	; 0x70
 8002a52:	d00d      	beq.n	8002a70 <HAL_TIM_ConfigClockSource+0x8c>
 8002a54:	2b70      	cmp	r3, #112	; 0x70
 8002a56:	d804      	bhi.n	8002a62 <HAL_TIM_ConfigClockSource+0x7e>
 8002a58:	2b50      	cmp	r3, #80	; 0x50
 8002a5a:	d033      	beq.n	8002ac4 <HAL_TIM_ConfigClockSource+0xe0>
 8002a5c:	2b60      	cmp	r3, #96	; 0x60
 8002a5e:	d041      	beq.n	8002ae4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002a60:	e06a      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a66:	d066      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x152>
 8002a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6c:	d017      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002a6e:	e063      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	6899      	ldr	r1, [r3, #8]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f000 fb5a 	bl	8003138 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	609a      	str	r2, [r3, #8]
      break;
 8002a9c:	e04c      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6899      	ldr	r1, [r3, #8]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f000 fb43 	bl	8003138 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ac0:	609a      	str	r2, [r3, #8]
      break;
 8002ac2:	e039      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f000 fab7 	bl	8003044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2150      	movs	r1, #80	; 0x50
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fb10 	bl	8003102 <TIM_ITRx_SetConfig>
      break;
 8002ae2:	e029      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	461a      	mov	r2, r3
 8002af2:	f000 fad6 	bl	80030a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2160      	movs	r1, #96	; 0x60
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fb00 	bl	8003102 <TIM_ITRx_SetConfig>
      break;
 8002b02:	e019      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	6859      	ldr	r1, [r3, #4]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	461a      	mov	r2, r3
 8002b12:	f000 fa97 	bl	8003044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2140      	movs	r1, #64	; 0x40
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 faf0 	bl	8003102 <TIM_ITRx_SetConfig>
      break;
 8002b22:	e009      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f000 fae7 	bl	8003102 <TIM_ITRx_SetConfig>
      break;
 8002b34:	e000      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002b36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a40      	ldr	r2, [pc, #256]	; (8002cb8 <TIM_Base_SetConfig+0x114>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d013      	beq.n	8002be4 <TIM_Base_SetConfig+0x40>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc2:	d00f      	beq.n	8002be4 <TIM_Base_SetConfig+0x40>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a3d      	ldr	r2, [pc, #244]	; (8002cbc <TIM_Base_SetConfig+0x118>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00b      	beq.n	8002be4 <TIM_Base_SetConfig+0x40>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a3c      	ldr	r2, [pc, #240]	; (8002cc0 <TIM_Base_SetConfig+0x11c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d007      	beq.n	8002be4 <TIM_Base_SetConfig+0x40>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a3b      	ldr	r2, [pc, #236]	; (8002cc4 <TIM_Base_SetConfig+0x120>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d003      	beq.n	8002be4 <TIM_Base_SetConfig+0x40>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a3a      	ldr	r2, [pc, #232]	; (8002cc8 <TIM_Base_SetConfig+0x124>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d108      	bne.n	8002bf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a2f      	ldr	r2, [pc, #188]	; (8002cb8 <TIM_Base_SetConfig+0x114>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d02b      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c04:	d027      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a2c      	ldr	r2, [pc, #176]	; (8002cbc <TIM_Base_SetConfig+0x118>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d023      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a2b      	ldr	r2, [pc, #172]	; (8002cc0 <TIM_Base_SetConfig+0x11c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d01f      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a2a      	ldr	r2, [pc, #168]	; (8002cc4 <TIM_Base_SetConfig+0x120>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d01b      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a29      	ldr	r2, [pc, #164]	; (8002cc8 <TIM_Base_SetConfig+0x124>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d017      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <TIM_Base_SetConfig+0x128>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d013      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <TIM_Base_SetConfig+0x12c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00f      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a26      	ldr	r2, [pc, #152]	; (8002cd4 <TIM_Base_SetConfig+0x130>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00b      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a25      	ldr	r2, [pc, #148]	; (8002cd8 <TIM_Base_SetConfig+0x134>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a24      	ldr	r2, [pc, #144]	; (8002cdc <TIM_Base_SetConfig+0x138>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_Base_SetConfig+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a23      	ldr	r2, [pc, #140]	; (8002ce0 <TIM_Base_SetConfig+0x13c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d108      	bne.n	8002c68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <TIM_Base_SetConfig+0x114>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d003      	beq.n	8002c9c <TIM_Base_SetConfig+0xf8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0c      	ldr	r2, [pc, #48]	; (8002cc8 <TIM_Base_SetConfig+0x124>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d103      	bne.n	8002ca4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	615a      	str	r2, [r3, #20]
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40010000 	.word	0x40010000
 8002cbc:	40000400 	.word	0x40000400
 8002cc0:	40000800 	.word	0x40000800
 8002cc4:	40000c00 	.word	0x40000c00
 8002cc8:	40010400 	.word	0x40010400
 8002ccc:	40014000 	.word	0x40014000
 8002cd0:	40014400 	.word	0x40014400
 8002cd4:	40014800 	.word	0x40014800
 8002cd8:	40001800 	.word	0x40001800
 8002cdc:	40001c00 	.word	0x40001c00
 8002ce0:	40002000 	.word	0x40002000

08002ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	f023 0201 	bic.w	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0303 	bic.w	r3, r3, #3
 8002d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f023 0302 	bic.w	r3, r3, #2
 8002d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a20      	ldr	r2, [pc, #128]	; (8002dbc <TIM_OC1_SetConfig+0xd8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d003      	beq.n	8002d48 <TIM_OC1_SetConfig+0x64>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a1f      	ldr	r2, [pc, #124]	; (8002dc0 <TIM_OC1_SetConfig+0xdc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d10c      	bne.n	8002d62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f023 0308 	bic.w	r3, r3, #8
 8002d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f023 0304 	bic.w	r3, r3, #4
 8002d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a15      	ldr	r2, [pc, #84]	; (8002dbc <TIM_OC1_SetConfig+0xd8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d003      	beq.n	8002d72 <TIM_OC1_SetConfig+0x8e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a14      	ldr	r2, [pc, #80]	; (8002dc0 <TIM_OC1_SetConfig+0xdc>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d111      	bne.n	8002d96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	621a      	str	r2, [r3, #32]
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	40010000 	.word	0x40010000
 8002dc0:	40010400 	.word	0x40010400

08002dc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	f023 0210 	bic.w	r2, r3, #16
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f023 0320 	bic.w	r3, r3, #32
 8002e0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a22      	ldr	r2, [pc, #136]	; (8002ea8 <TIM_OC2_SetConfig+0xe4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d003      	beq.n	8002e2c <TIM_OC2_SetConfig+0x68>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a21      	ldr	r2, [pc, #132]	; (8002eac <TIM_OC2_SetConfig+0xe8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d10d      	bne.n	8002e48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a17      	ldr	r2, [pc, #92]	; (8002ea8 <TIM_OC2_SetConfig+0xe4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d003      	beq.n	8002e58 <TIM_OC2_SetConfig+0x94>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a16      	ldr	r2, [pc, #88]	; (8002eac <TIM_OC2_SetConfig+0xe8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d113      	bne.n	8002e80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	621a      	str	r2, [r3, #32]
}
 8002e9a:	bf00      	nop
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	40010400 	.word	0x40010400

08002eb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0303 	bic.w	r3, r3, #3
 8002ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a21      	ldr	r2, [pc, #132]	; (8002f90 <TIM_OC3_SetConfig+0xe0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d003      	beq.n	8002f16 <TIM_OC3_SetConfig+0x66>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a20      	ldr	r2, [pc, #128]	; (8002f94 <TIM_OC3_SetConfig+0xe4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d10d      	bne.n	8002f32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a16      	ldr	r2, [pc, #88]	; (8002f90 <TIM_OC3_SetConfig+0xe0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d003      	beq.n	8002f42 <TIM_OC3_SetConfig+0x92>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a15      	ldr	r2, [pc, #84]	; (8002f94 <TIM_OC3_SetConfig+0xe4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d113      	bne.n	8002f6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	621a      	str	r2, [r3, #32]
}
 8002f84:	bf00      	nop
 8002f86:	371c      	adds	r7, #28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	40010000 	.word	0x40010000
 8002f94:	40010400 	.word	0x40010400

08002f98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	031b      	lsls	r3, r3, #12
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a12      	ldr	r2, [pc, #72]	; (800303c <TIM_OC4_SetConfig+0xa4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_OC4_SetConfig+0x68>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a11      	ldr	r2, [pc, #68]	; (8003040 <TIM_OC4_SetConfig+0xa8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d109      	bne.n	8003014 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003006:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	019b      	lsls	r3, r3, #6
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	621a      	str	r2, [r3, #32]
}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40010400 	.word	0x40010400

08003044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f023 0201 	bic.w	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800306e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f023 030a 	bic.w	r3, r3, #10
 8003080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	621a      	str	r2, [r3, #32]
}
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b087      	sub	sp, #28
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f023 0210 	bic.w	r2, r3, #16
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	031b      	lsls	r3, r3, #12
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	621a      	str	r2, [r3, #32]
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003102:	b480      	push	{r7}
 8003104:	b085      	sub	sp, #20
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003118:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	f043 0307 	orr.w	r3, r3, #7
 8003124:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	609a      	str	r2, [r3, #8]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003152:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	021a      	lsls	r2, r3, #8
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	431a      	orrs	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4313      	orrs	r3, r2
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	609a      	str	r2, [r3, #8]
}
 800316c:	bf00      	nop
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	2201      	movs	r2, #1
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a1a      	ldr	r2, [r3, #32]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	43db      	mvns	r3, r3
 800319a:	401a      	ands	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a1a      	ldr	r2, [r3, #32]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	fa01 f303 	lsl.w	r3, r1, r3
 80031b0:	431a      	orrs	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	621a      	str	r2, [r3, #32]
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031d8:	2302      	movs	r3, #2
 80031da:	e05a      	b.n	8003292 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003202:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a21      	ldr	r2, [pc, #132]	; (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d022      	beq.n	8003266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003228:	d01d      	beq.n	8003266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1d      	ldr	r2, [pc, #116]	; (80032a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d018      	beq.n	8003266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a1b      	ldr	r2, [pc, #108]	; (80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1a      	ldr	r2, [pc, #104]	; (80032ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00e      	beq.n	8003266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d009      	beq.n	8003266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d004      	beq.n	8003266 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d10c      	bne.n	8003280 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800326c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	4313      	orrs	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40010000 	.word	0x40010000
 80032a4:	40000400 	.word	0x40000400
 80032a8:	40000800 	.word	0x40000800
 80032ac:	40000c00 	.word	0x40000c00
 80032b0:	40010400 	.word	0x40010400
 80032b4:	40014000 	.word	0x40014000
 80032b8:	40001800 	.word	0x40001800

080032bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e03f      	b.n	8003376 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fd ff4c 	bl	80011a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2224      	movs	r2, #36	; 0x24
 8003314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003326:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 faf9 	bl	8003920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800333c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695a      	ldr	r2, [r3, #20]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800334c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800335c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800337e:	b480      	push	{r7}
 8003380:	b085      	sub	sp, #20
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	4613      	mov	r3, r2
 800338a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b20      	cmp	r3, #32
 8003396:	d130      	bne.n	80033fa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_UART_Transmit_IT+0x26>
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e029      	b.n	80033fc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_UART_Transmit_IT+0x38>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e022      	b.n	80033fc <HAL_UART_Transmit_IT+0x7e>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	88fa      	ldrh	r2, [r7, #6]
 80033ce:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2221      	movs	r2, #33	; 0x21
 80033da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033f4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	4613      	mov	r3, r2
 8003414:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b20      	cmp	r3, #32
 8003420:	d140      	bne.n	80034a4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_UART_Receive_IT+0x26>
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e039      	b.n	80034a6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_UART_Receive_IT+0x38>
 800343c:	2302      	movs	r3, #2
 800343e:	e032      	b.n	80034a6 <HAL_UART_Receive_IT+0x9e>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	88fa      	ldrh	r2, [r7, #6]
 8003452:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	88fa      	ldrh	r2, [r7, #6]
 8003458:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2222      	movs	r2, #34	; 0x22
 8003464:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800347e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0220 	orr.w	r2, r2, #32
 800349e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e000      	b.n	80034a6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80034a4:	2302      	movs	r3, #2
  }
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10d      	bne.n	8003506 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_UART_IRQHandler+0x52>
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f98c 	bl	800381c <UART_Receive_IT>
      return;
 8003504:	e0d1      	b.n	80036aa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80b0 	beq.w	800366e <HAL_UART_IRQHandler+0x1ba>
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d105      	bne.n	8003524 <HAL_UART_IRQHandler+0x70>
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 80a5 	beq.w	800366e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_UART_IRQHandler+0x90>
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353c:	f043 0201 	orr.w	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_UART_IRQHandler+0xb0>
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355c:	f043 0202 	orr.w	r2, r3, #2
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_UART_IRQHandler+0xd0>
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357c:	f043 0204 	orr.w	r2, r3, #4
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00f      	beq.n	80035ae <HAL_UART_IRQHandler+0xfa>
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <HAL_UART_IRQHandler+0xee>
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a6:	f043 0208 	orr.w	r2, r3, #8
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d078      	beq.n	80036a8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <HAL_UART_IRQHandler+0x11c>
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f926 	bl	800381c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	bf0c      	ite	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	2300      	movne	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d102      	bne.n	80035f8 <HAL_UART_IRQHandler+0x144>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d031      	beq.n	800365c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f86f 	bl	80036dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003608:	2b40      	cmp	r3, #64	; 0x40
 800360a:	d123      	bne.n	8003654 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800361a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003620:	2b00      	cmp	r3, #0
 8003622:	d013      	beq.n	800364c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003628:	4a21      	ldr	r2, [pc, #132]	; (80036b0 <HAL_UART_IRQHandler+0x1fc>)
 800362a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe f8c4 	bl	80017be <HAL_DMA_Abort_IT>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d016      	beq.n	800366a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003646:	4610      	mov	r0, r2
 8003648:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364a:	e00e      	b.n	800366a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f83b 	bl	80036c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003652:	e00a      	b.n	800366a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f837 	bl	80036c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365a:	e006      	b.n	800366a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f833 	bl	80036c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003668:	e01e      	b.n	80036a8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800366a:	bf00      	nop
    return;
 800366c:	e01c      	b.n	80036a8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_UART_IRQHandler+0x1d6>
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f85c 	bl	8003740 <UART_Transmit_IT>
    return;
 8003688:	e00f      	b.n	80036aa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_UART_IRQHandler+0x1f6>
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8a4 	bl	80037ec <UART_EndTransmit_IT>
    return;
 80036a4:	bf00      	nop
 80036a6:	e000      	b.n	80036aa <HAL_UART_IRQHandler+0x1f6>
    return;
 80036a8:	bf00      	nop
  }
}
 80036aa:	3720      	adds	r7, #32
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	08003719 	.word	0x08003719

080036b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f7ff ffc8 	bl	80036c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b21      	cmp	r3, #33	; 0x21
 8003752:	d144      	bne.n	80037de <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375c:	d11a      	bne.n	8003794 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003772:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d105      	bne.n	8003788 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	1c9a      	adds	r2, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	621a      	str	r2, [r3, #32]
 8003786:	e00e      	b.n	80037a6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	621a      	str	r2, [r3, #32]
 8003792:	e008      	b.n	80037a6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	1c59      	adds	r1, r3, #1
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6211      	str	r1, [r2, #32]
 800379e:	781a      	ldrb	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	4619      	mov	r1, r3
 80037b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10f      	bne.n	80037da <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e000      	b.n	80037e0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80037de:	2302      	movs	r3, #2
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003802:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ff51 	bl	80036b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b22      	cmp	r3, #34	; 0x22
 800382e:	d171      	bne.n	8003914 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003838:	d123      	bne.n	8003882 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10e      	bne.n	8003866 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	b29b      	uxth	r3, r3
 8003850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	1c9a      	adds	r2, r3, #2
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	629a      	str	r2, [r3, #40]	; 0x28
 8003864:	e029      	b.n	80038ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	b29b      	uxth	r3, r3
 800386e:	b2db      	uxtb	r3, r3
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	629a      	str	r2, [r3, #40]	; 0x28
 8003880:	e01b      	b.n	80038ba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10a      	bne.n	80038a0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6858      	ldr	r0, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	1c59      	adds	r1, r3, #1
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6291      	str	r1, [r2, #40]	; 0x28
 800389a:	b2c2      	uxtb	r2, r0
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	e00c      	b.n	80038ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	1c58      	adds	r0, r3, #1
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	6288      	str	r0, [r1, #40]	; 0x28
 80038b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4619      	mov	r1, r3
 80038c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d120      	bne.n	8003910 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0220 	bic.w	r2, r2, #32
 80038dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0201 	bic.w	r2, r2, #1
 80038fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fc fffe 	bl	8000908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e002      	b.n	8003916 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	e000      	b.n	8003916 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003914:	2302      	movs	r3, #2
  }
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003924:	b085      	sub	sp, #20
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	4313      	orrs	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003962:	f023 030c 	bic.w	r3, r3, #12
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	68f9      	ldr	r1, [r7, #12]
 800396c:	430b      	orrs	r3, r1
 800396e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398e:	f040 818b 	bne.w	8003ca8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4ac1      	ldr	r2, [pc, #772]	; (8003c9c <UART_SetConfig+0x37c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d005      	beq.n	80039a8 <UART_SetConfig+0x88>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4abf      	ldr	r2, [pc, #764]	; (8003ca0 <UART_SetConfig+0x380>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	f040 80bd 	bne.w	8003b22 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039a8:	f7fe fd78 	bl	800249c <HAL_RCC_GetPCLK2Freq>
 80039ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	461d      	mov	r5, r3
 80039b2:	f04f 0600 	mov.w	r6, #0
 80039b6:	46a8      	mov	r8, r5
 80039b8:	46b1      	mov	r9, r6
 80039ba:	eb18 0308 	adds.w	r3, r8, r8
 80039be:	eb49 0409 	adc.w	r4, r9, r9
 80039c2:	4698      	mov	r8, r3
 80039c4:	46a1      	mov	r9, r4
 80039c6:	eb18 0805 	adds.w	r8, r8, r5
 80039ca:	eb49 0906 	adc.w	r9, r9, r6
 80039ce:	f04f 0100 	mov.w	r1, #0
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039e2:	4688      	mov	r8, r1
 80039e4:	4691      	mov	r9, r2
 80039e6:	eb18 0005 	adds.w	r0, r8, r5
 80039ea:	eb49 0106 	adc.w	r1, r9, r6
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	461d      	mov	r5, r3
 80039f4:	f04f 0600 	mov.w	r6, #0
 80039f8:	196b      	adds	r3, r5, r5
 80039fa:	eb46 0406 	adc.w	r4, r6, r6
 80039fe:	461a      	mov	r2, r3
 8003a00:	4623      	mov	r3, r4
 8003a02:	f7fc fc3d 	bl	8000280 <__aeabi_uldivmod>
 8003a06:	4603      	mov	r3, r0
 8003a08:	460c      	mov	r4, r1
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4ba5      	ldr	r3, [pc, #660]	; (8003ca4 <UART_SetConfig+0x384>)
 8003a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	461d      	mov	r5, r3
 8003a1c:	f04f 0600 	mov.w	r6, #0
 8003a20:	46a9      	mov	r9, r5
 8003a22:	46b2      	mov	sl, r6
 8003a24:	eb19 0309 	adds.w	r3, r9, r9
 8003a28:	eb4a 040a 	adc.w	r4, sl, sl
 8003a2c:	4699      	mov	r9, r3
 8003a2e:	46a2      	mov	sl, r4
 8003a30:	eb19 0905 	adds.w	r9, r9, r5
 8003a34:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a38:	f04f 0100 	mov.w	r1, #0
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a4c:	4689      	mov	r9, r1
 8003a4e:	4692      	mov	sl, r2
 8003a50:	eb19 0005 	adds.w	r0, r9, r5
 8003a54:	eb4a 0106 	adc.w	r1, sl, r6
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	461d      	mov	r5, r3
 8003a5e:	f04f 0600 	mov.w	r6, #0
 8003a62:	196b      	adds	r3, r5, r5
 8003a64:	eb46 0406 	adc.w	r4, r6, r6
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4623      	mov	r3, r4
 8003a6c:	f7fc fc08 	bl	8000280 <__aeabi_uldivmod>
 8003a70:	4603      	mov	r3, r0
 8003a72:	460c      	mov	r4, r1
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b8b      	ldr	r3, [pc, #556]	; (8003ca4 <UART_SetConfig+0x384>)
 8003a78:	fba3 1302 	umull	r1, r3, r3, r2
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	2164      	movs	r1, #100	; 0x64
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	3332      	adds	r3, #50	; 0x32
 8003a8a:	4a86      	ldr	r2, [pc, #536]	; (8003ca4 <UART_SetConfig+0x384>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a98:	4498      	add	r8, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	461d      	mov	r5, r3
 8003a9e:	f04f 0600 	mov.w	r6, #0
 8003aa2:	46a9      	mov	r9, r5
 8003aa4:	46b2      	mov	sl, r6
 8003aa6:	eb19 0309 	adds.w	r3, r9, r9
 8003aaa:	eb4a 040a 	adc.w	r4, sl, sl
 8003aae:	4699      	mov	r9, r3
 8003ab0:	46a2      	mov	sl, r4
 8003ab2:	eb19 0905 	adds.w	r9, r9, r5
 8003ab6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003aba:	f04f 0100 	mov.w	r1, #0
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ac6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003aca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ace:	4689      	mov	r9, r1
 8003ad0:	4692      	mov	sl, r2
 8003ad2:	eb19 0005 	adds.w	r0, r9, r5
 8003ad6:	eb4a 0106 	adc.w	r1, sl, r6
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	461d      	mov	r5, r3
 8003ae0:	f04f 0600 	mov.w	r6, #0
 8003ae4:	196b      	adds	r3, r5, r5
 8003ae6:	eb46 0406 	adc.w	r4, r6, r6
 8003aea:	461a      	mov	r2, r3
 8003aec:	4623      	mov	r3, r4
 8003aee:	f7fc fbc7 	bl	8000280 <__aeabi_uldivmod>
 8003af2:	4603      	mov	r3, r0
 8003af4:	460c      	mov	r4, r1
 8003af6:	461a      	mov	r2, r3
 8003af8:	4b6a      	ldr	r3, [pc, #424]	; (8003ca4 <UART_SetConfig+0x384>)
 8003afa:	fba3 1302 	umull	r1, r3, r3, r2
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	2164      	movs	r1, #100	; 0x64
 8003b02:	fb01 f303 	mul.w	r3, r1, r3
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	3332      	adds	r3, #50	; 0x32
 8003b0c:	4a65      	ldr	r2, [pc, #404]	; (8003ca4 <UART_SetConfig+0x384>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	f003 0207 	and.w	r2, r3, #7
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4442      	add	r2, r8
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	e26f      	b.n	8004002 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b22:	f7fe fca7 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8003b26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	461d      	mov	r5, r3
 8003b2c:	f04f 0600 	mov.w	r6, #0
 8003b30:	46a8      	mov	r8, r5
 8003b32:	46b1      	mov	r9, r6
 8003b34:	eb18 0308 	adds.w	r3, r8, r8
 8003b38:	eb49 0409 	adc.w	r4, r9, r9
 8003b3c:	4698      	mov	r8, r3
 8003b3e:	46a1      	mov	r9, r4
 8003b40:	eb18 0805 	adds.w	r8, r8, r5
 8003b44:	eb49 0906 	adc.w	r9, r9, r6
 8003b48:	f04f 0100 	mov.w	r1, #0
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b5c:	4688      	mov	r8, r1
 8003b5e:	4691      	mov	r9, r2
 8003b60:	eb18 0005 	adds.w	r0, r8, r5
 8003b64:	eb49 0106 	adc.w	r1, r9, r6
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	461d      	mov	r5, r3
 8003b6e:	f04f 0600 	mov.w	r6, #0
 8003b72:	196b      	adds	r3, r5, r5
 8003b74:	eb46 0406 	adc.w	r4, r6, r6
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	f7fc fb80 	bl	8000280 <__aeabi_uldivmod>
 8003b80:	4603      	mov	r3, r0
 8003b82:	460c      	mov	r4, r1
 8003b84:	461a      	mov	r2, r3
 8003b86:	4b47      	ldr	r3, [pc, #284]	; (8003ca4 <UART_SetConfig+0x384>)
 8003b88:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	461d      	mov	r5, r3
 8003b96:	f04f 0600 	mov.w	r6, #0
 8003b9a:	46a9      	mov	r9, r5
 8003b9c:	46b2      	mov	sl, r6
 8003b9e:	eb19 0309 	adds.w	r3, r9, r9
 8003ba2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ba6:	4699      	mov	r9, r3
 8003ba8:	46a2      	mov	sl, r4
 8003baa:	eb19 0905 	adds.w	r9, r9, r5
 8003bae:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bb2:	f04f 0100 	mov.w	r1, #0
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bc6:	4689      	mov	r9, r1
 8003bc8:	4692      	mov	sl, r2
 8003bca:	eb19 0005 	adds.w	r0, r9, r5
 8003bce:	eb4a 0106 	adc.w	r1, sl, r6
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	461d      	mov	r5, r3
 8003bd8:	f04f 0600 	mov.w	r6, #0
 8003bdc:	196b      	adds	r3, r5, r5
 8003bde:	eb46 0406 	adc.w	r4, r6, r6
 8003be2:	461a      	mov	r2, r3
 8003be4:	4623      	mov	r3, r4
 8003be6:	f7fc fb4b 	bl	8000280 <__aeabi_uldivmod>
 8003bea:	4603      	mov	r3, r0
 8003bec:	460c      	mov	r4, r1
 8003bee:	461a      	mov	r2, r3
 8003bf0:	4b2c      	ldr	r3, [pc, #176]	; (8003ca4 <UART_SetConfig+0x384>)
 8003bf2:	fba3 1302 	umull	r1, r3, r3, r2
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	2164      	movs	r1, #100	; 0x64
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	3332      	adds	r3, #50	; 0x32
 8003c04:	4a27      	ldr	r2, [pc, #156]	; (8003ca4 <UART_SetConfig+0x384>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c12:	4498      	add	r8, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	461d      	mov	r5, r3
 8003c18:	f04f 0600 	mov.w	r6, #0
 8003c1c:	46a9      	mov	r9, r5
 8003c1e:	46b2      	mov	sl, r6
 8003c20:	eb19 0309 	adds.w	r3, r9, r9
 8003c24:	eb4a 040a 	adc.w	r4, sl, sl
 8003c28:	4699      	mov	r9, r3
 8003c2a:	46a2      	mov	sl, r4
 8003c2c:	eb19 0905 	adds.w	r9, r9, r5
 8003c30:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c34:	f04f 0100 	mov.w	r1, #0
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c48:	4689      	mov	r9, r1
 8003c4a:	4692      	mov	sl, r2
 8003c4c:	eb19 0005 	adds.w	r0, r9, r5
 8003c50:	eb4a 0106 	adc.w	r1, sl, r6
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	461d      	mov	r5, r3
 8003c5a:	f04f 0600 	mov.w	r6, #0
 8003c5e:	196b      	adds	r3, r5, r5
 8003c60:	eb46 0406 	adc.w	r4, r6, r6
 8003c64:	461a      	mov	r2, r3
 8003c66:	4623      	mov	r3, r4
 8003c68:	f7fc fb0a 	bl	8000280 <__aeabi_uldivmod>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	460c      	mov	r4, r1
 8003c70:	461a      	mov	r2, r3
 8003c72:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <UART_SetConfig+0x384>)
 8003c74:	fba3 1302 	umull	r1, r3, r3, r2
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	2164      	movs	r1, #100	; 0x64
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	3332      	adds	r3, #50	; 0x32
 8003c86:	4a07      	ldr	r2, [pc, #28]	; (8003ca4 <UART_SetConfig+0x384>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	f003 0207 	and.w	r2, r3, #7
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4442      	add	r2, r8
 8003c98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c9a:	e1b2      	b.n	8004002 <UART_SetConfig+0x6e2>
 8003c9c:	40011000 	.word	0x40011000
 8003ca0:	40011400 	.word	0x40011400
 8003ca4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4ad7      	ldr	r2, [pc, #860]	; (800400c <UART_SetConfig+0x6ec>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d005      	beq.n	8003cbe <UART_SetConfig+0x39e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4ad6      	ldr	r2, [pc, #856]	; (8004010 <UART_SetConfig+0x6f0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	f040 80d1 	bne.w	8003e60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cbe:	f7fe fbed 	bl	800249c <HAL_RCC_GetPCLK2Freq>
 8003cc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	469a      	mov	sl, r3
 8003cc8:	f04f 0b00 	mov.w	fp, #0
 8003ccc:	46d0      	mov	r8, sl
 8003cce:	46d9      	mov	r9, fp
 8003cd0:	eb18 0308 	adds.w	r3, r8, r8
 8003cd4:	eb49 0409 	adc.w	r4, r9, r9
 8003cd8:	4698      	mov	r8, r3
 8003cda:	46a1      	mov	r9, r4
 8003cdc:	eb18 080a 	adds.w	r8, r8, sl
 8003ce0:	eb49 090b 	adc.w	r9, r9, fp
 8003ce4:	f04f 0100 	mov.w	r1, #0
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cf0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cf4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cf8:	4688      	mov	r8, r1
 8003cfa:	4691      	mov	r9, r2
 8003cfc:	eb1a 0508 	adds.w	r5, sl, r8
 8003d00:	eb4b 0609 	adc.w	r6, fp, r9
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4619      	mov	r1, r3
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	f04f 0400 	mov.w	r4, #0
 8003d16:	0094      	lsls	r4, r2, #2
 8003d18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d1c:	008b      	lsls	r3, r1, #2
 8003d1e:	461a      	mov	r2, r3
 8003d20:	4623      	mov	r3, r4
 8003d22:	4628      	mov	r0, r5
 8003d24:	4631      	mov	r1, r6
 8003d26:	f7fc faab 	bl	8000280 <__aeabi_uldivmod>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4bb8      	ldr	r3, [pc, #736]	; (8004014 <UART_SetConfig+0x6f4>)
 8003d32:	fba3 2302 	umull	r2, r3, r3, r2
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	469b      	mov	fp, r3
 8003d40:	f04f 0c00 	mov.w	ip, #0
 8003d44:	46d9      	mov	r9, fp
 8003d46:	46e2      	mov	sl, ip
 8003d48:	eb19 0309 	adds.w	r3, r9, r9
 8003d4c:	eb4a 040a 	adc.w	r4, sl, sl
 8003d50:	4699      	mov	r9, r3
 8003d52:	46a2      	mov	sl, r4
 8003d54:	eb19 090b 	adds.w	r9, r9, fp
 8003d58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d5c:	f04f 0100 	mov.w	r1, #0
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d70:	4689      	mov	r9, r1
 8003d72:	4692      	mov	sl, r2
 8003d74:	eb1b 0509 	adds.w	r5, fp, r9
 8003d78:	eb4c 060a 	adc.w	r6, ip, sl
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4619      	mov	r1, r3
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	f04f 0400 	mov.w	r4, #0
 8003d8e:	0094      	lsls	r4, r2, #2
 8003d90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d94:	008b      	lsls	r3, r1, #2
 8003d96:	461a      	mov	r2, r3
 8003d98:	4623      	mov	r3, r4
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	4631      	mov	r1, r6
 8003d9e:	f7fc fa6f 	bl	8000280 <__aeabi_uldivmod>
 8003da2:	4603      	mov	r3, r0
 8003da4:	460c      	mov	r4, r1
 8003da6:	461a      	mov	r2, r3
 8003da8:	4b9a      	ldr	r3, [pc, #616]	; (8004014 <UART_SetConfig+0x6f4>)
 8003daa:	fba3 1302 	umull	r1, r3, r3, r2
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2164      	movs	r1, #100	; 0x64
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	3332      	adds	r3, #50	; 0x32
 8003dbc:	4a95      	ldr	r2, [pc, #596]	; (8004014 <UART_SetConfig+0x6f4>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc8:	4498      	add	r8, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	469b      	mov	fp, r3
 8003dce:	f04f 0c00 	mov.w	ip, #0
 8003dd2:	46d9      	mov	r9, fp
 8003dd4:	46e2      	mov	sl, ip
 8003dd6:	eb19 0309 	adds.w	r3, r9, r9
 8003dda:	eb4a 040a 	adc.w	r4, sl, sl
 8003dde:	4699      	mov	r9, r3
 8003de0:	46a2      	mov	sl, r4
 8003de2:	eb19 090b 	adds.w	r9, r9, fp
 8003de6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dea:	f04f 0100 	mov.w	r1, #0
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003df6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dfe:	4689      	mov	r9, r1
 8003e00:	4692      	mov	sl, r2
 8003e02:	eb1b 0509 	adds.w	r5, fp, r9
 8003e06:	eb4c 060a 	adc.w	r6, ip, sl
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	f04f 0400 	mov.w	r4, #0
 8003e1c:	0094      	lsls	r4, r2, #2
 8003e1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e22:	008b      	lsls	r3, r1, #2
 8003e24:	461a      	mov	r2, r3
 8003e26:	4623      	mov	r3, r4
 8003e28:	4628      	mov	r0, r5
 8003e2a:	4631      	mov	r1, r6
 8003e2c:	f7fc fa28 	bl	8000280 <__aeabi_uldivmod>
 8003e30:	4603      	mov	r3, r0
 8003e32:	460c      	mov	r4, r1
 8003e34:	461a      	mov	r2, r3
 8003e36:	4b77      	ldr	r3, [pc, #476]	; (8004014 <UART_SetConfig+0x6f4>)
 8003e38:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	2164      	movs	r1, #100	; 0x64
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	3332      	adds	r3, #50	; 0x32
 8003e4a:	4a72      	ldr	r2, [pc, #456]	; (8004014 <UART_SetConfig+0x6f4>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	f003 020f 	and.w	r2, r3, #15
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4442      	add	r2, r8
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	e0d0      	b.n	8004002 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e60:	f7fe fb08 	bl	8002474 <HAL_RCC_GetPCLK1Freq>
 8003e64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	469a      	mov	sl, r3
 8003e6a:	f04f 0b00 	mov.w	fp, #0
 8003e6e:	46d0      	mov	r8, sl
 8003e70:	46d9      	mov	r9, fp
 8003e72:	eb18 0308 	adds.w	r3, r8, r8
 8003e76:	eb49 0409 	adc.w	r4, r9, r9
 8003e7a:	4698      	mov	r8, r3
 8003e7c:	46a1      	mov	r9, r4
 8003e7e:	eb18 080a 	adds.w	r8, r8, sl
 8003e82:	eb49 090b 	adc.w	r9, r9, fp
 8003e86:	f04f 0100 	mov.w	r1, #0
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e9a:	4688      	mov	r8, r1
 8003e9c:	4691      	mov	r9, r2
 8003e9e:	eb1a 0508 	adds.w	r5, sl, r8
 8003ea2:	eb4b 0609 	adc.w	r6, fp, r9
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	f04f 0400 	mov.w	r4, #0
 8003eb8:	0094      	lsls	r4, r2, #2
 8003eba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ebe:	008b      	lsls	r3, r1, #2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	4631      	mov	r1, r6
 8003ec8:	f7fc f9da 	bl	8000280 <__aeabi_uldivmod>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	460c      	mov	r4, r1
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4b50      	ldr	r3, [pc, #320]	; (8004014 <UART_SetConfig+0x6f4>)
 8003ed4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	469b      	mov	fp, r3
 8003ee2:	f04f 0c00 	mov.w	ip, #0
 8003ee6:	46d9      	mov	r9, fp
 8003ee8:	46e2      	mov	sl, ip
 8003eea:	eb19 0309 	adds.w	r3, r9, r9
 8003eee:	eb4a 040a 	adc.w	r4, sl, sl
 8003ef2:	4699      	mov	r9, r3
 8003ef4:	46a2      	mov	sl, r4
 8003ef6:	eb19 090b 	adds.w	r9, r9, fp
 8003efa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f12:	4689      	mov	r9, r1
 8003f14:	4692      	mov	sl, r2
 8003f16:	eb1b 0509 	adds.w	r5, fp, r9
 8003f1a:	eb4c 060a 	adc.w	r6, ip, sl
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4619      	mov	r1, r3
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	f04f 0400 	mov.w	r4, #0
 8003f30:	0094      	lsls	r4, r2, #2
 8003f32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f36:	008b      	lsls	r3, r1, #2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	4631      	mov	r1, r6
 8003f40:	f7fc f99e 	bl	8000280 <__aeabi_uldivmod>
 8003f44:	4603      	mov	r3, r0
 8003f46:	460c      	mov	r4, r1
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b32      	ldr	r3, [pc, #200]	; (8004014 <UART_SetConfig+0x6f4>)
 8003f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	2164      	movs	r1, #100	; 0x64
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	3332      	adds	r3, #50	; 0x32
 8003f5e:	4a2d      	ldr	r2, [pc, #180]	; (8004014 <UART_SetConfig+0x6f4>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f6a:	4498      	add	r8, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	469b      	mov	fp, r3
 8003f70:	f04f 0c00 	mov.w	ip, #0
 8003f74:	46d9      	mov	r9, fp
 8003f76:	46e2      	mov	sl, ip
 8003f78:	eb19 0309 	adds.w	r3, r9, r9
 8003f7c:	eb4a 040a 	adc.w	r4, sl, sl
 8003f80:	4699      	mov	r9, r3
 8003f82:	46a2      	mov	sl, r4
 8003f84:	eb19 090b 	adds.w	r9, r9, fp
 8003f88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f8c:	f04f 0100 	mov.w	r1, #0
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fa0:	4689      	mov	r9, r1
 8003fa2:	4692      	mov	sl, r2
 8003fa4:	eb1b 0509 	adds.w	r5, fp, r9
 8003fa8:	eb4c 060a 	adc.w	r6, ip, sl
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	f04f 0400 	mov.w	r4, #0
 8003fbe:	0094      	lsls	r4, r2, #2
 8003fc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fc4:	008b      	lsls	r3, r1, #2
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4623      	mov	r3, r4
 8003fca:	4628      	mov	r0, r5
 8003fcc:	4631      	mov	r1, r6
 8003fce:	f7fc f957 	bl	8000280 <__aeabi_uldivmod>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <UART_SetConfig+0x6f4>)
 8003fda:	fba3 1302 	umull	r1, r3, r3, r2
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	2164      	movs	r1, #100	; 0x64
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	3332      	adds	r3, #50	; 0x32
 8003fec:	4a09      	ldr	r2, [pc, #36]	; (8004014 <UART_SetConfig+0x6f4>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	f003 020f 	and.w	r2, r3, #15
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4442      	add	r2, r8
 8003ffe:	609a      	str	r2, [r3, #8]
}
 8004000:	e7ff      	b.n	8004002 <UART_SetConfig+0x6e2>
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800400c:	40011000 	.word	0x40011000
 8004010:	40011400 	.word	0x40011400
 8004014:	51eb851f 	.word	0x51eb851f

08004018 <atoi>:
 8004018:	220a      	movs	r2, #10
 800401a:	2100      	movs	r1, #0
 800401c:	f000 b952 	b.w	80042c4 <strtol>

08004020 <__errno>:
 8004020:	4b01      	ldr	r3, [pc, #4]	; (8004028 <__errno+0x8>)
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	2000003c 	.word	0x2000003c

0800402c <__libc_init_array>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	4e0d      	ldr	r6, [pc, #52]	; (8004064 <__libc_init_array+0x38>)
 8004030:	4c0d      	ldr	r4, [pc, #52]	; (8004068 <__libc_init_array+0x3c>)
 8004032:	1ba4      	subs	r4, r4, r6
 8004034:	10a4      	asrs	r4, r4, #2
 8004036:	2500      	movs	r5, #0
 8004038:	42a5      	cmp	r5, r4
 800403a:	d109      	bne.n	8004050 <__libc_init_array+0x24>
 800403c:	4e0b      	ldr	r6, [pc, #44]	; (800406c <__libc_init_array+0x40>)
 800403e:	4c0c      	ldr	r4, [pc, #48]	; (8004070 <__libc_init_array+0x44>)
 8004040:	f001 f87a 	bl	8005138 <_init>
 8004044:	1ba4      	subs	r4, r4, r6
 8004046:	10a4      	asrs	r4, r4, #2
 8004048:	2500      	movs	r5, #0
 800404a:	42a5      	cmp	r5, r4
 800404c:	d105      	bne.n	800405a <__libc_init_array+0x2e>
 800404e:	bd70      	pop	{r4, r5, r6, pc}
 8004050:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004054:	4798      	blx	r3
 8004056:	3501      	adds	r5, #1
 8004058:	e7ee      	b.n	8004038 <__libc_init_array+0xc>
 800405a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800405e:	4798      	blx	r3
 8004060:	3501      	adds	r5, #1
 8004062:	e7f2      	b.n	800404a <__libc_init_array+0x1e>
 8004064:	08005380 	.word	0x08005380
 8004068:	08005380 	.word	0x08005380
 800406c:	08005380 	.word	0x08005380
 8004070:	08005384 	.word	0x08005384

08004074 <memset>:
 8004074:	4402      	add	r2, r0
 8004076:	4603      	mov	r3, r0
 8004078:	4293      	cmp	r3, r2
 800407a:	d100      	bne.n	800407e <memset+0xa>
 800407c:	4770      	bx	lr
 800407e:	f803 1b01 	strb.w	r1, [r3], #1
 8004082:	e7f9      	b.n	8004078 <memset+0x4>

08004084 <iprintf>:
 8004084:	b40f      	push	{r0, r1, r2, r3}
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <iprintf+0x2c>)
 8004088:	b513      	push	{r0, r1, r4, lr}
 800408a:	681c      	ldr	r4, [r3, #0]
 800408c:	b124      	cbz	r4, 8004098 <iprintf+0x14>
 800408e:	69a3      	ldr	r3, [r4, #24]
 8004090:	b913      	cbnz	r3, 8004098 <iprintf+0x14>
 8004092:	4620      	mov	r0, r4
 8004094:	f000 fadc 	bl	8004650 <__sinit>
 8004098:	ab05      	add	r3, sp, #20
 800409a:	9a04      	ldr	r2, [sp, #16]
 800409c:	68a1      	ldr	r1, [r4, #8]
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	4620      	mov	r0, r4
 80040a2:	f000 fcab 	bl	80049fc <_vfiprintf_r>
 80040a6:	b002      	add	sp, #8
 80040a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040ac:	b004      	add	sp, #16
 80040ae:	4770      	bx	lr
 80040b0:	2000003c 	.word	0x2000003c

080040b4 <putchar>:
 80040b4:	b538      	push	{r3, r4, r5, lr}
 80040b6:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <putchar+0x24>)
 80040b8:	681c      	ldr	r4, [r3, #0]
 80040ba:	4605      	mov	r5, r0
 80040bc:	b124      	cbz	r4, 80040c8 <putchar+0x14>
 80040be:	69a3      	ldr	r3, [r4, #24]
 80040c0:	b913      	cbnz	r3, 80040c8 <putchar+0x14>
 80040c2:	4620      	mov	r0, r4
 80040c4:	f000 fac4 	bl	8004650 <__sinit>
 80040c8:	68a2      	ldr	r2, [r4, #8]
 80040ca:	4629      	mov	r1, r5
 80040cc:	4620      	mov	r0, r4
 80040ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040d2:	f000 bf31 	b.w	8004f38 <_putc_r>
 80040d6:	bf00      	nop
 80040d8:	2000003c 	.word	0x2000003c

080040dc <_puts_r>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	460e      	mov	r6, r1
 80040e0:	4605      	mov	r5, r0
 80040e2:	b118      	cbz	r0, 80040ec <_puts_r+0x10>
 80040e4:	6983      	ldr	r3, [r0, #24]
 80040e6:	b90b      	cbnz	r3, 80040ec <_puts_r+0x10>
 80040e8:	f000 fab2 	bl	8004650 <__sinit>
 80040ec:	69ab      	ldr	r3, [r5, #24]
 80040ee:	68ac      	ldr	r4, [r5, #8]
 80040f0:	b913      	cbnz	r3, 80040f8 <_puts_r+0x1c>
 80040f2:	4628      	mov	r0, r5
 80040f4:	f000 faac 	bl	8004650 <__sinit>
 80040f8:	4b23      	ldr	r3, [pc, #140]	; (8004188 <_puts_r+0xac>)
 80040fa:	429c      	cmp	r4, r3
 80040fc:	d117      	bne.n	800412e <_puts_r+0x52>
 80040fe:	686c      	ldr	r4, [r5, #4]
 8004100:	89a3      	ldrh	r3, [r4, #12]
 8004102:	071b      	lsls	r3, r3, #28
 8004104:	d51d      	bpl.n	8004142 <_puts_r+0x66>
 8004106:	6923      	ldr	r3, [r4, #16]
 8004108:	b1db      	cbz	r3, 8004142 <_puts_r+0x66>
 800410a:	3e01      	subs	r6, #1
 800410c:	68a3      	ldr	r3, [r4, #8]
 800410e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004112:	3b01      	subs	r3, #1
 8004114:	60a3      	str	r3, [r4, #8]
 8004116:	b9e9      	cbnz	r1, 8004154 <_puts_r+0x78>
 8004118:	2b00      	cmp	r3, #0
 800411a:	da2e      	bge.n	800417a <_puts_r+0x9e>
 800411c:	4622      	mov	r2, r4
 800411e:	210a      	movs	r1, #10
 8004120:	4628      	mov	r0, r5
 8004122:	f000 f8e5 	bl	80042f0 <__swbuf_r>
 8004126:	3001      	adds	r0, #1
 8004128:	d011      	beq.n	800414e <_puts_r+0x72>
 800412a:	200a      	movs	r0, #10
 800412c:	e011      	b.n	8004152 <_puts_r+0x76>
 800412e:	4b17      	ldr	r3, [pc, #92]	; (800418c <_puts_r+0xb0>)
 8004130:	429c      	cmp	r4, r3
 8004132:	d101      	bne.n	8004138 <_puts_r+0x5c>
 8004134:	68ac      	ldr	r4, [r5, #8]
 8004136:	e7e3      	b.n	8004100 <_puts_r+0x24>
 8004138:	4b15      	ldr	r3, [pc, #84]	; (8004190 <_puts_r+0xb4>)
 800413a:	429c      	cmp	r4, r3
 800413c:	bf08      	it	eq
 800413e:	68ec      	ldreq	r4, [r5, #12]
 8004140:	e7de      	b.n	8004100 <_puts_r+0x24>
 8004142:	4621      	mov	r1, r4
 8004144:	4628      	mov	r0, r5
 8004146:	f000 f925 	bl	8004394 <__swsetup_r>
 800414a:	2800      	cmp	r0, #0
 800414c:	d0dd      	beq.n	800410a <_puts_r+0x2e>
 800414e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004152:	bd70      	pop	{r4, r5, r6, pc}
 8004154:	2b00      	cmp	r3, #0
 8004156:	da04      	bge.n	8004162 <_puts_r+0x86>
 8004158:	69a2      	ldr	r2, [r4, #24]
 800415a:	429a      	cmp	r2, r3
 800415c:	dc06      	bgt.n	800416c <_puts_r+0x90>
 800415e:	290a      	cmp	r1, #10
 8004160:	d004      	beq.n	800416c <_puts_r+0x90>
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	6022      	str	r2, [r4, #0]
 8004168:	7019      	strb	r1, [r3, #0]
 800416a:	e7cf      	b.n	800410c <_puts_r+0x30>
 800416c:	4622      	mov	r2, r4
 800416e:	4628      	mov	r0, r5
 8004170:	f000 f8be 	bl	80042f0 <__swbuf_r>
 8004174:	3001      	adds	r0, #1
 8004176:	d1c9      	bne.n	800410c <_puts_r+0x30>
 8004178:	e7e9      	b.n	800414e <_puts_r+0x72>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	200a      	movs	r0, #10
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	6022      	str	r2, [r4, #0]
 8004182:	7018      	strb	r0, [r3, #0]
 8004184:	e7e5      	b.n	8004152 <_puts_r+0x76>
 8004186:	bf00      	nop
 8004188:	080051f8 	.word	0x080051f8
 800418c:	08005218 	.word	0x08005218
 8004190:	080051d8 	.word	0x080051d8

08004194 <puts>:
 8004194:	4b02      	ldr	r3, [pc, #8]	; (80041a0 <puts+0xc>)
 8004196:	4601      	mov	r1, r0
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	f7ff bf9f 	b.w	80040dc <_puts_r>
 800419e:	bf00      	nop
 80041a0:	2000003c 	.word	0x2000003c

080041a4 <strncat>:
 80041a4:	b530      	push	{r4, r5, lr}
 80041a6:	4603      	mov	r3, r0
 80041a8:	781c      	ldrb	r4, [r3, #0]
 80041aa:	1c5d      	adds	r5, r3, #1
 80041ac:	b944      	cbnz	r4, 80041c0 <strncat+0x1c>
 80041ae:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 80041b2:	d304      	bcc.n	80041be <strncat+0x1a>
 80041b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041b8:	f803 4b01 	strb.w	r4, [r3], #1
 80041bc:	b914      	cbnz	r4, 80041c4 <strncat+0x20>
 80041be:	bd30      	pop	{r4, r5, pc}
 80041c0:	462b      	mov	r3, r5
 80041c2:	e7f1      	b.n	80041a8 <strncat+0x4>
 80041c4:	2a00      	cmp	r2, #0
 80041c6:	d1f2      	bne.n	80041ae <strncat+0xa>
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	e7f0      	b.n	80041ae <strncat+0xa>

080041cc <_strtol_l.isra.0>:
 80041cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d0:	4680      	mov	r8, r0
 80041d2:	4689      	mov	r9, r1
 80041d4:	4692      	mov	sl, r2
 80041d6:	461e      	mov	r6, r3
 80041d8:	460f      	mov	r7, r1
 80041da:	463d      	mov	r5, r7
 80041dc:	9808      	ldr	r0, [sp, #32]
 80041de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041e2:	f000 fabf 	bl	8004764 <__locale_ctype_ptr_l>
 80041e6:	4420      	add	r0, r4
 80041e8:	7843      	ldrb	r3, [r0, #1]
 80041ea:	f013 0308 	ands.w	r3, r3, #8
 80041ee:	d132      	bne.n	8004256 <_strtol_l.isra.0+0x8a>
 80041f0:	2c2d      	cmp	r4, #45	; 0x2d
 80041f2:	d132      	bne.n	800425a <_strtol_l.isra.0+0x8e>
 80041f4:	787c      	ldrb	r4, [r7, #1]
 80041f6:	1cbd      	adds	r5, r7, #2
 80041f8:	2201      	movs	r2, #1
 80041fa:	2e00      	cmp	r6, #0
 80041fc:	d05d      	beq.n	80042ba <_strtol_l.isra.0+0xee>
 80041fe:	2e10      	cmp	r6, #16
 8004200:	d109      	bne.n	8004216 <_strtol_l.isra.0+0x4a>
 8004202:	2c30      	cmp	r4, #48	; 0x30
 8004204:	d107      	bne.n	8004216 <_strtol_l.isra.0+0x4a>
 8004206:	782b      	ldrb	r3, [r5, #0]
 8004208:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800420c:	2b58      	cmp	r3, #88	; 0x58
 800420e:	d14f      	bne.n	80042b0 <_strtol_l.isra.0+0xe4>
 8004210:	786c      	ldrb	r4, [r5, #1]
 8004212:	2610      	movs	r6, #16
 8004214:	3502      	adds	r5, #2
 8004216:	2a00      	cmp	r2, #0
 8004218:	bf14      	ite	ne
 800421a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800421e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004222:	2700      	movs	r7, #0
 8004224:	fbb1 fcf6 	udiv	ip, r1, r6
 8004228:	4638      	mov	r0, r7
 800422a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800422e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004232:	2b09      	cmp	r3, #9
 8004234:	d817      	bhi.n	8004266 <_strtol_l.isra.0+0x9a>
 8004236:	461c      	mov	r4, r3
 8004238:	42a6      	cmp	r6, r4
 800423a:	dd23      	ble.n	8004284 <_strtol_l.isra.0+0xb8>
 800423c:	1c7b      	adds	r3, r7, #1
 800423e:	d007      	beq.n	8004250 <_strtol_l.isra.0+0x84>
 8004240:	4584      	cmp	ip, r0
 8004242:	d31c      	bcc.n	800427e <_strtol_l.isra.0+0xb2>
 8004244:	d101      	bne.n	800424a <_strtol_l.isra.0+0x7e>
 8004246:	45a6      	cmp	lr, r4
 8004248:	db19      	blt.n	800427e <_strtol_l.isra.0+0xb2>
 800424a:	fb00 4006 	mla	r0, r0, r6, r4
 800424e:	2701      	movs	r7, #1
 8004250:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004254:	e7eb      	b.n	800422e <_strtol_l.isra.0+0x62>
 8004256:	462f      	mov	r7, r5
 8004258:	e7bf      	b.n	80041da <_strtol_l.isra.0+0xe>
 800425a:	2c2b      	cmp	r4, #43	; 0x2b
 800425c:	bf04      	itt	eq
 800425e:	1cbd      	addeq	r5, r7, #2
 8004260:	787c      	ldrbeq	r4, [r7, #1]
 8004262:	461a      	mov	r2, r3
 8004264:	e7c9      	b.n	80041fa <_strtol_l.isra.0+0x2e>
 8004266:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800426a:	2b19      	cmp	r3, #25
 800426c:	d801      	bhi.n	8004272 <_strtol_l.isra.0+0xa6>
 800426e:	3c37      	subs	r4, #55	; 0x37
 8004270:	e7e2      	b.n	8004238 <_strtol_l.isra.0+0x6c>
 8004272:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004276:	2b19      	cmp	r3, #25
 8004278:	d804      	bhi.n	8004284 <_strtol_l.isra.0+0xb8>
 800427a:	3c57      	subs	r4, #87	; 0x57
 800427c:	e7dc      	b.n	8004238 <_strtol_l.isra.0+0x6c>
 800427e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004282:	e7e5      	b.n	8004250 <_strtol_l.isra.0+0x84>
 8004284:	1c7b      	adds	r3, r7, #1
 8004286:	d108      	bne.n	800429a <_strtol_l.isra.0+0xce>
 8004288:	2322      	movs	r3, #34	; 0x22
 800428a:	f8c8 3000 	str.w	r3, [r8]
 800428e:	4608      	mov	r0, r1
 8004290:	f1ba 0f00 	cmp.w	sl, #0
 8004294:	d107      	bne.n	80042a6 <_strtol_l.isra.0+0xda>
 8004296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800429a:	b102      	cbz	r2, 800429e <_strtol_l.isra.0+0xd2>
 800429c:	4240      	negs	r0, r0
 800429e:	f1ba 0f00 	cmp.w	sl, #0
 80042a2:	d0f8      	beq.n	8004296 <_strtol_l.isra.0+0xca>
 80042a4:	b10f      	cbz	r7, 80042aa <_strtol_l.isra.0+0xde>
 80042a6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80042aa:	f8ca 9000 	str.w	r9, [sl]
 80042ae:	e7f2      	b.n	8004296 <_strtol_l.isra.0+0xca>
 80042b0:	2430      	movs	r4, #48	; 0x30
 80042b2:	2e00      	cmp	r6, #0
 80042b4:	d1af      	bne.n	8004216 <_strtol_l.isra.0+0x4a>
 80042b6:	2608      	movs	r6, #8
 80042b8:	e7ad      	b.n	8004216 <_strtol_l.isra.0+0x4a>
 80042ba:	2c30      	cmp	r4, #48	; 0x30
 80042bc:	d0a3      	beq.n	8004206 <_strtol_l.isra.0+0x3a>
 80042be:	260a      	movs	r6, #10
 80042c0:	e7a9      	b.n	8004216 <_strtol_l.isra.0+0x4a>
	...

080042c4 <strtol>:
 80042c4:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <strtol+0x24>)
 80042c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042c8:	681c      	ldr	r4, [r3, #0]
 80042ca:	4d08      	ldr	r5, [pc, #32]	; (80042ec <strtol+0x28>)
 80042cc:	6a23      	ldr	r3, [r4, #32]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bf08      	it	eq
 80042d2:	462b      	moveq	r3, r5
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	4613      	mov	r3, r2
 80042d8:	460a      	mov	r2, r1
 80042da:	4601      	mov	r1, r0
 80042dc:	4620      	mov	r0, r4
 80042de:	f7ff ff75 	bl	80041cc <_strtol_l.isra.0>
 80042e2:	b003      	add	sp, #12
 80042e4:	bd30      	pop	{r4, r5, pc}
 80042e6:	bf00      	nop
 80042e8:	2000003c 	.word	0x2000003c
 80042ec:	200000a0 	.word	0x200000a0

080042f0 <__swbuf_r>:
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	460e      	mov	r6, r1
 80042f4:	4614      	mov	r4, r2
 80042f6:	4605      	mov	r5, r0
 80042f8:	b118      	cbz	r0, 8004302 <__swbuf_r+0x12>
 80042fa:	6983      	ldr	r3, [r0, #24]
 80042fc:	b90b      	cbnz	r3, 8004302 <__swbuf_r+0x12>
 80042fe:	f000 f9a7 	bl	8004650 <__sinit>
 8004302:	4b21      	ldr	r3, [pc, #132]	; (8004388 <__swbuf_r+0x98>)
 8004304:	429c      	cmp	r4, r3
 8004306:	d12a      	bne.n	800435e <__swbuf_r+0x6e>
 8004308:	686c      	ldr	r4, [r5, #4]
 800430a:	69a3      	ldr	r3, [r4, #24]
 800430c:	60a3      	str	r3, [r4, #8]
 800430e:	89a3      	ldrh	r3, [r4, #12]
 8004310:	071a      	lsls	r2, r3, #28
 8004312:	d52e      	bpl.n	8004372 <__swbuf_r+0x82>
 8004314:	6923      	ldr	r3, [r4, #16]
 8004316:	b363      	cbz	r3, 8004372 <__swbuf_r+0x82>
 8004318:	6923      	ldr	r3, [r4, #16]
 800431a:	6820      	ldr	r0, [r4, #0]
 800431c:	1ac0      	subs	r0, r0, r3
 800431e:	6963      	ldr	r3, [r4, #20]
 8004320:	b2f6      	uxtb	r6, r6
 8004322:	4283      	cmp	r3, r0
 8004324:	4637      	mov	r7, r6
 8004326:	dc04      	bgt.n	8004332 <__swbuf_r+0x42>
 8004328:	4621      	mov	r1, r4
 800432a:	4628      	mov	r0, r5
 800432c:	f000 f926 	bl	800457c <_fflush_r>
 8004330:	bb28      	cbnz	r0, 800437e <__swbuf_r+0x8e>
 8004332:	68a3      	ldr	r3, [r4, #8]
 8004334:	3b01      	subs	r3, #1
 8004336:	60a3      	str	r3, [r4, #8]
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	6022      	str	r2, [r4, #0]
 800433e:	701e      	strb	r6, [r3, #0]
 8004340:	6963      	ldr	r3, [r4, #20]
 8004342:	3001      	adds	r0, #1
 8004344:	4283      	cmp	r3, r0
 8004346:	d004      	beq.n	8004352 <__swbuf_r+0x62>
 8004348:	89a3      	ldrh	r3, [r4, #12]
 800434a:	07db      	lsls	r3, r3, #31
 800434c:	d519      	bpl.n	8004382 <__swbuf_r+0x92>
 800434e:	2e0a      	cmp	r6, #10
 8004350:	d117      	bne.n	8004382 <__swbuf_r+0x92>
 8004352:	4621      	mov	r1, r4
 8004354:	4628      	mov	r0, r5
 8004356:	f000 f911 	bl	800457c <_fflush_r>
 800435a:	b190      	cbz	r0, 8004382 <__swbuf_r+0x92>
 800435c:	e00f      	b.n	800437e <__swbuf_r+0x8e>
 800435e:	4b0b      	ldr	r3, [pc, #44]	; (800438c <__swbuf_r+0x9c>)
 8004360:	429c      	cmp	r4, r3
 8004362:	d101      	bne.n	8004368 <__swbuf_r+0x78>
 8004364:	68ac      	ldr	r4, [r5, #8]
 8004366:	e7d0      	b.n	800430a <__swbuf_r+0x1a>
 8004368:	4b09      	ldr	r3, [pc, #36]	; (8004390 <__swbuf_r+0xa0>)
 800436a:	429c      	cmp	r4, r3
 800436c:	bf08      	it	eq
 800436e:	68ec      	ldreq	r4, [r5, #12]
 8004370:	e7cb      	b.n	800430a <__swbuf_r+0x1a>
 8004372:	4621      	mov	r1, r4
 8004374:	4628      	mov	r0, r5
 8004376:	f000 f80d 	bl	8004394 <__swsetup_r>
 800437a:	2800      	cmp	r0, #0
 800437c:	d0cc      	beq.n	8004318 <__swbuf_r+0x28>
 800437e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004382:	4638      	mov	r0, r7
 8004384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004386:	bf00      	nop
 8004388:	080051f8 	.word	0x080051f8
 800438c:	08005218 	.word	0x08005218
 8004390:	080051d8 	.word	0x080051d8

08004394 <__swsetup_r>:
 8004394:	4b32      	ldr	r3, [pc, #200]	; (8004460 <__swsetup_r+0xcc>)
 8004396:	b570      	push	{r4, r5, r6, lr}
 8004398:	681d      	ldr	r5, [r3, #0]
 800439a:	4606      	mov	r6, r0
 800439c:	460c      	mov	r4, r1
 800439e:	b125      	cbz	r5, 80043aa <__swsetup_r+0x16>
 80043a0:	69ab      	ldr	r3, [r5, #24]
 80043a2:	b913      	cbnz	r3, 80043aa <__swsetup_r+0x16>
 80043a4:	4628      	mov	r0, r5
 80043a6:	f000 f953 	bl	8004650 <__sinit>
 80043aa:	4b2e      	ldr	r3, [pc, #184]	; (8004464 <__swsetup_r+0xd0>)
 80043ac:	429c      	cmp	r4, r3
 80043ae:	d10f      	bne.n	80043d0 <__swsetup_r+0x3c>
 80043b0:	686c      	ldr	r4, [r5, #4]
 80043b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	0715      	lsls	r5, r2, #28
 80043ba:	d42c      	bmi.n	8004416 <__swsetup_r+0x82>
 80043bc:	06d0      	lsls	r0, r2, #27
 80043be:	d411      	bmi.n	80043e4 <__swsetup_r+0x50>
 80043c0:	2209      	movs	r2, #9
 80043c2:	6032      	str	r2, [r6, #0]
 80043c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043c8:	81a3      	strh	r3, [r4, #12]
 80043ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043ce:	e03e      	b.n	800444e <__swsetup_r+0xba>
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <__swsetup_r+0xd4>)
 80043d2:	429c      	cmp	r4, r3
 80043d4:	d101      	bne.n	80043da <__swsetup_r+0x46>
 80043d6:	68ac      	ldr	r4, [r5, #8]
 80043d8:	e7eb      	b.n	80043b2 <__swsetup_r+0x1e>
 80043da:	4b24      	ldr	r3, [pc, #144]	; (800446c <__swsetup_r+0xd8>)
 80043dc:	429c      	cmp	r4, r3
 80043de:	bf08      	it	eq
 80043e0:	68ec      	ldreq	r4, [r5, #12]
 80043e2:	e7e6      	b.n	80043b2 <__swsetup_r+0x1e>
 80043e4:	0751      	lsls	r1, r2, #29
 80043e6:	d512      	bpl.n	800440e <__swsetup_r+0x7a>
 80043e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ea:	b141      	cbz	r1, 80043fe <__swsetup_r+0x6a>
 80043ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043f0:	4299      	cmp	r1, r3
 80043f2:	d002      	beq.n	80043fa <__swsetup_r+0x66>
 80043f4:	4630      	mov	r0, r6
 80043f6:	f000 fa2f 	bl	8004858 <_free_r>
 80043fa:	2300      	movs	r3, #0
 80043fc:	6363      	str	r3, [r4, #52]	; 0x34
 80043fe:	89a3      	ldrh	r3, [r4, #12]
 8004400:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004404:	81a3      	strh	r3, [r4, #12]
 8004406:	2300      	movs	r3, #0
 8004408:	6063      	str	r3, [r4, #4]
 800440a:	6923      	ldr	r3, [r4, #16]
 800440c:	6023      	str	r3, [r4, #0]
 800440e:	89a3      	ldrh	r3, [r4, #12]
 8004410:	f043 0308 	orr.w	r3, r3, #8
 8004414:	81a3      	strh	r3, [r4, #12]
 8004416:	6923      	ldr	r3, [r4, #16]
 8004418:	b94b      	cbnz	r3, 800442e <__swsetup_r+0x9a>
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004424:	d003      	beq.n	800442e <__swsetup_r+0x9a>
 8004426:	4621      	mov	r1, r4
 8004428:	4630      	mov	r0, r6
 800442a:	f000 f9c3 	bl	80047b4 <__smakebuf_r>
 800442e:	89a2      	ldrh	r2, [r4, #12]
 8004430:	f012 0301 	ands.w	r3, r2, #1
 8004434:	d00c      	beq.n	8004450 <__swsetup_r+0xbc>
 8004436:	2300      	movs	r3, #0
 8004438:	60a3      	str	r3, [r4, #8]
 800443a:	6963      	ldr	r3, [r4, #20]
 800443c:	425b      	negs	r3, r3
 800443e:	61a3      	str	r3, [r4, #24]
 8004440:	6923      	ldr	r3, [r4, #16]
 8004442:	b953      	cbnz	r3, 800445a <__swsetup_r+0xc6>
 8004444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004448:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800444c:	d1ba      	bne.n	80043c4 <__swsetup_r+0x30>
 800444e:	bd70      	pop	{r4, r5, r6, pc}
 8004450:	0792      	lsls	r2, r2, #30
 8004452:	bf58      	it	pl
 8004454:	6963      	ldrpl	r3, [r4, #20]
 8004456:	60a3      	str	r3, [r4, #8]
 8004458:	e7f2      	b.n	8004440 <__swsetup_r+0xac>
 800445a:	2000      	movs	r0, #0
 800445c:	e7f7      	b.n	800444e <__swsetup_r+0xba>
 800445e:	bf00      	nop
 8004460:	2000003c 	.word	0x2000003c
 8004464:	080051f8 	.word	0x080051f8
 8004468:	08005218 	.word	0x08005218
 800446c:	080051d8 	.word	0x080051d8

08004470 <__sflush_r>:
 8004470:	898a      	ldrh	r2, [r1, #12]
 8004472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004476:	4605      	mov	r5, r0
 8004478:	0710      	lsls	r0, r2, #28
 800447a:	460c      	mov	r4, r1
 800447c:	d458      	bmi.n	8004530 <__sflush_r+0xc0>
 800447e:	684b      	ldr	r3, [r1, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	dc05      	bgt.n	8004490 <__sflush_r+0x20>
 8004484:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	dc02      	bgt.n	8004490 <__sflush_r+0x20>
 800448a:	2000      	movs	r0, #0
 800448c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004490:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004492:	2e00      	cmp	r6, #0
 8004494:	d0f9      	beq.n	800448a <__sflush_r+0x1a>
 8004496:	2300      	movs	r3, #0
 8004498:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800449c:	682f      	ldr	r7, [r5, #0]
 800449e:	6a21      	ldr	r1, [r4, #32]
 80044a0:	602b      	str	r3, [r5, #0]
 80044a2:	d032      	beq.n	800450a <__sflush_r+0x9a>
 80044a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	075a      	lsls	r2, r3, #29
 80044aa:	d505      	bpl.n	80044b8 <__sflush_r+0x48>
 80044ac:	6863      	ldr	r3, [r4, #4]
 80044ae:	1ac0      	subs	r0, r0, r3
 80044b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044b2:	b10b      	cbz	r3, 80044b8 <__sflush_r+0x48>
 80044b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044b6:	1ac0      	subs	r0, r0, r3
 80044b8:	2300      	movs	r3, #0
 80044ba:	4602      	mov	r2, r0
 80044bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044be:	6a21      	ldr	r1, [r4, #32]
 80044c0:	4628      	mov	r0, r5
 80044c2:	47b0      	blx	r6
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	89a3      	ldrh	r3, [r4, #12]
 80044c8:	d106      	bne.n	80044d8 <__sflush_r+0x68>
 80044ca:	6829      	ldr	r1, [r5, #0]
 80044cc:	291d      	cmp	r1, #29
 80044ce:	d848      	bhi.n	8004562 <__sflush_r+0xf2>
 80044d0:	4a29      	ldr	r2, [pc, #164]	; (8004578 <__sflush_r+0x108>)
 80044d2:	40ca      	lsrs	r2, r1
 80044d4:	07d6      	lsls	r6, r2, #31
 80044d6:	d544      	bpl.n	8004562 <__sflush_r+0xf2>
 80044d8:	2200      	movs	r2, #0
 80044da:	6062      	str	r2, [r4, #4]
 80044dc:	04d9      	lsls	r1, r3, #19
 80044de:	6922      	ldr	r2, [r4, #16]
 80044e0:	6022      	str	r2, [r4, #0]
 80044e2:	d504      	bpl.n	80044ee <__sflush_r+0x7e>
 80044e4:	1c42      	adds	r2, r0, #1
 80044e6:	d101      	bne.n	80044ec <__sflush_r+0x7c>
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	b903      	cbnz	r3, 80044ee <__sflush_r+0x7e>
 80044ec:	6560      	str	r0, [r4, #84]	; 0x54
 80044ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044f0:	602f      	str	r7, [r5, #0]
 80044f2:	2900      	cmp	r1, #0
 80044f4:	d0c9      	beq.n	800448a <__sflush_r+0x1a>
 80044f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044fa:	4299      	cmp	r1, r3
 80044fc:	d002      	beq.n	8004504 <__sflush_r+0x94>
 80044fe:	4628      	mov	r0, r5
 8004500:	f000 f9aa 	bl	8004858 <_free_r>
 8004504:	2000      	movs	r0, #0
 8004506:	6360      	str	r0, [r4, #52]	; 0x34
 8004508:	e7c0      	b.n	800448c <__sflush_r+0x1c>
 800450a:	2301      	movs	r3, #1
 800450c:	4628      	mov	r0, r5
 800450e:	47b0      	blx	r6
 8004510:	1c41      	adds	r1, r0, #1
 8004512:	d1c8      	bne.n	80044a6 <__sflush_r+0x36>
 8004514:	682b      	ldr	r3, [r5, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0c5      	beq.n	80044a6 <__sflush_r+0x36>
 800451a:	2b1d      	cmp	r3, #29
 800451c:	d001      	beq.n	8004522 <__sflush_r+0xb2>
 800451e:	2b16      	cmp	r3, #22
 8004520:	d101      	bne.n	8004526 <__sflush_r+0xb6>
 8004522:	602f      	str	r7, [r5, #0]
 8004524:	e7b1      	b.n	800448a <__sflush_r+0x1a>
 8004526:	89a3      	ldrh	r3, [r4, #12]
 8004528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800452c:	81a3      	strh	r3, [r4, #12]
 800452e:	e7ad      	b.n	800448c <__sflush_r+0x1c>
 8004530:	690f      	ldr	r7, [r1, #16]
 8004532:	2f00      	cmp	r7, #0
 8004534:	d0a9      	beq.n	800448a <__sflush_r+0x1a>
 8004536:	0793      	lsls	r3, r2, #30
 8004538:	680e      	ldr	r6, [r1, #0]
 800453a:	bf08      	it	eq
 800453c:	694b      	ldreq	r3, [r1, #20]
 800453e:	600f      	str	r7, [r1, #0]
 8004540:	bf18      	it	ne
 8004542:	2300      	movne	r3, #0
 8004544:	eba6 0807 	sub.w	r8, r6, r7
 8004548:	608b      	str	r3, [r1, #8]
 800454a:	f1b8 0f00 	cmp.w	r8, #0
 800454e:	dd9c      	ble.n	800448a <__sflush_r+0x1a>
 8004550:	4643      	mov	r3, r8
 8004552:	463a      	mov	r2, r7
 8004554:	6a21      	ldr	r1, [r4, #32]
 8004556:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004558:	4628      	mov	r0, r5
 800455a:	47b0      	blx	r6
 800455c:	2800      	cmp	r0, #0
 800455e:	dc06      	bgt.n	800456e <__sflush_r+0xfe>
 8004560:	89a3      	ldrh	r3, [r4, #12]
 8004562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004566:	81a3      	strh	r3, [r4, #12]
 8004568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800456c:	e78e      	b.n	800448c <__sflush_r+0x1c>
 800456e:	4407      	add	r7, r0
 8004570:	eba8 0800 	sub.w	r8, r8, r0
 8004574:	e7e9      	b.n	800454a <__sflush_r+0xda>
 8004576:	bf00      	nop
 8004578:	20400001 	.word	0x20400001

0800457c <_fflush_r>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	690b      	ldr	r3, [r1, #16]
 8004580:	4605      	mov	r5, r0
 8004582:	460c      	mov	r4, r1
 8004584:	b1db      	cbz	r3, 80045be <_fflush_r+0x42>
 8004586:	b118      	cbz	r0, 8004590 <_fflush_r+0x14>
 8004588:	6983      	ldr	r3, [r0, #24]
 800458a:	b90b      	cbnz	r3, 8004590 <_fflush_r+0x14>
 800458c:	f000 f860 	bl	8004650 <__sinit>
 8004590:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <_fflush_r+0x48>)
 8004592:	429c      	cmp	r4, r3
 8004594:	d109      	bne.n	80045aa <_fflush_r+0x2e>
 8004596:	686c      	ldr	r4, [r5, #4]
 8004598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800459c:	b17b      	cbz	r3, 80045be <_fflush_r+0x42>
 800459e:	4621      	mov	r1, r4
 80045a0:	4628      	mov	r0, r5
 80045a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045a6:	f7ff bf63 	b.w	8004470 <__sflush_r>
 80045aa:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <_fflush_r+0x4c>)
 80045ac:	429c      	cmp	r4, r3
 80045ae:	d101      	bne.n	80045b4 <_fflush_r+0x38>
 80045b0:	68ac      	ldr	r4, [r5, #8]
 80045b2:	e7f1      	b.n	8004598 <_fflush_r+0x1c>
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <_fflush_r+0x50>)
 80045b6:	429c      	cmp	r4, r3
 80045b8:	bf08      	it	eq
 80045ba:	68ec      	ldreq	r4, [r5, #12]
 80045bc:	e7ec      	b.n	8004598 <_fflush_r+0x1c>
 80045be:	2000      	movs	r0, #0
 80045c0:	bd38      	pop	{r3, r4, r5, pc}
 80045c2:	bf00      	nop
 80045c4:	080051f8 	.word	0x080051f8
 80045c8:	08005218 	.word	0x08005218
 80045cc:	080051d8 	.word	0x080051d8

080045d0 <std>:
 80045d0:	2300      	movs	r3, #0
 80045d2:	b510      	push	{r4, lr}
 80045d4:	4604      	mov	r4, r0
 80045d6:	e9c0 3300 	strd	r3, r3, [r0]
 80045da:	6083      	str	r3, [r0, #8]
 80045dc:	8181      	strh	r1, [r0, #12]
 80045de:	6643      	str	r3, [r0, #100]	; 0x64
 80045e0:	81c2      	strh	r2, [r0, #14]
 80045e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045e6:	6183      	str	r3, [r0, #24]
 80045e8:	4619      	mov	r1, r3
 80045ea:	2208      	movs	r2, #8
 80045ec:	305c      	adds	r0, #92	; 0x5c
 80045ee:	f7ff fd41 	bl	8004074 <memset>
 80045f2:	4b05      	ldr	r3, [pc, #20]	; (8004608 <std+0x38>)
 80045f4:	6263      	str	r3, [r4, #36]	; 0x24
 80045f6:	4b05      	ldr	r3, [pc, #20]	; (800460c <std+0x3c>)
 80045f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80045fa:	4b05      	ldr	r3, [pc, #20]	; (8004610 <std+0x40>)
 80045fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045fe:	4b05      	ldr	r3, [pc, #20]	; (8004614 <std+0x44>)
 8004600:	6224      	str	r4, [r4, #32]
 8004602:	6323      	str	r3, [r4, #48]	; 0x30
 8004604:	bd10      	pop	{r4, pc}
 8004606:	bf00      	nop
 8004608:	08004fc5 	.word	0x08004fc5
 800460c:	08004fe7 	.word	0x08004fe7
 8004610:	0800501f 	.word	0x0800501f
 8004614:	08005043 	.word	0x08005043

08004618 <_cleanup_r>:
 8004618:	4901      	ldr	r1, [pc, #4]	; (8004620 <_cleanup_r+0x8>)
 800461a:	f000 b885 	b.w	8004728 <_fwalk_reent>
 800461e:	bf00      	nop
 8004620:	0800457d 	.word	0x0800457d

08004624 <__sfmoreglue>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	1e4a      	subs	r2, r1, #1
 8004628:	2568      	movs	r5, #104	; 0x68
 800462a:	4355      	muls	r5, r2
 800462c:	460e      	mov	r6, r1
 800462e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004632:	f000 f95f 	bl	80048f4 <_malloc_r>
 8004636:	4604      	mov	r4, r0
 8004638:	b140      	cbz	r0, 800464c <__sfmoreglue+0x28>
 800463a:	2100      	movs	r1, #0
 800463c:	e9c0 1600 	strd	r1, r6, [r0]
 8004640:	300c      	adds	r0, #12
 8004642:	60a0      	str	r0, [r4, #8]
 8004644:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004648:	f7ff fd14 	bl	8004074 <memset>
 800464c:	4620      	mov	r0, r4
 800464e:	bd70      	pop	{r4, r5, r6, pc}

08004650 <__sinit>:
 8004650:	6983      	ldr	r3, [r0, #24]
 8004652:	b510      	push	{r4, lr}
 8004654:	4604      	mov	r4, r0
 8004656:	bb33      	cbnz	r3, 80046a6 <__sinit+0x56>
 8004658:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800465c:	6503      	str	r3, [r0, #80]	; 0x50
 800465e:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <__sinit+0x58>)
 8004660:	4a12      	ldr	r2, [pc, #72]	; (80046ac <__sinit+0x5c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6282      	str	r2, [r0, #40]	; 0x28
 8004666:	4298      	cmp	r0, r3
 8004668:	bf04      	itt	eq
 800466a:	2301      	moveq	r3, #1
 800466c:	6183      	streq	r3, [r0, #24]
 800466e:	f000 f81f 	bl	80046b0 <__sfp>
 8004672:	6060      	str	r0, [r4, #4]
 8004674:	4620      	mov	r0, r4
 8004676:	f000 f81b 	bl	80046b0 <__sfp>
 800467a:	60a0      	str	r0, [r4, #8]
 800467c:	4620      	mov	r0, r4
 800467e:	f000 f817 	bl	80046b0 <__sfp>
 8004682:	2200      	movs	r2, #0
 8004684:	60e0      	str	r0, [r4, #12]
 8004686:	2104      	movs	r1, #4
 8004688:	6860      	ldr	r0, [r4, #4]
 800468a:	f7ff ffa1 	bl	80045d0 <std>
 800468e:	2201      	movs	r2, #1
 8004690:	2109      	movs	r1, #9
 8004692:	68a0      	ldr	r0, [r4, #8]
 8004694:	f7ff ff9c 	bl	80045d0 <std>
 8004698:	2202      	movs	r2, #2
 800469a:	2112      	movs	r1, #18
 800469c:	68e0      	ldr	r0, [r4, #12]
 800469e:	f7ff ff97 	bl	80045d0 <std>
 80046a2:	2301      	movs	r3, #1
 80046a4:	61a3      	str	r3, [r4, #24]
 80046a6:	bd10      	pop	{r4, pc}
 80046a8:	080051d4 	.word	0x080051d4
 80046ac:	08004619 	.word	0x08004619

080046b0 <__sfp>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <__sfp+0x70>)
 80046b4:	681e      	ldr	r6, [r3, #0]
 80046b6:	69b3      	ldr	r3, [r6, #24]
 80046b8:	4607      	mov	r7, r0
 80046ba:	b913      	cbnz	r3, 80046c2 <__sfp+0x12>
 80046bc:	4630      	mov	r0, r6
 80046be:	f7ff ffc7 	bl	8004650 <__sinit>
 80046c2:	3648      	adds	r6, #72	; 0x48
 80046c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	d503      	bpl.n	80046d4 <__sfp+0x24>
 80046cc:	6833      	ldr	r3, [r6, #0]
 80046ce:	b133      	cbz	r3, 80046de <__sfp+0x2e>
 80046d0:	6836      	ldr	r6, [r6, #0]
 80046d2:	e7f7      	b.n	80046c4 <__sfp+0x14>
 80046d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80046d8:	b16d      	cbz	r5, 80046f6 <__sfp+0x46>
 80046da:	3468      	adds	r4, #104	; 0x68
 80046dc:	e7f4      	b.n	80046c8 <__sfp+0x18>
 80046de:	2104      	movs	r1, #4
 80046e0:	4638      	mov	r0, r7
 80046e2:	f7ff ff9f 	bl	8004624 <__sfmoreglue>
 80046e6:	6030      	str	r0, [r6, #0]
 80046e8:	2800      	cmp	r0, #0
 80046ea:	d1f1      	bne.n	80046d0 <__sfp+0x20>
 80046ec:	230c      	movs	r3, #12
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	4604      	mov	r4, r0
 80046f2:	4620      	mov	r0, r4
 80046f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <__sfp+0x74>)
 80046f8:	6665      	str	r5, [r4, #100]	; 0x64
 80046fa:	e9c4 5500 	strd	r5, r5, [r4]
 80046fe:	60a5      	str	r5, [r4, #8]
 8004700:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004704:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004708:	2208      	movs	r2, #8
 800470a:	4629      	mov	r1, r5
 800470c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004710:	f7ff fcb0 	bl	8004074 <memset>
 8004714:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004718:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800471c:	e7e9      	b.n	80046f2 <__sfp+0x42>
 800471e:	bf00      	nop
 8004720:	080051d4 	.word	0x080051d4
 8004724:	ffff0001 	.word	0xffff0001

08004728 <_fwalk_reent>:
 8004728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800472c:	4680      	mov	r8, r0
 800472e:	4689      	mov	r9, r1
 8004730:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004734:	2600      	movs	r6, #0
 8004736:	b914      	cbnz	r4, 800473e <_fwalk_reent+0x16>
 8004738:	4630      	mov	r0, r6
 800473a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800473e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004742:	3f01      	subs	r7, #1
 8004744:	d501      	bpl.n	800474a <_fwalk_reent+0x22>
 8004746:	6824      	ldr	r4, [r4, #0]
 8004748:	e7f5      	b.n	8004736 <_fwalk_reent+0xe>
 800474a:	89ab      	ldrh	r3, [r5, #12]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d907      	bls.n	8004760 <_fwalk_reent+0x38>
 8004750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004754:	3301      	adds	r3, #1
 8004756:	d003      	beq.n	8004760 <_fwalk_reent+0x38>
 8004758:	4629      	mov	r1, r5
 800475a:	4640      	mov	r0, r8
 800475c:	47c8      	blx	r9
 800475e:	4306      	orrs	r6, r0
 8004760:	3568      	adds	r5, #104	; 0x68
 8004762:	e7ee      	b.n	8004742 <_fwalk_reent+0x1a>

08004764 <__locale_ctype_ptr_l>:
 8004764:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004768:	4770      	bx	lr

0800476a <__swhatbuf_r>:
 800476a:	b570      	push	{r4, r5, r6, lr}
 800476c:	460e      	mov	r6, r1
 800476e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004772:	2900      	cmp	r1, #0
 8004774:	b096      	sub	sp, #88	; 0x58
 8004776:	4614      	mov	r4, r2
 8004778:	461d      	mov	r5, r3
 800477a:	da07      	bge.n	800478c <__swhatbuf_r+0x22>
 800477c:	2300      	movs	r3, #0
 800477e:	602b      	str	r3, [r5, #0]
 8004780:	89b3      	ldrh	r3, [r6, #12]
 8004782:	061a      	lsls	r2, r3, #24
 8004784:	d410      	bmi.n	80047a8 <__swhatbuf_r+0x3e>
 8004786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800478a:	e00e      	b.n	80047aa <__swhatbuf_r+0x40>
 800478c:	466a      	mov	r2, sp
 800478e:	f000 fc8b 	bl	80050a8 <_fstat_r>
 8004792:	2800      	cmp	r0, #0
 8004794:	dbf2      	blt.n	800477c <__swhatbuf_r+0x12>
 8004796:	9a01      	ldr	r2, [sp, #4]
 8004798:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800479c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047a0:	425a      	negs	r2, r3
 80047a2:	415a      	adcs	r2, r3
 80047a4:	602a      	str	r2, [r5, #0]
 80047a6:	e7ee      	b.n	8004786 <__swhatbuf_r+0x1c>
 80047a8:	2340      	movs	r3, #64	; 0x40
 80047aa:	2000      	movs	r0, #0
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	b016      	add	sp, #88	; 0x58
 80047b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080047b4 <__smakebuf_r>:
 80047b4:	898b      	ldrh	r3, [r1, #12]
 80047b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047b8:	079d      	lsls	r5, r3, #30
 80047ba:	4606      	mov	r6, r0
 80047bc:	460c      	mov	r4, r1
 80047be:	d507      	bpl.n	80047d0 <__smakebuf_r+0x1c>
 80047c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047c4:	6023      	str	r3, [r4, #0]
 80047c6:	6123      	str	r3, [r4, #16]
 80047c8:	2301      	movs	r3, #1
 80047ca:	6163      	str	r3, [r4, #20]
 80047cc:	b002      	add	sp, #8
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	ab01      	add	r3, sp, #4
 80047d2:	466a      	mov	r2, sp
 80047d4:	f7ff ffc9 	bl	800476a <__swhatbuf_r>
 80047d8:	9900      	ldr	r1, [sp, #0]
 80047da:	4605      	mov	r5, r0
 80047dc:	4630      	mov	r0, r6
 80047de:	f000 f889 	bl	80048f4 <_malloc_r>
 80047e2:	b948      	cbnz	r0, 80047f8 <__smakebuf_r+0x44>
 80047e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047e8:	059a      	lsls	r2, r3, #22
 80047ea:	d4ef      	bmi.n	80047cc <__smakebuf_r+0x18>
 80047ec:	f023 0303 	bic.w	r3, r3, #3
 80047f0:	f043 0302 	orr.w	r3, r3, #2
 80047f4:	81a3      	strh	r3, [r4, #12]
 80047f6:	e7e3      	b.n	80047c0 <__smakebuf_r+0xc>
 80047f8:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <__smakebuf_r+0x7c>)
 80047fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80047fc:	89a3      	ldrh	r3, [r4, #12]
 80047fe:	6020      	str	r0, [r4, #0]
 8004800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004804:	81a3      	strh	r3, [r4, #12]
 8004806:	9b00      	ldr	r3, [sp, #0]
 8004808:	6163      	str	r3, [r4, #20]
 800480a:	9b01      	ldr	r3, [sp, #4]
 800480c:	6120      	str	r0, [r4, #16]
 800480e:	b15b      	cbz	r3, 8004828 <__smakebuf_r+0x74>
 8004810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004814:	4630      	mov	r0, r6
 8004816:	f000 fc59 	bl	80050cc <_isatty_r>
 800481a:	b128      	cbz	r0, 8004828 <__smakebuf_r+0x74>
 800481c:	89a3      	ldrh	r3, [r4, #12]
 800481e:	f023 0303 	bic.w	r3, r3, #3
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	81a3      	strh	r3, [r4, #12]
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	431d      	orrs	r5, r3
 800482c:	81a5      	strh	r5, [r4, #12]
 800482e:	e7cd      	b.n	80047cc <__smakebuf_r+0x18>
 8004830:	08004619 	.word	0x08004619

08004834 <__ascii_mbtowc>:
 8004834:	b082      	sub	sp, #8
 8004836:	b901      	cbnz	r1, 800483a <__ascii_mbtowc+0x6>
 8004838:	a901      	add	r1, sp, #4
 800483a:	b142      	cbz	r2, 800484e <__ascii_mbtowc+0x1a>
 800483c:	b14b      	cbz	r3, 8004852 <__ascii_mbtowc+0x1e>
 800483e:	7813      	ldrb	r3, [r2, #0]
 8004840:	600b      	str	r3, [r1, #0]
 8004842:	7812      	ldrb	r2, [r2, #0]
 8004844:	1c10      	adds	r0, r2, #0
 8004846:	bf18      	it	ne
 8004848:	2001      	movne	r0, #1
 800484a:	b002      	add	sp, #8
 800484c:	4770      	bx	lr
 800484e:	4610      	mov	r0, r2
 8004850:	e7fb      	b.n	800484a <__ascii_mbtowc+0x16>
 8004852:	f06f 0001 	mvn.w	r0, #1
 8004856:	e7f8      	b.n	800484a <__ascii_mbtowc+0x16>

08004858 <_free_r>:
 8004858:	b538      	push	{r3, r4, r5, lr}
 800485a:	4605      	mov	r5, r0
 800485c:	2900      	cmp	r1, #0
 800485e:	d045      	beq.n	80048ec <_free_r+0x94>
 8004860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004864:	1f0c      	subs	r4, r1, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	bfb8      	it	lt
 800486a:	18e4      	addlt	r4, r4, r3
 800486c:	f000 fc50 	bl	8005110 <__malloc_lock>
 8004870:	4a1f      	ldr	r2, [pc, #124]	; (80048f0 <_free_r+0x98>)
 8004872:	6813      	ldr	r3, [r2, #0]
 8004874:	4610      	mov	r0, r2
 8004876:	b933      	cbnz	r3, 8004886 <_free_r+0x2e>
 8004878:	6063      	str	r3, [r4, #4]
 800487a:	6014      	str	r4, [r2, #0]
 800487c:	4628      	mov	r0, r5
 800487e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004882:	f000 bc46 	b.w	8005112 <__malloc_unlock>
 8004886:	42a3      	cmp	r3, r4
 8004888:	d90c      	bls.n	80048a4 <_free_r+0x4c>
 800488a:	6821      	ldr	r1, [r4, #0]
 800488c:	1862      	adds	r2, r4, r1
 800488e:	4293      	cmp	r3, r2
 8004890:	bf04      	itt	eq
 8004892:	681a      	ldreq	r2, [r3, #0]
 8004894:	685b      	ldreq	r3, [r3, #4]
 8004896:	6063      	str	r3, [r4, #4]
 8004898:	bf04      	itt	eq
 800489a:	1852      	addeq	r2, r2, r1
 800489c:	6022      	streq	r2, [r4, #0]
 800489e:	6004      	str	r4, [r0, #0]
 80048a0:	e7ec      	b.n	800487c <_free_r+0x24>
 80048a2:	4613      	mov	r3, r2
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	b10a      	cbz	r2, 80048ac <_free_r+0x54>
 80048a8:	42a2      	cmp	r2, r4
 80048aa:	d9fa      	bls.n	80048a2 <_free_r+0x4a>
 80048ac:	6819      	ldr	r1, [r3, #0]
 80048ae:	1858      	adds	r0, r3, r1
 80048b0:	42a0      	cmp	r0, r4
 80048b2:	d10b      	bne.n	80048cc <_free_r+0x74>
 80048b4:	6820      	ldr	r0, [r4, #0]
 80048b6:	4401      	add	r1, r0
 80048b8:	1858      	adds	r0, r3, r1
 80048ba:	4282      	cmp	r2, r0
 80048bc:	6019      	str	r1, [r3, #0]
 80048be:	d1dd      	bne.n	800487c <_free_r+0x24>
 80048c0:	6810      	ldr	r0, [r2, #0]
 80048c2:	6852      	ldr	r2, [r2, #4]
 80048c4:	605a      	str	r2, [r3, #4]
 80048c6:	4401      	add	r1, r0
 80048c8:	6019      	str	r1, [r3, #0]
 80048ca:	e7d7      	b.n	800487c <_free_r+0x24>
 80048cc:	d902      	bls.n	80048d4 <_free_r+0x7c>
 80048ce:	230c      	movs	r3, #12
 80048d0:	602b      	str	r3, [r5, #0]
 80048d2:	e7d3      	b.n	800487c <_free_r+0x24>
 80048d4:	6820      	ldr	r0, [r4, #0]
 80048d6:	1821      	adds	r1, r4, r0
 80048d8:	428a      	cmp	r2, r1
 80048da:	bf04      	itt	eq
 80048dc:	6811      	ldreq	r1, [r2, #0]
 80048de:	6852      	ldreq	r2, [r2, #4]
 80048e0:	6062      	str	r2, [r4, #4]
 80048e2:	bf04      	itt	eq
 80048e4:	1809      	addeq	r1, r1, r0
 80048e6:	6021      	streq	r1, [r4, #0]
 80048e8:	605c      	str	r4, [r3, #4]
 80048ea:	e7c7      	b.n	800487c <_free_r+0x24>
 80048ec:	bd38      	pop	{r3, r4, r5, pc}
 80048ee:	bf00      	nop
 80048f0:	20000230 	.word	0x20000230

080048f4 <_malloc_r>:
 80048f4:	b570      	push	{r4, r5, r6, lr}
 80048f6:	1ccd      	adds	r5, r1, #3
 80048f8:	f025 0503 	bic.w	r5, r5, #3
 80048fc:	3508      	adds	r5, #8
 80048fe:	2d0c      	cmp	r5, #12
 8004900:	bf38      	it	cc
 8004902:	250c      	movcc	r5, #12
 8004904:	2d00      	cmp	r5, #0
 8004906:	4606      	mov	r6, r0
 8004908:	db01      	blt.n	800490e <_malloc_r+0x1a>
 800490a:	42a9      	cmp	r1, r5
 800490c:	d903      	bls.n	8004916 <_malloc_r+0x22>
 800490e:	230c      	movs	r3, #12
 8004910:	6033      	str	r3, [r6, #0]
 8004912:	2000      	movs	r0, #0
 8004914:	bd70      	pop	{r4, r5, r6, pc}
 8004916:	f000 fbfb 	bl	8005110 <__malloc_lock>
 800491a:	4a21      	ldr	r2, [pc, #132]	; (80049a0 <_malloc_r+0xac>)
 800491c:	6814      	ldr	r4, [r2, #0]
 800491e:	4621      	mov	r1, r4
 8004920:	b991      	cbnz	r1, 8004948 <_malloc_r+0x54>
 8004922:	4c20      	ldr	r4, [pc, #128]	; (80049a4 <_malloc_r+0xb0>)
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	b91b      	cbnz	r3, 8004930 <_malloc_r+0x3c>
 8004928:	4630      	mov	r0, r6
 800492a:	f000 fb3b 	bl	8004fa4 <_sbrk_r>
 800492e:	6020      	str	r0, [r4, #0]
 8004930:	4629      	mov	r1, r5
 8004932:	4630      	mov	r0, r6
 8004934:	f000 fb36 	bl	8004fa4 <_sbrk_r>
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	d124      	bne.n	8004986 <_malloc_r+0x92>
 800493c:	230c      	movs	r3, #12
 800493e:	6033      	str	r3, [r6, #0]
 8004940:	4630      	mov	r0, r6
 8004942:	f000 fbe6 	bl	8005112 <__malloc_unlock>
 8004946:	e7e4      	b.n	8004912 <_malloc_r+0x1e>
 8004948:	680b      	ldr	r3, [r1, #0]
 800494a:	1b5b      	subs	r3, r3, r5
 800494c:	d418      	bmi.n	8004980 <_malloc_r+0x8c>
 800494e:	2b0b      	cmp	r3, #11
 8004950:	d90f      	bls.n	8004972 <_malloc_r+0x7e>
 8004952:	600b      	str	r3, [r1, #0]
 8004954:	50cd      	str	r5, [r1, r3]
 8004956:	18cc      	adds	r4, r1, r3
 8004958:	4630      	mov	r0, r6
 800495a:	f000 fbda 	bl	8005112 <__malloc_unlock>
 800495e:	f104 000b 	add.w	r0, r4, #11
 8004962:	1d23      	adds	r3, r4, #4
 8004964:	f020 0007 	bic.w	r0, r0, #7
 8004968:	1ac3      	subs	r3, r0, r3
 800496a:	d0d3      	beq.n	8004914 <_malloc_r+0x20>
 800496c:	425a      	negs	r2, r3
 800496e:	50e2      	str	r2, [r4, r3]
 8004970:	e7d0      	b.n	8004914 <_malloc_r+0x20>
 8004972:	428c      	cmp	r4, r1
 8004974:	684b      	ldr	r3, [r1, #4]
 8004976:	bf16      	itet	ne
 8004978:	6063      	strne	r3, [r4, #4]
 800497a:	6013      	streq	r3, [r2, #0]
 800497c:	460c      	movne	r4, r1
 800497e:	e7eb      	b.n	8004958 <_malloc_r+0x64>
 8004980:	460c      	mov	r4, r1
 8004982:	6849      	ldr	r1, [r1, #4]
 8004984:	e7cc      	b.n	8004920 <_malloc_r+0x2c>
 8004986:	1cc4      	adds	r4, r0, #3
 8004988:	f024 0403 	bic.w	r4, r4, #3
 800498c:	42a0      	cmp	r0, r4
 800498e:	d005      	beq.n	800499c <_malloc_r+0xa8>
 8004990:	1a21      	subs	r1, r4, r0
 8004992:	4630      	mov	r0, r6
 8004994:	f000 fb06 	bl	8004fa4 <_sbrk_r>
 8004998:	3001      	adds	r0, #1
 800499a:	d0cf      	beq.n	800493c <_malloc_r+0x48>
 800499c:	6025      	str	r5, [r4, #0]
 800499e:	e7db      	b.n	8004958 <_malloc_r+0x64>
 80049a0:	20000230 	.word	0x20000230
 80049a4:	20000234 	.word	0x20000234

080049a8 <__sfputc_r>:
 80049a8:	6893      	ldr	r3, [r2, #8]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	b410      	push	{r4}
 80049b0:	6093      	str	r3, [r2, #8]
 80049b2:	da08      	bge.n	80049c6 <__sfputc_r+0x1e>
 80049b4:	6994      	ldr	r4, [r2, #24]
 80049b6:	42a3      	cmp	r3, r4
 80049b8:	db01      	blt.n	80049be <__sfputc_r+0x16>
 80049ba:	290a      	cmp	r1, #10
 80049bc:	d103      	bne.n	80049c6 <__sfputc_r+0x1e>
 80049be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049c2:	f7ff bc95 	b.w	80042f0 <__swbuf_r>
 80049c6:	6813      	ldr	r3, [r2, #0]
 80049c8:	1c58      	adds	r0, r3, #1
 80049ca:	6010      	str	r0, [r2, #0]
 80049cc:	7019      	strb	r1, [r3, #0]
 80049ce:	4608      	mov	r0, r1
 80049d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <__sfputs_r>:
 80049d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d8:	4606      	mov	r6, r0
 80049da:	460f      	mov	r7, r1
 80049dc:	4614      	mov	r4, r2
 80049de:	18d5      	adds	r5, r2, r3
 80049e0:	42ac      	cmp	r4, r5
 80049e2:	d101      	bne.n	80049e8 <__sfputs_r+0x12>
 80049e4:	2000      	movs	r0, #0
 80049e6:	e007      	b.n	80049f8 <__sfputs_r+0x22>
 80049e8:	463a      	mov	r2, r7
 80049ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ee:	4630      	mov	r0, r6
 80049f0:	f7ff ffda 	bl	80049a8 <__sfputc_r>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d1f3      	bne.n	80049e0 <__sfputs_r+0xa>
 80049f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049fc <_vfiprintf_r>:
 80049fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a00:	460c      	mov	r4, r1
 8004a02:	b09d      	sub	sp, #116	; 0x74
 8004a04:	4617      	mov	r7, r2
 8004a06:	461d      	mov	r5, r3
 8004a08:	4606      	mov	r6, r0
 8004a0a:	b118      	cbz	r0, 8004a14 <_vfiprintf_r+0x18>
 8004a0c:	6983      	ldr	r3, [r0, #24]
 8004a0e:	b90b      	cbnz	r3, 8004a14 <_vfiprintf_r+0x18>
 8004a10:	f7ff fe1e 	bl	8004650 <__sinit>
 8004a14:	4b7c      	ldr	r3, [pc, #496]	; (8004c08 <_vfiprintf_r+0x20c>)
 8004a16:	429c      	cmp	r4, r3
 8004a18:	d158      	bne.n	8004acc <_vfiprintf_r+0xd0>
 8004a1a:	6874      	ldr	r4, [r6, #4]
 8004a1c:	89a3      	ldrh	r3, [r4, #12]
 8004a1e:	0718      	lsls	r0, r3, #28
 8004a20:	d55e      	bpl.n	8004ae0 <_vfiprintf_r+0xe4>
 8004a22:	6923      	ldr	r3, [r4, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d05b      	beq.n	8004ae0 <_vfiprintf_r+0xe4>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a2c:	2320      	movs	r3, #32
 8004a2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a32:	2330      	movs	r3, #48	; 0x30
 8004a34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a38:	9503      	str	r5, [sp, #12]
 8004a3a:	f04f 0b01 	mov.w	fp, #1
 8004a3e:	46b8      	mov	r8, r7
 8004a40:	4645      	mov	r5, r8
 8004a42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a46:	b10b      	cbz	r3, 8004a4c <_vfiprintf_r+0x50>
 8004a48:	2b25      	cmp	r3, #37	; 0x25
 8004a4a:	d154      	bne.n	8004af6 <_vfiprintf_r+0xfa>
 8004a4c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004a50:	d00b      	beq.n	8004a6a <_vfiprintf_r+0x6e>
 8004a52:	4653      	mov	r3, sl
 8004a54:	463a      	mov	r2, r7
 8004a56:	4621      	mov	r1, r4
 8004a58:	4630      	mov	r0, r6
 8004a5a:	f7ff ffbc 	bl	80049d6 <__sfputs_r>
 8004a5e:	3001      	adds	r0, #1
 8004a60:	f000 80c2 	beq.w	8004be8 <_vfiprintf_r+0x1ec>
 8004a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a66:	4453      	add	r3, sl
 8004a68:	9309      	str	r3, [sp, #36]	; 0x24
 8004a6a:	f898 3000 	ldrb.w	r3, [r8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 80ba 	beq.w	8004be8 <_vfiprintf_r+0x1ec>
 8004a74:	2300      	movs	r3, #0
 8004a76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a7e:	9304      	str	r3, [sp, #16]
 8004a80:	9307      	str	r3, [sp, #28]
 8004a82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a86:	931a      	str	r3, [sp, #104]	; 0x68
 8004a88:	46a8      	mov	r8, r5
 8004a8a:	2205      	movs	r2, #5
 8004a8c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004a90:	485e      	ldr	r0, [pc, #376]	; (8004c0c <_vfiprintf_r+0x210>)
 8004a92:	f7fb fba5 	bl	80001e0 <memchr>
 8004a96:	9b04      	ldr	r3, [sp, #16]
 8004a98:	bb78      	cbnz	r0, 8004afa <_vfiprintf_r+0xfe>
 8004a9a:	06d9      	lsls	r1, r3, #27
 8004a9c:	bf44      	itt	mi
 8004a9e:	2220      	movmi	r2, #32
 8004aa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004aa4:	071a      	lsls	r2, r3, #28
 8004aa6:	bf44      	itt	mi
 8004aa8:	222b      	movmi	r2, #43	; 0x2b
 8004aaa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004aae:	782a      	ldrb	r2, [r5, #0]
 8004ab0:	2a2a      	cmp	r2, #42	; 0x2a
 8004ab2:	d02a      	beq.n	8004b0a <_vfiprintf_r+0x10e>
 8004ab4:	9a07      	ldr	r2, [sp, #28]
 8004ab6:	46a8      	mov	r8, r5
 8004ab8:	2000      	movs	r0, #0
 8004aba:	250a      	movs	r5, #10
 8004abc:	4641      	mov	r1, r8
 8004abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ac2:	3b30      	subs	r3, #48	; 0x30
 8004ac4:	2b09      	cmp	r3, #9
 8004ac6:	d969      	bls.n	8004b9c <_vfiprintf_r+0x1a0>
 8004ac8:	b360      	cbz	r0, 8004b24 <_vfiprintf_r+0x128>
 8004aca:	e024      	b.n	8004b16 <_vfiprintf_r+0x11a>
 8004acc:	4b50      	ldr	r3, [pc, #320]	; (8004c10 <_vfiprintf_r+0x214>)
 8004ace:	429c      	cmp	r4, r3
 8004ad0:	d101      	bne.n	8004ad6 <_vfiprintf_r+0xda>
 8004ad2:	68b4      	ldr	r4, [r6, #8]
 8004ad4:	e7a2      	b.n	8004a1c <_vfiprintf_r+0x20>
 8004ad6:	4b4f      	ldr	r3, [pc, #316]	; (8004c14 <_vfiprintf_r+0x218>)
 8004ad8:	429c      	cmp	r4, r3
 8004ada:	bf08      	it	eq
 8004adc:	68f4      	ldreq	r4, [r6, #12]
 8004ade:	e79d      	b.n	8004a1c <_vfiprintf_r+0x20>
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f7ff fc56 	bl	8004394 <__swsetup_r>
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	d09d      	beq.n	8004a28 <_vfiprintf_r+0x2c>
 8004aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004af0:	b01d      	add	sp, #116	; 0x74
 8004af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004af6:	46a8      	mov	r8, r5
 8004af8:	e7a2      	b.n	8004a40 <_vfiprintf_r+0x44>
 8004afa:	4a44      	ldr	r2, [pc, #272]	; (8004c0c <_vfiprintf_r+0x210>)
 8004afc:	1a80      	subs	r0, r0, r2
 8004afe:	fa0b f000 	lsl.w	r0, fp, r0
 8004b02:	4318      	orrs	r0, r3
 8004b04:	9004      	str	r0, [sp, #16]
 8004b06:	4645      	mov	r5, r8
 8004b08:	e7be      	b.n	8004a88 <_vfiprintf_r+0x8c>
 8004b0a:	9a03      	ldr	r2, [sp, #12]
 8004b0c:	1d11      	adds	r1, r2, #4
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	9103      	str	r1, [sp, #12]
 8004b12:	2a00      	cmp	r2, #0
 8004b14:	db01      	blt.n	8004b1a <_vfiprintf_r+0x11e>
 8004b16:	9207      	str	r2, [sp, #28]
 8004b18:	e004      	b.n	8004b24 <_vfiprintf_r+0x128>
 8004b1a:	4252      	negs	r2, r2
 8004b1c:	f043 0302 	orr.w	r3, r3, #2
 8004b20:	9207      	str	r2, [sp, #28]
 8004b22:	9304      	str	r3, [sp, #16]
 8004b24:	f898 3000 	ldrb.w	r3, [r8]
 8004b28:	2b2e      	cmp	r3, #46	; 0x2e
 8004b2a:	d10e      	bne.n	8004b4a <_vfiprintf_r+0x14e>
 8004b2c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004b30:	2b2a      	cmp	r3, #42	; 0x2a
 8004b32:	d138      	bne.n	8004ba6 <_vfiprintf_r+0x1aa>
 8004b34:	9b03      	ldr	r3, [sp, #12]
 8004b36:	1d1a      	adds	r2, r3, #4
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	9203      	str	r2, [sp, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	bfb8      	it	lt
 8004b40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004b44:	f108 0802 	add.w	r8, r8, #2
 8004b48:	9305      	str	r3, [sp, #20]
 8004b4a:	4d33      	ldr	r5, [pc, #204]	; (8004c18 <_vfiprintf_r+0x21c>)
 8004b4c:	f898 1000 	ldrb.w	r1, [r8]
 8004b50:	2203      	movs	r2, #3
 8004b52:	4628      	mov	r0, r5
 8004b54:	f7fb fb44 	bl	80001e0 <memchr>
 8004b58:	b140      	cbz	r0, 8004b6c <_vfiprintf_r+0x170>
 8004b5a:	2340      	movs	r3, #64	; 0x40
 8004b5c:	1b40      	subs	r0, r0, r5
 8004b5e:	fa03 f000 	lsl.w	r0, r3, r0
 8004b62:	9b04      	ldr	r3, [sp, #16]
 8004b64:	4303      	orrs	r3, r0
 8004b66:	f108 0801 	add.w	r8, r8, #1
 8004b6a:	9304      	str	r3, [sp, #16]
 8004b6c:	f898 1000 	ldrb.w	r1, [r8]
 8004b70:	482a      	ldr	r0, [pc, #168]	; (8004c1c <_vfiprintf_r+0x220>)
 8004b72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b76:	2206      	movs	r2, #6
 8004b78:	f108 0701 	add.w	r7, r8, #1
 8004b7c:	f7fb fb30 	bl	80001e0 <memchr>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	d037      	beq.n	8004bf4 <_vfiprintf_r+0x1f8>
 8004b84:	4b26      	ldr	r3, [pc, #152]	; (8004c20 <_vfiprintf_r+0x224>)
 8004b86:	bb1b      	cbnz	r3, 8004bd0 <_vfiprintf_r+0x1d4>
 8004b88:	9b03      	ldr	r3, [sp, #12]
 8004b8a:	3307      	adds	r3, #7
 8004b8c:	f023 0307 	bic.w	r3, r3, #7
 8004b90:	3308      	adds	r3, #8
 8004b92:	9303      	str	r3, [sp, #12]
 8004b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b96:	444b      	add	r3, r9
 8004b98:	9309      	str	r3, [sp, #36]	; 0x24
 8004b9a:	e750      	b.n	8004a3e <_vfiprintf_r+0x42>
 8004b9c:	fb05 3202 	mla	r2, r5, r2, r3
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	4688      	mov	r8, r1
 8004ba4:	e78a      	b.n	8004abc <_vfiprintf_r+0xc0>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f108 0801 	add.w	r8, r8, #1
 8004bac:	9305      	str	r3, [sp, #20]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	250a      	movs	r5, #10
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bb8:	3a30      	subs	r2, #48	; 0x30
 8004bba:	2a09      	cmp	r2, #9
 8004bbc:	d903      	bls.n	8004bc6 <_vfiprintf_r+0x1ca>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0c3      	beq.n	8004b4a <_vfiprintf_r+0x14e>
 8004bc2:	9105      	str	r1, [sp, #20]
 8004bc4:	e7c1      	b.n	8004b4a <_vfiprintf_r+0x14e>
 8004bc6:	fb05 2101 	mla	r1, r5, r1, r2
 8004bca:	2301      	movs	r3, #1
 8004bcc:	4680      	mov	r8, r0
 8004bce:	e7f0      	b.n	8004bb2 <_vfiprintf_r+0x1b6>
 8004bd0:	ab03      	add	r3, sp, #12
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	4622      	mov	r2, r4
 8004bd6:	4b13      	ldr	r3, [pc, #76]	; (8004c24 <_vfiprintf_r+0x228>)
 8004bd8:	a904      	add	r1, sp, #16
 8004bda:	4630      	mov	r0, r6
 8004bdc:	f3af 8000 	nop.w
 8004be0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004be4:	4681      	mov	r9, r0
 8004be6:	d1d5      	bne.n	8004b94 <_vfiprintf_r+0x198>
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	065b      	lsls	r3, r3, #25
 8004bec:	f53f af7e 	bmi.w	8004aec <_vfiprintf_r+0xf0>
 8004bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bf2:	e77d      	b.n	8004af0 <_vfiprintf_r+0xf4>
 8004bf4:	ab03      	add	r3, sp, #12
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	4622      	mov	r2, r4
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <_vfiprintf_r+0x228>)
 8004bfc:	a904      	add	r1, sp, #16
 8004bfe:	4630      	mov	r0, r6
 8004c00:	f000 f888 	bl	8004d14 <_printf_i>
 8004c04:	e7ec      	b.n	8004be0 <_vfiprintf_r+0x1e4>
 8004c06:	bf00      	nop
 8004c08:	080051f8 	.word	0x080051f8
 8004c0c:	08005242 	.word	0x08005242
 8004c10:	08005218 	.word	0x08005218
 8004c14:	080051d8 	.word	0x080051d8
 8004c18:	08005248 	.word	0x08005248
 8004c1c:	0800524c 	.word	0x0800524c
 8004c20:	00000000 	.word	0x00000000
 8004c24:	080049d7 	.word	0x080049d7

08004c28 <_printf_common>:
 8004c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c2c:	4691      	mov	r9, r2
 8004c2e:	461f      	mov	r7, r3
 8004c30:	688a      	ldr	r2, [r1, #8]
 8004c32:	690b      	ldr	r3, [r1, #16]
 8004c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	bfb8      	it	lt
 8004c3c:	4613      	movlt	r3, r2
 8004c3e:	f8c9 3000 	str.w	r3, [r9]
 8004c42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c46:	4606      	mov	r6, r0
 8004c48:	460c      	mov	r4, r1
 8004c4a:	b112      	cbz	r2, 8004c52 <_printf_common+0x2a>
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	f8c9 3000 	str.w	r3, [r9]
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	0699      	lsls	r1, r3, #26
 8004c56:	bf42      	ittt	mi
 8004c58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c5c:	3302      	addmi	r3, #2
 8004c5e:	f8c9 3000 	strmi.w	r3, [r9]
 8004c62:	6825      	ldr	r5, [r4, #0]
 8004c64:	f015 0506 	ands.w	r5, r5, #6
 8004c68:	d107      	bne.n	8004c7a <_printf_common+0x52>
 8004c6a:	f104 0a19 	add.w	sl, r4, #25
 8004c6e:	68e3      	ldr	r3, [r4, #12]
 8004c70:	f8d9 2000 	ldr.w	r2, [r9]
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	42ab      	cmp	r3, r5
 8004c78:	dc28      	bgt.n	8004ccc <_printf_common+0xa4>
 8004c7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c7e:	6822      	ldr	r2, [r4, #0]
 8004c80:	3300      	adds	r3, #0
 8004c82:	bf18      	it	ne
 8004c84:	2301      	movne	r3, #1
 8004c86:	0692      	lsls	r2, r2, #26
 8004c88:	d42d      	bmi.n	8004ce6 <_printf_common+0xbe>
 8004c8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c8e:	4639      	mov	r1, r7
 8004c90:	4630      	mov	r0, r6
 8004c92:	47c0      	blx	r8
 8004c94:	3001      	adds	r0, #1
 8004c96:	d020      	beq.n	8004cda <_printf_common+0xb2>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	68e5      	ldr	r5, [r4, #12]
 8004c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8004ca0:	f003 0306 	and.w	r3, r3, #6
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	bf08      	it	eq
 8004ca8:	1aad      	subeq	r5, r5, r2
 8004caa:	68a3      	ldr	r3, [r4, #8]
 8004cac:	6922      	ldr	r2, [r4, #16]
 8004cae:	bf0c      	ite	eq
 8004cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cb4:	2500      	movne	r5, #0
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	bfc4      	itt	gt
 8004cba:	1a9b      	subgt	r3, r3, r2
 8004cbc:	18ed      	addgt	r5, r5, r3
 8004cbe:	f04f 0900 	mov.w	r9, #0
 8004cc2:	341a      	adds	r4, #26
 8004cc4:	454d      	cmp	r5, r9
 8004cc6:	d11a      	bne.n	8004cfe <_printf_common+0xd6>
 8004cc8:	2000      	movs	r0, #0
 8004cca:	e008      	b.n	8004cde <_printf_common+0xb6>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	4652      	mov	r2, sl
 8004cd0:	4639      	mov	r1, r7
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	47c0      	blx	r8
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	d103      	bne.n	8004ce2 <_printf_common+0xba>
 8004cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce2:	3501      	adds	r5, #1
 8004ce4:	e7c3      	b.n	8004c6e <_printf_common+0x46>
 8004ce6:	18e1      	adds	r1, r4, r3
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	2030      	movs	r0, #48	; 0x30
 8004cec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cf0:	4422      	add	r2, r4
 8004cf2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	e7c5      	b.n	8004c8a <_printf_common+0x62>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4622      	mov	r2, r4
 8004d02:	4639      	mov	r1, r7
 8004d04:	4630      	mov	r0, r6
 8004d06:	47c0      	blx	r8
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d0e6      	beq.n	8004cda <_printf_common+0xb2>
 8004d0c:	f109 0901 	add.w	r9, r9, #1
 8004d10:	e7d8      	b.n	8004cc4 <_printf_common+0x9c>
	...

08004d14 <_printf_i>:
 8004d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	7e09      	ldrb	r1, [r1, #24]
 8004d20:	b085      	sub	sp, #20
 8004d22:	296e      	cmp	r1, #110	; 0x6e
 8004d24:	4617      	mov	r7, r2
 8004d26:	4606      	mov	r6, r0
 8004d28:	4698      	mov	r8, r3
 8004d2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d2c:	f000 80b3 	beq.w	8004e96 <_printf_i+0x182>
 8004d30:	d822      	bhi.n	8004d78 <_printf_i+0x64>
 8004d32:	2963      	cmp	r1, #99	; 0x63
 8004d34:	d036      	beq.n	8004da4 <_printf_i+0x90>
 8004d36:	d80a      	bhi.n	8004d4e <_printf_i+0x3a>
 8004d38:	2900      	cmp	r1, #0
 8004d3a:	f000 80b9 	beq.w	8004eb0 <_printf_i+0x19c>
 8004d3e:	2958      	cmp	r1, #88	; 0x58
 8004d40:	f000 8083 	beq.w	8004e4a <_printf_i+0x136>
 8004d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d4c:	e032      	b.n	8004db4 <_printf_i+0xa0>
 8004d4e:	2964      	cmp	r1, #100	; 0x64
 8004d50:	d001      	beq.n	8004d56 <_printf_i+0x42>
 8004d52:	2969      	cmp	r1, #105	; 0x69
 8004d54:	d1f6      	bne.n	8004d44 <_printf_i+0x30>
 8004d56:	6820      	ldr	r0, [r4, #0]
 8004d58:	6813      	ldr	r3, [r2, #0]
 8004d5a:	0605      	lsls	r5, r0, #24
 8004d5c:	f103 0104 	add.w	r1, r3, #4
 8004d60:	d52a      	bpl.n	8004db8 <_printf_i+0xa4>
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6011      	str	r1, [r2, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	da03      	bge.n	8004d72 <_printf_i+0x5e>
 8004d6a:	222d      	movs	r2, #45	; 0x2d
 8004d6c:	425b      	negs	r3, r3
 8004d6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d72:	486f      	ldr	r0, [pc, #444]	; (8004f30 <_printf_i+0x21c>)
 8004d74:	220a      	movs	r2, #10
 8004d76:	e039      	b.n	8004dec <_printf_i+0xd8>
 8004d78:	2973      	cmp	r1, #115	; 0x73
 8004d7a:	f000 809d 	beq.w	8004eb8 <_printf_i+0x1a4>
 8004d7e:	d808      	bhi.n	8004d92 <_printf_i+0x7e>
 8004d80:	296f      	cmp	r1, #111	; 0x6f
 8004d82:	d020      	beq.n	8004dc6 <_printf_i+0xb2>
 8004d84:	2970      	cmp	r1, #112	; 0x70
 8004d86:	d1dd      	bne.n	8004d44 <_printf_i+0x30>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	f043 0320 	orr.w	r3, r3, #32
 8004d8e:	6023      	str	r3, [r4, #0]
 8004d90:	e003      	b.n	8004d9a <_printf_i+0x86>
 8004d92:	2975      	cmp	r1, #117	; 0x75
 8004d94:	d017      	beq.n	8004dc6 <_printf_i+0xb2>
 8004d96:	2978      	cmp	r1, #120	; 0x78
 8004d98:	d1d4      	bne.n	8004d44 <_printf_i+0x30>
 8004d9a:	2378      	movs	r3, #120	; 0x78
 8004d9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004da0:	4864      	ldr	r0, [pc, #400]	; (8004f34 <_printf_i+0x220>)
 8004da2:	e055      	b.n	8004e50 <_printf_i+0x13c>
 8004da4:	6813      	ldr	r3, [r2, #0]
 8004da6:	1d19      	adds	r1, r3, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6011      	str	r1, [r2, #0]
 8004dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004db4:	2301      	movs	r3, #1
 8004db6:	e08c      	b.n	8004ed2 <_printf_i+0x1be>
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6011      	str	r1, [r2, #0]
 8004dbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dc0:	bf18      	it	ne
 8004dc2:	b21b      	sxthne	r3, r3
 8004dc4:	e7cf      	b.n	8004d66 <_printf_i+0x52>
 8004dc6:	6813      	ldr	r3, [r2, #0]
 8004dc8:	6825      	ldr	r5, [r4, #0]
 8004dca:	1d18      	adds	r0, r3, #4
 8004dcc:	6010      	str	r0, [r2, #0]
 8004dce:	0628      	lsls	r0, r5, #24
 8004dd0:	d501      	bpl.n	8004dd6 <_printf_i+0xc2>
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	e002      	b.n	8004ddc <_printf_i+0xc8>
 8004dd6:	0668      	lsls	r0, r5, #25
 8004dd8:	d5fb      	bpl.n	8004dd2 <_printf_i+0xbe>
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	4854      	ldr	r0, [pc, #336]	; (8004f30 <_printf_i+0x21c>)
 8004dde:	296f      	cmp	r1, #111	; 0x6f
 8004de0:	bf14      	ite	ne
 8004de2:	220a      	movne	r2, #10
 8004de4:	2208      	moveq	r2, #8
 8004de6:	2100      	movs	r1, #0
 8004de8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dec:	6865      	ldr	r5, [r4, #4]
 8004dee:	60a5      	str	r5, [r4, #8]
 8004df0:	2d00      	cmp	r5, #0
 8004df2:	f2c0 8095 	blt.w	8004f20 <_printf_i+0x20c>
 8004df6:	6821      	ldr	r1, [r4, #0]
 8004df8:	f021 0104 	bic.w	r1, r1, #4
 8004dfc:	6021      	str	r1, [r4, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d13d      	bne.n	8004e7e <_printf_i+0x16a>
 8004e02:	2d00      	cmp	r5, #0
 8004e04:	f040 808e 	bne.w	8004f24 <_printf_i+0x210>
 8004e08:	4665      	mov	r5, ip
 8004e0a:	2a08      	cmp	r2, #8
 8004e0c:	d10b      	bne.n	8004e26 <_printf_i+0x112>
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	07db      	lsls	r3, r3, #31
 8004e12:	d508      	bpl.n	8004e26 <_printf_i+0x112>
 8004e14:	6923      	ldr	r3, [r4, #16]
 8004e16:	6862      	ldr	r2, [r4, #4]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	bfde      	ittt	le
 8004e1c:	2330      	movle	r3, #48	; 0x30
 8004e1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e22:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004e26:	ebac 0305 	sub.w	r3, ip, r5
 8004e2a:	6123      	str	r3, [r4, #16]
 8004e2c:	f8cd 8000 	str.w	r8, [sp]
 8004e30:	463b      	mov	r3, r7
 8004e32:	aa03      	add	r2, sp, #12
 8004e34:	4621      	mov	r1, r4
 8004e36:	4630      	mov	r0, r6
 8004e38:	f7ff fef6 	bl	8004c28 <_printf_common>
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d14d      	bne.n	8004edc <_printf_i+0x1c8>
 8004e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e44:	b005      	add	sp, #20
 8004e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e4a:	4839      	ldr	r0, [pc, #228]	; (8004f30 <_printf_i+0x21c>)
 8004e4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e50:	6813      	ldr	r3, [r2, #0]
 8004e52:	6821      	ldr	r1, [r4, #0]
 8004e54:	1d1d      	adds	r5, r3, #4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6015      	str	r5, [r2, #0]
 8004e5a:	060a      	lsls	r2, r1, #24
 8004e5c:	d50b      	bpl.n	8004e76 <_printf_i+0x162>
 8004e5e:	07ca      	lsls	r2, r1, #31
 8004e60:	bf44      	itt	mi
 8004e62:	f041 0120 	orrmi.w	r1, r1, #32
 8004e66:	6021      	strmi	r1, [r4, #0]
 8004e68:	b91b      	cbnz	r3, 8004e72 <_printf_i+0x15e>
 8004e6a:	6822      	ldr	r2, [r4, #0]
 8004e6c:	f022 0220 	bic.w	r2, r2, #32
 8004e70:	6022      	str	r2, [r4, #0]
 8004e72:	2210      	movs	r2, #16
 8004e74:	e7b7      	b.n	8004de6 <_printf_i+0xd2>
 8004e76:	064d      	lsls	r5, r1, #25
 8004e78:	bf48      	it	mi
 8004e7a:	b29b      	uxthmi	r3, r3
 8004e7c:	e7ef      	b.n	8004e5e <_printf_i+0x14a>
 8004e7e:	4665      	mov	r5, ip
 8004e80:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e84:	fb02 3311 	mls	r3, r2, r1, r3
 8004e88:	5cc3      	ldrb	r3, [r0, r3]
 8004e8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e8e:	460b      	mov	r3, r1
 8004e90:	2900      	cmp	r1, #0
 8004e92:	d1f5      	bne.n	8004e80 <_printf_i+0x16c>
 8004e94:	e7b9      	b.n	8004e0a <_printf_i+0xf6>
 8004e96:	6813      	ldr	r3, [r2, #0]
 8004e98:	6825      	ldr	r5, [r4, #0]
 8004e9a:	6961      	ldr	r1, [r4, #20]
 8004e9c:	1d18      	adds	r0, r3, #4
 8004e9e:	6010      	str	r0, [r2, #0]
 8004ea0:	0628      	lsls	r0, r5, #24
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	d501      	bpl.n	8004eaa <_printf_i+0x196>
 8004ea6:	6019      	str	r1, [r3, #0]
 8004ea8:	e002      	b.n	8004eb0 <_printf_i+0x19c>
 8004eaa:	066a      	lsls	r2, r5, #25
 8004eac:	d5fb      	bpl.n	8004ea6 <_printf_i+0x192>
 8004eae:	8019      	strh	r1, [r3, #0]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	6123      	str	r3, [r4, #16]
 8004eb4:	4665      	mov	r5, ip
 8004eb6:	e7b9      	b.n	8004e2c <_printf_i+0x118>
 8004eb8:	6813      	ldr	r3, [r2, #0]
 8004eba:	1d19      	adds	r1, r3, #4
 8004ebc:	6011      	str	r1, [r2, #0]
 8004ebe:	681d      	ldr	r5, [r3, #0]
 8004ec0:	6862      	ldr	r2, [r4, #4]
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	f7fb f98b 	bl	80001e0 <memchr>
 8004eca:	b108      	cbz	r0, 8004ed0 <_printf_i+0x1bc>
 8004ecc:	1b40      	subs	r0, r0, r5
 8004ece:	6060      	str	r0, [r4, #4]
 8004ed0:	6863      	ldr	r3, [r4, #4]
 8004ed2:	6123      	str	r3, [r4, #16]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eda:	e7a7      	b.n	8004e2c <_printf_i+0x118>
 8004edc:	6923      	ldr	r3, [r4, #16]
 8004ede:	462a      	mov	r2, r5
 8004ee0:	4639      	mov	r1, r7
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	47c0      	blx	r8
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d0aa      	beq.n	8004e40 <_printf_i+0x12c>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	079b      	lsls	r3, r3, #30
 8004eee:	d413      	bmi.n	8004f18 <_printf_i+0x204>
 8004ef0:	68e0      	ldr	r0, [r4, #12]
 8004ef2:	9b03      	ldr	r3, [sp, #12]
 8004ef4:	4298      	cmp	r0, r3
 8004ef6:	bfb8      	it	lt
 8004ef8:	4618      	movlt	r0, r3
 8004efa:	e7a3      	b.n	8004e44 <_printf_i+0x130>
 8004efc:	2301      	movs	r3, #1
 8004efe:	464a      	mov	r2, r9
 8004f00:	4639      	mov	r1, r7
 8004f02:	4630      	mov	r0, r6
 8004f04:	47c0      	blx	r8
 8004f06:	3001      	adds	r0, #1
 8004f08:	d09a      	beq.n	8004e40 <_printf_i+0x12c>
 8004f0a:	3501      	adds	r5, #1
 8004f0c:	68e3      	ldr	r3, [r4, #12]
 8004f0e:	9a03      	ldr	r2, [sp, #12]
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	42ab      	cmp	r3, r5
 8004f14:	dcf2      	bgt.n	8004efc <_printf_i+0x1e8>
 8004f16:	e7eb      	b.n	8004ef0 <_printf_i+0x1dc>
 8004f18:	2500      	movs	r5, #0
 8004f1a:	f104 0919 	add.w	r9, r4, #25
 8004f1e:	e7f5      	b.n	8004f0c <_printf_i+0x1f8>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1ac      	bne.n	8004e7e <_printf_i+0x16a>
 8004f24:	7803      	ldrb	r3, [r0, #0]
 8004f26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f2e:	e76c      	b.n	8004e0a <_printf_i+0xf6>
 8004f30:	08005253 	.word	0x08005253
 8004f34:	08005264 	.word	0x08005264

08004f38 <_putc_r>:
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	460d      	mov	r5, r1
 8004f3c:	4614      	mov	r4, r2
 8004f3e:	4606      	mov	r6, r0
 8004f40:	b118      	cbz	r0, 8004f4a <_putc_r+0x12>
 8004f42:	6983      	ldr	r3, [r0, #24]
 8004f44:	b90b      	cbnz	r3, 8004f4a <_putc_r+0x12>
 8004f46:	f7ff fb83 	bl	8004650 <__sinit>
 8004f4a:	4b13      	ldr	r3, [pc, #76]	; (8004f98 <_putc_r+0x60>)
 8004f4c:	429c      	cmp	r4, r3
 8004f4e:	d112      	bne.n	8004f76 <_putc_r+0x3e>
 8004f50:	6874      	ldr	r4, [r6, #4]
 8004f52:	68a3      	ldr	r3, [r4, #8]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	60a3      	str	r3, [r4, #8]
 8004f5a:	da16      	bge.n	8004f8a <_putc_r+0x52>
 8004f5c:	69a2      	ldr	r2, [r4, #24]
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	db02      	blt.n	8004f68 <_putc_r+0x30>
 8004f62:	b2eb      	uxtb	r3, r5
 8004f64:	2b0a      	cmp	r3, #10
 8004f66:	d110      	bne.n	8004f8a <_putc_r+0x52>
 8004f68:	4622      	mov	r2, r4
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f72:	f7ff b9bd 	b.w	80042f0 <__swbuf_r>
 8004f76:	4b09      	ldr	r3, [pc, #36]	; (8004f9c <_putc_r+0x64>)
 8004f78:	429c      	cmp	r4, r3
 8004f7a:	d101      	bne.n	8004f80 <_putc_r+0x48>
 8004f7c:	68b4      	ldr	r4, [r6, #8]
 8004f7e:	e7e8      	b.n	8004f52 <_putc_r+0x1a>
 8004f80:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <_putc_r+0x68>)
 8004f82:	429c      	cmp	r4, r3
 8004f84:	bf08      	it	eq
 8004f86:	68f4      	ldreq	r4, [r6, #12]
 8004f88:	e7e3      	b.n	8004f52 <_putc_r+0x1a>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	6022      	str	r2, [r4, #0]
 8004f90:	701d      	strb	r5, [r3, #0]
 8004f92:	b2e8      	uxtb	r0, r5
 8004f94:	bd70      	pop	{r4, r5, r6, pc}
 8004f96:	bf00      	nop
 8004f98:	080051f8 	.word	0x080051f8
 8004f9c:	08005218 	.word	0x08005218
 8004fa0:	080051d8 	.word	0x080051d8

08004fa4 <_sbrk_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4c06      	ldr	r4, [pc, #24]	; (8004fc0 <_sbrk_r+0x1c>)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	4605      	mov	r5, r0
 8004fac:	4608      	mov	r0, r1
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	f7fc f9f4 	bl	800139c <_sbrk>
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	d102      	bne.n	8004fbe <_sbrk_r+0x1a>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	b103      	cbz	r3, 8004fbe <_sbrk_r+0x1a>
 8004fbc:	602b      	str	r3, [r5, #0]
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}
 8004fc0:	2000037c 	.word	0x2000037c

08004fc4 <__sread>:
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fcc:	f000 f8a2 	bl	8005114 <_read_r>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	bfab      	itete	ge
 8004fd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8004fd8:	181b      	addge	r3, r3, r0
 8004fda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fde:	bfac      	ite	ge
 8004fe0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fe2:	81a3      	strhlt	r3, [r4, #12]
 8004fe4:	bd10      	pop	{r4, pc}

08004fe6 <__swrite>:
 8004fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fea:	461f      	mov	r7, r3
 8004fec:	898b      	ldrh	r3, [r1, #12]
 8004fee:	05db      	lsls	r3, r3, #23
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	4616      	mov	r6, r2
 8004ff6:	d505      	bpl.n	8005004 <__swrite+0x1e>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005000:	f000 f874 	bl	80050ec <_lseek_r>
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800500a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800500e:	81a3      	strh	r3, [r4, #12]
 8005010:	4632      	mov	r2, r6
 8005012:	463b      	mov	r3, r7
 8005014:	4628      	mov	r0, r5
 8005016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800501a:	f000 b823 	b.w	8005064 <_write_r>

0800501e <__sseek>:
 800501e:	b510      	push	{r4, lr}
 8005020:	460c      	mov	r4, r1
 8005022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005026:	f000 f861 	bl	80050ec <_lseek_r>
 800502a:	1c43      	adds	r3, r0, #1
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	bf15      	itete	ne
 8005030:	6560      	strne	r0, [r4, #84]	; 0x54
 8005032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800503a:	81a3      	strheq	r3, [r4, #12]
 800503c:	bf18      	it	ne
 800503e:	81a3      	strhne	r3, [r4, #12]
 8005040:	bd10      	pop	{r4, pc}

08005042 <__sclose>:
 8005042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005046:	f000 b81f 	b.w	8005088 <_close_r>

0800504a <__ascii_wctomb>:
 800504a:	b149      	cbz	r1, 8005060 <__ascii_wctomb+0x16>
 800504c:	2aff      	cmp	r2, #255	; 0xff
 800504e:	bf85      	ittet	hi
 8005050:	238a      	movhi	r3, #138	; 0x8a
 8005052:	6003      	strhi	r3, [r0, #0]
 8005054:	700a      	strbls	r2, [r1, #0]
 8005056:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800505a:	bf98      	it	ls
 800505c:	2001      	movls	r0, #1
 800505e:	4770      	bx	lr
 8005060:	4608      	mov	r0, r1
 8005062:	4770      	bx	lr

08005064 <_write_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4c07      	ldr	r4, [pc, #28]	; (8005084 <_write_r+0x20>)
 8005068:	4605      	mov	r5, r0
 800506a:	4608      	mov	r0, r1
 800506c:	4611      	mov	r1, r2
 800506e:	2200      	movs	r2, #0
 8005070:	6022      	str	r2, [r4, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	f7fb faab 	bl	80005ce <_write>
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	d102      	bne.n	8005082 <_write_r+0x1e>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	b103      	cbz	r3, 8005082 <_write_r+0x1e>
 8005080:	602b      	str	r3, [r5, #0]
 8005082:	bd38      	pop	{r3, r4, r5, pc}
 8005084:	2000037c 	.word	0x2000037c

08005088 <_close_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4c06      	ldr	r4, [pc, #24]	; (80050a4 <_close_r+0x1c>)
 800508c:	2300      	movs	r3, #0
 800508e:	4605      	mov	r5, r0
 8005090:	4608      	mov	r0, r1
 8005092:	6023      	str	r3, [r4, #0]
 8005094:	f7fc f94d 	bl	8001332 <_close>
 8005098:	1c43      	adds	r3, r0, #1
 800509a:	d102      	bne.n	80050a2 <_close_r+0x1a>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	b103      	cbz	r3, 80050a2 <_close_r+0x1a>
 80050a0:	602b      	str	r3, [r5, #0]
 80050a2:	bd38      	pop	{r3, r4, r5, pc}
 80050a4:	2000037c 	.word	0x2000037c

080050a8 <_fstat_r>:
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4c07      	ldr	r4, [pc, #28]	; (80050c8 <_fstat_r+0x20>)
 80050ac:	2300      	movs	r3, #0
 80050ae:	4605      	mov	r5, r0
 80050b0:	4608      	mov	r0, r1
 80050b2:	4611      	mov	r1, r2
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	f7fc f948 	bl	800134a <_fstat>
 80050ba:	1c43      	adds	r3, r0, #1
 80050bc:	d102      	bne.n	80050c4 <_fstat_r+0x1c>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	b103      	cbz	r3, 80050c4 <_fstat_r+0x1c>
 80050c2:	602b      	str	r3, [r5, #0]
 80050c4:	bd38      	pop	{r3, r4, r5, pc}
 80050c6:	bf00      	nop
 80050c8:	2000037c 	.word	0x2000037c

080050cc <_isatty_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	4c06      	ldr	r4, [pc, #24]	; (80050e8 <_isatty_r+0x1c>)
 80050d0:	2300      	movs	r3, #0
 80050d2:	4605      	mov	r5, r0
 80050d4:	4608      	mov	r0, r1
 80050d6:	6023      	str	r3, [r4, #0]
 80050d8:	f7fc f947 	bl	800136a <_isatty>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d102      	bne.n	80050e6 <_isatty_r+0x1a>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	b103      	cbz	r3, 80050e6 <_isatty_r+0x1a>
 80050e4:	602b      	str	r3, [r5, #0]
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	2000037c 	.word	0x2000037c

080050ec <_lseek_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4c07      	ldr	r4, [pc, #28]	; (800510c <_lseek_r+0x20>)
 80050f0:	4605      	mov	r5, r0
 80050f2:	4608      	mov	r0, r1
 80050f4:	4611      	mov	r1, r2
 80050f6:	2200      	movs	r2, #0
 80050f8:	6022      	str	r2, [r4, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f7fc f940 	bl	8001380 <_lseek>
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	d102      	bne.n	800510a <_lseek_r+0x1e>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	b103      	cbz	r3, 800510a <_lseek_r+0x1e>
 8005108:	602b      	str	r3, [r5, #0]
 800510a:	bd38      	pop	{r3, r4, r5, pc}
 800510c:	2000037c 	.word	0x2000037c

08005110 <__malloc_lock>:
 8005110:	4770      	bx	lr

08005112 <__malloc_unlock>:
 8005112:	4770      	bx	lr

08005114 <_read_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	4c07      	ldr	r4, [pc, #28]	; (8005134 <_read_r+0x20>)
 8005118:	4605      	mov	r5, r0
 800511a:	4608      	mov	r0, r1
 800511c:	4611      	mov	r1, r2
 800511e:	2200      	movs	r2, #0
 8005120:	6022      	str	r2, [r4, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	f7fc f8e8 	bl	80012f8 <_read>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d102      	bne.n	8005132 <_read_r+0x1e>
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	b103      	cbz	r3, 8005132 <_read_r+0x1e>
 8005130:	602b      	str	r3, [r5, #0]
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	2000037c 	.word	0x2000037c

08005138 <_init>:
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513a:	bf00      	nop
 800513c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513e:	bc08      	pop	{r3}
 8005140:	469e      	mov	lr, r3
 8005142:	4770      	bx	lr

08005144 <_fini>:
 8005144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005146:	bf00      	nop
 8005148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514a:	bc08      	pop	{r3}
 800514c:	469e      	mov	lr, r3
 800514e:	4770      	bx	lr
