
Robo_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800519c  0800519c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051a4  080051a4  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a4  080051a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  080051ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000020c  080053b8  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  080053b8  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdca  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001da6  00000000  00000000  0002d006  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  0002edb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  0002fa58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021c21  00000000  00000000  00030618  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008fd9  00000000  00000000  00052239  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca6f0  00000000  00000000  0005b212  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125902  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e5c  00000000  00000000  00125980  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f5c 	.word	0x08004f5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	08004f5c 	.word	0x08004f5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d013      	beq.n	80005c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000598:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800059c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00b      	beq.n	80005c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	e000      	b.n	80005ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80005aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0f9      	beq.n	80005aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <_write>:
static void MX_GPIO_Init(void);
static void MX_TIM4_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len){ // do fprint
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b086      	sub	sp, #24
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	60f8      	str	r0, [r7, #12]
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
	int i=0;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++){
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	e009      	b.n	80005f8 <_write+0x2a>
		ITM_SendChar(*ptr++);
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	60ba      	str	r2, [r7, #8]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffc7 	bl	8000580 <ITM_SendChar>
	for(i=0; i<len; i++){
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dbf1      	blt.n	80005e4 <_write+0x16>

	}
	return len;
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	//HAL_Delay(10);
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8000616:	2101      	movs	r1, #1
 8000618:	4812      	ldr	r0, [pc, #72]	; (8000664 <HAL_GPIO_EXTI_Callback+0x58>)
 800061a:	f001 f99f 	bl	800195c <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d105      	bne.n	8000630 <HAL_GPIO_EXTI_Callback+0x24>

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000624:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000628:	480f      	ldr	r0, [pc, #60]	; (8000668 <HAL_GPIO_EXTI_Callback+0x5c>)
 800062a:	f001 f9c8 	bl	80019be <HAL_GPIO_TogglePin>
 800062e:	e00b      	b.n	8000648 <HAL_GPIO_EXTI_Callback+0x3c>
		//Duty-=1;
	//	if(Duty < 100){
	//		Duty = Duty + 1;
	//	}
	} else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET){
 8000630:	2102      	movs	r1, #2
 8000632:	480c      	ldr	r0, [pc, #48]	; (8000664 <HAL_GPIO_EXTI_Callback+0x58>)
 8000634:	f001 f992 	bl	800195c <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d104      	bne.n	8000648 <HAL_GPIO_EXTI_Callback+0x3c>
	//	HAL_Delay(10);
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000644:	f001 f9bb 	bl	80019be <HAL_GPIO_TogglePin>
	//		Duty = Duty - 1;
	//	}

	}

	for(int i=0; i<1000000; i++){
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e002      	b.n	8000654 <HAL_GPIO_EXTI_Callback+0x48>
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3301      	adds	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <HAL_GPIO_EXTI_Callback+0x60>)
 8000658:	4293      	cmp	r3, r2
 800065a:	ddf8      	ble.n	800064e <HAL_GPIO_EXTI_Callback+0x42>

	}

}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40020000 	.word	0x40020000
 8000668:	40020c00 	.word	0x40020c00
 800066c:	000f423f 	.word	0x000f423f

08000670 <process_pack_motor>:
	} else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
		Duty -= 10;
	}*/
	//HAL_Delay(5);
void process_pack_motor(){
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
	printf("process_motor\n");
 8000676:	486a      	ldr	r0, [pc, #424]	; (8000820 <process_pack_motor+0x1b0>)
 8000678:	f003 fc9e 	bl	8003fb8 <puts>
	char str_dir_right;
	char str_duty_left[5];
	char str_duty_right[5];

	//wypisanie całego pakietu
	for(int i=0; i<strlen(packet); i++){
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	e009      	b.n	8000696 <process_pack_motor+0x26>
		printf("%c",packet[i]);
 8000682:	4a68      	ldr	r2, [pc, #416]	; (8000824 <process_pack_motor+0x1b4>)
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fc24 	bl	8003ed8 <putchar>
	for(int i=0; i<strlen(packet); i++){
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	3301      	adds	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	4863      	ldr	r0, [pc, #396]	; (8000824 <process_pack_motor+0x1b4>)
 8000698:	f7ff fd9a 	bl	80001d0 <strlen>
 800069c:	4602      	mov	r2, r0
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d8ee      	bhi.n	8000682 <process_pack_motor+0x12>
	}
	printf("\n");
 80006a4:	200a      	movs	r0, #10
 80006a6:	f003 fc17 	bl	8003ed8 <putchar>

	str_dir_left = packet[3];
 80006aa:	4b5e      	ldr	r3, [pc, #376]	; (8000824 <process_pack_motor+0x1b4>)
 80006ac:	78db      	ldrb	r3, [r3, #3]
 80006ae:	73fb      	strb	r3, [r7, #15]
	str_dir_right = packet[5];
 80006b0:	4b5c      	ldr	r3, [pc, #368]	; (8000824 <process_pack_motor+0x1b4>)
 80006b2:	795b      	ldrb	r3, [r3, #5]
 80006b4:	73bb      	strb	r3, [r7, #14]

	str_duty_left[0] = packet[7];
 80006b6:	4b5b      	ldr	r3, [pc, #364]	; (8000824 <process_pack_motor+0x1b4>)
 80006b8:	79db      	ldrb	r3, [r3, #7]
 80006ba:	723b      	strb	r3, [r7, #8]
	str_duty_left[1] = packet[8];
 80006bc:	4b59      	ldr	r3, [pc, #356]	; (8000824 <process_pack_motor+0x1b4>)
 80006be:	7a1b      	ldrb	r3, [r3, #8]
 80006c0:	727b      	strb	r3, [r7, #9]

	str_duty_right[0] = packet[10];
 80006c2:	4b58      	ldr	r3, [pc, #352]	; (8000824 <process_pack_motor+0x1b4>)
 80006c4:	7a9b      	ldrb	r3, [r3, #10]
 80006c6:	703b      	strb	r3, [r7, #0]
	str_duty_right[1] = packet[11];
 80006c8:	4b56      	ldr	r3, [pc, #344]	; (8000824 <process_pack_motor+0x1b4>)
 80006ca:	7adb      	ldrb	r3, [r3, #11]
 80006cc:	707b      	strb	r3, [r7, #1]
	//strncat(str_duty_right, &packet[10], 1);


	Duty_left = atoi(str_duty_left);
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fbb2 	bl	8003e3c <atoi>
 80006d8:	4602      	mov	r2, r0
 80006da:	4b53      	ldr	r3, [pc, #332]	; (8000828 <process_pack_motor+0x1b8>)
 80006dc:	601a      	str	r2, [r3, #0]
	Duty_right = atoi(str_duty_right);
 80006de:	463b      	mov	r3, r7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fbab 	bl	8003e3c <atoi>
 80006e6:	4602      	mov	r2, r0
 80006e8:	4b50      	ldr	r3, [pc, #320]	; (800082c <process_pack_motor+0x1bc>)
 80006ea:	601a      	str	r2, [r3, #0]
	dir_left = str_dir_left - '0';
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	3b30      	subs	r3, #48	; 0x30
 80006f0:	4a4f      	ldr	r2, [pc, #316]	; (8000830 <process_pack_motor+0x1c0>)
 80006f2:	6013      	str	r3, [r2, #0]
    dir_right = str_dir_right - '0';
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	3b30      	subs	r3, #48	; 0x30
 80006f8:	4a4e      	ldr	r2, [pc, #312]	; (8000834 <process_pack_motor+0x1c4>)
 80006fa:	6013      	str	r3, [r2, #0]

	for(int i=0; i<2; i++){
		printf("dir-left - %c\n",str_duty_right[i]);
	}*/

	printf("dir-left - %d\n",dir_left);
 80006fc:	4b4c      	ldr	r3, [pc, #304]	; (8000830 <process_pack_motor+0x1c0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	484d      	ldr	r0, [pc, #308]	; (8000838 <process_pack_motor+0x1c8>)
 8000704:	f003 fbd0 	bl	8003ea8 <iprintf>
	printf("dir-right - %d\n",dir_right);
 8000708:	4b4a      	ldr	r3, [pc, #296]	; (8000834 <process_pack_motor+0x1c4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	484b      	ldr	r0, [pc, #300]	; (800083c <process_pack_motor+0x1cc>)
 8000710:	f003 fbca 	bl	8003ea8 <iprintf>
	printf("duty-left - %d\n",Duty_left);
 8000714:	4b44      	ldr	r3, [pc, #272]	; (8000828 <process_pack_motor+0x1b8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	4849      	ldr	r0, [pc, #292]	; (8000840 <process_pack_motor+0x1d0>)
 800071c:	f003 fbc4 	bl	8003ea8 <iprintf>
	printf("duty-right - %d\n",Duty_right);
 8000720:	4b42      	ldr	r3, [pc, #264]	; (800082c <process_pack_motor+0x1bc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	4847      	ldr	r0, [pc, #284]	; (8000844 <process_pack_motor+0x1d4>)
 8000728:	f003 fbbe 	bl	8003ea8 <iprintf>


	if(dir_left == 1){
 800072c:	4b40      	ldr	r3, [pc, #256]	; (8000830 <process_pack_motor+0x1c0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d10c      	bne.n	800074e <process_pack_motor+0xde>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073a:	4843      	ldr	r0, [pc, #268]	; (8000848 <process_pack_motor+0x1d8>)
 800073c:	f001 f926 	bl	800198c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000746:	4840      	ldr	r0, [pc, #256]	; (8000848 <process_pack_motor+0x1d8>)
 8000748:	f001 f920 	bl	800198c <HAL_GPIO_WritePin>
 800074c:	e020      	b.n	8000790 <process_pack_motor+0x120>
	} else if(dir_left == 0){
 800074e:	4b38      	ldr	r3, [pc, #224]	; (8000830 <process_pack_motor+0x1c0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d10c      	bne.n	8000770 <process_pack_motor+0x100>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075c:	483a      	ldr	r0, [pc, #232]	; (8000848 <process_pack_motor+0x1d8>)
 800075e:	f001 f915 	bl	800198c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000768:	4837      	ldr	r0, [pc, #220]	; (8000848 <process_pack_motor+0x1d8>)
 800076a:	f001 f90f 	bl	800198c <HAL_GPIO_WritePin>
 800076e:	e00f      	b.n	8000790 <process_pack_motor+0x120>
	} else if(dir_left == 2){
 8000770:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <process_pack_motor+0x1c0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b02      	cmp	r3, #2
 8000776:	d10b      	bne.n	8000790 <process_pack_motor+0x120>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800077e:	4832      	ldr	r0, [pc, #200]	; (8000848 <process_pack_motor+0x1d8>)
 8000780:	f001 f904 	bl	800198c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078a:	482f      	ldr	r0, [pc, #188]	; (8000848 <process_pack_motor+0x1d8>)
 800078c:	f001 f8fe 	bl	800198c <HAL_GPIO_WritePin>
	}

	if(dir_right == 1){
 8000790:	4b28      	ldr	r3, [pc, #160]	; (8000834 <process_pack_motor+0x1c4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d10c      	bne.n	80007b2 <process_pack_motor+0x142>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079e:	482a      	ldr	r0, [pc, #168]	; (8000848 <process_pack_motor+0x1d8>)
 80007a0:	f001 f8f4 	bl	800198c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007aa:	4827      	ldr	r0, [pc, #156]	; (8000848 <process_pack_motor+0x1d8>)
 80007ac:	f001 f8ee 	bl	800198c <HAL_GPIO_WritePin>
 80007b0:	e020      	b.n	80007f4 <process_pack_motor+0x184>
	} else if(dir_right == 0){
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <process_pack_motor+0x1c4>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d10c      	bne.n	80007d4 <process_pack_motor+0x164>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c0:	4821      	ldr	r0, [pc, #132]	; (8000848 <process_pack_motor+0x1d8>)
 80007c2:	f001 f8e3 	bl	800198c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007cc:	481e      	ldr	r0, [pc, #120]	; (8000848 <process_pack_motor+0x1d8>)
 80007ce:	f001 f8dd 	bl	800198c <HAL_GPIO_WritePin>
 80007d2:	e00f      	b.n	80007f4 <process_pack_motor+0x184>
	} else if(dir_right == 2){
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <process_pack_motor+0x1c4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d10b      	bne.n	80007f4 <process_pack_motor+0x184>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e2:	4819      	ldr	r0, [pc, #100]	; (8000848 <process_pack_motor+0x1d8>)
 80007e4:	f001 f8d2 	bl	800198c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ee:	4816      	ldr	r0, [pc, #88]	; (8000848 <process_pack_motor+0x1d8>)
 80007f0:	f001 f8cc 	bl	800198c <HAL_GPIO_WritePin>





	for(int i=0; i<strlen(packet); i++){
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	e007      	b.n	800080a <process_pack_motor+0x19a>
		packet[i]='\0';
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <process_pack_motor+0x1b4>)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<strlen(packet); i++){
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	3301      	adds	r3, #1
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4806      	ldr	r0, [pc, #24]	; (8000824 <process_pack_motor+0x1b4>)
 800080c:	f7ff fce0 	bl	80001d0 <strlen>
 8000810:	4602      	mov	r2, r0
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d8f0      	bhi.n	80007fa <process_pack_motor+0x18a>
	}

}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	08004f74 	.word	0x08004f74
 8000824:	2000023c 	.word	0x2000023c
 8000828:	2000032c 	.word	0x2000032c
 800082c:	20000334 	.word	0x20000334
 8000830:	20000320 	.word	0x20000320
 8000834:	20000328 	.word	0x20000328
 8000838:	08004f84 	.word	0x08004f84
 800083c:	08004f94 	.word	0x08004f94
 8000840:	08004fa4 	.word	0x08004fa4
 8000844:	08004fb4 	.word	0x08004fb4
 8000848:	40020c00 	.word	0x40020c00

0800084c <read_pack>:


void read_pack(char mark){
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]

	printf("read: ");
 8000856:	481e      	ldr	r0, [pc, #120]	; (80008d0 <read_pack+0x84>)
 8000858:	f003 fb26 	bl	8003ea8 <iprintf>
	//printf("%c",mark);
	strncat(packet, &mark, 1);
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	2201      	movs	r2, #1
 8000860:	4619      	mov	r1, r3
 8000862:	481c      	ldr	r0, [pc, #112]	; (80008d4 <read_pack+0x88>)
 8000864:	f003 fbb0 	bl	8003fc8 <strncat>

	if(mark == ';'){
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b3b      	cmp	r3, #59	; 0x3b
 800086c:	d12b      	bne.n	80008c6 <read_pack+0x7a>
		for(int i=0; i<strlen(packet); i++){
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	e009      	b.n	8000888 <read_pack+0x3c>
			printf("%c",packet[i]);
 8000874:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <read_pack+0x88>)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f003 fb2b 	bl	8003ed8 <putchar>
		for(int i=0; i<strlen(packet); i++){
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	3301      	adds	r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4812      	ldr	r0, [pc, #72]	; (80008d4 <read_pack+0x88>)
 800088a:	f7ff fca1 	bl	80001d0 <strlen>
 800088e:	4602      	mov	r2, r0
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	429a      	cmp	r2, r3
 8000894:	d8ee      	bhi.n	8000874 <read_pack+0x28>
		}

		if(packet[1] == '0'){
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <read_pack+0x88>)
 8000898:	785b      	ldrb	r3, [r3, #1]
 800089a:	2b30      	cmp	r3, #48	; 0x30
 800089c:	d101      	bne.n	80008a2 <read_pack+0x56>
			process_pack_motor();
 800089e:	f7ff fee7 	bl	8000670 <process_pack_motor>
		}

		for(int i=0; i<strlen(packet); i++){
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	e007      	b.n	80008b8 <read_pack+0x6c>
			packet[i]='\0';
 80008a8:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <read_pack+0x88>)
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	4413      	add	r3, r2
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<strlen(packet); i++){
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	4806      	ldr	r0, [pc, #24]	; (80008d4 <read_pack+0x88>)
 80008ba:	f7ff fc89 	bl	80001d0 <strlen>
 80008be:	4602      	mov	r2, r0
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d8f0      	bhi.n	80008a8 <read_pack+0x5c>
			printf("%c",mark);
		}
	}*/


}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	08004fc8 	.word	0x08004fc8
 80008d4:	2000023c 	.word	0x2000023c

080008d8 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

	 TIM4->CCR1 = 100 - Duty_left;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008ea:	635a      	str	r2, [r3, #52]	; 0x34
	 TIM4->CCR2 = Duty_right;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008f2:	639a      	str	r2, [r3, #56]	; 0x38
	// HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);

}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	2000032c 	.word	0x2000032c
 8000904:	40000800 	.word	0x40000800
 8000908:	20000334 	.word	0x20000334

0800090c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	//printf("RX");
	if(huart->Instance == USART3){
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a22      	ldr	r2, [pc, #136]	; (80009a4 <HAL_UART_RxCpltCallback+0x98>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d13d      	bne.n	800099a <HAL_UART_RxCpltCallback+0x8e>
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
		printf("%c", receiveUART[0]);
 800091e:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <HAL_UART_RxCpltCallback+0x9c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f003 fad8 	bl	8003ed8 <putchar>
		//printf("\n");
		//printf(" \n");

		if(receiveUART[0] == ':'){
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <HAL_UART_RxCpltCallback+0x9c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b3a      	cmp	r3, #58	; 0x3a
 800092e:	d102      	bne.n	8000936 <HAL_UART_RxCpltCallback+0x2a>
			read_bool=1;
 8000930:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <HAL_UART_RxCpltCallback+0xa0>)
 8000932:	2201      	movs	r2, #1
 8000934:	601a      	str	r2, [r3, #0]
		}

		if(receiveUART[0] == ';'){
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <HAL_UART_RxCpltCallback+0x9c>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b3b      	cmp	r3, #59	; 0x3b
 800093c:	d112      	bne.n	8000964 <HAL_UART_RxCpltCallback+0x58>
			read_bool=0;
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <HAL_UART_RxCpltCallback+0xa0>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
			printf("[");
 8000944:	205b      	movs	r0, #91	; 0x5b
 8000946:	f003 fac7 	bl	8003ed8 <putchar>
			printf("%c", receiveUART[0]);
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <HAL_UART_RxCpltCallback+0x9c>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f003 fac2 	bl	8003ed8 <putchar>
			printf("]");
 8000954:	205d      	movs	r0, #93	; 0x5d
 8000956:	f003 fabf 	bl	8003ed8 <putchar>
			read_pack(receiveUART[0]);
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <HAL_UART_RxCpltCallback+0x9c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff74 	bl	800084c <read_pack>

		}

		if(read_bool == 1){
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_UART_RxCpltCallback+0xa0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d10f      	bne.n	800098c <HAL_UART_RxCpltCallback+0x80>
			printf("[");
 800096c:	205b      	movs	r0, #91	; 0x5b
 800096e:	f003 fab3 	bl	8003ed8 <putchar>
			printf("%c", receiveUART[0]);
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_UART_RxCpltCallback+0x9c>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f003 faae 	bl	8003ed8 <putchar>
			printf("]");
 800097c:	205d      	movs	r0, #93	; 0x5d
 800097e:	f003 faab 	bl	8003ed8 <putchar>
			read_pack(receiveUART[0]);
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_UART_RxCpltCallback+0x9c>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff60 	bl	800084c <read_pack>
	    	//printf("%u", receiveUART[0]);

		}
		//HAL_Delay(100);
		HAL_UART_Receive_IT(&huart3, receiveUART, sizeReceiveUART);
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_UART_RxCpltCallback+0xa4>)
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	4905      	ldr	r1, [pc, #20]	; (80009a8 <HAL_UART_RxCpltCallback+0x9c>)
 8000994:	4807      	ldr	r0, [pc, #28]	; (80009b4 <HAL_UART_RxCpltCallback+0xa8>)
 8000996:	f002 fc49 	bl	800322c <HAL_UART_Receive_IT>

	}
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40004800 	.word	0x40004800
 80009a8:	20000330 	.word	0x20000330
 80009ac:	20000228 	.word	0x20000228
 80009b0:	2000002e 	.word	0x2000002e
 80009b4:	200002e0 	.word	0x200002e0

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009bc:	f000 fc6c 	bl	8001298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 f8a2 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c4:	f000 f9b8 	bl	8000d38 <MX_GPIO_Init>
  MX_TIM4_Init();
 80009c8:	f000 f908 	bl	8000bdc <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80009cc:	f000 f98a 	bl	8000ce4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //ITM_SendChar( 65 );
  Duty_left = 0;
 80009d0:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <main+0x114>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
  Duty_right = 0;
 80009d6:	4b3e      	ldr	r3, [pc, #248]	; (8000ad0 <main+0x118>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e2:	483c      	ldr	r0, [pc, #240]	; (8000ad4 <main+0x11c>)
 80009e4:	f000 ffd2 	bl	800198c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ee:	4839      	ldr	r0, [pc, #228]	; (8000ad4 <main+0x11c>)
 80009f0:	f000 ffcc 	bl	800198c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009fa:	4836      	ldr	r0, [pc, #216]	; (8000ad4 <main+0x11c>)
 80009fc:	f000 ffc6 	bl	800198c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a06:	4833      	ldr	r0, [pc, #204]	; (8000ad4 <main+0x11c>)
 8000a08:	f000 ffc0 	bl	800198c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a12:	4831      	ldr	r0, [pc, #196]	; (8000ad8 <main+0x120>)
 8000a14:	f000 ffba 	bl	800198c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1e:	482e      	ldr	r0, [pc, #184]	; (8000ad8 <main+0x120>)
 8000a20:	f000 ffb4 	bl	800198c <HAL_GPIO_WritePin>





  HAL_TIM_Base_Start_IT(&htim4);
 8000a24:	482d      	ldr	r0, [pc, #180]	; (8000adc <main+0x124>)
 8000a26:	f001 fc8a 	bl	800233e <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	482b      	ldr	r0, [pc, #172]	; (8000adc <main+0x124>)
 8000a2e:	f001 fcdf 	bl	80023f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000a32:	2104      	movs	r1, #4
 8000a34:	4829      	ldr	r0, [pc, #164]	; (8000adc <main+0x124>)
 8000a36:	f001 fcdb 	bl	80023f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000a3a:	2108      	movs	r1, #8
 8000a3c:	4827      	ldr	r0, [pc, #156]	; (8000adc <main+0x124>)
 8000a3e:	f001 fcd7 	bl	80023f0 <HAL_TIM_PWM_Start>
 // TIM4->CCR1 = Duty;
 // TIM4->CCR2 = Duty;

 // HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);

  HAL_UART_Receive_IT(&huart3, receiveUART, sizeReceiveUART);
 8000a42:	4b27      	ldr	r3, [pc, #156]	; (8000ae0 <main+0x128>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	4926      	ldr	r1, [pc, #152]	; (8000ae4 <main+0x12c>)
 8000a4a:	4827      	ldr	r0, [pc, #156]	; (8000ae8 <main+0x130>)
 8000a4c:	f002 fbee 	bl	800322c <HAL_UART_Receive_IT>
  //HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);
 // printf("%u",sendUART[0]);
  printf("CONSOLE GOOD \n");
 8000a50:	4826      	ldr	r0, [pc, #152]	; (8000aec <main+0x134>)
 8000a52:	f003 fab1 	bl	8003fb8 <puts>
 // HAL_Delay(300);
 // HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000a56:	2201      	movs	r2, #1
 8000a58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5c:	481e      	ldr	r0, [pc, #120]	; (8000ad8 <main+0x120>)
 8000a5e:	f000 ff95 	bl	800198c <HAL_GPIO_WritePin>
  HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);
 8000a62:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <main+0x138>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	4922      	ldr	r1, [pc, #136]	; (8000af4 <main+0x13c>)
 8000a6a:	481f      	ldr	r0, [pc, #124]	; (8000ae8 <main+0x130>)
 8000a6c:	f002 fb99 	bl	80031a2 <HAL_UART_Transmit_IT>
  HAL_Delay(6000);
 8000a70:	f241 7070 	movw	r0, #6000	; 0x1770
 8000a74:	f000 fc82 	bl	800137c <HAL_Delay>
  HAL_UART_Transmit_IT(&huart3, s_mux_1, size_s_mux_1);
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <main+0x140>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	491f      	ldr	r1, [pc, #124]	; (8000afc <main+0x144>)
 8000a80:	4819      	ldr	r0, [pc, #100]	; (8000ae8 <main+0x130>)
 8000a82:	f002 fb8e 	bl	80031a2 <HAL_UART_Transmit_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8c:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <main+0x120>)
 8000a8e:	f000 ff7d 	bl	800198c <HAL_GPIO_WritePin>
  HAL_Delay(6000);
 8000a92:	f241 7070 	movw	r0, #6000	; 0x1770
 8000a96:	f000 fc71 	bl	800137c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <main+0x120>)
 8000aa2:	f000 ff73 	bl	800198c <HAL_GPIO_WritePin>
  HAL_UART_Transmit_IT(&huart3, s_serv_1, size_s_serv_1);
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <main+0x148>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4915      	ldr	r1, [pc, #84]	; (8000b04 <main+0x14c>)
 8000aae:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <main+0x130>)
 8000ab0:	f002 fb77 	bl	80031a2 <HAL_UART_Transmit_IT>
  HAL_Delay(6000);
 8000ab4:	f241 7070 	movw	r0, #6000	; 0x1770
 8000ab8:	f000 fc60 	bl	800137c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <main+0x120>)
 8000ac4:	f000 ff62 	bl	800198c <HAL_GPIO_WritePin>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <main+0x110>
 8000aca:	bf00      	nop
 8000acc:	2000032c 	.word	0x2000032c
 8000ad0:	20000334 	.word	0x20000334
 8000ad4:	40020c00 	.word	0x40020c00
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	200002a0 	.word	0x200002a0
 8000ae0:	2000002e 	.word	0x2000002e
 8000ae4:	20000330 	.word	0x20000330
 8000ae8:	200002e0 	.word	0x200002e0
 8000aec:	08004fd0 	.word	0x08004fd0
 8000af0:	20000004 	.word	0x20000004
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000006 	.word	0x20000006
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000016 	.word	0x20000016
 8000b04:	20000018 	.word	0x20000018

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b094      	sub	sp, #80	; 0x50
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	2230      	movs	r2, #48	; 0x30
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 f9be 	bl	8003e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <SystemClock_Config+0xcc>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	4a27      	ldr	r2, [pc, #156]	; (8000bd4 <SystemClock_Config+0xcc>)
 8000b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <SystemClock_Config+0xcc>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <SystemClock_Config+0xd0>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <SystemClock_Config+0xd0>)
 8000b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <SystemClock_Config+0xd0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b64:	2301      	movs	r3, #1
 8000b66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b7c:	23a8      	movs	r3, #168	; 0xa8
 8000b7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b84:	2304      	movs	r3, #4
 8000b86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b88:	f107 0320 	add.w	r3, r7, #32
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 ff49 	bl	8001a24 <HAL_RCC_OscConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b98:	f000 f986 	bl	8000ea8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ba8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2105      	movs	r1, #5
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 f9a2 	bl	8001f04 <HAL_RCC_ClockConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bc6:	f000 f96f 	bl	8000ea8 <Error_Handler>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3750      	adds	r7, #80	; 0x50
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40007000 	.word	0x40007000

08000bdc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	; 0x38
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	f107 0320 	add.w	r3, r7, #32
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c0c:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <MX_TIM4_Init+0x100>)
 8000c0e:	4a34      	ldr	r2, [pc, #208]	; (8000ce0 <MX_TIM4_Init+0x104>)
 8000c10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4999;
 8000c12:	4b32      	ldr	r3, [pc, #200]	; (8000cdc <MX_TIM4_Init+0x100>)
 8000c14:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	4b30      	ldr	r3, [pc, #192]	; (8000cdc <MX_TIM4_Init+0x100>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000c20:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <MX_TIM4_Init+0x100>)
 8000c22:	2263      	movs	r2, #99	; 0x63
 8000c24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c26:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <MX_TIM4_Init+0x100>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <MX_TIM4_Init+0x100>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c32:	482a      	ldr	r0, [pc, #168]	; (8000cdc <MX_TIM4_Init+0x100>)
 8000c34:	f001 fb58 	bl	80022e8 <HAL_TIM_Base_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000c3e:	f000 f933 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4823      	ldr	r0, [pc, #140]	; (8000cdc <MX_TIM4_Init+0x100>)
 8000c50:	f001 fdda 	bl	8002808 <HAL_TIM_ConfigClockSource>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000c5a:	f000 f925 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c5e:	481f      	ldr	r0, [pc, #124]	; (8000cdc <MX_TIM4_Init+0x100>)
 8000c60:	f001 fb91 	bl	8002386 <HAL_TIM_PWM_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000c6a:	f000 f91d 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c76:	f107 0320 	add.w	r3, r7, #32
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4817      	ldr	r0, [pc, #92]	; (8000cdc <MX_TIM4_Init+0x100>)
 8000c7e:	f002 f9b3 	bl	8002fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000c88:	f000 f90e 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000c8c:	2370      	movs	r3, #112	; 0x70
 8000c8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480e      	ldr	r0, [pc, #56]	; (8000cdc <MX_TIM4_Init+0x100>)
 8000ca4:	f001 fcea 	bl	800267c <HAL_TIM_PWM_ConfigChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000cae:	f000 f8fb 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb2:	2360      	movs	r3, #96	; 0x60
 8000cb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2204      	movs	r2, #4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4807      	ldr	r0, [pc, #28]	; (8000cdc <MX_TIM4_Init+0x100>)
 8000cbe:	f001 fcdd 	bl	800267c <HAL_TIM_PWM_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8000cc8:	f000 f8ee 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <MX_TIM4_Init+0x100>)
 8000cce:	f000 f943 	bl	8000f58 <HAL_TIM_MspPostInit>

}
 8000cd2:	bf00      	nop
 8000cd4:	3738      	adds	r7, #56	; 0x38
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200002a0 	.word	0x200002a0
 8000ce0:	40000800 	.word	0x40000800

08000ce4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_USART3_UART_Init+0x4c>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <MX_USART3_UART_Init+0x50>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_USART3_UART_Init+0x4c>)
 8000cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_USART3_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_USART3_UART_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_USART3_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_USART3_UART_Init+0x4c>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <MX_USART3_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_USART3_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_USART3_UART_Init+0x4c>)
 8000d1c:	f002 f9f4 	bl	8003108 <HAL_UART_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d26:	f000 f8bf 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200002e0 	.word	0x200002e0
 8000d34:	40004800 	.word	0x40004800

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b51      	ldr	r3, [pc, #324]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a50      	ldr	r2, [pc, #320]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b4e      	ldr	r3, [pc, #312]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b4a      	ldr	r3, [pc, #296]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a49      	ldr	r2, [pc, #292]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b47      	ldr	r3, [pc, #284]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	4b43      	ldr	r3, [pc, #268]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a42      	ldr	r2, [pc, #264]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b40      	ldr	r3, [pc, #256]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b3c      	ldr	r3, [pc, #240]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a3b      	ldr	r2, [pc, #236]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b39      	ldr	r3, [pc, #228]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a34      	ldr	r2, [pc, #208]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b32      	ldr	r3, [pc, #200]	; (8000e98 <MX_GPIO_Init+0x160>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 8000de0:	482e      	ldr	r0, [pc, #184]	; (8000e9c <MX_GPIO_Init+0x164>)
 8000de2:	f000 fdd3 	bl	800198c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13 
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 4167 	mov.w	r1, #59136	; 0xe700
 8000dec:	482c      	ldr	r0, [pc, #176]	; (8000ea0 <MX_GPIO_Init+0x168>)
 8000dee:	f000 fdcd 	bl	800198c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000df2:	2303      	movs	r3, #3
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df6:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <MX_GPIO_Init+0x16c>)
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4826      	ldr	r0, [pc, #152]	; (8000ea0 <MX_GPIO_Init+0x168>)
 8000e06:	f000 fc0f 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <MX_GPIO_Init+0x16c>)
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4820      	ldr	r0, [pc, #128]	; (8000ea0 <MX_GPIO_Init+0x168>)
 8000e1e:	f000 fc03 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD12 PD13 PD14 
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8000e22:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8000e26:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4818      	ldr	r0, [pc, #96]	; (8000e9c <MX_GPIO_Init+0x164>)
 8000e3c:	f000 fbf4 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA13 
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13 
 8000e40:	f44f 4367 	mov.w	r3, #59136	; 0xe700
 8000e44:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <MX_GPIO_Init+0x168>)
 8000e5a:	f000 fbe5 	bl	8001628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	2006      	movs	r0, #6
 8000e64:	f000 fb87 	bl	8001576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e68:	2006      	movs	r0, #6
 8000e6a:	f000 fba0 	bl	80015ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2007      	movs	r0, #7
 8000e74:	f000 fb7f 	bl	8001576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e78:	2007      	movs	r0, #7
 8000e7a:	f000 fb98 	bl	80015ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2008      	movs	r0, #8
 8000e84:	f000 fb77 	bl	8001576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e88:	2008      	movs	r0, #8
 8000e8a:	f000 fb90 	bl	80015ae <HAL_NVIC_EnableIRQ>

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020c00 	.word	0x40020c00
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	10110000 	.word	0x10110000

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <HAL_MspInit+0x4c>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <HAL_MspInit+0x4c>)
 8000ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <HAL_MspInit+0x4c>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_MspInit+0x4c>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <HAL_MspInit+0x4c>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_MspInit+0x4c>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800

08000f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <HAL_TIM_Base_MspInit+0x48>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d115      	bne.n	8000f46 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_TIM_Base_MspInit+0x4c>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <HAL_TIM_Base_MspInit+0x4c>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_TIM_Base_MspInit+0x4c>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	201e      	movs	r0, #30
 8000f3c:	f000 fb1b 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f40:	201e      	movs	r0, #30
 8000f42:	f000 fb34 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40000800 	.word	0x40000800
 8000f54:	40023800 	.word	0x40023800

08000f58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <HAL_TIM_MspPostInit+0x68>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d11d      	bne.n	8000fb6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_TIM_MspPostInit+0x6c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <HAL_TIM_MspPostInit+0x6c>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_TIM_MspPostInit+0x6c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f96:	23c0      	movs	r3, #192	; 0xc0
 8000f98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_TIM_MspPostInit+0x70>)
 8000fb2:	f000 fb39 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3720      	adds	r7, #32
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40000800 	.word	0x40000800
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020400 	.word	0x40020400

08000fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <HAL_UART_MspInit+0x94>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d134      	bne.n	8001058 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <HAL_UART_MspInit+0x98>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <HAL_UART_MspInit+0x98>)
 8000ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_UART_MspInit+0x98>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_UART_MspInit+0x98>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a14      	ldr	r2, [pc, #80]	; (8001064 <HAL_UART_MspInit+0x98>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_UART_MspInit+0x98>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001026:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001038:	2307      	movs	r3, #7
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4809      	ldr	r0, [pc, #36]	; (8001068 <HAL_UART_MspInit+0x9c>)
 8001044:	f000 faf0 	bl	8001628 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	2027      	movs	r0, #39	; 0x27
 800104e:	f000 fa92 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001052:	2027      	movs	r0, #39	; 0x27
 8001054:	f000 faab 	bl	80015ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40004800 	.word	0x40004800
 8001064:	40023800 	.word	0x40023800
 8001068:	40020800 	.word	0x40020800

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler+0x4>

08001086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <UsageFault_Handler+0x4>

08001092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c0:	f000 f93c 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f000 fc91 	bl	80019f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80010da:	2002      	movs	r0, #2
 80010dc:	f000 fc8a 	bl	80019f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80010e8:	2004      	movs	r0, #4
 80010ea:	f000 fc83 	bl	80019f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <TIM4_IRQHandler+0x10>)
 80010fa:	f001 f9b7 	bl	800246c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200002a0 	.word	0x200002a0

08001108 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <USART3_IRQHandler+0x10>)
 800110e:	f002 f8e3 	bl	80032d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200002e0 	.word	0x200002e0

0800111c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	e00a      	b.n	8001144 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800112e:	f3af 8000 	nop.w
 8001132:	4601      	mov	r1, r0
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	60ba      	str	r2, [r7, #8]
 800113a:	b2ca      	uxtb	r2, r1
 800113c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	dbf0      	blt.n	800112e <_read+0x12>
	}

return len;
 800114c:	687b      	ldr	r3, [r7, #4]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
	return -1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800117e:	605a      	str	r2, [r3, #4]
	return 0;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <_isatty>:

int _isatty(int file)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
	return 1;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
	return 0;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <_sbrk+0x50>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <_sbrk+0x16>
		heap_end = &end;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <_sbrk+0x50>)
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <_sbrk+0x54>)
 80011d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <_sbrk+0x50>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <_sbrk+0x50>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	466a      	mov	r2, sp
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d907      	bls.n	80011fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011ea:	f002 fe2b 	bl	8003e44 <__errno>
 80011ee:	4602      	mov	r2, r0
 80011f0:	230c      	movs	r3, #12
 80011f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f8:	e006      	b.n	8001208 <_sbrk+0x48>
	}

	heap_end += incr;
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <_sbrk+0x50>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	4a03      	ldr	r2, [pc, #12]	; (8001210 <_sbrk+0x50>)
 8001204:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000022c 	.word	0x2000022c
 8001214:	20000340 	.word	0x20000340

08001218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <SystemInit+0x28>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	4a07      	ldr	r2, [pc, #28]	; (8001240 <SystemInit+0x28>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SystemInit+0x28>)
 800122e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001232:	609a      	str	r2, [r3, #8]
#endif
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800127c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001248:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800124a:	e003      	b.n	8001254 <LoopCopyDataInit>

0800124c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800124e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001250:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001252:	3104      	adds	r1, #4

08001254 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001254:	480b      	ldr	r0, [pc, #44]	; (8001284 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001258:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800125a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800125c:	d3f6      	bcc.n	800124c <CopyDataInit>
  ldr  r2, =_sbss
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001260:	e002      	b.n	8001268 <LoopFillZerobss>

08001262 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001262:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001264:	f842 3b04 	str.w	r3, [r2], #4

08001268 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800126a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800126c:	d3f9      	bcc.n	8001262 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800126e:	f7ff ffd3 	bl	8001218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001272:	f002 fded 	bl	8003e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001276:	f7ff fb9f 	bl	80009b8 <main>
  bx  lr    
 800127a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800127c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001280:	080051ac 	.word	0x080051ac
  ldr  r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001288:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 800128c:	2000020c 	.word	0x2000020c
  ldr  r3, = _ebss
 8001290:	20000340 	.word	0x20000340

08001294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC_IRQHandler>
	...

08001298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <HAL_Init+0x40>)
 80012a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_Init+0x40>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_Init+0x40>)
 80012ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 f94d 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 f808 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fdf4 	bl	8000eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00

080012dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x54>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x58>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f965 	bl	80015ca <HAL_SYSTICK_Config>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e00e      	b.n	8001328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d80a      	bhi.n	8001326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001318:	f000 f92d 	bl	8001576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <HAL_InitTick+0x5c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000030 	.word	0x20000030
 8001334:	20000038 	.word	0x20000038
 8001338:	20000034 	.word	0x20000034

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000038 	.word	0x20000038
 8001360:	20000338 	.word	0x20000338

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000338 	.word	0x20000338

0800137c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff ffee 	bl	8001364 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_Delay+0x40>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffde 	bl	8001364 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000038 	.word	0x20000038

080013c0 <__NVIC_SetPriorityGrouping>:
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_GetPriorityGrouping>:
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_EnableIRQ>:
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4907      	ldr	r1, [pc, #28]	; (800145c <__NVIC_EnableIRQ+0x38>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <SysTick_Config>:
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001540:	f7ff ff8e 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff29 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff3e 	bl	8001408 <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff8e 	bl	80014b4 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5d 	bl	8001460 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff31 	bl	8001424 <__NVIC_EnableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa2 	bl	800151c <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d004      	beq.n	8001600 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e00c      	b.n	800161a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2205      	movs	r2, #5
 8001604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0201 	bic.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	e16b      	b.n	800191c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001644:	2201      	movs	r2, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	429a      	cmp	r2, r3
 800165e:	f040 815a 	bne.w	8001916 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d00b      	beq.n	8001682 <HAL_GPIO_Init+0x5a>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d007      	beq.n	8001682 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001676:	2b11      	cmp	r3, #17
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b12      	cmp	r3, #18
 8001680:	d130      	bne.n	80016e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	2203      	movs	r2, #3
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b8:	2201      	movs	r2, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	f003 0201 	and.w	r2, r3, #1
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0xfc>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b12      	cmp	r3, #18
 8001722:	d123      	bne.n	800176c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	69b9      	ldr	r1, [r7, #24]
 8001768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0203 	and.w	r2, r3, #3
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 80b4 	beq.w	8001916 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b5f      	ldr	r3, [pc, #380]	; (8001930 <HAL_GPIO_Init+0x308>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	4a5e      	ldr	r2, [pc, #376]	; (8001930 <HAL_GPIO_Init+0x308>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017bc:	6453      	str	r3, [r2, #68]	; 0x44
 80017be:	4b5c      	ldr	r3, [pc, #368]	; (8001930 <HAL_GPIO_Init+0x308>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ca:	4a5a      	ldr	r2, [pc, #360]	; (8001934 <HAL_GPIO_Init+0x30c>)
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3302      	adds	r3, #2
 80017d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a51      	ldr	r2, [pc, #324]	; (8001938 <HAL_GPIO_Init+0x310>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d02b      	beq.n	800184e <HAL_GPIO_Init+0x226>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a50      	ldr	r2, [pc, #320]	; (800193c <HAL_GPIO_Init+0x314>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d025      	beq.n	800184a <HAL_GPIO_Init+0x222>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4f      	ldr	r2, [pc, #316]	; (8001940 <HAL_GPIO_Init+0x318>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01f      	beq.n	8001846 <HAL_GPIO_Init+0x21e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4e      	ldr	r2, [pc, #312]	; (8001944 <HAL_GPIO_Init+0x31c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d019      	beq.n	8001842 <HAL_GPIO_Init+0x21a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4d      	ldr	r2, [pc, #308]	; (8001948 <HAL_GPIO_Init+0x320>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_Init+0x216>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4c      	ldr	r2, [pc, #304]	; (800194c <HAL_GPIO_Init+0x324>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00d      	beq.n	800183a <HAL_GPIO_Init+0x212>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4b      	ldr	r2, [pc, #300]	; (8001950 <HAL_GPIO_Init+0x328>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <HAL_GPIO_Init+0x20e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_GPIO_Init+0x32c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_GPIO_Init+0x20a>
 800182e:	2307      	movs	r3, #7
 8001830:	e00e      	b.n	8001850 <HAL_GPIO_Init+0x228>
 8001832:	2308      	movs	r3, #8
 8001834:	e00c      	b.n	8001850 <HAL_GPIO_Init+0x228>
 8001836:	2306      	movs	r3, #6
 8001838:	e00a      	b.n	8001850 <HAL_GPIO_Init+0x228>
 800183a:	2305      	movs	r3, #5
 800183c:	e008      	b.n	8001850 <HAL_GPIO_Init+0x228>
 800183e:	2304      	movs	r3, #4
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x228>
 8001842:	2303      	movs	r3, #3
 8001844:	e004      	b.n	8001850 <HAL_GPIO_Init+0x228>
 8001846:	2302      	movs	r3, #2
 8001848:	e002      	b.n	8001850 <HAL_GPIO_Init+0x228>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_GPIO_Init+0x228>
 800184e:	2300      	movs	r3, #0
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	f002 0203 	and.w	r2, r2, #3
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	4093      	lsls	r3, r2
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001860:	4934      	ldr	r1, [pc, #208]	; (8001934 <HAL_GPIO_Init+0x30c>)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800186e:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <HAL_GPIO_Init+0x330>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001892:	4a31      	ldr	r2, [pc, #196]	; (8001958 <HAL_GPIO_Init+0x330>)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001898:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <HAL_GPIO_Init+0x330>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018bc:	4a26      	ldr	r2, [pc, #152]	; (8001958 <HAL_GPIO_Init+0x330>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c2:	4b25      	ldr	r3, [pc, #148]	; (8001958 <HAL_GPIO_Init+0x330>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018e6:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <HAL_GPIO_Init+0x330>)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <HAL_GPIO_Init+0x330>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001910:	4a11      	ldr	r2, [pc, #68]	; (8001958 <HAL_GPIO_Init+0x330>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3301      	adds	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	2b0f      	cmp	r3, #15
 8001920:	f67f ae90 	bls.w	8001644 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001924:	bf00      	nop
 8001926:	3724      	adds	r7, #36	; 0x24
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40023800 	.word	0x40023800
 8001934:	40013800 	.word	0x40013800
 8001938:	40020000 	.word	0x40020000
 800193c:	40020400 	.word	0x40020400
 8001940:	40020800 	.word	0x40020800
 8001944:	40020c00 	.word	0x40020c00
 8001948:	40021000 	.word	0x40021000
 800194c:	40021400 	.word	0x40021400
 8001950:	40021800 	.word	0x40021800
 8001954:	40021c00 	.word	0x40021c00
 8001958:	40013c00 	.word	0x40013c00

0800195c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	e001      	b.n	800197e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800197e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
 8001998:	4613      	mov	r3, r2
 800199a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800199c:	787b      	ldrb	r3, [r7, #1]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019a8:	e003      	b.n	80019b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	041a      	lsls	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	619a      	str	r2, [r3, #24]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	460b      	mov	r3, r1
 80019c8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	401a      	ands	r2, r3
 80019d2:	887b      	ldrh	r3, [r7, #2]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d104      	bne.n	80019e2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	041a      	lsls	r2, r3, #16
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80019e0:	e002      	b.n	80019e8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a00:	695a      	ldr	r2, [r3, #20]
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d006      	beq.n	8001a18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a0a:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fdfa 	bl	800060c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40013c00 	.word	0x40013c00

08001a24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e25b      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d075      	beq.n	8001b2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a42:	4ba3      	ldr	r3, [pc, #652]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d00c      	beq.n	8001a68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a4e:	4ba0      	ldr	r3, [pc, #640]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d112      	bne.n	8001a80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a5a:	4b9d      	ldr	r3, [pc, #628]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a66:	d10b      	bne.n	8001a80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	4b99      	ldr	r3, [pc, #612]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d05b      	beq.n	8001b2c <HAL_RCC_OscConfig+0x108>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d157      	bne.n	8001b2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e236      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a88:	d106      	bne.n	8001a98 <HAL_RCC_OscConfig+0x74>
 8001a8a:	4b91      	ldr	r3, [pc, #580]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a90      	ldr	r2, [pc, #576]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e01d      	b.n	8001ad4 <HAL_RCC_OscConfig+0xb0>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0x98>
 8001aa2:	4b8b      	ldr	r3, [pc, #556]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a8a      	ldr	r2, [pc, #552]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	4b88      	ldr	r3, [pc, #544]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a87      	ldr	r2, [pc, #540]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0xb0>
 8001abc:	4b84      	ldr	r3, [pc, #528]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a83      	ldr	r2, [pc, #524]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b81      	ldr	r3, [pc, #516]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a80      	ldr	r2, [pc, #512]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d013      	beq.n	8001b04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fc42 	bl	8001364 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fc3e 	bl	8001364 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	; 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e1fb      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xc0>
 8001b02:	e014      	b.n	8001b2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fc2e 	bl	8001364 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fc2a 	bl	8001364 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1e7      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	4b6c      	ldr	r3, [pc, #432]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0xe8>
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d063      	beq.n	8001c02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b3a:	4b65      	ldr	r3, [pc, #404]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b46:	4b62      	ldr	r3, [pc, #392]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d11c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b52:	4b5f      	ldr	r3, [pc, #380]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d116      	bne.n	8001b8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5e:	4b5c      	ldr	r3, [pc, #368]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <HAL_RCC_OscConfig+0x152>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d001      	beq.n	8001b76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e1bb      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	4b56      	ldr	r3, [pc, #344]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4952      	ldr	r1, [pc, #328]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	e03a      	b.n	8001c02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d020      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b94:	4b4f      	ldr	r3, [pc, #316]	; (8001cd4 <HAL_RCC_OscConfig+0x2b0>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fbe3 	bl	8001364 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7ff fbdf 	bl	8001364 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e19c      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	4b46      	ldr	r3, [pc, #280]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4940      	ldr	r1, [pc, #256]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]
 8001bd4:	e015      	b.n	8001c02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <HAL_RCC_OscConfig+0x2b0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fbc2 	bl	8001364 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be4:	f7ff fbbe 	bl	8001364 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e17b      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d030      	beq.n	8001c70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d016      	beq.n	8001c44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c16:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <HAL_RCC_OscConfig+0x2b4>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1c:	f7ff fba2 	bl	8001364 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c24:	f7ff fb9e 	bl	8001364 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e15b      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x200>
 8001c42:	e015      	b.n	8001c70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c44:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <HAL_RCC_OscConfig+0x2b4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fb8b 	bl	8001364 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c52:	f7ff fb87 	bl	8001364 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e144      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c64:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f0      	bne.n	8001c52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 80a0 	beq.w	8001dbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10f      	bne.n	8001cae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	4a0e      	ldr	r2, [pc, #56]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001caa:	2301      	movs	r3, #1
 8001cac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_RCC_OscConfig+0x2b8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d121      	bne.n	8001cfe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <HAL_RCC_OscConfig+0x2b8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <HAL_RCC_OscConfig+0x2b8>)
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc6:	f7ff fb4d 	bl	8001364 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ccc:	e011      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2ce>
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	42470000 	.word	0x42470000
 8001cd8:	42470e80 	.word	0x42470e80
 8001cdc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce0:	f7ff fb40 	bl	8001364 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e0fd      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	4b81      	ldr	r3, [pc, #516]	; (8001ef8 <HAL_RCC_OscConfig+0x4d4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d106      	bne.n	8001d14 <HAL_RCC_OscConfig+0x2f0>
 8001d06:	4b7d      	ldr	r3, [pc, #500]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	4a7c      	ldr	r2, [pc, #496]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6713      	str	r3, [r2, #112]	; 0x70
 8001d12:	e01c      	b.n	8001d4e <HAL_RCC_OscConfig+0x32a>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d10c      	bne.n	8001d36 <HAL_RCC_OscConfig+0x312>
 8001d1c:	4b77      	ldr	r3, [pc, #476]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	4a76      	ldr	r2, [pc, #472]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6713      	str	r3, [r2, #112]	; 0x70
 8001d28:	4b74      	ldr	r3, [pc, #464]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	4a73      	ldr	r2, [pc, #460]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70
 8001d34:	e00b      	b.n	8001d4e <HAL_RCC_OscConfig+0x32a>
 8001d36:	4b71      	ldr	r3, [pc, #452]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	4a70      	ldr	r2, [pc, #448]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
 8001d42:	4b6e      	ldr	r3, [pc, #440]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d46:	4a6d      	ldr	r2, [pc, #436]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001d48:	f023 0304 	bic.w	r3, r3, #4
 8001d4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d015      	beq.n	8001d82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d56:	f7ff fb05 	bl	8001364 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7ff fb01 	bl	8001364 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0bc      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	4b61      	ldr	r3, [pc, #388]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ee      	beq.n	8001d5e <HAL_RCC_OscConfig+0x33a>
 8001d80:	e014      	b.n	8001dac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7ff faef 	bl	8001364 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff faeb 	bl	8001364 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e0a6      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da0:	4b56      	ldr	r3, [pc, #344]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ee      	bne.n	8001d8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d105      	bne.n	8001dbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db2:	4b52      	ldr	r3, [pc, #328]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a51      	ldr	r2, [pc, #324]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8092 	beq.w	8001eec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b4c      	ldr	r3, [pc, #304]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d05c      	beq.n	8001e8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d141      	bne.n	8001e60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ddc:	4b48      	ldr	r3, [pc, #288]	; (8001f00 <HAL_RCC_OscConfig+0x4dc>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7ff fabf 	bl	8001364 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dea:	f7ff fabb 	bl	8001364 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e078      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfc:	4b3f      	ldr	r3, [pc, #252]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f0      	bne.n	8001dea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69da      	ldr	r2, [r3, #28]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	019b      	lsls	r3, r3, #6
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	085b      	lsrs	r3, r3, #1
 8001e20:	3b01      	subs	r3, #1
 8001e22:	041b      	lsls	r3, r3, #16
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	061b      	lsls	r3, r3, #24
 8001e2c:	4933      	ldr	r1, [pc, #204]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e32:	4b33      	ldr	r3, [pc, #204]	; (8001f00 <HAL_RCC_OscConfig+0x4dc>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fa94 	bl	8001364 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e40:	f7ff fa90 	bl	8001364 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e04d      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e52:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x41c>
 8001e5e:	e045      	b.n	8001eec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <HAL_RCC_OscConfig+0x4dc>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff fa7d 	bl	8001364 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7ff fa79 	bl	8001364 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e036      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x44a>
 8001e8c:	e02e      	b.n	8001eec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e029      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_RCC_OscConfig+0x4d8>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d11c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d115      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d10d      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40007000 	.word	0x40007000
 8001efc:	40023800 	.word	0x40023800
 8001f00:	42470060 	.word	0x42470060

08001f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0cc      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f18:	4b68      	ldr	r3, [pc, #416]	; (80020bc <HAL_RCC_ClockConfig+0x1b8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d90c      	bls.n	8001f40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b65      	ldr	r3, [pc, #404]	; (80020bc <HAL_RCC_ClockConfig+0x1b8>)
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b63      	ldr	r3, [pc, #396]	; (80020bc <HAL_RCC_ClockConfig+0x1b8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0b8      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d020      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f58:	4b59      	ldr	r3, [pc, #356]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4a58      	ldr	r2, [pc, #352]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f70:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	4a52      	ldr	r2, [pc, #328]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f7c:	4b50      	ldr	r3, [pc, #320]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	494d      	ldr	r1, [pc, #308]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d044      	beq.n	8002024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d107      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	4b47      	ldr	r3, [pc, #284]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d119      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e07f      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d003      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc2:	4b3f      	ldr	r3, [pc, #252]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e06f      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd2:	4b3b      	ldr	r3, [pc, #236]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e067      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe2:	4b37      	ldr	r3, [pc, #220]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f023 0203 	bic.w	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4934      	ldr	r1, [pc, #208]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff4:	f7ff f9b6 	bl	8001364 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffc:	f7ff f9b2 	bl	8001364 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e04f      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 020c 	and.w	r2, r3, #12
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	429a      	cmp	r2, r3
 8002022:	d1eb      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002024:	4b25      	ldr	r3, [pc, #148]	; (80020bc <HAL_RCC_ClockConfig+0x1b8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d20c      	bcs.n	800204c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b22      	ldr	r3, [pc, #136]	; (80020bc <HAL_RCC_ClockConfig+0x1b8>)
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <HAL_RCC_ClockConfig+0x1b8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e032      	b.n	80020b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4916      	ldr	r1, [pc, #88]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d009      	beq.n	800208a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	490e      	ldr	r1, [pc, #56]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800208a:	f000 f821 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 800208e:	4601      	mov	r1, r0
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	fa21 f303 	lsr.w	r3, r1, r3
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_RCC_ClockConfig+0x1c8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff f916 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023c00 	.word	0x40023c00
 80020c0:	40023800 	.word	0x40023800
 80020c4:	08004fe0 	.word	0x08004fe0
 80020c8:	20000030 	.word	0x20000030
 80020cc:	20000034 	.word	0x20000034

080020d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020e6:	4b63      	ldr	r3, [pc, #396]	; (8002274 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d007      	beq.n	8002102 <HAL_RCC_GetSysClockFreq+0x32>
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d008      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x38>
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 80b4 	bne.w	8002264 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020fc:	4b5e      	ldr	r3, [pc, #376]	; (8002278 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020fe:	60bb      	str	r3, [r7, #8]
       break;
 8002100:	e0b3      	b.n	800226a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002102:	4b5e      	ldr	r3, [pc, #376]	; (800227c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002104:	60bb      	str	r3, [r7, #8]
      break;
 8002106:	e0b0      	b.n	800226a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002108:	4b5a      	ldr	r3, [pc, #360]	; (8002274 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002110:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002112:	4b58      	ldr	r3, [pc, #352]	; (8002274 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d04a      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211e:	4b55      	ldr	r3, [pc, #340]	; (8002274 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	099b      	lsrs	r3, r3, #6
 8002124:	f04f 0400 	mov.w	r4, #0
 8002128:	f240 11ff 	movw	r1, #511	; 0x1ff
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	ea03 0501 	and.w	r5, r3, r1
 8002134:	ea04 0602 	and.w	r6, r4, r2
 8002138:	4629      	mov	r1, r5
 800213a:	4632      	mov	r2, r6
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	f04f 0400 	mov.w	r4, #0
 8002144:	0154      	lsls	r4, r2, #5
 8002146:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800214a:	014b      	lsls	r3, r1, #5
 800214c:	4619      	mov	r1, r3
 800214e:	4622      	mov	r2, r4
 8002150:	1b49      	subs	r1, r1, r5
 8002152:	eb62 0206 	sbc.w	r2, r2, r6
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	f04f 0400 	mov.w	r4, #0
 800215e:	0194      	lsls	r4, r2, #6
 8002160:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002164:	018b      	lsls	r3, r1, #6
 8002166:	1a5b      	subs	r3, r3, r1
 8002168:	eb64 0402 	sbc.w	r4, r4, r2
 800216c:	f04f 0100 	mov.w	r1, #0
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	00e2      	lsls	r2, r4, #3
 8002176:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800217a:	00d9      	lsls	r1, r3, #3
 800217c:	460b      	mov	r3, r1
 800217e:	4614      	mov	r4, r2
 8002180:	195b      	adds	r3, r3, r5
 8002182:	eb44 0406 	adc.w	r4, r4, r6
 8002186:	f04f 0100 	mov.w	r1, #0
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	0262      	lsls	r2, r4, #9
 8002190:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002194:	0259      	lsls	r1, r3, #9
 8002196:	460b      	mov	r3, r1
 8002198:	4614      	mov	r4, r2
 800219a:	4618      	mov	r0, r3
 800219c:	4621      	mov	r1, r4
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f04f 0400 	mov.w	r4, #0
 80021a4:	461a      	mov	r2, r3
 80021a6:	4623      	mov	r3, r4
 80021a8:	f7fe f86a 	bl	8000280 <__aeabi_uldivmod>
 80021ac:	4603      	mov	r3, r0
 80021ae:	460c      	mov	r4, r1
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e049      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b4:	4b2f      	ldr	r3, [pc, #188]	; (8002274 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	f04f 0400 	mov.w	r4, #0
 80021be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	ea03 0501 	and.w	r5, r3, r1
 80021ca:	ea04 0602 	and.w	r6, r4, r2
 80021ce:	4629      	mov	r1, r5
 80021d0:	4632      	mov	r2, r6
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	f04f 0400 	mov.w	r4, #0
 80021da:	0154      	lsls	r4, r2, #5
 80021dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021e0:	014b      	lsls	r3, r1, #5
 80021e2:	4619      	mov	r1, r3
 80021e4:	4622      	mov	r2, r4
 80021e6:	1b49      	subs	r1, r1, r5
 80021e8:	eb62 0206 	sbc.w	r2, r2, r6
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	f04f 0400 	mov.w	r4, #0
 80021f4:	0194      	lsls	r4, r2, #6
 80021f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021fa:	018b      	lsls	r3, r1, #6
 80021fc:	1a5b      	subs	r3, r3, r1
 80021fe:	eb64 0402 	sbc.w	r4, r4, r2
 8002202:	f04f 0100 	mov.w	r1, #0
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	00e2      	lsls	r2, r4, #3
 800220c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002210:	00d9      	lsls	r1, r3, #3
 8002212:	460b      	mov	r3, r1
 8002214:	4614      	mov	r4, r2
 8002216:	195b      	adds	r3, r3, r5
 8002218:	eb44 0406 	adc.w	r4, r4, r6
 800221c:	f04f 0100 	mov.w	r1, #0
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	02a2      	lsls	r2, r4, #10
 8002226:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800222a:	0299      	lsls	r1, r3, #10
 800222c:	460b      	mov	r3, r1
 800222e:	4614      	mov	r4, r2
 8002230:	4618      	mov	r0, r3
 8002232:	4621      	mov	r1, r4
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f04f 0400 	mov.w	r4, #0
 800223a:	461a      	mov	r2, r3
 800223c:	4623      	mov	r3, r4
 800223e:	f7fe f81f 	bl	8000280 <__aeabi_uldivmod>
 8002242:	4603      	mov	r3, r0
 8002244:	460c      	mov	r4, r1
 8002246:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	3301      	adds	r3, #1
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002260:	60bb      	str	r3, [r7, #8]
      break;
 8002262:	e002      	b.n	800226a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002266:	60bb      	str	r3, [r7, #8]
      break;
 8002268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800226a:	68bb      	ldr	r3, [r7, #8]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002274:	40023800 	.word	0x40023800
 8002278:	00f42400 	.word	0x00f42400
 800227c:	007a1200 	.word	0x007a1200

08002280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <HAL_RCC_GetHCLKFreq+0x14>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000030 	.word	0x20000030

08002298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800229c:	f7ff fff0 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80022a0:	4601      	mov	r1, r0
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	0a9b      	lsrs	r3, r3, #10
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4a03      	ldr	r2, [pc, #12]	; (80022bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	08004ff0 	.word	0x08004ff0

080022c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022c4:	f7ff ffdc 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80022c8:	4601      	mov	r1, r0
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	0b5b      	lsrs	r3, r3, #13
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	4a03      	ldr	r2, [pc, #12]	; (80022e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d6:	5cd3      	ldrb	r3, [r2, r3]
 80022d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022dc:	4618      	mov	r0, r3
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40023800 	.word	0x40023800
 80022e4:	08004ff0 	.word	0x08004ff0

080022e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e01d      	b.n	8002336 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7fe fdfa 	bl	8000f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3304      	adds	r3, #4
 8002324:	4619      	mov	r1, r3
 8002326:	4610      	mov	r0, r2
 8002328:	f000 fb4e 	bl	80029c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800233e:	b480      	push	{r7}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0201 	orr.w	r2, r2, #1
 8002354:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b06      	cmp	r3, #6
 8002366:	d007      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e01d      	b.n	80023d4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d106      	bne.n	80023b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f815 	bl	80023dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3304      	adds	r3, #4
 80023c2:	4619      	mov	r1, r3
 80023c4:	4610      	mov	r0, r2
 80023c6:	f000 faff 	bl	80029c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2201      	movs	r2, #1
 8002400:	6839      	ldr	r1, [r7, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fdca 	bl	8002f9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a15      	ldr	r2, [pc, #84]	; (8002464 <HAL_TIM_PWM_Start+0x74>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d004      	beq.n	800241c <HAL_TIM_PWM_Start+0x2c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a14      	ldr	r2, [pc, #80]	; (8002468 <HAL_TIM_PWM_Start+0x78>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_TIM_PWM_Start+0x30>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <HAL_TIM_PWM_Start+0x32>
 8002420:	2300      	movs	r3, #0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b06      	cmp	r3, #6
 8002446:	d007      	beq.n	8002458 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40010000 	.word	0x40010000
 8002468:	40010400 	.word	0x40010400

0800246c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b02      	cmp	r3, #2
 8002480:	d122      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b02      	cmp	r3, #2
 800248e:	d11b      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0202 	mvn.w	r2, #2
 8002498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fa6b 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 80024b4:	e005      	b.n	80024c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fa5d 	bl	8002976 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fa6e 	bl	800299e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d122      	bne.n	800251c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d11b      	bne.n	800251c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0204 	mvn.w	r2, #4
 80024ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 fa41 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 8002508:	e005      	b.n	8002516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fa33 	bl	8002976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fa44 	bl	800299e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b08      	cmp	r3, #8
 8002528:	d122      	bne.n	8002570 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b08      	cmp	r3, #8
 8002536:	d11b      	bne.n	8002570 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0208 	mvn.w	r2, #8
 8002540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2204      	movs	r2, #4
 8002546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fa17 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 800255c:	e005      	b.n	800256a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fa09 	bl	8002976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fa1a 	bl	800299e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b10      	cmp	r3, #16
 800257c:	d122      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b10      	cmp	r3, #16
 800258a:	d11b      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0210 	mvn.w	r2, #16
 8002594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2208      	movs	r2, #8
 800259a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f9ed 	bl	800298a <HAL_TIM_IC_CaptureCallback>
 80025b0:	e005      	b.n	80025be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f9df 	bl	8002976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f9f0 	bl	800299e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d10e      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d107      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0201 	mvn.w	r2, #1
 80025e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe f974 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fa:	2b80      	cmp	r3, #128	; 0x80
 80025fc:	d10e      	bne.n	800261c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002608:	2b80      	cmp	r3, #128	; 0x80
 800260a:	d107      	bne.n	800261c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fd6c 	bl	80030f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002626:	2b40      	cmp	r3, #64	; 0x40
 8002628:	d10e      	bne.n	8002648 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002634:	2b40      	cmp	r3, #64	; 0x40
 8002636:	d107      	bne.n	8002648 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f9b5 	bl	80029b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f003 0320 	and.w	r3, r3, #32
 8002652:	2b20      	cmp	r3, #32
 8002654:	d10e      	bne.n	8002674 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b20      	cmp	r3, #32
 8002662:	d107      	bne.n	8002674 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0220 	mvn.w	r2, #32
 800266c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fd36 	bl	80030e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002692:	2302      	movs	r3, #2
 8002694:	e0b4      	b.n	8002800 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2202      	movs	r2, #2
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	f200 809f 	bhi.w	80027ec <HAL_TIM_PWM_ConfigChannel+0x170>
 80026ae:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80026b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b4:	080026e9 	.word	0x080026e9
 80026b8:	080027ed 	.word	0x080027ed
 80026bc:	080027ed 	.word	0x080027ed
 80026c0:	080027ed 	.word	0x080027ed
 80026c4:	08002729 	.word	0x08002729
 80026c8:	080027ed 	.word	0x080027ed
 80026cc:	080027ed 	.word	0x080027ed
 80026d0:	080027ed 	.word	0x080027ed
 80026d4:	0800276b 	.word	0x0800276b
 80026d8:	080027ed 	.word	0x080027ed
 80026dc:	080027ed 	.word	0x080027ed
 80026e0:	080027ed 	.word	0x080027ed
 80026e4:	080027ab 	.word	0x080027ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fa0a 	bl	8002b08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0208 	orr.w	r2, r2, #8
 8002702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0204 	bic.w	r2, r2, #4
 8002712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6999      	ldr	r1, [r3, #24]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	619a      	str	r2, [r3, #24]
      break;
 8002726:	e062      	b.n	80027ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fa5a 	bl	8002be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6999      	ldr	r1, [r3, #24]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	021a      	lsls	r2, r3, #8
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	619a      	str	r2, [r3, #24]
      break;
 8002768:	e041      	b.n	80027ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	4618      	mov	r0, r3
 8002772:	f000 faaf 	bl	8002cd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69da      	ldr	r2, [r3, #28]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0208 	orr.w	r2, r2, #8
 8002784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0204 	bic.w	r2, r2, #4
 8002794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69d9      	ldr	r1, [r3, #28]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	61da      	str	r2, [r3, #28]
      break;
 80027a8:	e021      	b.n	80027ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fb03 	bl	8002dbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	69da      	ldr	r2, [r3, #28]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	69d9      	ldr	r1, [r3, #28]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	021a      	lsls	r2, r3, #8
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	61da      	str	r2, [r3, #28]
      break;
 80027ea:	e000      	b.n	80027ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80027ec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_TIM_ConfigClockSource+0x18>
 800281c:	2302      	movs	r3, #2
 800281e:	e0a6      	b.n	800296e <HAL_TIM_ConfigClockSource+0x166>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800283e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002846:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d067      	beq.n	8002928 <HAL_TIM_ConfigClockSource+0x120>
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d80b      	bhi.n	8002874 <HAL_TIM_ConfigClockSource+0x6c>
 800285c:	2b10      	cmp	r3, #16
 800285e:	d073      	beq.n	8002948 <HAL_TIM_ConfigClockSource+0x140>
 8002860:	2b10      	cmp	r3, #16
 8002862:	d802      	bhi.n	800286a <HAL_TIM_ConfigClockSource+0x62>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d06f      	beq.n	8002948 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002868:	e078      	b.n	800295c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800286a:	2b20      	cmp	r3, #32
 800286c:	d06c      	beq.n	8002948 <HAL_TIM_ConfigClockSource+0x140>
 800286e:	2b30      	cmp	r3, #48	; 0x30
 8002870:	d06a      	beq.n	8002948 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002872:	e073      	b.n	800295c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002874:	2b70      	cmp	r3, #112	; 0x70
 8002876:	d00d      	beq.n	8002894 <HAL_TIM_ConfigClockSource+0x8c>
 8002878:	2b70      	cmp	r3, #112	; 0x70
 800287a:	d804      	bhi.n	8002886 <HAL_TIM_ConfigClockSource+0x7e>
 800287c:	2b50      	cmp	r3, #80	; 0x50
 800287e:	d033      	beq.n	80028e8 <HAL_TIM_ConfigClockSource+0xe0>
 8002880:	2b60      	cmp	r3, #96	; 0x60
 8002882:	d041      	beq.n	8002908 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002884:	e06a      	b.n	800295c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288a:	d066      	beq.n	800295a <HAL_TIM_ConfigClockSource+0x152>
 800288c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002890:	d017      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002892:	e063      	b.n	800295c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6899      	ldr	r1, [r3, #8]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f000 fb5a 	bl	8002f5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	609a      	str	r2, [r3, #8]
      break;
 80028c0:	e04c      	b.n	800295c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6899      	ldr	r1, [r3, #8]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f000 fb43 	bl	8002f5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028e4:	609a      	str	r2, [r3, #8]
      break;
 80028e6:	e039      	b.n	800295c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	461a      	mov	r2, r3
 80028f6:	f000 fab7 	bl	8002e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2150      	movs	r1, #80	; 0x50
 8002900:	4618      	mov	r0, r3
 8002902:	f000 fb10 	bl	8002f26 <TIM_ITRx_SetConfig>
      break;
 8002906:	e029      	b.n	800295c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	461a      	mov	r2, r3
 8002916:	f000 fad6 	bl	8002ec6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2160      	movs	r1, #96	; 0x60
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fb00 	bl	8002f26 <TIM_ITRx_SetConfig>
      break;
 8002926:	e019      	b.n	800295c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	461a      	mov	r2, r3
 8002936:	f000 fa97 	bl	8002e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2140      	movs	r1, #64	; 0x40
 8002940:	4618      	mov	r0, r3
 8002942:	f000 faf0 	bl	8002f26 <TIM_ITRx_SetConfig>
      break;
 8002946:	e009      	b.n	800295c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4619      	mov	r1, r3
 8002952:	4610      	mov	r0, r2
 8002954:	f000 fae7 	bl	8002f26 <TIM_ITRx_SetConfig>
      break;
 8002958:	e000      	b.n	800295c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800295a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a40      	ldr	r2, [pc, #256]	; (8002adc <TIM_Base_SetConfig+0x114>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d013      	beq.n	8002a08 <TIM_Base_SetConfig+0x40>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e6:	d00f      	beq.n	8002a08 <TIM_Base_SetConfig+0x40>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <TIM_Base_SetConfig+0x118>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00b      	beq.n	8002a08 <TIM_Base_SetConfig+0x40>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a3c      	ldr	r2, [pc, #240]	; (8002ae4 <TIM_Base_SetConfig+0x11c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d007      	beq.n	8002a08 <TIM_Base_SetConfig+0x40>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a3b      	ldr	r2, [pc, #236]	; (8002ae8 <TIM_Base_SetConfig+0x120>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d003      	beq.n	8002a08 <TIM_Base_SetConfig+0x40>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a3a      	ldr	r2, [pc, #232]	; (8002aec <TIM_Base_SetConfig+0x124>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d108      	bne.n	8002a1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a2f      	ldr	r2, [pc, #188]	; (8002adc <TIM_Base_SetConfig+0x114>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d02b      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a28:	d027      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ae0 <TIM_Base_SetConfig+0x118>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d023      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a2b      	ldr	r2, [pc, #172]	; (8002ae4 <TIM_Base_SetConfig+0x11c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01f      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ae8 <TIM_Base_SetConfig+0x120>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d01b      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a29      	ldr	r2, [pc, #164]	; (8002aec <TIM_Base_SetConfig+0x124>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d017      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a28      	ldr	r2, [pc, #160]	; (8002af0 <TIM_Base_SetConfig+0x128>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a27      	ldr	r2, [pc, #156]	; (8002af4 <TIM_Base_SetConfig+0x12c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00f      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a26      	ldr	r2, [pc, #152]	; (8002af8 <TIM_Base_SetConfig+0x130>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00b      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a25      	ldr	r2, [pc, #148]	; (8002afc <TIM_Base_SetConfig+0x134>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d007      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a24      	ldr	r2, [pc, #144]	; (8002b00 <TIM_Base_SetConfig+0x138>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d003      	beq.n	8002a7a <TIM_Base_SetConfig+0xb2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a23      	ldr	r2, [pc, #140]	; (8002b04 <TIM_Base_SetConfig+0x13c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d108      	bne.n	8002a8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <TIM_Base_SetConfig+0x114>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d003      	beq.n	8002ac0 <TIM_Base_SetConfig+0xf8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <TIM_Base_SetConfig+0x124>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d103      	bne.n	8002ac8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	615a      	str	r2, [r3, #20]
}
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40000800 	.word	0x40000800
 8002ae8:	40000c00 	.word	0x40000c00
 8002aec:	40010400 	.word	0x40010400
 8002af0:	40014000 	.word	0x40014000
 8002af4:	40014400 	.word	0x40014400
 8002af8:	40014800 	.word	0x40014800
 8002afc:	40001800 	.word	0x40001800
 8002b00:	40001c00 	.word	0x40001c00
 8002b04:	40002000 	.word	0x40002000

08002b08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f023 0201 	bic.w	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f023 0303 	bic.w	r3, r3, #3
 8002b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f023 0302 	bic.w	r3, r3, #2
 8002b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a20      	ldr	r2, [pc, #128]	; (8002be0 <TIM_OC1_SetConfig+0xd8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d003      	beq.n	8002b6c <TIM_OC1_SetConfig+0x64>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <TIM_OC1_SetConfig+0xdc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d10c      	bne.n	8002b86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f023 0308 	bic.w	r3, r3, #8
 8002b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f023 0304 	bic.w	r3, r3, #4
 8002b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a15      	ldr	r2, [pc, #84]	; (8002be0 <TIM_OC1_SetConfig+0xd8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d003      	beq.n	8002b96 <TIM_OC1_SetConfig+0x8e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <TIM_OC1_SetConfig+0xdc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d111      	bne.n	8002bba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	621a      	str	r2, [r3, #32]
}
 8002bd4:	bf00      	nop
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	40010000 	.word	0x40010000
 8002be4:	40010400 	.word	0x40010400

08002be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	f023 0210 	bic.w	r2, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	021b      	lsls	r3, r3, #8
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f023 0320 	bic.w	r3, r3, #32
 8002c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a22      	ldr	r2, [pc, #136]	; (8002ccc <TIM_OC2_SetConfig+0xe4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d003      	beq.n	8002c50 <TIM_OC2_SetConfig+0x68>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a21      	ldr	r2, [pc, #132]	; (8002cd0 <TIM_OC2_SetConfig+0xe8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d10d      	bne.n	8002c6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a17      	ldr	r2, [pc, #92]	; (8002ccc <TIM_OC2_SetConfig+0xe4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d003      	beq.n	8002c7c <TIM_OC2_SetConfig+0x94>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a16      	ldr	r2, [pc, #88]	; (8002cd0 <TIM_OC2_SetConfig+0xe8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d113      	bne.n	8002ca4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	621a      	str	r2, [r3, #32]
}
 8002cbe:	bf00      	nop
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	40010400 	.word	0x40010400

08002cd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0303 	bic.w	r3, r3, #3
 8002d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a21      	ldr	r2, [pc, #132]	; (8002db4 <TIM_OC3_SetConfig+0xe0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d003      	beq.n	8002d3a <TIM_OC3_SetConfig+0x66>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a20      	ldr	r2, [pc, #128]	; (8002db8 <TIM_OC3_SetConfig+0xe4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d10d      	bne.n	8002d56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a16      	ldr	r2, [pc, #88]	; (8002db4 <TIM_OC3_SetConfig+0xe0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d003      	beq.n	8002d66 <TIM_OC3_SetConfig+0x92>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a15      	ldr	r2, [pc, #84]	; (8002db8 <TIM_OC3_SetConfig+0xe4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d113      	bne.n	8002d8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	621a      	str	r2, [r3, #32]
}
 8002da8:	bf00      	nop
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40010000 	.word	0x40010000
 8002db8:	40010400 	.word	0x40010400

08002dbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	031b      	lsls	r3, r3, #12
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <TIM_OC4_SetConfig+0xa4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d003      	beq.n	8002e24 <TIM_OC4_SetConfig+0x68>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a11      	ldr	r2, [pc, #68]	; (8002e64 <TIM_OC4_SetConfig+0xa8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d109      	bne.n	8002e38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	019b      	lsls	r3, r3, #6
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	621a      	str	r2, [r3, #32]
}
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40010000 	.word	0x40010000
 8002e64:	40010400 	.word	0x40010400

08002e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	f023 0201 	bic.w	r2, r3, #1
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f023 030a 	bic.w	r3, r3, #10
 8002ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	621a      	str	r2, [r3, #32]
}
 8002eba:	bf00      	nop
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b087      	sub	sp, #28
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f023 0210 	bic.w	r2, r3, #16
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	031b      	lsls	r3, r3, #12
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	621a      	str	r2, [r3, #32]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f043 0307 	orr.w	r3, r3, #7
 8002f48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	609a      	str	r2, [r3, #8]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	021a      	lsls	r2, r3, #8
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	609a      	str	r2, [r3, #8]
}
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	2201      	movs	r2, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a1a      	ldr	r2, [r3, #32]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e05a      	b.n	80030b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a21      	ldr	r2, [pc, #132]	; (80030c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d022      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304c:	d01d      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d018      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d013      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1a      	ldr	r2, [pc, #104]	; (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00e      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d009      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a17      	ldr	r2, [pc, #92]	; (80030d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d004      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a15      	ldr	r2, [pc, #84]	; (80030dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d10c      	bne.n	80030a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	4313      	orrs	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40010000 	.word	0x40010000
 80030c8:	40000400 	.word	0x40000400
 80030cc:	40000800 	.word	0x40000800
 80030d0:	40000c00 	.word	0x40000c00
 80030d4:	40010400 	.word	0x40010400
 80030d8:	40014000 	.word	0x40014000
 80030dc:	40001800 	.word	0x40001800

080030e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e03f      	b.n	800319a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd ff4c 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2224      	movs	r2, #36	; 0x24
 8003138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800314a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 faf9 	bl	8003744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b085      	sub	sp, #20
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	4613      	mov	r3, r2
 80031ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d130      	bne.n	800321e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_UART_Transmit_IT+0x26>
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e029      	b.n	8003220 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_UART_Transmit_IT+0x38>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e022      	b.n	8003220 <HAL_UART_Transmit_IT+0x7e>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	88fa      	ldrh	r2, [r7, #6]
 80031ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2221      	movs	r2, #33	; 0x21
 80031fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003218:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e000      	b.n	8003220 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800321e:	2302      	movs	r3, #2
  }
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	4613      	mov	r3, r2
 8003238:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	d140      	bne.n	80032c8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_UART_Receive_IT+0x26>
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e039      	b.n	80032ca <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_UART_Receive_IT+0x38>
 8003260:	2302      	movs	r3, #2
 8003262:	e032      	b.n	80032ca <HAL_UART_Receive_IT+0x9e>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	88fa      	ldrh	r2, [r7, #6]
 8003276:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	88fa      	ldrh	r2, [r7, #6]
 800327c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2222      	movs	r2, #34	; 0x22
 8003288:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0220 	orr.w	r2, r2, #32
 80032c2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	e000      	b.n	80032ca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80032c8:	2302      	movs	r3, #2
  }
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
	...

080032d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10d      	bne.n	800332a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_UART_IRQHandler+0x52>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f98c 	bl	8003640 <UART_Receive_IT>
      return;
 8003328:	e0d1      	b.n	80034ce <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 80b0 	beq.w	8003492 <HAL_UART_IRQHandler+0x1ba>
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <HAL_UART_IRQHandler+0x70>
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80a5 	beq.w	8003492 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_UART_IRQHandler+0x90>
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <HAL_UART_IRQHandler+0xb0>
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	f043 0202 	orr.w	r2, r3, #2
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_UART_IRQHandler+0xd0>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	f043 0204 	orr.w	r2, r3, #4
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00f      	beq.n	80033d2 <HAL_UART_IRQHandler+0xfa>
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d104      	bne.n	80033c6 <HAL_UART_IRQHandler+0xee>
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ca:	f043 0208 	orr.w	r2, r3, #8
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d078      	beq.n	80034cc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_UART_IRQHandler+0x11c>
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f926 	bl	8003640 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fe:	2b40      	cmp	r3, #64	; 0x40
 8003400:	bf0c      	ite	eq
 8003402:	2301      	moveq	r3, #1
 8003404:	2300      	movne	r3, #0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <HAL_UART_IRQHandler+0x144>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d031      	beq.n	8003480 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f86f 	bl	8003500 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342c:	2b40      	cmp	r3, #64	; 0x40
 800342e:	d123      	bne.n	8003478 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800343e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344c:	4a21      	ldr	r2, [pc, #132]	; (80034d4 <HAL_UART_IRQHandler+0x1fc>)
 800344e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe f8c4 	bl	80015e2 <HAL_DMA_Abort_IT>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d016      	beq.n	800348e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800346a:	4610      	mov	r0, r2
 800346c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346e:	e00e      	b.n	800348e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f83b 	bl	80034ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003476:	e00a      	b.n	800348e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f837 	bl	80034ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347e:	e006      	b.n	800348e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f833 	bl	80034ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800348c:	e01e      	b.n	80034cc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348e:	bf00      	nop
    return;
 8003490:	e01c      	b.n	80034cc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_UART_IRQHandler+0x1d6>
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f85c 	bl	8003564 <UART_Transmit_IT>
    return;
 80034ac:	e00f      	b.n	80034ce <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <HAL_UART_IRQHandler+0x1f6>
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f8a4 	bl	8003610 <UART_EndTransmit_IT>
    return;
 80034c8:	bf00      	nop
 80034ca:	e000      	b.n	80034ce <HAL_UART_IRQHandler+0x1f6>
    return;
 80034cc:	bf00      	nop
  }
}
 80034ce:	3720      	adds	r7, #32
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	0800353d 	.word	0x0800353d

080034d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003516:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff ffc8 	bl	80034ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b21      	cmp	r3, #33	; 0x21
 8003576:	d144      	bne.n	8003602 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003580:	d11a      	bne.n	80035b8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003596:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d105      	bne.n	80035ac <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	1c9a      	adds	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	621a      	str	r2, [r3, #32]
 80035aa:	e00e      	b.n	80035ca <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	621a      	str	r2, [r3, #32]
 80035b6:	e008      	b.n	80035ca <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	1c59      	adds	r1, r3, #1
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6211      	str	r1, [r2, #32]
 80035c2:	781a      	ldrb	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	4619      	mov	r1, r3
 80035d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10f      	bne.n	80035fe <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	e000      	b.n	8003604 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003602:	2302      	movs	r3, #2
  }
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003626:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ff51 	bl	80034d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b22      	cmp	r3, #34	; 0x22
 8003652:	d171      	bne.n	8003738 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365c:	d123      	bne.n	80036a6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10e      	bne.n	800368a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	b29b      	uxth	r3, r3
 8003674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	1c9a      	adds	r2, r3, #2
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	629a      	str	r2, [r3, #40]	; 0x28
 8003688:	e029      	b.n	80036de <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	b29b      	uxth	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28
 80036a4:	e01b      	b.n	80036de <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10a      	bne.n	80036c4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6858      	ldr	r0, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	1c59      	adds	r1, r3, #1
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6291      	str	r1, [r2, #40]	; 0x28
 80036be:	b2c2      	uxtb	r2, r0
 80036c0:	701a      	strb	r2, [r3, #0]
 80036c2:	e00c      	b.n	80036de <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	1c58      	adds	r0, r3, #1
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	6288      	str	r0, [r1, #40]	; 0x28
 80036d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4619      	mov	r1, r3
 80036ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d120      	bne.n	8003734 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0220 	bic.w	r2, r2, #32
 8003700:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003710:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fd f8ee 	bl	800090c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	e002      	b.n	800373a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	e000      	b.n	800373a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
  }
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003748:	b085      	sub	sp, #20
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003786:	f023 030c 	bic.w	r3, r3, #12
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	68f9      	ldr	r1, [r7, #12]
 8003790:	430b      	orrs	r3, r1
 8003792:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b2:	f040 818b 	bne.w	8003acc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4ac1      	ldr	r2, [pc, #772]	; (8003ac0 <UART_SetConfig+0x37c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d005      	beq.n	80037cc <UART_SetConfig+0x88>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4abf      	ldr	r2, [pc, #764]	; (8003ac4 <UART_SetConfig+0x380>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	f040 80bd 	bne.w	8003946 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037cc:	f7fe fd78 	bl	80022c0 <HAL_RCC_GetPCLK2Freq>
 80037d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	461d      	mov	r5, r3
 80037d6:	f04f 0600 	mov.w	r6, #0
 80037da:	46a8      	mov	r8, r5
 80037dc:	46b1      	mov	r9, r6
 80037de:	eb18 0308 	adds.w	r3, r8, r8
 80037e2:	eb49 0409 	adc.w	r4, r9, r9
 80037e6:	4698      	mov	r8, r3
 80037e8:	46a1      	mov	r9, r4
 80037ea:	eb18 0805 	adds.w	r8, r8, r5
 80037ee:	eb49 0906 	adc.w	r9, r9, r6
 80037f2:	f04f 0100 	mov.w	r1, #0
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003802:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003806:	4688      	mov	r8, r1
 8003808:	4691      	mov	r9, r2
 800380a:	eb18 0005 	adds.w	r0, r8, r5
 800380e:	eb49 0106 	adc.w	r1, r9, r6
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	461d      	mov	r5, r3
 8003818:	f04f 0600 	mov.w	r6, #0
 800381c:	196b      	adds	r3, r5, r5
 800381e:	eb46 0406 	adc.w	r4, r6, r6
 8003822:	461a      	mov	r2, r3
 8003824:	4623      	mov	r3, r4
 8003826:	f7fc fd2b 	bl	8000280 <__aeabi_uldivmod>
 800382a:	4603      	mov	r3, r0
 800382c:	460c      	mov	r4, r1
 800382e:	461a      	mov	r2, r3
 8003830:	4ba5      	ldr	r3, [pc, #660]	; (8003ac8 <UART_SetConfig+0x384>)
 8003832:	fba3 2302 	umull	r2, r3, r3, r2
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	461d      	mov	r5, r3
 8003840:	f04f 0600 	mov.w	r6, #0
 8003844:	46a9      	mov	r9, r5
 8003846:	46b2      	mov	sl, r6
 8003848:	eb19 0309 	adds.w	r3, r9, r9
 800384c:	eb4a 040a 	adc.w	r4, sl, sl
 8003850:	4699      	mov	r9, r3
 8003852:	46a2      	mov	sl, r4
 8003854:	eb19 0905 	adds.w	r9, r9, r5
 8003858:	eb4a 0a06 	adc.w	sl, sl, r6
 800385c:	f04f 0100 	mov.w	r1, #0
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003868:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800386c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003870:	4689      	mov	r9, r1
 8003872:	4692      	mov	sl, r2
 8003874:	eb19 0005 	adds.w	r0, r9, r5
 8003878:	eb4a 0106 	adc.w	r1, sl, r6
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	461d      	mov	r5, r3
 8003882:	f04f 0600 	mov.w	r6, #0
 8003886:	196b      	adds	r3, r5, r5
 8003888:	eb46 0406 	adc.w	r4, r6, r6
 800388c:	461a      	mov	r2, r3
 800388e:	4623      	mov	r3, r4
 8003890:	f7fc fcf6 	bl	8000280 <__aeabi_uldivmod>
 8003894:	4603      	mov	r3, r0
 8003896:	460c      	mov	r4, r1
 8003898:	461a      	mov	r2, r3
 800389a:	4b8b      	ldr	r3, [pc, #556]	; (8003ac8 <UART_SetConfig+0x384>)
 800389c:	fba3 1302 	umull	r1, r3, r3, r2
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	2164      	movs	r1, #100	; 0x64
 80038a4:	fb01 f303 	mul.w	r3, r1, r3
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	3332      	adds	r3, #50	; 0x32
 80038ae:	4a86      	ldr	r2, [pc, #536]	; (8003ac8 <UART_SetConfig+0x384>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038bc:	4498      	add	r8, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	461d      	mov	r5, r3
 80038c2:	f04f 0600 	mov.w	r6, #0
 80038c6:	46a9      	mov	r9, r5
 80038c8:	46b2      	mov	sl, r6
 80038ca:	eb19 0309 	adds.w	r3, r9, r9
 80038ce:	eb4a 040a 	adc.w	r4, sl, sl
 80038d2:	4699      	mov	r9, r3
 80038d4:	46a2      	mov	sl, r4
 80038d6:	eb19 0905 	adds.w	r9, r9, r5
 80038da:	eb4a 0a06 	adc.w	sl, sl, r6
 80038de:	f04f 0100 	mov.w	r1, #0
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038f2:	4689      	mov	r9, r1
 80038f4:	4692      	mov	sl, r2
 80038f6:	eb19 0005 	adds.w	r0, r9, r5
 80038fa:	eb4a 0106 	adc.w	r1, sl, r6
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	461d      	mov	r5, r3
 8003904:	f04f 0600 	mov.w	r6, #0
 8003908:	196b      	adds	r3, r5, r5
 800390a:	eb46 0406 	adc.w	r4, r6, r6
 800390e:	461a      	mov	r2, r3
 8003910:	4623      	mov	r3, r4
 8003912:	f7fc fcb5 	bl	8000280 <__aeabi_uldivmod>
 8003916:	4603      	mov	r3, r0
 8003918:	460c      	mov	r4, r1
 800391a:	461a      	mov	r2, r3
 800391c:	4b6a      	ldr	r3, [pc, #424]	; (8003ac8 <UART_SetConfig+0x384>)
 800391e:	fba3 1302 	umull	r1, r3, r3, r2
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	2164      	movs	r1, #100	; 0x64
 8003926:	fb01 f303 	mul.w	r3, r1, r3
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	3332      	adds	r3, #50	; 0x32
 8003930:	4a65      	ldr	r2, [pc, #404]	; (8003ac8 <UART_SetConfig+0x384>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	f003 0207 	and.w	r2, r3, #7
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4442      	add	r2, r8
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	e26f      	b.n	8003e26 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003946:	f7fe fca7 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 800394a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	461d      	mov	r5, r3
 8003950:	f04f 0600 	mov.w	r6, #0
 8003954:	46a8      	mov	r8, r5
 8003956:	46b1      	mov	r9, r6
 8003958:	eb18 0308 	adds.w	r3, r8, r8
 800395c:	eb49 0409 	adc.w	r4, r9, r9
 8003960:	4698      	mov	r8, r3
 8003962:	46a1      	mov	r9, r4
 8003964:	eb18 0805 	adds.w	r8, r8, r5
 8003968:	eb49 0906 	adc.w	r9, r9, r6
 800396c:	f04f 0100 	mov.w	r1, #0
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003978:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800397c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003980:	4688      	mov	r8, r1
 8003982:	4691      	mov	r9, r2
 8003984:	eb18 0005 	adds.w	r0, r8, r5
 8003988:	eb49 0106 	adc.w	r1, r9, r6
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	461d      	mov	r5, r3
 8003992:	f04f 0600 	mov.w	r6, #0
 8003996:	196b      	adds	r3, r5, r5
 8003998:	eb46 0406 	adc.w	r4, r6, r6
 800399c:	461a      	mov	r2, r3
 800399e:	4623      	mov	r3, r4
 80039a0:	f7fc fc6e 	bl	8000280 <__aeabi_uldivmod>
 80039a4:	4603      	mov	r3, r0
 80039a6:	460c      	mov	r4, r1
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b47      	ldr	r3, [pc, #284]	; (8003ac8 <UART_SetConfig+0x384>)
 80039ac:	fba3 2302 	umull	r2, r3, r3, r2
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	461d      	mov	r5, r3
 80039ba:	f04f 0600 	mov.w	r6, #0
 80039be:	46a9      	mov	r9, r5
 80039c0:	46b2      	mov	sl, r6
 80039c2:	eb19 0309 	adds.w	r3, r9, r9
 80039c6:	eb4a 040a 	adc.w	r4, sl, sl
 80039ca:	4699      	mov	r9, r3
 80039cc:	46a2      	mov	sl, r4
 80039ce:	eb19 0905 	adds.w	r9, r9, r5
 80039d2:	eb4a 0a06 	adc.w	sl, sl, r6
 80039d6:	f04f 0100 	mov.w	r1, #0
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039ea:	4689      	mov	r9, r1
 80039ec:	4692      	mov	sl, r2
 80039ee:	eb19 0005 	adds.w	r0, r9, r5
 80039f2:	eb4a 0106 	adc.w	r1, sl, r6
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	461d      	mov	r5, r3
 80039fc:	f04f 0600 	mov.w	r6, #0
 8003a00:	196b      	adds	r3, r5, r5
 8003a02:	eb46 0406 	adc.w	r4, r6, r6
 8003a06:	461a      	mov	r2, r3
 8003a08:	4623      	mov	r3, r4
 8003a0a:	f7fc fc39 	bl	8000280 <__aeabi_uldivmod>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	460c      	mov	r4, r1
 8003a12:	461a      	mov	r2, r3
 8003a14:	4b2c      	ldr	r3, [pc, #176]	; (8003ac8 <UART_SetConfig+0x384>)
 8003a16:	fba3 1302 	umull	r1, r3, r3, r2
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	2164      	movs	r1, #100	; 0x64
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	3332      	adds	r3, #50	; 0x32
 8003a28:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <UART_SetConfig+0x384>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a36:	4498      	add	r8, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	461d      	mov	r5, r3
 8003a3c:	f04f 0600 	mov.w	r6, #0
 8003a40:	46a9      	mov	r9, r5
 8003a42:	46b2      	mov	sl, r6
 8003a44:	eb19 0309 	adds.w	r3, r9, r9
 8003a48:	eb4a 040a 	adc.w	r4, sl, sl
 8003a4c:	4699      	mov	r9, r3
 8003a4e:	46a2      	mov	sl, r4
 8003a50:	eb19 0905 	adds.w	r9, r9, r5
 8003a54:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a58:	f04f 0100 	mov.w	r1, #0
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a6c:	4689      	mov	r9, r1
 8003a6e:	4692      	mov	sl, r2
 8003a70:	eb19 0005 	adds.w	r0, r9, r5
 8003a74:	eb4a 0106 	adc.w	r1, sl, r6
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	461d      	mov	r5, r3
 8003a7e:	f04f 0600 	mov.w	r6, #0
 8003a82:	196b      	adds	r3, r5, r5
 8003a84:	eb46 0406 	adc.w	r4, r6, r6
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	f7fc fbf8 	bl	8000280 <__aeabi_uldivmod>
 8003a90:	4603      	mov	r3, r0
 8003a92:	460c      	mov	r4, r1
 8003a94:	461a      	mov	r2, r3
 8003a96:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <UART_SetConfig+0x384>)
 8003a98:	fba3 1302 	umull	r1, r3, r3, r2
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	2164      	movs	r1, #100	; 0x64
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	3332      	adds	r3, #50	; 0x32
 8003aaa:	4a07      	ldr	r2, [pc, #28]	; (8003ac8 <UART_SetConfig+0x384>)
 8003aac:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	f003 0207 	and.w	r2, r3, #7
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4442      	add	r2, r8
 8003abc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003abe:	e1b2      	b.n	8003e26 <UART_SetConfig+0x6e2>
 8003ac0:	40011000 	.word	0x40011000
 8003ac4:	40011400 	.word	0x40011400
 8003ac8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4ad7      	ldr	r2, [pc, #860]	; (8003e30 <UART_SetConfig+0x6ec>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d005      	beq.n	8003ae2 <UART_SetConfig+0x39e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4ad6      	ldr	r2, [pc, #856]	; (8003e34 <UART_SetConfig+0x6f0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	f040 80d1 	bne.w	8003c84 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ae2:	f7fe fbed 	bl	80022c0 <HAL_RCC_GetPCLK2Freq>
 8003ae6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	469a      	mov	sl, r3
 8003aec:	f04f 0b00 	mov.w	fp, #0
 8003af0:	46d0      	mov	r8, sl
 8003af2:	46d9      	mov	r9, fp
 8003af4:	eb18 0308 	adds.w	r3, r8, r8
 8003af8:	eb49 0409 	adc.w	r4, r9, r9
 8003afc:	4698      	mov	r8, r3
 8003afe:	46a1      	mov	r9, r4
 8003b00:	eb18 080a 	adds.w	r8, r8, sl
 8003b04:	eb49 090b 	adc.w	r9, r9, fp
 8003b08:	f04f 0100 	mov.w	r1, #0
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b1c:	4688      	mov	r8, r1
 8003b1e:	4691      	mov	r9, r2
 8003b20:	eb1a 0508 	adds.w	r5, sl, r8
 8003b24:	eb4b 0609 	adc.w	r6, fp, r9
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	f04f 0400 	mov.w	r4, #0
 8003b3a:	0094      	lsls	r4, r2, #2
 8003b3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b40:	008b      	lsls	r3, r1, #2
 8003b42:	461a      	mov	r2, r3
 8003b44:	4623      	mov	r3, r4
 8003b46:	4628      	mov	r0, r5
 8003b48:	4631      	mov	r1, r6
 8003b4a:	f7fc fb99 	bl	8000280 <__aeabi_uldivmod>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	460c      	mov	r4, r1
 8003b52:	461a      	mov	r2, r3
 8003b54:	4bb8      	ldr	r3, [pc, #736]	; (8003e38 <UART_SetConfig+0x6f4>)
 8003b56:	fba3 2302 	umull	r2, r3, r3, r2
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	469b      	mov	fp, r3
 8003b64:	f04f 0c00 	mov.w	ip, #0
 8003b68:	46d9      	mov	r9, fp
 8003b6a:	46e2      	mov	sl, ip
 8003b6c:	eb19 0309 	adds.w	r3, r9, r9
 8003b70:	eb4a 040a 	adc.w	r4, sl, sl
 8003b74:	4699      	mov	r9, r3
 8003b76:	46a2      	mov	sl, r4
 8003b78:	eb19 090b 	adds.w	r9, r9, fp
 8003b7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b94:	4689      	mov	r9, r1
 8003b96:	4692      	mov	sl, r2
 8003b98:	eb1b 0509 	adds.w	r5, fp, r9
 8003b9c:	eb4c 060a 	adc.w	r6, ip, sl
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	f04f 0400 	mov.w	r4, #0
 8003bb2:	0094      	lsls	r4, r2, #2
 8003bb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bb8:	008b      	lsls	r3, r1, #2
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4623      	mov	r3, r4
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	4631      	mov	r1, r6
 8003bc2:	f7fc fb5d 	bl	8000280 <__aeabi_uldivmod>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	460c      	mov	r4, r1
 8003bca:	461a      	mov	r2, r3
 8003bcc:	4b9a      	ldr	r3, [pc, #616]	; (8003e38 <UART_SetConfig+0x6f4>)
 8003bce:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	2164      	movs	r1, #100	; 0x64
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	3332      	adds	r3, #50	; 0x32
 8003be0:	4a95      	ldr	r2, [pc, #596]	; (8003e38 <UART_SetConfig+0x6f4>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bec:	4498      	add	r8, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	469b      	mov	fp, r3
 8003bf2:	f04f 0c00 	mov.w	ip, #0
 8003bf6:	46d9      	mov	r9, fp
 8003bf8:	46e2      	mov	sl, ip
 8003bfa:	eb19 0309 	adds.w	r3, r9, r9
 8003bfe:	eb4a 040a 	adc.w	r4, sl, sl
 8003c02:	4699      	mov	r9, r3
 8003c04:	46a2      	mov	sl, r4
 8003c06:	eb19 090b 	adds.w	r9, r9, fp
 8003c0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c0e:	f04f 0100 	mov.w	r1, #0
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c22:	4689      	mov	r9, r1
 8003c24:	4692      	mov	sl, r2
 8003c26:	eb1b 0509 	adds.w	r5, fp, r9
 8003c2a:	eb4c 060a 	adc.w	r6, ip, sl
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4619      	mov	r1, r3
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	f04f 0400 	mov.w	r4, #0
 8003c40:	0094      	lsls	r4, r2, #2
 8003c42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c46:	008b      	lsls	r3, r1, #2
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	4631      	mov	r1, r6
 8003c50:	f7fc fb16 	bl	8000280 <__aeabi_uldivmod>
 8003c54:	4603      	mov	r3, r0
 8003c56:	460c      	mov	r4, r1
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4b77      	ldr	r3, [pc, #476]	; (8003e38 <UART_SetConfig+0x6f4>)
 8003c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	2164      	movs	r1, #100	; 0x64
 8003c64:	fb01 f303 	mul.w	r3, r1, r3
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	3332      	adds	r3, #50	; 0x32
 8003c6e:	4a72      	ldr	r2, [pc, #456]	; (8003e38 <UART_SetConfig+0x6f4>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	f003 020f 	and.w	r2, r3, #15
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4442      	add	r2, r8
 8003c80:	609a      	str	r2, [r3, #8]
 8003c82:	e0d0      	b.n	8003e26 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c84:	f7fe fb08 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 8003c88:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	469a      	mov	sl, r3
 8003c8e:	f04f 0b00 	mov.w	fp, #0
 8003c92:	46d0      	mov	r8, sl
 8003c94:	46d9      	mov	r9, fp
 8003c96:	eb18 0308 	adds.w	r3, r8, r8
 8003c9a:	eb49 0409 	adc.w	r4, r9, r9
 8003c9e:	4698      	mov	r8, r3
 8003ca0:	46a1      	mov	r9, r4
 8003ca2:	eb18 080a 	adds.w	r8, r8, sl
 8003ca6:	eb49 090b 	adc.w	r9, r9, fp
 8003caa:	f04f 0100 	mov.w	r1, #0
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cb6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cbe:	4688      	mov	r8, r1
 8003cc0:	4691      	mov	r9, r2
 8003cc2:	eb1a 0508 	adds.w	r5, sl, r8
 8003cc6:	eb4b 0609 	adc.w	r6, fp, r9
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	f04f 0400 	mov.w	r4, #0
 8003cdc:	0094      	lsls	r4, r2, #2
 8003cde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ce2:	008b      	lsls	r3, r1, #2
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4623      	mov	r3, r4
 8003ce8:	4628      	mov	r0, r5
 8003cea:	4631      	mov	r1, r6
 8003cec:	f7fc fac8 	bl	8000280 <__aeabi_uldivmod>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4b50      	ldr	r3, [pc, #320]	; (8003e38 <UART_SetConfig+0x6f4>)
 8003cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	469b      	mov	fp, r3
 8003d06:	f04f 0c00 	mov.w	ip, #0
 8003d0a:	46d9      	mov	r9, fp
 8003d0c:	46e2      	mov	sl, ip
 8003d0e:	eb19 0309 	adds.w	r3, r9, r9
 8003d12:	eb4a 040a 	adc.w	r4, sl, sl
 8003d16:	4699      	mov	r9, r3
 8003d18:	46a2      	mov	sl, r4
 8003d1a:	eb19 090b 	adds.w	r9, r9, fp
 8003d1e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d22:	f04f 0100 	mov.w	r1, #0
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d36:	4689      	mov	r9, r1
 8003d38:	4692      	mov	sl, r2
 8003d3a:	eb1b 0509 	adds.w	r5, fp, r9
 8003d3e:	eb4c 060a 	adc.w	r6, ip, sl
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4619      	mov	r1, r3
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	f04f 0400 	mov.w	r4, #0
 8003d54:	0094      	lsls	r4, r2, #2
 8003d56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d5a:	008b      	lsls	r3, r1, #2
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4623      	mov	r3, r4
 8003d60:	4628      	mov	r0, r5
 8003d62:	4631      	mov	r1, r6
 8003d64:	f7fc fa8c 	bl	8000280 <__aeabi_uldivmod>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4b32      	ldr	r3, [pc, #200]	; (8003e38 <UART_SetConfig+0x6f4>)
 8003d70:	fba3 1302 	umull	r1, r3, r3, r2
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	2164      	movs	r1, #100	; 0x64
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	3332      	adds	r3, #50	; 0x32
 8003d82:	4a2d      	ldr	r2, [pc, #180]	; (8003e38 <UART_SetConfig+0x6f4>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	095b      	lsrs	r3, r3, #5
 8003d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d8e:	4498      	add	r8, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	469b      	mov	fp, r3
 8003d94:	f04f 0c00 	mov.w	ip, #0
 8003d98:	46d9      	mov	r9, fp
 8003d9a:	46e2      	mov	sl, ip
 8003d9c:	eb19 0309 	adds.w	r3, r9, r9
 8003da0:	eb4a 040a 	adc.w	r4, sl, sl
 8003da4:	4699      	mov	r9, r3
 8003da6:	46a2      	mov	sl, r4
 8003da8:	eb19 090b 	adds.w	r9, r9, fp
 8003dac:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003db0:	f04f 0100 	mov.w	r1, #0
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dc4:	4689      	mov	r9, r1
 8003dc6:	4692      	mov	sl, r2
 8003dc8:	eb1b 0509 	adds.w	r5, fp, r9
 8003dcc:	eb4c 060a 	adc.w	r6, ip, sl
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	f04f 0400 	mov.w	r4, #0
 8003de2:	0094      	lsls	r4, r2, #2
 8003de4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003de8:	008b      	lsls	r3, r1, #2
 8003dea:	461a      	mov	r2, r3
 8003dec:	4623      	mov	r3, r4
 8003dee:	4628      	mov	r0, r5
 8003df0:	4631      	mov	r1, r6
 8003df2:	f7fc fa45 	bl	8000280 <__aeabi_uldivmod>
 8003df6:	4603      	mov	r3, r0
 8003df8:	460c      	mov	r4, r1
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <UART_SetConfig+0x6f4>)
 8003dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	2164      	movs	r1, #100	; 0x64
 8003e06:	fb01 f303 	mul.w	r3, r1, r3
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	3332      	adds	r3, #50	; 0x32
 8003e10:	4a09      	ldr	r2, [pc, #36]	; (8003e38 <UART_SetConfig+0x6f4>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	f003 020f 	and.w	r2, r3, #15
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4442      	add	r2, r8
 8003e22:	609a      	str	r2, [r3, #8]
}
 8003e24:	e7ff      	b.n	8003e26 <UART_SetConfig+0x6e2>
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e30:	40011000 	.word	0x40011000
 8003e34:	40011400 	.word	0x40011400
 8003e38:	51eb851f 	.word	0x51eb851f

08003e3c <atoi>:
 8003e3c:	220a      	movs	r2, #10
 8003e3e:	2100      	movs	r1, #0
 8003e40:	f000 b952 	b.w	80040e8 <strtol>

08003e44 <__errno>:
 8003e44:	4b01      	ldr	r3, [pc, #4]	; (8003e4c <__errno+0x8>)
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	2000003c 	.word	0x2000003c

08003e50 <__libc_init_array>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	4e0d      	ldr	r6, [pc, #52]	; (8003e88 <__libc_init_array+0x38>)
 8003e54:	4c0d      	ldr	r4, [pc, #52]	; (8003e8c <__libc_init_array+0x3c>)
 8003e56:	1ba4      	subs	r4, r4, r6
 8003e58:	10a4      	asrs	r4, r4, #2
 8003e5a:	2500      	movs	r5, #0
 8003e5c:	42a5      	cmp	r5, r4
 8003e5e:	d109      	bne.n	8003e74 <__libc_init_array+0x24>
 8003e60:	4e0b      	ldr	r6, [pc, #44]	; (8003e90 <__libc_init_array+0x40>)
 8003e62:	4c0c      	ldr	r4, [pc, #48]	; (8003e94 <__libc_init_array+0x44>)
 8003e64:	f001 f87a 	bl	8004f5c <_init>
 8003e68:	1ba4      	subs	r4, r4, r6
 8003e6a:	10a4      	asrs	r4, r4, #2
 8003e6c:	2500      	movs	r5, #0
 8003e6e:	42a5      	cmp	r5, r4
 8003e70:	d105      	bne.n	8003e7e <__libc_init_array+0x2e>
 8003e72:	bd70      	pop	{r4, r5, r6, pc}
 8003e74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e78:	4798      	blx	r3
 8003e7a:	3501      	adds	r5, #1
 8003e7c:	e7ee      	b.n	8003e5c <__libc_init_array+0xc>
 8003e7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e82:	4798      	blx	r3
 8003e84:	3501      	adds	r5, #1
 8003e86:	e7f2      	b.n	8003e6e <__libc_init_array+0x1e>
 8003e88:	080051a4 	.word	0x080051a4
 8003e8c:	080051a4 	.word	0x080051a4
 8003e90:	080051a4 	.word	0x080051a4
 8003e94:	080051a8 	.word	0x080051a8

08003e98 <memset>:
 8003e98:	4402      	add	r2, r0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d100      	bne.n	8003ea2 <memset+0xa>
 8003ea0:	4770      	bx	lr
 8003ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea6:	e7f9      	b.n	8003e9c <memset+0x4>

08003ea8 <iprintf>:
 8003ea8:	b40f      	push	{r0, r1, r2, r3}
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <iprintf+0x2c>)
 8003eac:	b513      	push	{r0, r1, r4, lr}
 8003eae:	681c      	ldr	r4, [r3, #0]
 8003eb0:	b124      	cbz	r4, 8003ebc <iprintf+0x14>
 8003eb2:	69a3      	ldr	r3, [r4, #24]
 8003eb4:	b913      	cbnz	r3, 8003ebc <iprintf+0x14>
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f000 fadc 	bl	8004474 <__sinit>
 8003ebc:	ab05      	add	r3, sp, #20
 8003ebe:	9a04      	ldr	r2, [sp, #16]
 8003ec0:	68a1      	ldr	r1, [r4, #8]
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f000 fcab 	bl	8004820 <_vfiprintf_r>
 8003eca:	b002      	add	sp, #8
 8003ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ed0:	b004      	add	sp, #16
 8003ed2:	4770      	bx	lr
 8003ed4:	2000003c 	.word	0x2000003c

08003ed8 <putchar>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	4b08      	ldr	r3, [pc, #32]	; (8003efc <putchar+0x24>)
 8003edc:	681c      	ldr	r4, [r3, #0]
 8003ede:	4605      	mov	r5, r0
 8003ee0:	b124      	cbz	r4, 8003eec <putchar+0x14>
 8003ee2:	69a3      	ldr	r3, [r4, #24]
 8003ee4:	b913      	cbnz	r3, 8003eec <putchar+0x14>
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	f000 fac4 	bl	8004474 <__sinit>
 8003eec:	68a2      	ldr	r2, [r4, #8]
 8003eee:	4629      	mov	r1, r5
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ef6:	f000 bf31 	b.w	8004d5c <_putc_r>
 8003efa:	bf00      	nop
 8003efc:	2000003c 	.word	0x2000003c

08003f00 <_puts_r>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	460e      	mov	r6, r1
 8003f04:	4605      	mov	r5, r0
 8003f06:	b118      	cbz	r0, 8003f10 <_puts_r+0x10>
 8003f08:	6983      	ldr	r3, [r0, #24]
 8003f0a:	b90b      	cbnz	r3, 8003f10 <_puts_r+0x10>
 8003f0c:	f000 fab2 	bl	8004474 <__sinit>
 8003f10:	69ab      	ldr	r3, [r5, #24]
 8003f12:	68ac      	ldr	r4, [r5, #8]
 8003f14:	b913      	cbnz	r3, 8003f1c <_puts_r+0x1c>
 8003f16:	4628      	mov	r0, r5
 8003f18:	f000 faac 	bl	8004474 <__sinit>
 8003f1c:	4b23      	ldr	r3, [pc, #140]	; (8003fac <_puts_r+0xac>)
 8003f1e:	429c      	cmp	r4, r3
 8003f20:	d117      	bne.n	8003f52 <_puts_r+0x52>
 8003f22:	686c      	ldr	r4, [r5, #4]
 8003f24:	89a3      	ldrh	r3, [r4, #12]
 8003f26:	071b      	lsls	r3, r3, #28
 8003f28:	d51d      	bpl.n	8003f66 <_puts_r+0x66>
 8003f2a:	6923      	ldr	r3, [r4, #16]
 8003f2c:	b1db      	cbz	r3, 8003f66 <_puts_r+0x66>
 8003f2e:	3e01      	subs	r6, #1
 8003f30:	68a3      	ldr	r3, [r4, #8]
 8003f32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f36:	3b01      	subs	r3, #1
 8003f38:	60a3      	str	r3, [r4, #8]
 8003f3a:	b9e9      	cbnz	r1, 8003f78 <_puts_r+0x78>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	da2e      	bge.n	8003f9e <_puts_r+0x9e>
 8003f40:	4622      	mov	r2, r4
 8003f42:	210a      	movs	r1, #10
 8003f44:	4628      	mov	r0, r5
 8003f46:	f000 f8e5 	bl	8004114 <__swbuf_r>
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d011      	beq.n	8003f72 <_puts_r+0x72>
 8003f4e:	200a      	movs	r0, #10
 8003f50:	e011      	b.n	8003f76 <_puts_r+0x76>
 8003f52:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <_puts_r+0xb0>)
 8003f54:	429c      	cmp	r4, r3
 8003f56:	d101      	bne.n	8003f5c <_puts_r+0x5c>
 8003f58:	68ac      	ldr	r4, [r5, #8]
 8003f5a:	e7e3      	b.n	8003f24 <_puts_r+0x24>
 8003f5c:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <_puts_r+0xb4>)
 8003f5e:	429c      	cmp	r4, r3
 8003f60:	bf08      	it	eq
 8003f62:	68ec      	ldreq	r4, [r5, #12]
 8003f64:	e7de      	b.n	8003f24 <_puts_r+0x24>
 8003f66:	4621      	mov	r1, r4
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f000 f925 	bl	80041b8 <__swsetup_r>
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d0dd      	beq.n	8003f2e <_puts_r+0x2e>
 8003f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	da04      	bge.n	8003f86 <_puts_r+0x86>
 8003f7c:	69a2      	ldr	r2, [r4, #24]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	dc06      	bgt.n	8003f90 <_puts_r+0x90>
 8003f82:	290a      	cmp	r1, #10
 8003f84:	d004      	beq.n	8003f90 <_puts_r+0x90>
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	6022      	str	r2, [r4, #0]
 8003f8c:	7019      	strb	r1, [r3, #0]
 8003f8e:	e7cf      	b.n	8003f30 <_puts_r+0x30>
 8003f90:	4622      	mov	r2, r4
 8003f92:	4628      	mov	r0, r5
 8003f94:	f000 f8be 	bl	8004114 <__swbuf_r>
 8003f98:	3001      	adds	r0, #1
 8003f9a:	d1c9      	bne.n	8003f30 <_puts_r+0x30>
 8003f9c:	e7e9      	b.n	8003f72 <_puts_r+0x72>
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	200a      	movs	r0, #10
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	6022      	str	r2, [r4, #0]
 8003fa6:	7018      	strb	r0, [r3, #0]
 8003fa8:	e7e5      	b.n	8003f76 <_puts_r+0x76>
 8003faa:	bf00      	nop
 8003fac:	0800501c 	.word	0x0800501c
 8003fb0:	0800503c 	.word	0x0800503c
 8003fb4:	08004ffc 	.word	0x08004ffc

08003fb8 <puts>:
 8003fb8:	4b02      	ldr	r3, [pc, #8]	; (8003fc4 <puts+0xc>)
 8003fba:	4601      	mov	r1, r0
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	f7ff bf9f 	b.w	8003f00 <_puts_r>
 8003fc2:	bf00      	nop
 8003fc4:	2000003c 	.word	0x2000003c

08003fc8 <strncat>:
 8003fc8:	b530      	push	{r4, r5, lr}
 8003fca:	4603      	mov	r3, r0
 8003fcc:	781c      	ldrb	r4, [r3, #0]
 8003fce:	1c5d      	adds	r5, r3, #1
 8003fd0:	b944      	cbnz	r4, 8003fe4 <strncat+0x1c>
 8003fd2:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8003fd6:	d304      	bcc.n	8003fe2 <strncat+0x1a>
 8003fd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fdc:	f803 4b01 	strb.w	r4, [r3], #1
 8003fe0:	b914      	cbnz	r4, 8003fe8 <strncat+0x20>
 8003fe2:	bd30      	pop	{r4, r5, pc}
 8003fe4:	462b      	mov	r3, r5
 8003fe6:	e7f1      	b.n	8003fcc <strncat+0x4>
 8003fe8:	2a00      	cmp	r2, #0
 8003fea:	d1f2      	bne.n	8003fd2 <strncat+0xa>
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	e7f0      	b.n	8003fd2 <strncat+0xa>

08003ff0 <_strtol_l.isra.0>:
 8003ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff4:	4680      	mov	r8, r0
 8003ff6:	4689      	mov	r9, r1
 8003ff8:	4692      	mov	sl, r2
 8003ffa:	461e      	mov	r6, r3
 8003ffc:	460f      	mov	r7, r1
 8003ffe:	463d      	mov	r5, r7
 8004000:	9808      	ldr	r0, [sp, #32]
 8004002:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004006:	f000 fabf 	bl	8004588 <__locale_ctype_ptr_l>
 800400a:	4420      	add	r0, r4
 800400c:	7843      	ldrb	r3, [r0, #1]
 800400e:	f013 0308 	ands.w	r3, r3, #8
 8004012:	d132      	bne.n	800407a <_strtol_l.isra.0+0x8a>
 8004014:	2c2d      	cmp	r4, #45	; 0x2d
 8004016:	d132      	bne.n	800407e <_strtol_l.isra.0+0x8e>
 8004018:	787c      	ldrb	r4, [r7, #1]
 800401a:	1cbd      	adds	r5, r7, #2
 800401c:	2201      	movs	r2, #1
 800401e:	2e00      	cmp	r6, #0
 8004020:	d05d      	beq.n	80040de <_strtol_l.isra.0+0xee>
 8004022:	2e10      	cmp	r6, #16
 8004024:	d109      	bne.n	800403a <_strtol_l.isra.0+0x4a>
 8004026:	2c30      	cmp	r4, #48	; 0x30
 8004028:	d107      	bne.n	800403a <_strtol_l.isra.0+0x4a>
 800402a:	782b      	ldrb	r3, [r5, #0]
 800402c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004030:	2b58      	cmp	r3, #88	; 0x58
 8004032:	d14f      	bne.n	80040d4 <_strtol_l.isra.0+0xe4>
 8004034:	786c      	ldrb	r4, [r5, #1]
 8004036:	2610      	movs	r6, #16
 8004038:	3502      	adds	r5, #2
 800403a:	2a00      	cmp	r2, #0
 800403c:	bf14      	ite	ne
 800403e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004042:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004046:	2700      	movs	r7, #0
 8004048:	fbb1 fcf6 	udiv	ip, r1, r6
 800404c:	4638      	mov	r0, r7
 800404e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004052:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004056:	2b09      	cmp	r3, #9
 8004058:	d817      	bhi.n	800408a <_strtol_l.isra.0+0x9a>
 800405a:	461c      	mov	r4, r3
 800405c:	42a6      	cmp	r6, r4
 800405e:	dd23      	ble.n	80040a8 <_strtol_l.isra.0+0xb8>
 8004060:	1c7b      	adds	r3, r7, #1
 8004062:	d007      	beq.n	8004074 <_strtol_l.isra.0+0x84>
 8004064:	4584      	cmp	ip, r0
 8004066:	d31c      	bcc.n	80040a2 <_strtol_l.isra.0+0xb2>
 8004068:	d101      	bne.n	800406e <_strtol_l.isra.0+0x7e>
 800406a:	45a6      	cmp	lr, r4
 800406c:	db19      	blt.n	80040a2 <_strtol_l.isra.0+0xb2>
 800406e:	fb00 4006 	mla	r0, r0, r6, r4
 8004072:	2701      	movs	r7, #1
 8004074:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004078:	e7eb      	b.n	8004052 <_strtol_l.isra.0+0x62>
 800407a:	462f      	mov	r7, r5
 800407c:	e7bf      	b.n	8003ffe <_strtol_l.isra.0+0xe>
 800407e:	2c2b      	cmp	r4, #43	; 0x2b
 8004080:	bf04      	itt	eq
 8004082:	1cbd      	addeq	r5, r7, #2
 8004084:	787c      	ldrbeq	r4, [r7, #1]
 8004086:	461a      	mov	r2, r3
 8004088:	e7c9      	b.n	800401e <_strtol_l.isra.0+0x2e>
 800408a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800408e:	2b19      	cmp	r3, #25
 8004090:	d801      	bhi.n	8004096 <_strtol_l.isra.0+0xa6>
 8004092:	3c37      	subs	r4, #55	; 0x37
 8004094:	e7e2      	b.n	800405c <_strtol_l.isra.0+0x6c>
 8004096:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800409a:	2b19      	cmp	r3, #25
 800409c:	d804      	bhi.n	80040a8 <_strtol_l.isra.0+0xb8>
 800409e:	3c57      	subs	r4, #87	; 0x57
 80040a0:	e7dc      	b.n	800405c <_strtol_l.isra.0+0x6c>
 80040a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80040a6:	e7e5      	b.n	8004074 <_strtol_l.isra.0+0x84>
 80040a8:	1c7b      	adds	r3, r7, #1
 80040aa:	d108      	bne.n	80040be <_strtol_l.isra.0+0xce>
 80040ac:	2322      	movs	r3, #34	; 0x22
 80040ae:	f8c8 3000 	str.w	r3, [r8]
 80040b2:	4608      	mov	r0, r1
 80040b4:	f1ba 0f00 	cmp.w	sl, #0
 80040b8:	d107      	bne.n	80040ca <_strtol_l.isra.0+0xda>
 80040ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040be:	b102      	cbz	r2, 80040c2 <_strtol_l.isra.0+0xd2>
 80040c0:	4240      	negs	r0, r0
 80040c2:	f1ba 0f00 	cmp.w	sl, #0
 80040c6:	d0f8      	beq.n	80040ba <_strtol_l.isra.0+0xca>
 80040c8:	b10f      	cbz	r7, 80040ce <_strtol_l.isra.0+0xde>
 80040ca:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80040ce:	f8ca 9000 	str.w	r9, [sl]
 80040d2:	e7f2      	b.n	80040ba <_strtol_l.isra.0+0xca>
 80040d4:	2430      	movs	r4, #48	; 0x30
 80040d6:	2e00      	cmp	r6, #0
 80040d8:	d1af      	bne.n	800403a <_strtol_l.isra.0+0x4a>
 80040da:	2608      	movs	r6, #8
 80040dc:	e7ad      	b.n	800403a <_strtol_l.isra.0+0x4a>
 80040de:	2c30      	cmp	r4, #48	; 0x30
 80040e0:	d0a3      	beq.n	800402a <_strtol_l.isra.0+0x3a>
 80040e2:	260a      	movs	r6, #10
 80040e4:	e7a9      	b.n	800403a <_strtol_l.isra.0+0x4a>
	...

080040e8 <strtol>:
 80040e8:	4b08      	ldr	r3, [pc, #32]	; (800410c <strtol+0x24>)
 80040ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040ec:	681c      	ldr	r4, [r3, #0]
 80040ee:	4d08      	ldr	r5, [pc, #32]	; (8004110 <strtol+0x28>)
 80040f0:	6a23      	ldr	r3, [r4, #32]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf08      	it	eq
 80040f6:	462b      	moveq	r3, r5
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	4613      	mov	r3, r2
 80040fc:	460a      	mov	r2, r1
 80040fe:	4601      	mov	r1, r0
 8004100:	4620      	mov	r0, r4
 8004102:	f7ff ff75 	bl	8003ff0 <_strtol_l.isra.0>
 8004106:	b003      	add	sp, #12
 8004108:	bd30      	pop	{r4, r5, pc}
 800410a:	bf00      	nop
 800410c:	2000003c 	.word	0x2000003c
 8004110:	200000a0 	.word	0x200000a0

08004114 <__swbuf_r>:
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	460e      	mov	r6, r1
 8004118:	4614      	mov	r4, r2
 800411a:	4605      	mov	r5, r0
 800411c:	b118      	cbz	r0, 8004126 <__swbuf_r+0x12>
 800411e:	6983      	ldr	r3, [r0, #24]
 8004120:	b90b      	cbnz	r3, 8004126 <__swbuf_r+0x12>
 8004122:	f000 f9a7 	bl	8004474 <__sinit>
 8004126:	4b21      	ldr	r3, [pc, #132]	; (80041ac <__swbuf_r+0x98>)
 8004128:	429c      	cmp	r4, r3
 800412a:	d12a      	bne.n	8004182 <__swbuf_r+0x6e>
 800412c:	686c      	ldr	r4, [r5, #4]
 800412e:	69a3      	ldr	r3, [r4, #24]
 8004130:	60a3      	str	r3, [r4, #8]
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	071a      	lsls	r2, r3, #28
 8004136:	d52e      	bpl.n	8004196 <__swbuf_r+0x82>
 8004138:	6923      	ldr	r3, [r4, #16]
 800413a:	b363      	cbz	r3, 8004196 <__swbuf_r+0x82>
 800413c:	6923      	ldr	r3, [r4, #16]
 800413e:	6820      	ldr	r0, [r4, #0]
 8004140:	1ac0      	subs	r0, r0, r3
 8004142:	6963      	ldr	r3, [r4, #20]
 8004144:	b2f6      	uxtb	r6, r6
 8004146:	4283      	cmp	r3, r0
 8004148:	4637      	mov	r7, r6
 800414a:	dc04      	bgt.n	8004156 <__swbuf_r+0x42>
 800414c:	4621      	mov	r1, r4
 800414e:	4628      	mov	r0, r5
 8004150:	f000 f926 	bl	80043a0 <_fflush_r>
 8004154:	bb28      	cbnz	r0, 80041a2 <__swbuf_r+0x8e>
 8004156:	68a3      	ldr	r3, [r4, #8]
 8004158:	3b01      	subs	r3, #1
 800415a:	60a3      	str	r3, [r4, #8]
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	6022      	str	r2, [r4, #0]
 8004162:	701e      	strb	r6, [r3, #0]
 8004164:	6963      	ldr	r3, [r4, #20]
 8004166:	3001      	adds	r0, #1
 8004168:	4283      	cmp	r3, r0
 800416a:	d004      	beq.n	8004176 <__swbuf_r+0x62>
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	07db      	lsls	r3, r3, #31
 8004170:	d519      	bpl.n	80041a6 <__swbuf_r+0x92>
 8004172:	2e0a      	cmp	r6, #10
 8004174:	d117      	bne.n	80041a6 <__swbuf_r+0x92>
 8004176:	4621      	mov	r1, r4
 8004178:	4628      	mov	r0, r5
 800417a:	f000 f911 	bl	80043a0 <_fflush_r>
 800417e:	b190      	cbz	r0, 80041a6 <__swbuf_r+0x92>
 8004180:	e00f      	b.n	80041a2 <__swbuf_r+0x8e>
 8004182:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <__swbuf_r+0x9c>)
 8004184:	429c      	cmp	r4, r3
 8004186:	d101      	bne.n	800418c <__swbuf_r+0x78>
 8004188:	68ac      	ldr	r4, [r5, #8]
 800418a:	e7d0      	b.n	800412e <__swbuf_r+0x1a>
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <__swbuf_r+0xa0>)
 800418e:	429c      	cmp	r4, r3
 8004190:	bf08      	it	eq
 8004192:	68ec      	ldreq	r4, [r5, #12]
 8004194:	e7cb      	b.n	800412e <__swbuf_r+0x1a>
 8004196:	4621      	mov	r1, r4
 8004198:	4628      	mov	r0, r5
 800419a:	f000 f80d 	bl	80041b8 <__swsetup_r>
 800419e:	2800      	cmp	r0, #0
 80041a0:	d0cc      	beq.n	800413c <__swbuf_r+0x28>
 80041a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80041a6:	4638      	mov	r0, r7
 80041a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041aa:	bf00      	nop
 80041ac:	0800501c 	.word	0x0800501c
 80041b0:	0800503c 	.word	0x0800503c
 80041b4:	08004ffc 	.word	0x08004ffc

080041b8 <__swsetup_r>:
 80041b8:	4b32      	ldr	r3, [pc, #200]	; (8004284 <__swsetup_r+0xcc>)
 80041ba:	b570      	push	{r4, r5, r6, lr}
 80041bc:	681d      	ldr	r5, [r3, #0]
 80041be:	4606      	mov	r6, r0
 80041c0:	460c      	mov	r4, r1
 80041c2:	b125      	cbz	r5, 80041ce <__swsetup_r+0x16>
 80041c4:	69ab      	ldr	r3, [r5, #24]
 80041c6:	b913      	cbnz	r3, 80041ce <__swsetup_r+0x16>
 80041c8:	4628      	mov	r0, r5
 80041ca:	f000 f953 	bl	8004474 <__sinit>
 80041ce:	4b2e      	ldr	r3, [pc, #184]	; (8004288 <__swsetup_r+0xd0>)
 80041d0:	429c      	cmp	r4, r3
 80041d2:	d10f      	bne.n	80041f4 <__swsetup_r+0x3c>
 80041d4:	686c      	ldr	r4, [r5, #4]
 80041d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041da:	b29a      	uxth	r2, r3
 80041dc:	0715      	lsls	r5, r2, #28
 80041de:	d42c      	bmi.n	800423a <__swsetup_r+0x82>
 80041e0:	06d0      	lsls	r0, r2, #27
 80041e2:	d411      	bmi.n	8004208 <__swsetup_r+0x50>
 80041e4:	2209      	movs	r2, #9
 80041e6:	6032      	str	r2, [r6, #0]
 80041e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041ec:	81a3      	strh	r3, [r4, #12]
 80041ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041f2:	e03e      	b.n	8004272 <__swsetup_r+0xba>
 80041f4:	4b25      	ldr	r3, [pc, #148]	; (800428c <__swsetup_r+0xd4>)
 80041f6:	429c      	cmp	r4, r3
 80041f8:	d101      	bne.n	80041fe <__swsetup_r+0x46>
 80041fa:	68ac      	ldr	r4, [r5, #8]
 80041fc:	e7eb      	b.n	80041d6 <__swsetup_r+0x1e>
 80041fe:	4b24      	ldr	r3, [pc, #144]	; (8004290 <__swsetup_r+0xd8>)
 8004200:	429c      	cmp	r4, r3
 8004202:	bf08      	it	eq
 8004204:	68ec      	ldreq	r4, [r5, #12]
 8004206:	e7e6      	b.n	80041d6 <__swsetup_r+0x1e>
 8004208:	0751      	lsls	r1, r2, #29
 800420a:	d512      	bpl.n	8004232 <__swsetup_r+0x7a>
 800420c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800420e:	b141      	cbz	r1, 8004222 <__swsetup_r+0x6a>
 8004210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004214:	4299      	cmp	r1, r3
 8004216:	d002      	beq.n	800421e <__swsetup_r+0x66>
 8004218:	4630      	mov	r0, r6
 800421a:	f000 fa2f 	bl	800467c <_free_r>
 800421e:	2300      	movs	r3, #0
 8004220:	6363      	str	r3, [r4, #52]	; 0x34
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004228:	81a3      	strh	r3, [r4, #12]
 800422a:	2300      	movs	r3, #0
 800422c:	6063      	str	r3, [r4, #4]
 800422e:	6923      	ldr	r3, [r4, #16]
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	89a3      	ldrh	r3, [r4, #12]
 8004234:	f043 0308 	orr.w	r3, r3, #8
 8004238:	81a3      	strh	r3, [r4, #12]
 800423a:	6923      	ldr	r3, [r4, #16]
 800423c:	b94b      	cbnz	r3, 8004252 <__swsetup_r+0x9a>
 800423e:	89a3      	ldrh	r3, [r4, #12]
 8004240:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004248:	d003      	beq.n	8004252 <__swsetup_r+0x9a>
 800424a:	4621      	mov	r1, r4
 800424c:	4630      	mov	r0, r6
 800424e:	f000 f9c3 	bl	80045d8 <__smakebuf_r>
 8004252:	89a2      	ldrh	r2, [r4, #12]
 8004254:	f012 0301 	ands.w	r3, r2, #1
 8004258:	d00c      	beq.n	8004274 <__swsetup_r+0xbc>
 800425a:	2300      	movs	r3, #0
 800425c:	60a3      	str	r3, [r4, #8]
 800425e:	6963      	ldr	r3, [r4, #20]
 8004260:	425b      	negs	r3, r3
 8004262:	61a3      	str	r3, [r4, #24]
 8004264:	6923      	ldr	r3, [r4, #16]
 8004266:	b953      	cbnz	r3, 800427e <__swsetup_r+0xc6>
 8004268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800426c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004270:	d1ba      	bne.n	80041e8 <__swsetup_r+0x30>
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	0792      	lsls	r2, r2, #30
 8004276:	bf58      	it	pl
 8004278:	6963      	ldrpl	r3, [r4, #20]
 800427a:	60a3      	str	r3, [r4, #8]
 800427c:	e7f2      	b.n	8004264 <__swsetup_r+0xac>
 800427e:	2000      	movs	r0, #0
 8004280:	e7f7      	b.n	8004272 <__swsetup_r+0xba>
 8004282:	bf00      	nop
 8004284:	2000003c 	.word	0x2000003c
 8004288:	0800501c 	.word	0x0800501c
 800428c:	0800503c 	.word	0x0800503c
 8004290:	08004ffc 	.word	0x08004ffc

08004294 <__sflush_r>:
 8004294:	898a      	ldrh	r2, [r1, #12]
 8004296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800429a:	4605      	mov	r5, r0
 800429c:	0710      	lsls	r0, r2, #28
 800429e:	460c      	mov	r4, r1
 80042a0:	d458      	bmi.n	8004354 <__sflush_r+0xc0>
 80042a2:	684b      	ldr	r3, [r1, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	dc05      	bgt.n	80042b4 <__sflush_r+0x20>
 80042a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	dc02      	bgt.n	80042b4 <__sflush_r+0x20>
 80042ae:	2000      	movs	r0, #0
 80042b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042b6:	2e00      	cmp	r6, #0
 80042b8:	d0f9      	beq.n	80042ae <__sflush_r+0x1a>
 80042ba:	2300      	movs	r3, #0
 80042bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042c0:	682f      	ldr	r7, [r5, #0]
 80042c2:	6a21      	ldr	r1, [r4, #32]
 80042c4:	602b      	str	r3, [r5, #0]
 80042c6:	d032      	beq.n	800432e <__sflush_r+0x9a>
 80042c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042ca:	89a3      	ldrh	r3, [r4, #12]
 80042cc:	075a      	lsls	r2, r3, #29
 80042ce:	d505      	bpl.n	80042dc <__sflush_r+0x48>
 80042d0:	6863      	ldr	r3, [r4, #4]
 80042d2:	1ac0      	subs	r0, r0, r3
 80042d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042d6:	b10b      	cbz	r3, 80042dc <__sflush_r+0x48>
 80042d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042da:	1ac0      	subs	r0, r0, r3
 80042dc:	2300      	movs	r3, #0
 80042de:	4602      	mov	r2, r0
 80042e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042e2:	6a21      	ldr	r1, [r4, #32]
 80042e4:	4628      	mov	r0, r5
 80042e6:	47b0      	blx	r6
 80042e8:	1c43      	adds	r3, r0, #1
 80042ea:	89a3      	ldrh	r3, [r4, #12]
 80042ec:	d106      	bne.n	80042fc <__sflush_r+0x68>
 80042ee:	6829      	ldr	r1, [r5, #0]
 80042f0:	291d      	cmp	r1, #29
 80042f2:	d848      	bhi.n	8004386 <__sflush_r+0xf2>
 80042f4:	4a29      	ldr	r2, [pc, #164]	; (800439c <__sflush_r+0x108>)
 80042f6:	40ca      	lsrs	r2, r1
 80042f8:	07d6      	lsls	r6, r2, #31
 80042fa:	d544      	bpl.n	8004386 <__sflush_r+0xf2>
 80042fc:	2200      	movs	r2, #0
 80042fe:	6062      	str	r2, [r4, #4]
 8004300:	04d9      	lsls	r1, r3, #19
 8004302:	6922      	ldr	r2, [r4, #16]
 8004304:	6022      	str	r2, [r4, #0]
 8004306:	d504      	bpl.n	8004312 <__sflush_r+0x7e>
 8004308:	1c42      	adds	r2, r0, #1
 800430a:	d101      	bne.n	8004310 <__sflush_r+0x7c>
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	b903      	cbnz	r3, 8004312 <__sflush_r+0x7e>
 8004310:	6560      	str	r0, [r4, #84]	; 0x54
 8004312:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004314:	602f      	str	r7, [r5, #0]
 8004316:	2900      	cmp	r1, #0
 8004318:	d0c9      	beq.n	80042ae <__sflush_r+0x1a>
 800431a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800431e:	4299      	cmp	r1, r3
 8004320:	d002      	beq.n	8004328 <__sflush_r+0x94>
 8004322:	4628      	mov	r0, r5
 8004324:	f000 f9aa 	bl	800467c <_free_r>
 8004328:	2000      	movs	r0, #0
 800432a:	6360      	str	r0, [r4, #52]	; 0x34
 800432c:	e7c0      	b.n	80042b0 <__sflush_r+0x1c>
 800432e:	2301      	movs	r3, #1
 8004330:	4628      	mov	r0, r5
 8004332:	47b0      	blx	r6
 8004334:	1c41      	adds	r1, r0, #1
 8004336:	d1c8      	bne.n	80042ca <__sflush_r+0x36>
 8004338:	682b      	ldr	r3, [r5, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0c5      	beq.n	80042ca <__sflush_r+0x36>
 800433e:	2b1d      	cmp	r3, #29
 8004340:	d001      	beq.n	8004346 <__sflush_r+0xb2>
 8004342:	2b16      	cmp	r3, #22
 8004344:	d101      	bne.n	800434a <__sflush_r+0xb6>
 8004346:	602f      	str	r7, [r5, #0]
 8004348:	e7b1      	b.n	80042ae <__sflush_r+0x1a>
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004350:	81a3      	strh	r3, [r4, #12]
 8004352:	e7ad      	b.n	80042b0 <__sflush_r+0x1c>
 8004354:	690f      	ldr	r7, [r1, #16]
 8004356:	2f00      	cmp	r7, #0
 8004358:	d0a9      	beq.n	80042ae <__sflush_r+0x1a>
 800435a:	0793      	lsls	r3, r2, #30
 800435c:	680e      	ldr	r6, [r1, #0]
 800435e:	bf08      	it	eq
 8004360:	694b      	ldreq	r3, [r1, #20]
 8004362:	600f      	str	r7, [r1, #0]
 8004364:	bf18      	it	ne
 8004366:	2300      	movne	r3, #0
 8004368:	eba6 0807 	sub.w	r8, r6, r7
 800436c:	608b      	str	r3, [r1, #8]
 800436e:	f1b8 0f00 	cmp.w	r8, #0
 8004372:	dd9c      	ble.n	80042ae <__sflush_r+0x1a>
 8004374:	4643      	mov	r3, r8
 8004376:	463a      	mov	r2, r7
 8004378:	6a21      	ldr	r1, [r4, #32]
 800437a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800437c:	4628      	mov	r0, r5
 800437e:	47b0      	blx	r6
 8004380:	2800      	cmp	r0, #0
 8004382:	dc06      	bgt.n	8004392 <__sflush_r+0xfe>
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800438a:	81a3      	strh	r3, [r4, #12]
 800438c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004390:	e78e      	b.n	80042b0 <__sflush_r+0x1c>
 8004392:	4407      	add	r7, r0
 8004394:	eba8 0800 	sub.w	r8, r8, r0
 8004398:	e7e9      	b.n	800436e <__sflush_r+0xda>
 800439a:	bf00      	nop
 800439c:	20400001 	.word	0x20400001

080043a0 <_fflush_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	690b      	ldr	r3, [r1, #16]
 80043a4:	4605      	mov	r5, r0
 80043a6:	460c      	mov	r4, r1
 80043a8:	b1db      	cbz	r3, 80043e2 <_fflush_r+0x42>
 80043aa:	b118      	cbz	r0, 80043b4 <_fflush_r+0x14>
 80043ac:	6983      	ldr	r3, [r0, #24]
 80043ae:	b90b      	cbnz	r3, 80043b4 <_fflush_r+0x14>
 80043b0:	f000 f860 	bl	8004474 <__sinit>
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <_fflush_r+0x48>)
 80043b6:	429c      	cmp	r4, r3
 80043b8:	d109      	bne.n	80043ce <_fflush_r+0x2e>
 80043ba:	686c      	ldr	r4, [r5, #4]
 80043bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043c0:	b17b      	cbz	r3, 80043e2 <_fflush_r+0x42>
 80043c2:	4621      	mov	r1, r4
 80043c4:	4628      	mov	r0, r5
 80043c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043ca:	f7ff bf63 	b.w	8004294 <__sflush_r>
 80043ce:	4b07      	ldr	r3, [pc, #28]	; (80043ec <_fflush_r+0x4c>)
 80043d0:	429c      	cmp	r4, r3
 80043d2:	d101      	bne.n	80043d8 <_fflush_r+0x38>
 80043d4:	68ac      	ldr	r4, [r5, #8]
 80043d6:	e7f1      	b.n	80043bc <_fflush_r+0x1c>
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <_fflush_r+0x50>)
 80043da:	429c      	cmp	r4, r3
 80043dc:	bf08      	it	eq
 80043de:	68ec      	ldreq	r4, [r5, #12]
 80043e0:	e7ec      	b.n	80043bc <_fflush_r+0x1c>
 80043e2:	2000      	movs	r0, #0
 80043e4:	bd38      	pop	{r3, r4, r5, pc}
 80043e6:	bf00      	nop
 80043e8:	0800501c 	.word	0x0800501c
 80043ec:	0800503c 	.word	0x0800503c
 80043f0:	08004ffc 	.word	0x08004ffc

080043f4 <std>:
 80043f4:	2300      	movs	r3, #0
 80043f6:	b510      	push	{r4, lr}
 80043f8:	4604      	mov	r4, r0
 80043fa:	e9c0 3300 	strd	r3, r3, [r0]
 80043fe:	6083      	str	r3, [r0, #8]
 8004400:	8181      	strh	r1, [r0, #12]
 8004402:	6643      	str	r3, [r0, #100]	; 0x64
 8004404:	81c2      	strh	r2, [r0, #14]
 8004406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800440a:	6183      	str	r3, [r0, #24]
 800440c:	4619      	mov	r1, r3
 800440e:	2208      	movs	r2, #8
 8004410:	305c      	adds	r0, #92	; 0x5c
 8004412:	f7ff fd41 	bl	8003e98 <memset>
 8004416:	4b05      	ldr	r3, [pc, #20]	; (800442c <std+0x38>)
 8004418:	6263      	str	r3, [r4, #36]	; 0x24
 800441a:	4b05      	ldr	r3, [pc, #20]	; (8004430 <std+0x3c>)
 800441c:	62a3      	str	r3, [r4, #40]	; 0x28
 800441e:	4b05      	ldr	r3, [pc, #20]	; (8004434 <std+0x40>)
 8004420:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004422:	4b05      	ldr	r3, [pc, #20]	; (8004438 <std+0x44>)
 8004424:	6224      	str	r4, [r4, #32]
 8004426:	6323      	str	r3, [r4, #48]	; 0x30
 8004428:	bd10      	pop	{r4, pc}
 800442a:	bf00      	nop
 800442c:	08004de9 	.word	0x08004de9
 8004430:	08004e0b 	.word	0x08004e0b
 8004434:	08004e43 	.word	0x08004e43
 8004438:	08004e67 	.word	0x08004e67

0800443c <_cleanup_r>:
 800443c:	4901      	ldr	r1, [pc, #4]	; (8004444 <_cleanup_r+0x8>)
 800443e:	f000 b885 	b.w	800454c <_fwalk_reent>
 8004442:	bf00      	nop
 8004444:	080043a1 	.word	0x080043a1

08004448 <__sfmoreglue>:
 8004448:	b570      	push	{r4, r5, r6, lr}
 800444a:	1e4a      	subs	r2, r1, #1
 800444c:	2568      	movs	r5, #104	; 0x68
 800444e:	4355      	muls	r5, r2
 8004450:	460e      	mov	r6, r1
 8004452:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004456:	f000 f95f 	bl	8004718 <_malloc_r>
 800445a:	4604      	mov	r4, r0
 800445c:	b140      	cbz	r0, 8004470 <__sfmoreglue+0x28>
 800445e:	2100      	movs	r1, #0
 8004460:	e9c0 1600 	strd	r1, r6, [r0]
 8004464:	300c      	adds	r0, #12
 8004466:	60a0      	str	r0, [r4, #8]
 8004468:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800446c:	f7ff fd14 	bl	8003e98 <memset>
 8004470:	4620      	mov	r0, r4
 8004472:	bd70      	pop	{r4, r5, r6, pc}

08004474 <__sinit>:
 8004474:	6983      	ldr	r3, [r0, #24]
 8004476:	b510      	push	{r4, lr}
 8004478:	4604      	mov	r4, r0
 800447a:	bb33      	cbnz	r3, 80044ca <__sinit+0x56>
 800447c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004480:	6503      	str	r3, [r0, #80]	; 0x50
 8004482:	4b12      	ldr	r3, [pc, #72]	; (80044cc <__sinit+0x58>)
 8004484:	4a12      	ldr	r2, [pc, #72]	; (80044d0 <__sinit+0x5c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6282      	str	r2, [r0, #40]	; 0x28
 800448a:	4298      	cmp	r0, r3
 800448c:	bf04      	itt	eq
 800448e:	2301      	moveq	r3, #1
 8004490:	6183      	streq	r3, [r0, #24]
 8004492:	f000 f81f 	bl	80044d4 <__sfp>
 8004496:	6060      	str	r0, [r4, #4]
 8004498:	4620      	mov	r0, r4
 800449a:	f000 f81b 	bl	80044d4 <__sfp>
 800449e:	60a0      	str	r0, [r4, #8]
 80044a0:	4620      	mov	r0, r4
 80044a2:	f000 f817 	bl	80044d4 <__sfp>
 80044a6:	2200      	movs	r2, #0
 80044a8:	60e0      	str	r0, [r4, #12]
 80044aa:	2104      	movs	r1, #4
 80044ac:	6860      	ldr	r0, [r4, #4]
 80044ae:	f7ff ffa1 	bl	80043f4 <std>
 80044b2:	2201      	movs	r2, #1
 80044b4:	2109      	movs	r1, #9
 80044b6:	68a0      	ldr	r0, [r4, #8]
 80044b8:	f7ff ff9c 	bl	80043f4 <std>
 80044bc:	2202      	movs	r2, #2
 80044be:	2112      	movs	r1, #18
 80044c0:	68e0      	ldr	r0, [r4, #12]
 80044c2:	f7ff ff97 	bl	80043f4 <std>
 80044c6:	2301      	movs	r3, #1
 80044c8:	61a3      	str	r3, [r4, #24]
 80044ca:	bd10      	pop	{r4, pc}
 80044cc:	08004ff8 	.word	0x08004ff8
 80044d0:	0800443d 	.word	0x0800443d

080044d4 <__sfp>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <__sfp+0x70>)
 80044d8:	681e      	ldr	r6, [r3, #0]
 80044da:	69b3      	ldr	r3, [r6, #24]
 80044dc:	4607      	mov	r7, r0
 80044de:	b913      	cbnz	r3, 80044e6 <__sfp+0x12>
 80044e0:	4630      	mov	r0, r6
 80044e2:	f7ff ffc7 	bl	8004474 <__sinit>
 80044e6:	3648      	adds	r6, #72	; 0x48
 80044e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	d503      	bpl.n	80044f8 <__sfp+0x24>
 80044f0:	6833      	ldr	r3, [r6, #0]
 80044f2:	b133      	cbz	r3, 8004502 <__sfp+0x2e>
 80044f4:	6836      	ldr	r6, [r6, #0]
 80044f6:	e7f7      	b.n	80044e8 <__sfp+0x14>
 80044f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044fc:	b16d      	cbz	r5, 800451a <__sfp+0x46>
 80044fe:	3468      	adds	r4, #104	; 0x68
 8004500:	e7f4      	b.n	80044ec <__sfp+0x18>
 8004502:	2104      	movs	r1, #4
 8004504:	4638      	mov	r0, r7
 8004506:	f7ff ff9f 	bl	8004448 <__sfmoreglue>
 800450a:	6030      	str	r0, [r6, #0]
 800450c:	2800      	cmp	r0, #0
 800450e:	d1f1      	bne.n	80044f4 <__sfp+0x20>
 8004510:	230c      	movs	r3, #12
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	4604      	mov	r4, r0
 8004516:	4620      	mov	r0, r4
 8004518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <__sfp+0x74>)
 800451c:	6665      	str	r5, [r4, #100]	; 0x64
 800451e:	e9c4 5500 	strd	r5, r5, [r4]
 8004522:	60a5      	str	r5, [r4, #8]
 8004524:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004528:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800452c:	2208      	movs	r2, #8
 800452e:	4629      	mov	r1, r5
 8004530:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004534:	f7ff fcb0 	bl	8003e98 <memset>
 8004538:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800453c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004540:	e7e9      	b.n	8004516 <__sfp+0x42>
 8004542:	bf00      	nop
 8004544:	08004ff8 	.word	0x08004ff8
 8004548:	ffff0001 	.word	0xffff0001

0800454c <_fwalk_reent>:
 800454c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004550:	4680      	mov	r8, r0
 8004552:	4689      	mov	r9, r1
 8004554:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004558:	2600      	movs	r6, #0
 800455a:	b914      	cbnz	r4, 8004562 <_fwalk_reent+0x16>
 800455c:	4630      	mov	r0, r6
 800455e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004562:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004566:	3f01      	subs	r7, #1
 8004568:	d501      	bpl.n	800456e <_fwalk_reent+0x22>
 800456a:	6824      	ldr	r4, [r4, #0]
 800456c:	e7f5      	b.n	800455a <_fwalk_reent+0xe>
 800456e:	89ab      	ldrh	r3, [r5, #12]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d907      	bls.n	8004584 <_fwalk_reent+0x38>
 8004574:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004578:	3301      	adds	r3, #1
 800457a:	d003      	beq.n	8004584 <_fwalk_reent+0x38>
 800457c:	4629      	mov	r1, r5
 800457e:	4640      	mov	r0, r8
 8004580:	47c8      	blx	r9
 8004582:	4306      	orrs	r6, r0
 8004584:	3568      	adds	r5, #104	; 0x68
 8004586:	e7ee      	b.n	8004566 <_fwalk_reent+0x1a>

08004588 <__locale_ctype_ptr_l>:
 8004588:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800458c:	4770      	bx	lr

0800458e <__swhatbuf_r>:
 800458e:	b570      	push	{r4, r5, r6, lr}
 8004590:	460e      	mov	r6, r1
 8004592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004596:	2900      	cmp	r1, #0
 8004598:	b096      	sub	sp, #88	; 0x58
 800459a:	4614      	mov	r4, r2
 800459c:	461d      	mov	r5, r3
 800459e:	da07      	bge.n	80045b0 <__swhatbuf_r+0x22>
 80045a0:	2300      	movs	r3, #0
 80045a2:	602b      	str	r3, [r5, #0]
 80045a4:	89b3      	ldrh	r3, [r6, #12]
 80045a6:	061a      	lsls	r2, r3, #24
 80045a8:	d410      	bmi.n	80045cc <__swhatbuf_r+0x3e>
 80045aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ae:	e00e      	b.n	80045ce <__swhatbuf_r+0x40>
 80045b0:	466a      	mov	r2, sp
 80045b2:	f000 fc8b 	bl	8004ecc <_fstat_r>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	dbf2      	blt.n	80045a0 <__swhatbuf_r+0x12>
 80045ba:	9a01      	ldr	r2, [sp, #4]
 80045bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045c4:	425a      	negs	r2, r3
 80045c6:	415a      	adcs	r2, r3
 80045c8:	602a      	str	r2, [r5, #0]
 80045ca:	e7ee      	b.n	80045aa <__swhatbuf_r+0x1c>
 80045cc:	2340      	movs	r3, #64	; 0x40
 80045ce:	2000      	movs	r0, #0
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	b016      	add	sp, #88	; 0x58
 80045d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080045d8 <__smakebuf_r>:
 80045d8:	898b      	ldrh	r3, [r1, #12]
 80045da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045dc:	079d      	lsls	r5, r3, #30
 80045de:	4606      	mov	r6, r0
 80045e0:	460c      	mov	r4, r1
 80045e2:	d507      	bpl.n	80045f4 <__smakebuf_r+0x1c>
 80045e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	6123      	str	r3, [r4, #16]
 80045ec:	2301      	movs	r3, #1
 80045ee:	6163      	str	r3, [r4, #20]
 80045f0:	b002      	add	sp, #8
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
 80045f4:	ab01      	add	r3, sp, #4
 80045f6:	466a      	mov	r2, sp
 80045f8:	f7ff ffc9 	bl	800458e <__swhatbuf_r>
 80045fc:	9900      	ldr	r1, [sp, #0]
 80045fe:	4605      	mov	r5, r0
 8004600:	4630      	mov	r0, r6
 8004602:	f000 f889 	bl	8004718 <_malloc_r>
 8004606:	b948      	cbnz	r0, 800461c <__smakebuf_r+0x44>
 8004608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800460c:	059a      	lsls	r2, r3, #22
 800460e:	d4ef      	bmi.n	80045f0 <__smakebuf_r+0x18>
 8004610:	f023 0303 	bic.w	r3, r3, #3
 8004614:	f043 0302 	orr.w	r3, r3, #2
 8004618:	81a3      	strh	r3, [r4, #12]
 800461a:	e7e3      	b.n	80045e4 <__smakebuf_r+0xc>
 800461c:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <__smakebuf_r+0x7c>)
 800461e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004620:	89a3      	ldrh	r3, [r4, #12]
 8004622:	6020      	str	r0, [r4, #0]
 8004624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004628:	81a3      	strh	r3, [r4, #12]
 800462a:	9b00      	ldr	r3, [sp, #0]
 800462c:	6163      	str	r3, [r4, #20]
 800462e:	9b01      	ldr	r3, [sp, #4]
 8004630:	6120      	str	r0, [r4, #16]
 8004632:	b15b      	cbz	r3, 800464c <__smakebuf_r+0x74>
 8004634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004638:	4630      	mov	r0, r6
 800463a:	f000 fc59 	bl	8004ef0 <_isatty_r>
 800463e:	b128      	cbz	r0, 800464c <__smakebuf_r+0x74>
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	81a3      	strh	r3, [r4, #12]
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	431d      	orrs	r5, r3
 8004650:	81a5      	strh	r5, [r4, #12]
 8004652:	e7cd      	b.n	80045f0 <__smakebuf_r+0x18>
 8004654:	0800443d 	.word	0x0800443d

08004658 <__ascii_mbtowc>:
 8004658:	b082      	sub	sp, #8
 800465a:	b901      	cbnz	r1, 800465e <__ascii_mbtowc+0x6>
 800465c:	a901      	add	r1, sp, #4
 800465e:	b142      	cbz	r2, 8004672 <__ascii_mbtowc+0x1a>
 8004660:	b14b      	cbz	r3, 8004676 <__ascii_mbtowc+0x1e>
 8004662:	7813      	ldrb	r3, [r2, #0]
 8004664:	600b      	str	r3, [r1, #0]
 8004666:	7812      	ldrb	r2, [r2, #0]
 8004668:	1c10      	adds	r0, r2, #0
 800466a:	bf18      	it	ne
 800466c:	2001      	movne	r0, #1
 800466e:	b002      	add	sp, #8
 8004670:	4770      	bx	lr
 8004672:	4610      	mov	r0, r2
 8004674:	e7fb      	b.n	800466e <__ascii_mbtowc+0x16>
 8004676:	f06f 0001 	mvn.w	r0, #1
 800467a:	e7f8      	b.n	800466e <__ascii_mbtowc+0x16>

0800467c <_free_r>:
 800467c:	b538      	push	{r3, r4, r5, lr}
 800467e:	4605      	mov	r5, r0
 8004680:	2900      	cmp	r1, #0
 8004682:	d045      	beq.n	8004710 <_free_r+0x94>
 8004684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004688:	1f0c      	subs	r4, r1, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	bfb8      	it	lt
 800468e:	18e4      	addlt	r4, r4, r3
 8004690:	f000 fc50 	bl	8004f34 <__malloc_lock>
 8004694:	4a1f      	ldr	r2, [pc, #124]	; (8004714 <_free_r+0x98>)
 8004696:	6813      	ldr	r3, [r2, #0]
 8004698:	4610      	mov	r0, r2
 800469a:	b933      	cbnz	r3, 80046aa <_free_r+0x2e>
 800469c:	6063      	str	r3, [r4, #4]
 800469e:	6014      	str	r4, [r2, #0]
 80046a0:	4628      	mov	r0, r5
 80046a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046a6:	f000 bc46 	b.w	8004f36 <__malloc_unlock>
 80046aa:	42a3      	cmp	r3, r4
 80046ac:	d90c      	bls.n	80046c8 <_free_r+0x4c>
 80046ae:	6821      	ldr	r1, [r4, #0]
 80046b0:	1862      	adds	r2, r4, r1
 80046b2:	4293      	cmp	r3, r2
 80046b4:	bf04      	itt	eq
 80046b6:	681a      	ldreq	r2, [r3, #0]
 80046b8:	685b      	ldreq	r3, [r3, #4]
 80046ba:	6063      	str	r3, [r4, #4]
 80046bc:	bf04      	itt	eq
 80046be:	1852      	addeq	r2, r2, r1
 80046c0:	6022      	streq	r2, [r4, #0]
 80046c2:	6004      	str	r4, [r0, #0]
 80046c4:	e7ec      	b.n	80046a0 <_free_r+0x24>
 80046c6:	4613      	mov	r3, r2
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	b10a      	cbz	r2, 80046d0 <_free_r+0x54>
 80046cc:	42a2      	cmp	r2, r4
 80046ce:	d9fa      	bls.n	80046c6 <_free_r+0x4a>
 80046d0:	6819      	ldr	r1, [r3, #0]
 80046d2:	1858      	adds	r0, r3, r1
 80046d4:	42a0      	cmp	r0, r4
 80046d6:	d10b      	bne.n	80046f0 <_free_r+0x74>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	4401      	add	r1, r0
 80046dc:	1858      	adds	r0, r3, r1
 80046de:	4282      	cmp	r2, r0
 80046e0:	6019      	str	r1, [r3, #0]
 80046e2:	d1dd      	bne.n	80046a0 <_free_r+0x24>
 80046e4:	6810      	ldr	r0, [r2, #0]
 80046e6:	6852      	ldr	r2, [r2, #4]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	4401      	add	r1, r0
 80046ec:	6019      	str	r1, [r3, #0]
 80046ee:	e7d7      	b.n	80046a0 <_free_r+0x24>
 80046f0:	d902      	bls.n	80046f8 <_free_r+0x7c>
 80046f2:	230c      	movs	r3, #12
 80046f4:	602b      	str	r3, [r5, #0]
 80046f6:	e7d3      	b.n	80046a0 <_free_r+0x24>
 80046f8:	6820      	ldr	r0, [r4, #0]
 80046fa:	1821      	adds	r1, r4, r0
 80046fc:	428a      	cmp	r2, r1
 80046fe:	bf04      	itt	eq
 8004700:	6811      	ldreq	r1, [r2, #0]
 8004702:	6852      	ldreq	r2, [r2, #4]
 8004704:	6062      	str	r2, [r4, #4]
 8004706:	bf04      	itt	eq
 8004708:	1809      	addeq	r1, r1, r0
 800470a:	6021      	streq	r1, [r4, #0]
 800470c:	605c      	str	r4, [r3, #4]
 800470e:	e7c7      	b.n	80046a0 <_free_r+0x24>
 8004710:	bd38      	pop	{r3, r4, r5, pc}
 8004712:	bf00      	nop
 8004714:	20000230 	.word	0x20000230

08004718 <_malloc_r>:
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	1ccd      	adds	r5, r1, #3
 800471c:	f025 0503 	bic.w	r5, r5, #3
 8004720:	3508      	adds	r5, #8
 8004722:	2d0c      	cmp	r5, #12
 8004724:	bf38      	it	cc
 8004726:	250c      	movcc	r5, #12
 8004728:	2d00      	cmp	r5, #0
 800472a:	4606      	mov	r6, r0
 800472c:	db01      	blt.n	8004732 <_malloc_r+0x1a>
 800472e:	42a9      	cmp	r1, r5
 8004730:	d903      	bls.n	800473a <_malloc_r+0x22>
 8004732:	230c      	movs	r3, #12
 8004734:	6033      	str	r3, [r6, #0]
 8004736:	2000      	movs	r0, #0
 8004738:	bd70      	pop	{r4, r5, r6, pc}
 800473a:	f000 fbfb 	bl	8004f34 <__malloc_lock>
 800473e:	4a21      	ldr	r2, [pc, #132]	; (80047c4 <_malloc_r+0xac>)
 8004740:	6814      	ldr	r4, [r2, #0]
 8004742:	4621      	mov	r1, r4
 8004744:	b991      	cbnz	r1, 800476c <_malloc_r+0x54>
 8004746:	4c20      	ldr	r4, [pc, #128]	; (80047c8 <_malloc_r+0xb0>)
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	b91b      	cbnz	r3, 8004754 <_malloc_r+0x3c>
 800474c:	4630      	mov	r0, r6
 800474e:	f000 fb3b 	bl	8004dc8 <_sbrk_r>
 8004752:	6020      	str	r0, [r4, #0]
 8004754:	4629      	mov	r1, r5
 8004756:	4630      	mov	r0, r6
 8004758:	f000 fb36 	bl	8004dc8 <_sbrk_r>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	d124      	bne.n	80047aa <_malloc_r+0x92>
 8004760:	230c      	movs	r3, #12
 8004762:	6033      	str	r3, [r6, #0]
 8004764:	4630      	mov	r0, r6
 8004766:	f000 fbe6 	bl	8004f36 <__malloc_unlock>
 800476a:	e7e4      	b.n	8004736 <_malloc_r+0x1e>
 800476c:	680b      	ldr	r3, [r1, #0]
 800476e:	1b5b      	subs	r3, r3, r5
 8004770:	d418      	bmi.n	80047a4 <_malloc_r+0x8c>
 8004772:	2b0b      	cmp	r3, #11
 8004774:	d90f      	bls.n	8004796 <_malloc_r+0x7e>
 8004776:	600b      	str	r3, [r1, #0]
 8004778:	50cd      	str	r5, [r1, r3]
 800477a:	18cc      	adds	r4, r1, r3
 800477c:	4630      	mov	r0, r6
 800477e:	f000 fbda 	bl	8004f36 <__malloc_unlock>
 8004782:	f104 000b 	add.w	r0, r4, #11
 8004786:	1d23      	adds	r3, r4, #4
 8004788:	f020 0007 	bic.w	r0, r0, #7
 800478c:	1ac3      	subs	r3, r0, r3
 800478e:	d0d3      	beq.n	8004738 <_malloc_r+0x20>
 8004790:	425a      	negs	r2, r3
 8004792:	50e2      	str	r2, [r4, r3]
 8004794:	e7d0      	b.n	8004738 <_malloc_r+0x20>
 8004796:	428c      	cmp	r4, r1
 8004798:	684b      	ldr	r3, [r1, #4]
 800479a:	bf16      	itet	ne
 800479c:	6063      	strne	r3, [r4, #4]
 800479e:	6013      	streq	r3, [r2, #0]
 80047a0:	460c      	movne	r4, r1
 80047a2:	e7eb      	b.n	800477c <_malloc_r+0x64>
 80047a4:	460c      	mov	r4, r1
 80047a6:	6849      	ldr	r1, [r1, #4]
 80047a8:	e7cc      	b.n	8004744 <_malloc_r+0x2c>
 80047aa:	1cc4      	adds	r4, r0, #3
 80047ac:	f024 0403 	bic.w	r4, r4, #3
 80047b0:	42a0      	cmp	r0, r4
 80047b2:	d005      	beq.n	80047c0 <_malloc_r+0xa8>
 80047b4:	1a21      	subs	r1, r4, r0
 80047b6:	4630      	mov	r0, r6
 80047b8:	f000 fb06 	bl	8004dc8 <_sbrk_r>
 80047bc:	3001      	adds	r0, #1
 80047be:	d0cf      	beq.n	8004760 <_malloc_r+0x48>
 80047c0:	6025      	str	r5, [r4, #0]
 80047c2:	e7db      	b.n	800477c <_malloc_r+0x64>
 80047c4:	20000230 	.word	0x20000230
 80047c8:	20000234 	.word	0x20000234

080047cc <__sfputc_r>:
 80047cc:	6893      	ldr	r3, [r2, #8]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	b410      	push	{r4}
 80047d4:	6093      	str	r3, [r2, #8]
 80047d6:	da08      	bge.n	80047ea <__sfputc_r+0x1e>
 80047d8:	6994      	ldr	r4, [r2, #24]
 80047da:	42a3      	cmp	r3, r4
 80047dc:	db01      	blt.n	80047e2 <__sfputc_r+0x16>
 80047de:	290a      	cmp	r1, #10
 80047e0:	d103      	bne.n	80047ea <__sfputc_r+0x1e>
 80047e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047e6:	f7ff bc95 	b.w	8004114 <__swbuf_r>
 80047ea:	6813      	ldr	r3, [r2, #0]
 80047ec:	1c58      	adds	r0, r3, #1
 80047ee:	6010      	str	r0, [r2, #0]
 80047f0:	7019      	strb	r1, [r3, #0]
 80047f2:	4608      	mov	r0, r1
 80047f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <__sfputs_r>:
 80047fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fc:	4606      	mov	r6, r0
 80047fe:	460f      	mov	r7, r1
 8004800:	4614      	mov	r4, r2
 8004802:	18d5      	adds	r5, r2, r3
 8004804:	42ac      	cmp	r4, r5
 8004806:	d101      	bne.n	800480c <__sfputs_r+0x12>
 8004808:	2000      	movs	r0, #0
 800480a:	e007      	b.n	800481c <__sfputs_r+0x22>
 800480c:	463a      	mov	r2, r7
 800480e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004812:	4630      	mov	r0, r6
 8004814:	f7ff ffda 	bl	80047cc <__sfputc_r>
 8004818:	1c43      	adds	r3, r0, #1
 800481a:	d1f3      	bne.n	8004804 <__sfputs_r+0xa>
 800481c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004820 <_vfiprintf_r>:
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004824:	460c      	mov	r4, r1
 8004826:	b09d      	sub	sp, #116	; 0x74
 8004828:	4617      	mov	r7, r2
 800482a:	461d      	mov	r5, r3
 800482c:	4606      	mov	r6, r0
 800482e:	b118      	cbz	r0, 8004838 <_vfiprintf_r+0x18>
 8004830:	6983      	ldr	r3, [r0, #24]
 8004832:	b90b      	cbnz	r3, 8004838 <_vfiprintf_r+0x18>
 8004834:	f7ff fe1e 	bl	8004474 <__sinit>
 8004838:	4b7c      	ldr	r3, [pc, #496]	; (8004a2c <_vfiprintf_r+0x20c>)
 800483a:	429c      	cmp	r4, r3
 800483c:	d158      	bne.n	80048f0 <_vfiprintf_r+0xd0>
 800483e:	6874      	ldr	r4, [r6, #4]
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	0718      	lsls	r0, r3, #28
 8004844:	d55e      	bpl.n	8004904 <_vfiprintf_r+0xe4>
 8004846:	6923      	ldr	r3, [r4, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d05b      	beq.n	8004904 <_vfiprintf_r+0xe4>
 800484c:	2300      	movs	r3, #0
 800484e:	9309      	str	r3, [sp, #36]	; 0x24
 8004850:	2320      	movs	r3, #32
 8004852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004856:	2330      	movs	r3, #48	; 0x30
 8004858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800485c:	9503      	str	r5, [sp, #12]
 800485e:	f04f 0b01 	mov.w	fp, #1
 8004862:	46b8      	mov	r8, r7
 8004864:	4645      	mov	r5, r8
 8004866:	f815 3b01 	ldrb.w	r3, [r5], #1
 800486a:	b10b      	cbz	r3, 8004870 <_vfiprintf_r+0x50>
 800486c:	2b25      	cmp	r3, #37	; 0x25
 800486e:	d154      	bne.n	800491a <_vfiprintf_r+0xfa>
 8004870:	ebb8 0a07 	subs.w	sl, r8, r7
 8004874:	d00b      	beq.n	800488e <_vfiprintf_r+0x6e>
 8004876:	4653      	mov	r3, sl
 8004878:	463a      	mov	r2, r7
 800487a:	4621      	mov	r1, r4
 800487c:	4630      	mov	r0, r6
 800487e:	f7ff ffbc 	bl	80047fa <__sfputs_r>
 8004882:	3001      	adds	r0, #1
 8004884:	f000 80c2 	beq.w	8004a0c <_vfiprintf_r+0x1ec>
 8004888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800488a:	4453      	add	r3, sl
 800488c:	9309      	str	r3, [sp, #36]	; 0x24
 800488e:	f898 3000 	ldrb.w	r3, [r8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 80ba 	beq.w	8004a0c <_vfiprintf_r+0x1ec>
 8004898:	2300      	movs	r3, #0
 800489a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800489e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048a2:	9304      	str	r3, [sp, #16]
 80048a4:	9307      	str	r3, [sp, #28]
 80048a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048aa:	931a      	str	r3, [sp, #104]	; 0x68
 80048ac:	46a8      	mov	r8, r5
 80048ae:	2205      	movs	r2, #5
 80048b0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80048b4:	485e      	ldr	r0, [pc, #376]	; (8004a30 <_vfiprintf_r+0x210>)
 80048b6:	f7fb fc93 	bl	80001e0 <memchr>
 80048ba:	9b04      	ldr	r3, [sp, #16]
 80048bc:	bb78      	cbnz	r0, 800491e <_vfiprintf_r+0xfe>
 80048be:	06d9      	lsls	r1, r3, #27
 80048c0:	bf44      	itt	mi
 80048c2:	2220      	movmi	r2, #32
 80048c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048c8:	071a      	lsls	r2, r3, #28
 80048ca:	bf44      	itt	mi
 80048cc:	222b      	movmi	r2, #43	; 0x2b
 80048ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048d2:	782a      	ldrb	r2, [r5, #0]
 80048d4:	2a2a      	cmp	r2, #42	; 0x2a
 80048d6:	d02a      	beq.n	800492e <_vfiprintf_r+0x10e>
 80048d8:	9a07      	ldr	r2, [sp, #28]
 80048da:	46a8      	mov	r8, r5
 80048dc:	2000      	movs	r0, #0
 80048de:	250a      	movs	r5, #10
 80048e0:	4641      	mov	r1, r8
 80048e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048e6:	3b30      	subs	r3, #48	; 0x30
 80048e8:	2b09      	cmp	r3, #9
 80048ea:	d969      	bls.n	80049c0 <_vfiprintf_r+0x1a0>
 80048ec:	b360      	cbz	r0, 8004948 <_vfiprintf_r+0x128>
 80048ee:	e024      	b.n	800493a <_vfiprintf_r+0x11a>
 80048f0:	4b50      	ldr	r3, [pc, #320]	; (8004a34 <_vfiprintf_r+0x214>)
 80048f2:	429c      	cmp	r4, r3
 80048f4:	d101      	bne.n	80048fa <_vfiprintf_r+0xda>
 80048f6:	68b4      	ldr	r4, [r6, #8]
 80048f8:	e7a2      	b.n	8004840 <_vfiprintf_r+0x20>
 80048fa:	4b4f      	ldr	r3, [pc, #316]	; (8004a38 <_vfiprintf_r+0x218>)
 80048fc:	429c      	cmp	r4, r3
 80048fe:	bf08      	it	eq
 8004900:	68f4      	ldreq	r4, [r6, #12]
 8004902:	e79d      	b.n	8004840 <_vfiprintf_r+0x20>
 8004904:	4621      	mov	r1, r4
 8004906:	4630      	mov	r0, r6
 8004908:	f7ff fc56 	bl	80041b8 <__swsetup_r>
 800490c:	2800      	cmp	r0, #0
 800490e:	d09d      	beq.n	800484c <_vfiprintf_r+0x2c>
 8004910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004914:	b01d      	add	sp, #116	; 0x74
 8004916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491a:	46a8      	mov	r8, r5
 800491c:	e7a2      	b.n	8004864 <_vfiprintf_r+0x44>
 800491e:	4a44      	ldr	r2, [pc, #272]	; (8004a30 <_vfiprintf_r+0x210>)
 8004920:	1a80      	subs	r0, r0, r2
 8004922:	fa0b f000 	lsl.w	r0, fp, r0
 8004926:	4318      	orrs	r0, r3
 8004928:	9004      	str	r0, [sp, #16]
 800492a:	4645      	mov	r5, r8
 800492c:	e7be      	b.n	80048ac <_vfiprintf_r+0x8c>
 800492e:	9a03      	ldr	r2, [sp, #12]
 8004930:	1d11      	adds	r1, r2, #4
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	9103      	str	r1, [sp, #12]
 8004936:	2a00      	cmp	r2, #0
 8004938:	db01      	blt.n	800493e <_vfiprintf_r+0x11e>
 800493a:	9207      	str	r2, [sp, #28]
 800493c:	e004      	b.n	8004948 <_vfiprintf_r+0x128>
 800493e:	4252      	negs	r2, r2
 8004940:	f043 0302 	orr.w	r3, r3, #2
 8004944:	9207      	str	r2, [sp, #28]
 8004946:	9304      	str	r3, [sp, #16]
 8004948:	f898 3000 	ldrb.w	r3, [r8]
 800494c:	2b2e      	cmp	r3, #46	; 0x2e
 800494e:	d10e      	bne.n	800496e <_vfiprintf_r+0x14e>
 8004950:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004954:	2b2a      	cmp	r3, #42	; 0x2a
 8004956:	d138      	bne.n	80049ca <_vfiprintf_r+0x1aa>
 8004958:	9b03      	ldr	r3, [sp, #12]
 800495a:	1d1a      	adds	r2, r3, #4
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	9203      	str	r2, [sp, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	bfb8      	it	lt
 8004964:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004968:	f108 0802 	add.w	r8, r8, #2
 800496c:	9305      	str	r3, [sp, #20]
 800496e:	4d33      	ldr	r5, [pc, #204]	; (8004a3c <_vfiprintf_r+0x21c>)
 8004970:	f898 1000 	ldrb.w	r1, [r8]
 8004974:	2203      	movs	r2, #3
 8004976:	4628      	mov	r0, r5
 8004978:	f7fb fc32 	bl	80001e0 <memchr>
 800497c:	b140      	cbz	r0, 8004990 <_vfiprintf_r+0x170>
 800497e:	2340      	movs	r3, #64	; 0x40
 8004980:	1b40      	subs	r0, r0, r5
 8004982:	fa03 f000 	lsl.w	r0, r3, r0
 8004986:	9b04      	ldr	r3, [sp, #16]
 8004988:	4303      	orrs	r3, r0
 800498a:	f108 0801 	add.w	r8, r8, #1
 800498e:	9304      	str	r3, [sp, #16]
 8004990:	f898 1000 	ldrb.w	r1, [r8]
 8004994:	482a      	ldr	r0, [pc, #168]	; (8004a40 <_vfiprintf_r+0x220>)
 8004996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800499a:	2206      	movs	r2, #6
 800499c:	f108 0701 	add.w	r7, r8, #1
 80049a0:	f7fb fc1e 	bl	80001e0 <memchr>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	d037      	beq.n	8004a18 <_vfiprintf_r+0x1f8>
 80049a8:	4b26      	ldr	r3, [pc, #152]	; (8004a44 <_vfiprintf_r+0x224>)
 80049aa:	bb1b      	cbnz	r3, 80049f4 <_vfiprintf_r+0x1d4>
 80049ac:	9b03      	ldr	r3, [sp, #12]
 80049ae:	3307      	adds	r3, #7
 80049b0:	f023 0307 	bic.w	r3, r3, #7
 80049b4:	3308      	adds	r3, #8
 80049b6:	9303      	str	r3, [sp, #12]
 80049b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ba:	444b      	add	r3, r9
 80049bc:	9309      	str	r3, [sp, #36]	; 0x24
 80049be:	e750      	b.n	8004862 <_vfiprintf_r+0x42>
 80049c0:	fb05 3202 	mla	r2, r5, r2, r3
 80049c4:	2001      	movs	r0, #1
 80049c6:	4688      	mov	r8, r1
 80049c8:	e78a      	b.n	80048e0 <_vfiprintf_r+0xc0>
 80049ca:	2300      	movs	r3, #0
 80049cc:	f108 0801 	add.w	r8, r8, #1
 80049d0:	9305      	str	r3, [sp, #20]
 80049d2:	4619      	mov	r1, r3
 80049d4:	250a      	movs	r5, #10
 80049d6:	4640      	mov	r0, r8
 80049d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049dc:	3a30      	subs	r2, #48	; 0x30
 80049de:	2a09      	cmp	r2, #9
 80049e0:	d903      	bls.n	80049ea <_vfiprintf_r+0x1ca>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0c3      	beq.n	800496e <_vfiprintf_r+0x14e>
 80049e6:	9105      	str	r1, [sp, #20]
 80049e8:	e7c1      	b.n	800496e <_vfiprintf_r+0x14e>
 80049ea:	fb05 2101 	mla	r1, r5, r1, r2
 80049ee:	2301      	movs	r3, #1
 80049f0:	4680      	mov	r8, r0
 80049f2:	e7f0      	b.n	80049d6 <_vfiprintf_r+0x1b6>
 80049f4:	ab03      	add	r3, sp, #12
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	4622      	mov	r2, r4
 80049fa:	4b13      	ldr	r3, [pc, #76]	; (8004a48 <_vfiprintf_r+0x228>)
 80049fc:	a904      	add	r1, sp, #16
 80049fe:	4630      	mov	r0, r6
 8004a00:	f3af 8000 	nop.w
 8004a04:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004a08:	4681      	mov	r9, r0
 8004a0a:	d1d5      	bne.n	80049b8 <_vfiprintf_r+0x198>
 8004a0c:	89a3      	ldrh	r3, [r4, #12]
 8004a0e:	065b      	lsls	r3, r3, #25
 8004a10:	f53f af7e 	bmi.w	8004910 <_vfiprintf_r+0xf0>
 8004a14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a16:	e77d      	b.n	8004914 <_vfiprintf_r+0xf4>
 8004a18:	ab03      	add	r3, sp, #12
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	4622      	mov	r2, r4
 8004a1e:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <_vfiprintf_r+0x228>)
 8004a20:	a904      	add	r1, sp, #16
 8004a22:	4630      	mov	r0, r6
 8004a24:	f000 f888 	bl	8004b38 <_printf_i>
 8004a28:	e7ec      	b.n	8004a04 <_vfiprintf_r+0x1e4>
 8004a2a:	bf00      	nop
 8004a2c:	0800501c 	.word	0x0800501c
 8004a30:	08005066 	.word	0x08005066
 8004a34:	0800503c 	.word	0x0800503c
 8004a38:	08004ffc 	.word	0x08004ffc
 8004a3c:	0800506c 	.word	0x0800506c
 8004a40:	08005070 	.word	0x08005070
 8004a44:	00000000 	.word	0x00000000
 8004a48:	080047fb 	.word	0x080047fb

08004a4c <_printf_common>:
 8004a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a50:	4691      	mov	r9, r2
 8004a52:	461f      	mov	r7, r3
 8004a54:	688a      	ldr	r2, [r1, #8]
 8004a56:	690b      	ldr	r3, [r1, #16]
 8004a58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	bfb8      	it	lt
 8004a60:	4613      	movlt	r3, r2
 8004a62:	f8c9 3000 	str.w	r3, [r9]
 8004a66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	460c      	mov	r4, r1
 8004a6e:	b112      	cbz	r2, 8004a76 <_printf_common+0x2a>
 8004a70:	3301      	adds	r3, #1
 8004a72:	f8c9 3000 	str.w	r3, [r9]
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	0699      	lsls	r1, r3, #26
 8004a7a:	bf42      	ittt	mi
 8004a7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a80:	3302      	addmi	r3, #2
 8004a82:	f8c9 3000 	strmi.w	r3, [r9]
 8004a86:	6825      	ldr	r5, [r4, #0]
 8004a88:	f015 0506 	ands.w	r5, r5, #6
 8004a8c:	d107      	bne.n	8004a9e <_printf_common+0x52>
 8004a8e:	f104 0a19 	add.w	sl, r4, #25
 8004a92:	68e3      	ldr	r3, [r4, #12]
 8004a94:	f8d9 2000 	ldr.w	r2, [r9]
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	42ab      	cmp	r3, r5
 8004a9c:	dc28      	bgt.n	8004af0 <_printf_common+0xa4>
 8004a9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004aa2:	6822      	ldr	r2, [r4, #0]
 8004aa4:	3300      	adds	r3, #0
 8004aa6:	bf18      	it	ne
 8004aa8:	2301      	movne	r3, #1
 8004aaa:	0692      	lsls	r2, r2, #26
 8004aac:	d42d      	bmi.n	8004b0a <_printf_common+0xbe>
 8004aae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ab2:	4639      	mov	r1, r7
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	47c0      	blx	r8
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d020      	beq.n	8004afe <_printf_common+0xb2>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	68e5      	ldr	r5, [r4, #12]
 8004ac0:	f8d9 2000 	ldr.w	r2, [r9]
 8004ac4:	f003 0306 	and.w	r3, r3, #6
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	bf08      	it	eq
 8004acc:	1aad      	subeq	r5, r5, r2
 8004ace:	68a3      	ldr	r3, [r4, #8]
 8004ad0:	6922      	ldr	r2, [r4, #16]
 8004ad2:	bf0c      	ite	eq
 8004ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ad8:	2500      	movne	r5, #0
 8004ada:	4293      	cmp	r3, r2
 8004adc:	bfc4      	itt	gt
 8004ade:	1a9b      	subgt	r3, r3, r2
 8004ae0:	18ed      	addgt	r5, r5, r3
 8004ae2:	f04f 0900 	mov.w	r9, #0
 8004ae6:	341a      	adds	r4, #26
 8004ae8:	454d      	cmp	r5, r9
 8004aea:	d11a      	bne.n	8004b22 <_printf_common+0xd6>
 8004aec:	2000      	movs	r0, #0
 8004aee:	e008      	b.n	8004b02 <_printf_common+0xb6>
 8004af0:	2301      	movs	r3, #1
 8004af2:	4652      	mov	r2, sl
 8004af4:	4639      	mov	r1, r7
 8004af6:	4630      	mov	r0, r6
 8004af8:	47c0      	blx	r8
 8004afa:	3001      	adds	r0, #1
 8004afc:	d103      	bne.n	8004b06 <_printf_common+0xba>
 8004afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b06:	3501      	adds	r5, #1
 8004b08:	e7c3      	b.n	8004a92 <_printf_common+0x46>
 8004b0a:	18e1      	adds	r1, r4, r3
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	2030      	movs	r0, #48	; 0x30
 8004b10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b14:	4422      	add	r2, r4
 8004b16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b1e:	3302      	adds	r3, #2
 8004b20:	e7c5      	b.n	8004aae <_printf_common+0x62>
 8004b22:	2301      	movs	r3, #1
 8004b24:	4622      	mov	r2, r4
 8004b26:	4639      	mov	r1, r7
 8004b28:	4630      	mov	r0, r6
 8004b2a:	47c0      	blx	r8
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d0e6      	beq.n	8004afe <_printf_common+0xb2>
 8004b30:	f109 0901 	add.w	r9, r9, #1
 8004b34:	e7d8      	b.n	8004ae8 <_printf_common+0x9c>
	...

08004b38 <_printf_i>:
 8004b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004b40:	460c      	mov	r4, r1
 8004b42:	7e09      	ldrb	r1, [r1, #24]
 8004b44:	b085      	sub	sp, #20
 8004b46:	296e      	cmp	r1, #110	; 0x6e
 8004b48:	4617      	mov	r7, r2
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	4698      	mov	r8, r3
 8004b4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b50:	f000 80b3 	beq.w	8004cba <_printf_i+0x182>
 8004b54:	d822      	bhi.n	8004b9c <_printf_i+0x64>
 8004b56:	2963      	cmp	r1, #99	; 0x63
 8004b58:	d036      	beq.n	8004bc8 <_printf_i+0x90>
 8004b5a:	d80a      	bhi.n	8004b72 <_printf_i+0x3a>
 8004b5c:	2900      	cmp	r1, #0
 8004b5e:	f000 80b9 	beq.w	8004cd4 <_printf_i+0x19c>
 8004b62:	2958      	cmp	r1, #88	; 0x58
 8004b64:	f000 8083 	beq.w	8004c6e <_printf_i+0x136>
 8004b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b70:	e032      	b.n	8004bd8 <_printf_i+0xa0>
 8004b72:	2964      	cmp	r1, #100	; 0x64
 8004b74:	d001      	beq.n	8004b7a <_printf_i+0x42>
 8004b76:	2969      	cmp	r1, #105	; 0x69
 8004b78:	d1f6      	bne.n	8004b68 <_printf_i+0x30>
 8004b7a:	6820      	ldr	r0, [r4, #0]
 8004b7c:	6813      	ldr	r3, [r2, #0]
 8004b7e:	0605      	lsls	r5, r0, #24
 8004b80:	f103 0104 	add.w	r1, r3, #4
 8004b84:	d52a      	bpl.n	8004bdc <_printf_i+0xa4>
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6011      	str	r1, [r2, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	da03      	bge.n	8004b96 <_printf_i+0x5e>
 8004b8e:	222d      	movs	r2, #45	; 0x2d
 8004b90:	425b      	negs	r3, r3
 8004b92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b96:	486f      	ldr	r0, [pc, #444]	; (8004d54 <_printf_i+0x21c>)
 8004b98:	220a      	movs	r2, #10
 8004b9a:	e039      	b.n	8004c10 <_printf_i+0xd8>
 8004b9c:	2973      	cmp	r1, #115	; 0x73
 8004b9e:	f000 809d 	beq.w	8004cdc <_printf_i+0x1a4>
 8004ba2:	d808      	bhi.n	8004bb6 <_printf_i+0x7e>
 8004ba4:	296f      	cmp	r1, #111	; 0x6f
 8004ba6:	d020      	beq.n	8004bea <_printf_i+0xb2>
 8004ba8:	2970      	cmp	r1, #112	; 0x70
 8004baa:	d1dd      	bne.n	8004b68 <_printf_i+0x30>
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	f043 0320 	orr.w	r3, r3, #32
 8004bb2:	6023      	str	r3, [r4, #0]
 8004bb4:	e003      	b.n	8004bbe <_printf_i+0x86>
 8004bb6:	2975      	cmp	r1, #117	; 0x75
 8004bb8:	d017      	beq.n	8004bea <_printf_i+0xb2>
 8004bba:	2978      	cmp	r1, #120	; 0x78
 8004bbc:	d1d4      	bne.n	8004b68 <_printf_i+0x30>
 8004bbe:	2378      	movs	r3, #120	; 0x78
 8004bc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bc4:	4864      	ldr	r0, [pc, #400]	; (8004d58 <_printf_i+0x220>)
 8004bc6:	e055      	b.n	8004c74 <_printf_i+0x13c>
 8004bc8:	6813      	ldr	r3, [r2, #0]
 8004bca:	1d19      	adds	r1, r3, #4
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6011      	str	r1, [r2, #0]
 8004bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e08c      	b.n	8004cf6 <_printf_i+0x1be>
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6011      	str	r1, [r2, #0]
 8004be0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004be4:	bf18      	it	ne
 8004be6:	b21b      	sxthne	r3, r3
 8004be8:	e7cf      	b.n	8004b8a <_printf_i+0x52>
 8004bea:	6813      	ldr	r3, [r2, #0]
 8004bec:	6825      	ldr	r5, [r4, #0]
 8004bee:	1d18      	adds	r0, r3, #4
 8004bf0:	6010      	str	r0, [r2, #0]
 8004bf2:	0628      	lsls	r0, r5, #24
 8004bf4:	d501      	bpl.n	8004bfa <_printf_i+0xc2>
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	e002      	b.n	8004c00 <_printf_i+0xc8>
 8004bfa:	0668      	lsls	r0, r5, #25
 8004bfc:	d5fb      	bpl.n	8004bf6 <_printf_i+0xbe>
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	4854      	ldr	r0, [pc, #336]	; (8004d54 <_printf_i+0x21c>)
 8004c02:	296f      	cmp	r1, #111	; 0x6f
 8004c04:	bf14      	ite	ne
 8004c06:	220a      	movne	r2, #10
 8004c08:	2208      	moveq	r2, #8
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c10:	6865      	ldr	r5, [r4, #4]
 8004c12:	60a5      	str	r5, [r4, #8]
 8004c14:	2d00      	cmp	r5, #0
 8004c16:	f2c0 8095 	blt.w	8004d44 <_printf_i+0x20c>
 8004c1a:	6821      	ldr	r1, [r4, #0]
 8004c1c:	f021 0104 	bic.w	r1, r1, #4
 8004c20:	6021      	str	r1, [r4, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d13d      	bne.n	8004ca2 <_printf_i+0x16a>
 8004c26:	2d00      	cmp	r5, #0
 8004c28:	f040 808e 	bne.w	8004d48 <_printf_i+0x210>
 8004c2c:	4665      	mov	r5, ip
 8004c2e:	2a08      	cmp	r2, #8
 8004c30:	d10b      	bne.n	8004c4a <_printf_i+0x112>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	07db      	lsls	r3, r3, #31
 8004c36:	d508      	bpl.n	8004c4a <_printf_i+0x112>
 8004c38:	6923      	ldr	r3, [r4, #16]
 8004c3a:	6862      	ldr	r2, [r4, #4]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	bfde      	ittt	le
 8004c40:	2330      	movle	r3, #48	; 0x30
 8004c42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c46:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004c4a:	ebac 0305 	sub.w	r3, ip, r5
 8004c4e:	6123      	str	r3, [r4, #16]
 8004c50:	f8cd 8000 	str.w	r8, [sp]
 8004c54:	463b      	mov	r3, r7
 8004c56:	aa03      	add	r2, sp, #12
 8004c58:	4621      	mov	r1, r4
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	f7ff fef6 	bl	8004a4c <_printf_common>
 8004c60:	3001      	adds	r0, #1
 8004c62:	d14d      	bne.n	8004d00 <_printf_i+0x1c8>
 8004c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c68:	b005      	add	sp, #20
 8004c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c6e:	4839      	ldr	r0, [pc, #228]	; (8004d54 <_printf_i+0x21c>)
 8004c70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c74:	6813      	ldr	r3, [r2, #0]
 8004c76:	6821      	ldr	r1, [r4, #0]
 8004c78:	1d1d      	adds	r5, r3, #4
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6015      	str	r5, [r2, #0]
 8004c7e:	060a      	lsls	r2, r1, #24
 8004c80:	d50b      	bpl.n	8004c9a <_printf_i+0x162>
 8004c82:	07ca      	lsls	r2, r1, #31
 8004c84:	bf44      	itt	mi
 8004c86:	f041 0120 	orrmi.w	r1, r1, #32
 8004c8a:	6021      	strmi	r1, [r4, #0]
 8004c8c:	b91b      	cbnz	r3, 8004c96 <_printf_i+0x15e>
 8004c8e:	6822      	ldr	r2, [r4, #0]
 8004c90:	f022 0220 	bic.w	r2, r2, #32
 8004c94:	6022      	str	r2, [r4, #0]
 8004c96:	2210      	movs	r2, #16
 8004c98:	e7b7      	b.n	8004c0a <_printf_i+0xd2>
 8004c9a:	064d      	lsls	r5, r1, #25
 8004c9c:	bf48      	it	mi
 8004c9e:	b29b      	uxthmi	r3, r3
 8004ca0:	e7ef      	b.n	8004c82 <_printf_i+0x14a>
 8004ca2:	4665      	mov	r5, ip
 8004ca4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ca8:	fb02 3311 	mls	r3, r2, r1, r3
 8004cac:	5cc3      	ldrb	r3, [r0, r3]
 8004cae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	2900      	cmp	r1, #0
 8004cb6:	d1f5      	bne.n	8004ca4 <_printf_i+0x16c>
 8004cb8:	e7b9      	b.n	8004c2e <_printf_i+0xf6>
 8004cba:	6813      	ldr	r3, [r2, #0]
 8004cbc:	6825      	ldr	r5, [r4, #0]
 8004cbe:	6961      	ldr	r1, [r4, #20]
 8004cc0:	1d18      	adds	r0, r3, #4
 8004cc2:	6010      	str	r0, [r2, #0]
 8004cc4:	0628      	lsls	r0, r5, #24
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	d501      	bpl.n	8004cce <_printf_i+0x196>
 8004cca:	6019      	str	r1, [r3, #0]
 8004ccc:	e002      	b.n	8004cd4 <_printf_i+0x19c>
 8004cce:	066a      	lsls	r2, r5, #25
 8004cd0:	d5fb      	bpl.n	8004cca <_printf_i+0x192>
 8004cd2:	8019      	strh	r1, [r3, #0]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	6123      	str	r3, [r4, #16]
 8004cd8:	4665      	mov	r5, ip
 8004cda:	e7b9      	b.n	8004c50 <_printf_i+0x118>
 8004cdc:	6813      	ldr	r3, [r2, #0]
 8004cde:	1d19      	adds	r1, r3, #4
 8004ce0:	6011      	str	r1, [r2, #0]
 8004ce2:	681d      	ldr	r5, [r3, #0]
 8004ce4:	6862      	ldr	r2, [r4, #4]
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f7fb fa79 	bl	80001e0 <memchr>
 8004cee:	b108      	cbz	r0, 8004cf4 <_printf_i+0x1bc>
 8004cf0:	1b40      	subs	r0, r0, r5
 8004cf2:	6060      	str	r0, [r4, #4]
 8004cf4:	6863      	ldr	r3, [r4, #4]
 8004cf6:	6123      	str	r3, [r4, #16]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cfe:	e7a7      	b.n	8004c50 <_printf_i+0x118>
 8004d00:	6923      	ldr	r3, [r4, #16]
 8004d02:	462a      	mov	r2, r5
 8004d04:	4639      	mov	r1, r7
 8004d06:	4630      	mov	r0, r6
 8004d08:	47c0      	blx	r8
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	d0aa      	beq.n	8004c64 <_printf_i+0x12c>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	079b      	lsls	r3, r3, #30
 8004d12:	d413      	bmi.n	8004d3c <_printf_i+0x204>
 8004d14:	68e0      	ldr	r0, [r4, #12]
 8004d16:	9b03      	ldr	r3, [sp, #12]
 8004d18:	4298      	cmp	r0, r3
 8004d1a:	bfb8      	it	lt
 8004d1c:	4618      	movlt	r0, r3
 8004d1e:	e7a3      	b.n	8004c68 <_printf_i+0x130>
 8004d20:	2301      	movs	r3, #1
 8004d22:	464a      	mov	r2, r9
 8004d24:	4639      	mov	r1, r7
 8004d26:	4630      	mov	r0, r6
 8004d28:	47c0      	blx	r8
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	d09a      	beq.n	8004c64 <_printf_i+0x12c>
 8004d2e:	3501      	adds	r5, #1
 8004d30:	68e3      	ldr	r3, [r4, #12]
 8004d32:	9a03      	ldr	r2, [sp, #12]
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	42ab      	cmp	r3, r5
 8004d38:	dcf2      	bgt.n	8004d20 <_printf_i+0x1e8>
 8004d3a:	e7eb      	b.n	8004d14 <_printf_i+0x1dc>
 8004d3c:	2500      	movs	r5, #0
 8004d3e:	f104 0919 	add.w	r9, r4, #25
 8004d42:	e7f5      	b.n	8004d30 <_printf_i+0x1f8>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1ac      	bne.n	8004ca2 <_printf_i+0x16a>
 8004d48:	7803      	ldrb	r3, [r0, #0]
 8004d4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d52:	e76c      	b.n	8004c2e <_printf_i+0xf6>
 8004d54:	08005077 	.word	0x08005077
 8004d58:	08005088 	.word	0x08005088

08004d5c <_putc_r>:
 8004d5c:	b570      	push	{r4, r5, r6, lr}
 8004d5e:	460d      	mov	r5, r1
 8004d60:	4614      	mov	r4, r2
 8004d62:	4606      	mov	r6, r0
 8004d64:	b118      	cbz	r0, 8004d6e <_putc_r+0x12>
 8004d66:	6983      	ldr	r3, [r0, #24]
 8004d68:	b90b      	cbnz	r3, 8004d6e <_putc_r+0x12>
 8004d6a:	f7ff fb83 	bl	8004474 <__sinit>
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <_putc_r+0x60>)
 8004d70:	429c      	cmp	r4, r3
 8004d72:	d112      	bne.n	8004d9a <_putc_r+0x3e>
 8004d74:	6874      	ldr	r4, [r6, #4]
 8004d76:	68a3      	ldr	r3, [r4, #8]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	60a3      	str	r3, [r4, #8]
 8004d7e:	da16      	bge.n	8004dae <_putc_r+0x52>
 8004d80:	69a2      	ldr	r2, [r4, #24]
 8004d82:	4293      	cmp	r3, r2
 8004d84:	db02      	blt.n	8004d8c <_putc_r+0x30>
 8004d86:	b2eb      	uxtb	r3, r5
 8004d88:	2b0a      	cmp	r3, #10
 8004d8a:	d110      	bne.n	8004dae <_putc_r+0x52>
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	4629      	mov	r1, r5
 8004d90:	4630      	mov	r0, r6
 8004d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d96:	f7ff b9bd 	b.w	8004114 <__swbuf_r>
 8004d9a:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <_putc_r+0x64>)
 8004d9c:	429c      	cmp	r4, r3
 8004d9e:	d101      	bne.n	8004da4 <_putc_r+0x48>
 8004da0:	68b4      	ldr	r4, [r6, #8]
 8004da2:	e7e8      	b.n	8004d76 <_putc_r+0x1a>
 8004da4:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <_putc_r+0x68>)
 8004da6:	429c      	cmp	r4, r3
 8004da8:	bf08      	it	eq
 8004daa:	68f4      	ldreq	r4, [r6, #12]
 8004dac:	e7e3      	b.n	8004d76 <_putc_r+0x1a>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	6022      	str	r2, [r4, #0]
 8004db4:	701d      	strb	r5, [r3, #0]
 8004db6:	b2e8      	uxtb	r0, r5
 8004db8:	bd70      	pop	{r4, r5, r6, pc}
 8004dba:	bf00      	nop
 8004dbc:	0800501c 	.word	0x0800501c
 8004dc0:	0800503c 	.word	0x0800503c
 8004dc4:	08004ffc 	.word	0x08004ffc

08004dc8 <_sbrk_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	4c06      	ldr	r4, [pc, #24]	; (8004de4 <_sbrk_r+0x1c>)
 8004dcc:	2300      	movs	r3, #0
 8004dce:	4605      	mov	r5, r0
 8004dd0:	4608      	mov	r0, r1
 8004dd2:	6023      	str	r3, [r4, #0]
 8004dd4:	f7fc f9f4 	bl	80011c0 <_sbrk>
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	d102      	bne.n	8004de2 <_sbrk_r+0x1a>
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	b103      	cbz	r3, 8004de2 <_sbrk_r+0x1a>
 8004de0:	602b      	str	r3, [r5, #0]
 8004de2:	bd38      	pop	{r3, r4, r5, pc}
 8004de4:	2000033c 	.word	0x2000033c

08004de8 <__sread>:
 8004de8:	b510      	push	{r4, lr}
 8004dea:	460c      	mov	r4, r1
 8004dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df0:	f000 f8a2 	bl	8004f38 <_read_r>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	bfab      	itete	ge
 8004df8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8004dfc:	181b      	addge	r3, r3, r0
 8004dfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e02:	bfac      	ite	ge
 8004e04:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e06:	81a3      	strhlt	r3, [r4, #12]
 8004e08:	bd10      	pop	{r4, pc}

08004e0a <__swrite>:
 8004e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e0e:	461f      	mov	r7, r3
 8004e10:	898b      	ldrh	r3, [r1, #12]
 8004e12:	05db      	lsls	r3, r3, #23
 8004e14:	4605      	mov	r5, r0
 8004e16:	460c      	mov	r4, r1
 8004e18:	4616      	mov	r6, r2
 8004e1a:	d505      	bpl.n	8004e28 <__swrite+0x1e>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e24:	f000 f874 	bl	8004f10 <_lseek_r>
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e32:	81a3      	strh	r3, [r4, #12]
 8004e34:	4632      	mov	r2, r6
 8004e36:	463b      	mov	r3, r7
 8004e38:	4628      	mov	r0, r5
 8004e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3e:	f000 b823 	b.w	8004e88 <_write_r>

08004e42 <__sseek>:
 8004e42:	b510      	push	{r4, lr}
 8004e44:	460c      	mov	r4, r1
 8004e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e4a:	f000 f861 	bl	8004f10 <_lseek_r>
 8004e4e:	1c43      	adds	r3, r0, #1
 8004e50:	89a3      	ldrh	r3, [r4, #12]
 8004e52:	bf15      	itete	ne
 8004e54:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e5e:	81a3      	strheq	r3, [r4, #12]
 8004e60:	bf18      	it	ne
 8004e62:	81a3      	strhne	r3, [r4, #12]
 8004e64:	bd10      	pop	{r4, pc}

08004e66 <__sclose>:
 8004e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e6a:	f000 b81f 	b.w	8004eac <_close_r>

08004e6e <__ascii_wctomb>:
 8004e6e:	b149      	cbz	r1, 8004e84 <__ascii_wctomb+0x16>
 8004e70:	2aff      	cmp	r2, #255	; 0xff
 8004e72:	bf85      	ittet	hi
 8004e74:	238a      	movhi	r3, #138	; 0x8a
 8004e76:	6003      	strhi	r3, [r0, #0]
 8004e78:	700a      	strbls	r2, [r1, #0]
 8004e7a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004e7e:	bf98      	it	ls
 8004e80:	2001      	movls	r0, #1
 8004e82:	4770      	bx	lr
 8004e84:	4608      	mov	r0, r1
 8004e86:	4770      	bx	lr

08004e88 <_write_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	4c07      	ldr	r4, [pc, #28]	; (8004ea8 <_write_r+0x20>)
 8004e8c:	4605      	mov	r5, r0
 8004e8e:	4608      	mov	r0, r1
 8004e90:	4611      	mov	r1, r2
 8004e92:	2200      	movs	r2, #0
 8004e94:	6022      	str	r2, [r4, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f7fb fb99 	bl	80005ce <_write>
 8004e9c:	1c43      	adds	r3, r0, #1
 8004e9e:	d102      	bne.n	8004ea6 <_write_r+0x1e>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	b103      	cbz	r3, 8004ea6 <_write_r+0x1e>
 8004ea4:	602b      	str	r3, [r5, #0]
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
 8004ea8:	2000033c 	.word	0x2000033c

08004eac <_close_r>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4c06      	ldr	r4, [pc, #24]	; (8004ec8 <_close_r+0x1c>)
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	4605      	mov	r5, r0
 8004eb4:	4608      	mov	r0, r1
 8004eb6:	6023      	str	r3, [r4, #0]
 8004eb8:	f7fc f94d 	bl	8001156 <_close>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	d102      	bne.n	8004ec6 <_close_r+0x1a>
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	b103      	cbz	r3, 8004ec6 <_close_r+0x1a>
 8004ec4:	602b      	str	r3, [r5, #0]
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
 8004ec8:	2000033c 	.word	0x2000033c

08004ecc <_fstat_r>:
 8004ecc:	b538      	push	{r3, r4, r5, lr}
 8004ece:	4c07      	ldr	r4, [pc, #28]	; (8004eec <_fstat_r+0x20>)
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	4608      	mov	r0, r1
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	f7fc f948 	bl	800116e <_fstat>
 8004ede:	1c43      	adds	r3, r0, #1
 8004ee0:	d102      	bne.n	8004ee8 <_fstat_r+0x1c>
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	b103      	cbz	r3, 8004ee8 <_fstat_r+0x1c>
 8004ee6:	602b      	str	r3, [r5, #0]
 8004ee8:	bd38      	pop	{r3, r4, r5, pc}
 8004eea:	bf00      	nop
 8004eec:	2000033c 	.word	0x2000033c

08004ef0 <_isatty_r>:
 8004ef0:	b538      	push	{r3, r4, r5, lr}
 8004ef2:	4c06      	ldr	r4, [pc, #24]	; (8004f0c <_isatty_r+0x1c>)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	4605      	mov	r5, r0
 8004ef8:	4608      	mov	r0, r1
 8004efa:	6023      	str	r3, [r4, #0]
 8004efc:	f7fc f947 	bl	800118e <_isatty>
 8004f00:	1c43      	adds	r3, r0, #1
 8004f02:	d102      	bne.n	8004f0a <_isatty_r+0x1a>
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	b103      	cbz	r3, 8004f0a <_isatty_r+0x1a>
 8004f08:	602b      	str	r3, [r5, #0]
 8004f0a:	bd38      	pop	{r3, r4, r5, pc}
 8004f0c:	2000033c 	.word	0x2000033c

08004f10 <_lseek_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	4c07      	ldr	r4, [pc, #28]	; (8004f30 <_lseek_r+0x20>)
 8004f14:	4605      	mov	r5, r0
 8004f16:	4608      	mov	r0, r1
 8004f18:	4611      	mov	r1, r2
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	6022      	str	r2, [r4, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f7fc f940 	bl	80011a4 <_lseek>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d102      	bne.n	8004f2e <_lseek_r+0x1e>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	b103      	cbz	r3, 8004f2e <_lseek_r+0x1e>
 8004f2c:	602b      	str	r3, [r5, #0]
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	2000033c 	.word	0x2000033c

08004f34 <__malloc_lock>:
 8004f34:	4770      	bx	lr

08004f36 <__malloc_unlock>:
 8004f36:	4770      	bx	lr

08004f38 <_read_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4c07      	ldr	r4, [pc, #28]	; (8004f58 <_read_r+0x20>)
 8004f3c:	4605      	mov	r5, r0
 8004f3e:	4608      	mov	r0, r1
 8004f40:	4611      	mov	r1, r2
 8004f42:	2200      	movs	r2, #0
 8004f44:	6022      	str	r2, [r4, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	f7fc f8e8 	bl	800111c <_read>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	d102      	bne.n	8004f56 <_read_r+0x1e>
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	b103      	cbz	r3, 8004f56 <_read_r+0x1e>
 8004f54:	602b      	str	r3, [r5, #0]
 8004f56:	bd38      	pop	{r3, r4, r5, pc}
 8004f58:	2000033c 	.word	0x2000033c

08004f5c <_init>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	bf00      	nop
 8004f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f62:	bc08      	pop	{r3}
 8004f64:	469e      	mov	lr, r3
 8004f66:	4770      	bx	lr

08004f68 <_fini>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	bf00      	nop
 8004f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6e:	bc08      	pop	{r3}
 8004f70:	469e      	mov	lr, r3
 8004f72:	4770      	bx	lr
