
Robo_v6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005168  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800552c  0800552c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800552c  0800552c  0001552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005534  08005534  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005534  08005534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800553c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000020c  08005748  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08005748  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdfe  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dcb  00000000  00000000  0002d03a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb0  00000000  00000000  0002ee08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  0002fab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021c21  00000000  00000000  00030680  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000904b  00000000  00000000  000522a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca706  00000000  00000000  0005b2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001259f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e7c  00000000  00000000  00125a70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052e0 	.word	0x080052e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	080052e0 	.word	0x080052e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d013      	beq.n	80005c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000598:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800059c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00b      	beq.n	80005c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	e000      	b.n	80005ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80005aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0f9      	beq.n	80005aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <_write>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len){ // do fprint
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b086      	sub	sp, #24
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	60f8      	str	r0, [r7, #12]
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
	int i=0;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++){
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	e009      	b.n	80005f8 <_write+0x2a>
		ITM_SendChar(*ptr++);
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	60ba      	str	r2, [r7, #8]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffc7 	bl	8000580 <ITM_SendChar>
	for(i=0; i<len; i++){
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dbf1      	blt.n	80005e4 <_write+0x16>

	}
	return len;
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	//HAL_Delay(10);
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8000616:	2101      	movs	r1, #1
 8000618:	4812      	ldr	r0, [pc, #72]	; (8000664 <HAL_GPIO_EXTI_Callback+0x58>)
 800061a:	f001 faf9 	bl	8001c10 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d105      	bne.n	8000630 <HAL_GPIO_EXTI_Callback+0x24>

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000624:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000628:	480f      	ldr	r0, [pc, #60]	; (8000668 <HAL_GPIO_EXTI_Callback+0x5c>)
 800062a:	f001 fb22 	bl	8001c72 <HAL_GPIO_TogglePin>
 800062e:	e00b      	b.n	8000648 <HAL_GPIO_EXTI_Callback+0x3c>
		//Duty-=1;
	//	if(Duty < 100){
	//		Duty = Duty + 1;
	//	}
	} else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET){
 8000630:	2102      	movs	r1, #2
 8000632:	480c      	ldr	r0, [pc, #48]	; (8000664 <HAL_GPIO_EXTI_Callback+0x58>)
 8000634:	f001 faec 	bl	8001c10 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d104      	bne.n	8000648 <HAL_GPIO_EXTI_Callback+0x3c>
	//	HAL_Delay(10);
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000644:	f001 fb15 	bl	8001c72 <HAL_GPIO_TogglePin>
	//		Duty = Duty - 1;
	//	}

	}

	for(int i=0; i<1000000; i++){
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e002      	b.n	8000654 <HAL_GPIO_EXTI_Callback+0x48>
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3301      	adds	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <HAL_GPIO_EXTI_Callback+0x60>)
 8000658:	4293      	cmp	r3, r2
 800065a:	ddf8      	ble.n	800064e <HAL_GPIO_EXTI_Callback+0x42>

	}

}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40020000 	.word	0x40020000
 8000668:	40020c00 	.word	0x40020c00
 800066c:	000f423f 	.word	0x000f423f

08000670 <process_pack_motor>:
	} else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
		Duty -= 10;
	}*/
	//HAL_Delay(5);
void process_pack_motor(){
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
	printf("process_motor\n");
 8000676:	486a      	ldr	r0, [pc, #424]	; (8000820 <process_pack_motor+0x1b0>)
 8000678:	f003 fe60 	bl	800433c <puts>
	char str_dir_right;
	char str_duty_left[5];
	char str_duty_right[5];

	//wypisanie całego pakietu
	for(int i=0; i<strlen(packet); i++){
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	e009      	b.n	8000696 <process_pack_motor+0x26>
		printf("%c",packet[i]);
 8000682:	4a68      	ldr	r2, [pc, #416]	; (8000824 <process_pack_motor+0x1b4>)
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fde6 	bl	800425c <putchar>
	for(int i=0; i<strlen(packet); i++){
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	3301      	adds	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	4863      	ldr	r0, [pc, #396]	; (8000824 <process_pack_motor+0x1b4>)
 8000698:	f7ff fd9a 	bl	80001d0 <strlen>
 800069c:	4602      	mov	r2, r0
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d8ee      	bhi.n	8000682 <process_pack_motor+0x12>
	}
	printf("\n");
 80006a4:	200a      	movs	r0, #10
 80006a6:	f003 fdd9 	bl	800425c <putchar>

	str_dir_left = packet[3];
 80006aa:	4b5e      	ldr	r3, [pc, #376]	; (8000824 <process_pack_motor+0x1b4>)
 80006ac:	78db      	ldrb	r3, [r3, #3]
 80006ae:	73fb      	strb	r3, [r7, #15]
	str_dir_right = packet[5];
 80006b0:	4b5c      	ldr	r3, [pc, #368]	; (8000824 <process_pack_motor+0x1b4>)
 80006b2:	795b      	ldrb	r3, [r3, #5]
 80006b4:	73bb      	strb	r3, [r7, #14]

	str_duty_left[0] = packet[7];
 80006b6:	4b5b      	ldr	r3, [pc, #364]	; (8000824 <process_pack_motor+0x1b4>)
 80006b8:	79db      	ldrb	r3, [r3, #7]
 80006ba:	723b      	strb	r3, [r7, #8]
	str_duty_left[1] = packet[8];
 80006bc:	4b59      	ldr	r3, [pc, #356]	; (8000824 <process_pack_motor+0x1b4>)
 80006be:	7a1b      	ldrb	r3, [r3, #8]
 80006c0:	727b      	strb	r3, [r7, #9]

	str_duty_right[0] = packet[10];
 80006c2:	4b58      	ldr	r3, [pc, #352]	; (8000824 <process_pack_motor+0x1b4>)
 80006c4:	7a9b      	ldrb	r3, [r3, #10]
 80006c6:	703b      	strb	r3, [r7, #0]
	str_duty_right[1] = packet[11];
 80006c8:	4b56      	ldr	r3, [pc, #344]	; (8000824 <process_pack_motor+0x1b4>)
 80006ca:	7adb      	ldrb	r3, [r3, #11]
 80006cc:	707b      	strb	r3, [r7, #1]
	//strncat(str_duty_right, &packet[10], 1);


	Duty_left = atoi(str_duty_left);
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fd74 	bl	80041c0 <atoi>
 80006d8:	4602      	mov	r2, r0
 80006da:	4b53      	ldr	r3, [pc, #332]	; (8000828 <process_pack_motor+0x1b8>)
 80006dc:	601a      	str	r2, [r3, #0]
	Duty_right = atoi(str_duty_right);
 80006de:	463b      	mov	r3, r7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fd6d 	bl	80041c0 <atoi>
 80006e6:	4602      	mov	r2, r0
 80006e8:	4b50      	ldr	r3, [pc, #320]	; (800082c <process_pack_motor+0x1bc>)
 80006ea:	601a      	str	r2, [r3, #0]
	dir_left = str_dir_left - '0';
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	3b30      	subs	r3, #48	; 0x30
 80006f0:	4a4f      	ldr	r2, [pc, #316]	; (8000830 <process_pack_motor+0x1c0>)
 80006f2:	6013      	str	r3, [r2, #0]
    dir_right = str_dir_right - '0';
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	3b30      	subs	r3, #48	; 0x30
 80006f8:	4a4e      	ldr	r2, [pc, #312]	; (8000834 <process_pack_motor+0x1c4>)
 80006fa:	6013      	str	r3, [r2, #0]
	}
	for(int i=0; i<2; i++){
		printf("dir-left - %c\n",str_duty_right[i]);
	}*/

	printf("dir-left - %d\n",dir_left);
 80006fc:	4b4c      	ldr	r3, [pc, #304]	; (8000830 <process_pack_motor+0x1c0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	484d      	ldr	r0, [pc, #308]	; (8000838 <process_pack_motor+0x1c8>)
 8000704:	f003 fd92 	bl	800422c <iprintf>
	printf("dir-right - %d\n",dir_right);
 8000708:	4b4a      	ldr	r3, [pc, #296]	; (8000834 <process_pack_motor+0x1c4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	484b      	ldr	r0, [pc, #300]	; (800083c <process_pack_motor+0x1cc>)
 8000710:	f003 fd8c 	bl	800422c <iprintf>
	printf("duty-left - %d\n",Duty_left);
 8000714:	4b44      	ldr	r3, [pc, #272]	; (8000828 <process_pack_motor+0x1b8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	4849      	ldr	r0, [pc, #292]	; (8000840 <process_pack_motor+0x1d0>)
 800071c:	f003 fd86 	bl	800422c <iprintf>
	printf("duty-right - %d\n",Duty_right);
 8000720:	4b42      	ldr	r3, [pc, #264]	; (800082c <process_pack_motor+0x1bc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	4847      	ldr	r0, [pc, #284]	; (8000844 <process_pack_motor+0x1d4>)
 8000728:	f003 fd80 	bl	800422c <iprintf>


	if(dir_left == 1){
 800072c:	4b40      	ldr	r3, [pc, #256]	; (8000830 <process_pack_motor+0x1c0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d10c      	bne.n	800074e <process_pack_motor+0xde>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073a:	4843      	ldr	r0, [pc, #268]	; (8000848 <process_pack_motor+0x1d8>)
 800073c:	f001 fa80 	bl	8001c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000746:	4840      	ldr	r0, [pc, #256]	; (8000848 <process_pack_motor+0x1d8>)
 8000748:	f001 fa7a 	bl	8001c40 <HAL_GPIO_WritePin>
 800074c:	e020      	b.n	8000790 <process_pack_motor+0x120>
	} else if(dir_left == 0){
 800074e:	4b38      	ldr	r3, [pc, #224]	; (8000830 <process_pack_motor+0x1c0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d10c      	bne.n	8000770 <process_pack_motor+0x100>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075c:	483a      	ldr	r0, [pc, #232]	; (8000848 <process_pack_motor+0x1d8>)
 800075e:	f001 fa6f 	bl	8001c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000768:	4837      	ldr	r0, [pc, #220]	; (8000848 <process_pack_motor+0x1d8>)
 800076a:	f001 fa69 	bl	8001c40 <HAL_GPIO_WritePin>
 800076e:	e00f      	b.n	8000790 <process_pack_motor+0x120>
	} else if(dir_left == 2){
 8000770:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <process_pack_motor+0x1c0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b02      	cmp	r3, #2
 8000776:	d10b      	bne.n	8000790 <process_pack_motor+0x120>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800077e:	4832      	ldr	r0, [pc, #200]	; (8000848 <process_pack_motor+0x1d8>)
 8000780:	f001 fa5e 	bl	8001c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078a:	482f      	ldr	r0, [pc, #188]	; (8000848 <process_pack_motor+0x1d8>)
 800078c:	f001 fa58 	bl	8001c40 <HAL_GPIO_WritePin>
	}

	if(dir_right == 1){
 8000790:	4b28      	ldr	r3, [pc, #160]	; (8000834 <process_pack_motor+0x1c4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d10c      	bne.n	80007b2 <process_pack_motor+0x142>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079e:	482a      	ldr	r0, [pc, #168]	; (8000848 <process_pack_motor+0x1d8>)
 80007a0:	f001 fa4e 	bl	8001c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007aa:	4827      	ldr	r0, [pc, #156]	; (8000848 <process_pack_motor+0x1d8>)
 80007ac:	f001 fa48 	bl	8001c40 <HAL_GPIO_WritePin>
 80007b0:	e020      	b.n	80007f4 <process_pack_motor+0x184>
	} else if(dir_right == 0){
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <process_pack_motor+0x1c4>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d10c      	bne.n	80007d4 <process_pack_motor+0x164>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c0:	4821      	ldr	r0, [pc, #132]	; (8000848 <process_pack_motor+0x1d8>)
 80007c2:	f001 fa3d 	bl	8001c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007cc:	481e      	ldr	r0, [pc, #120]	; (8000848 <process_pack_motor+0x1d8>)
 80007ce:	f001 fa37 	bl	8001c40 <HAL_GPIO_WritePin>
 80007d2:	e00f      	b.n	80007f4 <process_pack_motor+0x184>
	} else if(dir_right == 2){
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <process_pack_motor+0x1c4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d10b      	bne.n	80007f4 <process_pack_motor+0x184>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e2:	4819      	ldr	r0, [pc, #100]	; (8000848 <process_pack_motor+0x1d8>)
 80007e4:	f001 fa2c 	bl	8001c40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ee:	4816      	ldr	r0, [pc, #88]	; (8000848 <process_pack_motor+0x1d8>)
 80007f0:	f001 fa26 	bl	8001c40 <HAL_GPIO_WritePin>





	for(int i=0; i<strlen(packet); i++){
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	e007      	b.n	800080a <process_pack_motor+0x19a>
		packet[i]='\0';
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <process_pack_motor+0x1b4>)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<strlen(packet); i++){
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	3301      	adds	r3, #1
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4806      	ldr	r0, [pc, #24]	; (8000824 <process_pack_motor+0x1b4>)
 800080c:	f7ff fce0 	bl	80001d0 <strlen>
 8000810:	4602      	mov	r2, r0
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d8f0      	bhi.n	80007fa <process_pack_motor+0x18a>
	}

}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	080052f8 	.word	0x080052f8
 8000824:	2000023c 	.word	0x2000023c
 8000828:	2000032c 	.word	0x2000032c
 800082c:	20000334 	.word	0x20000334
 8000830:	200002e0 	.word	0x200002e0
 8000834:	20000328 	.word	0x20000328
 8000838:	08005308 	.word	0x08005308
 800083c:	08005318 	.word	0x08005318
 8000840:	08005328 	.word	0x08005328
 8000844:	08005338 	.word	0x08005338
 8000848:	40020c00 	.word	0x40020c00

0800084c <process_pack_led>:

void process_pack_led(){
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

	printf("read led: ");
 8000850:	486a      	ldr	r0, [pc, #424]	; (80009fc <process_pack_led+0x1b0>)
 8000852:	f003 fceb 	bl	800422c <iprintf>
	printf("%c",packet[3]);
 8000856:	4b6a      	ldr	r3, [pc, #424]	; (8000a00 <process_pack_led+0x1b4>)
 8000858:	78db      	ldrb	r3, [r3, #3]
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fcfe 	bl	800425c <putchar>
	if(packet[3] == '0'){
 8000860:	4b67      	ldr	r3, [pc, #412]	; (8000a00 <process_pack_led+0x1b4>)
 8000862:	78db      	ldrb	r3, [r3, #3]
 8000864:	2b30      	cmp	r3, #48	; 0x30
 8000866:	d124      	bne.n	80008b2 <process_pack_led+0x66>
		// front leds
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086e:	4865      	ldr	r0, [pc, #404]	; (8000a04 <process_pack_led+0x1b8>)
 8000870:	f001 f9e6 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	4863      	ldr	r0, [pc, #396]	; (8000a08 <process_pack_led+0x1bc>)
 800087c:	f001 f9e0 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000886:	4860      	ldr	r0, [pc, #384]	; (8000a08 <process_pack_led+0x1bc>)
 8000888:	f001 f9da 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000892:	485c      	ldr	r0, [pc, #368]	; (8000a04 <process_pack_led+0x1b8>)
 8000894:	f001 f9d4 	bl	8001c40 <HAL_GPIO_WritePin>

		//back leds
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800089e:	485a      	ldr	r0, [pc, #360]	; (8000a08 <process_pack_led+0x1bc>)
 80008a0:	f001 f9ce 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008aa:	4856      	ldr	r0, [pc, #344]	; (8000a04 <process_pack_led+0x1b8>)
 80008ac:	f001 f9c8 	bl	8001c40 <HAL_GPIO_WritePin>
		//back leds
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);

	}
}
 80008b0:	e0a2      	b.n	80009f8 <process_pack_led+0x1ac>
	} else if(packet[3] == '1'){
 80008b2:	4b53      	ldr	r3, [pc, #332]	; (8000a00 <process_pack_led+0x1b4>)
 80008b4:	78db      	ldrb	r3, [r3, #3]
 80008b6:	2b31      	cmp	r3, #49	; 0x31
 80008b8:	d124      	bne.n	8000904 <process_pack_led+0xb8>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c0:	4850      	ldr	r0, [pc, #320]	; (8000a04 <process_pack_led+0x1b8>)
 80008c2:	f001 f9bd 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008cc:	484e      	ldr	r0, [pc, #312]	; (8000a08 <process_pack_led+0x1bc>)
 80008ce:	f001 f9b7 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d8:	484b      	ldr	r0, [pc, #300]	; (8000a08 <process_pack_led+0x1bc>)
 80008da:	f001 f9b1 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008e4:	4847      	ldr	r0, [pc, #284]	; (8000a04 <process_pack_led+0x1b8>)
 80008e6:	f001 f9ab 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f0:	4845      	ldr	r0, [pc, #276]	; (8000a08 <process_pack_led+0x1bc>)
 80008f2:	f001 f9a5 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fc:	4841      	ldr	r0, [pc, #260]	; (8000a04 <process_pack_led+0x1b8>)
 80008fe:	f001 f99f 	bl	8001c40 <HAL_GPIO_WritePin>
}
 8000902:	e079      	b.n	80009f8 <process_pack_led+0x1ac>
	} else if(packet[3] == '2'){
 8000904:	4b3e      	ldr	r3, [pc, #248]	; (8000a00 <process_pack_led+0x1b4>)
 8000906:	78db      	ldrb	r3, [r3, #3]
 8000908:	2b32      	cmp	r3, #50	; 0x32
 800090a:	d124      	bne.n	8000956 <process_pack_led+0x10a>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000912:	483c      	ldr	r0, [pc, #240]	; (8000a04 <process_pack_led+0x1b8>)
 8000914:	f001 f994 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091e:	483a      	ldr	r0, [pc, #232]	; (8000a08 <process_pack_led+0x1bc>)
 8000920:	f001 f98e 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 7100 	mov.w	r1, #512	; 0x200
 800092a:	4837      	ldr	r0, [pc, #220]	; (8000a08 <process_pack_led+0x1bc>)
 800092c:	f001 f988 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000936:	4833      	ldr	r0, [pc, #204]	; (8000a04 <process_pack_led+0x1b8>)
 8000938:	f001 f982 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000942:	4831      	ldr	r0, [pc, #196]	; (8000a08 <process_pack_led+0x1bc>)
 8000944:	f001 f97c 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094e:	482d      	ldr	r0, [pc, #180]	; (8000a04 <process_pack_led+0x1b8>)
 8000950:	f001 f976 	bl	8001c40 <HAL_GPIO_WritePin>
}
 8000954:	e050      	b.n	80009f8 <process_pack_led+0x1ac>
	} else if(packet[3] == '3'){
 8000956:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <process_pack_led+0x1b4>)
 8000958:	78db      	ldrb	r3, [r3, #3]
 800095a:	2b33      	cmp	r3, #51	; 0x33
 800095c:	d124      	bne.n	80009a8 <process_pack_led+0x15c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000964:	4827      	ldr	r0, [pc, #156]	; (8000a04 <process_pack_led+0x1b8>)
 8000966:	f001 f96b 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000970:	4825      	ldr	r0, [pc, #148]	; (8000a08 <process_pack_led+0x1bc>)
 8000972:	f001 f965 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800097c:	4822      	ldr	r0, [pc, #136]	; (8000a08 <process_pack_led+0x1bc>)
 800097e:	f001 f95f 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000988:	481e      	ldr	r0, [pc, #120]	; (8000a04 <process_pack_led+0x1b8>)
 800098a:	f001 f959 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000994:	481c      	ldr	r0, [pc, #112]	; (8000a08 <process_pack_led+0x1bc>)
 8000996:	f001 f953 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800099a:	2201      	movs	r2, #1
 800099c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a0:	4818      	ldr	r0, [pc, #96]	; (8000a04 <process_pack_led+0x1b8>)
 80009a2:	f001 f94d 	bl	8001c40 <HAL_GPIO_WritePin>
}
 80009a6:	e027      	b.n	80009f8 <process_pack_led+0x1ac>
	} else if(packet[3] == '4'){
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <process_pack_led+0x1b4>)
 80009aa:	78db      	ldrb	r3, [r3, #3]
 80009ac:	2b34      	cmp	r3, #52	; 0x34
 80009ae:	d123      	bne.n	80009f8 <process_pack_led+0x1ac>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b6:	4813      	ldr	r0, [pc, #76]	; (8000a04 <process_pack_led+0x1b8>)
 80009b8:	f001 f942 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c2:	4811      	ldr	r0, [pc, #68]	; (8000a08 <process_pack_led+0x1bc>)
 80009c4:	f001 f93c 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ce:	480e      	ldr	r0, [pc, #56]	; (8000a08 <process_pack_led+0x1bc>)
 80009d0:	f001 f936 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <process_pack_led+0x1b8>)
 80009dc:	f001 f930 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e6:	4808      	ldr	r0, [pc, #32]	; (8000a08 <process_pack_led+0x1bc>)
 80009e8:	f001 f92a 	bl	8001c40 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009f2:	4804      	ldr	r0, [pc, #16]	; (8000a04 <process_pack_led+0x1b8>)
 80009f4:	f001 f924 	bl	8001c40 <HAL_GPIO_WritePin>
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	0800534c 	.word	0x0800534c
 8000a00:	2000023c 	.word	0x2000023c
 8000a04:	40020000 	.word	0x40020000
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <read_pack>:

void read_pack(char mark){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]

	printf("read: ");
 8000a16:	4821      	ldr	r0, [pc, #132]	; (8000a9c <read_pack+0x90>)
 8000a18:	f003 fc08 	bl	800422c <iprintf>
	//printf("%c",mark);
	strncat(packet, &mark, 1);
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4619      	mov	r1, r3
 8000a22:	481f      	ldr	r0, [pc, #124]	; (8000aa0 <read_pack+0x94>)
 8000a24:	f003 fc92 	bl	800434c <strncat>

	if(mark == ';'){
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	2b3b      	cmp	r3, #59	; 0x3b
 8000a2c:	d132      	bne.n	8000a94 <read_pack+0x88>
		for(int i=0; i<strlen(packet); i++){
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	e009      	b.n	8000a48 <read_pack+0x3c>
			printf("%c",packet[i]);
 8000a34:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <read_pack+0x94>)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4413      	add	r3, r2
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f003 fc0d 	bl	800425c <putchar>
		for(int i=0; i<strlen(packet); i++){
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	3301      	adds	r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4815      	ldr	r0, [pc, #84]	; (8000aa0 <read_pack+0x94>)
 8000a4a:	f7ff fbc1 	bl	80001d0 <strlen>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d8ee      	bhi.n	8000a34 <read_pack+0x28>
		}

		if(packet[1] == '0'){
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <read_pack+0x94>)
 8000a58:	785b      	ldrb	r3, [r3, #1]
 8000a5a:	2b30      	cmp	r3, #48	; 0x30
 8000a5c:	d102      	bne.n	8000a64 <read_pack+0x58>
			process_pack_motor();
 8000a5e:	f7ff fe07 	bl	8000670 <process_pack_motor>
 8000a62:	e005      	b.n	8000a70 <read_pack+0x64>
		} else if(packet[1] == '1'){
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <read_pack+0x94>)
 8000a66:	785b      	ldrb	r3, [r3, #1]
 8000a68:	2b31      	cmp	r3, #49	; 0x31
 8000a6a:	d101      	bne.n	8000a70 <read_pack+0x64>
			process_pack_led();
 8000a6c:	f7ff feee 	bl	800084c <process_pack_led>
		}

		for(int i=0; i<strlen(packet); i++){
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	e007      	b.n	8000a86 <read_pack+0x7a>
			packet[i]='\0';
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <read_pack+0x94>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<strlen(packet); i++){
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	3301      	adds	r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <read_pack+0x94>)
 8000a88:	f7ff fba2 	bl	80001d0 <strlen>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d8f0      	bhi.n	8000a76 <read_pack+0x6a>
			printf("%c",mark);
		}
	}*/


}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	08005358 	.word	0x08005358
 8000aa0:	2000023c 	.word	0x2000023c

08000aa4 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

	 TIM3->CCR1 = Duty_left;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ab2:	635a      	str	r2, [r3, #52]	; 0x34
	 TIM3->CCR2 = Duty_right;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000aba:	639a      	str	r2, [r3, #56]	; 0x38
	// HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);

}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	2000032c 	.word	0x2000032c
 8000acc:	40000400 	.word	0x40000400
 8000ad0:	20000334 	.word	0x20000334

08000ad4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	//printf("RX");
	if(huart->Instance == USART3){
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a22      	ldr	r2, [pc, #136]	; (8000b6c <HAL_UART_RxCpltCallback+0x98>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d13d      	bne.n	8000b62 <HAL_UART_RxCpltCallback+0x8e>
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
		printf("%c", receiveUART[0]);
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <HAL_UART_RxCpltCallback+0x9c>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 fbb6 	bl	800425c <putchar>
		//printf("\n");
		//printf(" \n");

		if(receiveUART[0] == ':'){
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <HAL_UART_RxCpltCallback+0x9c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b3a      	cmp	r3, #58	; 0x3a
 8000af6:	d102      	bne.n	8000afe <HAL_UART_RxCpltCallback+0x2a>
			read_bool=1;
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <HAL_UART_RxCpltCallback+0xa0>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
		}

		if(receiveUART[0] == ';'){
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <HAL_UART_RxCpltCallback+0x9c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b3b      	cmp	r3, #59	; 0x3b
 8000b04:	d112      	bne.n	8000b2c <HAL_UART_RxCpltCallback+0x58>
			read_bool=0;
 8000b06:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <HAL_UART_RxCpltCallback+0xa0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
			printf("[");
 8000b0c:	205b      	movs	r0, #91	; 0x5b
 8000b0e:	f003 fba5 	bl	800425c <putchar>
			printf("%c", receiveUART[0]);
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_UART_RxCpltCallback+0x9c>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 fba0 	bl	800425c <putchar>
			printf("]");
 8000b1c:	205d      	movs	r0, #93	; 0x5d
 8000b1e:	f003 fb9d 	bl	800425c <putchar>
			read_pack(receiveUART[0]);
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <HAL_UART_RxCpltCallback+0x9c>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff70 	bl	8000a0c <read_pack>

		}

		if(read_bool == 1){
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_UART_RxCpltCallback+0xa0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d10f      	bne.n	8000b54 <HAL_UART_RxCpltCallback+0x80>
			printf("[");
 8000b34:	205b      	movs	r0, #91	; 0x5b
 8000b36:	f003 fb91 	bl	800425c <putchar>
			printf("%c", receiveUART[0]);
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_UART_RxCpltCallback+0x9c>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fb8c 	bl	800425c <putchar>
			printf("]");
 8000b44:	205d      	movs	r0, #93	; 0x5d
 8000b46:	f003 fb89 	bl	800425c <putchar>
			read_pack(receiveUART[0]);
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_UART_RxCpltCallback+0x9c>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ff5c 	bl	8000a0c <read_pack>
	    	//printf("%u", receiveUART[0]);

		}
		//HAL_Delay(100);
		HAL_UART_Receive_IT(&huart3, receiveUART, sizeReceiveUART);
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_UART_RxCpltCallback+0xa4>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4905      	ldr	r1, [pc, #20]	; (8000b70 <HAL_UART_RxCpltCallback+0x9c>)
 8000b5c:	4807      	ldr	r0, [pc, #28]	; (8000b7c <HAL_UART_RxCpltCallback+0xa8>)
 8000b5e:	f002 fd27 	bl	80035b0 <HAL_UART_Receive_IT>

	}
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40004800 	.word	0x40004800
 8000b70:	20000330 	.word	0x20000330
 8000b74:	20000228 	.word	0x20000228
 8000b78:	2000002e 	.word	0x2000002e
 8000b7c:	200002a0 	.word	0x200002a0

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b84:	f000 fce2 	bl	800154c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b88:	f000 f89e 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8c:	f000 f9b8 	bl	8000f00 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b90:	f000 f98c 	bl	8000eac <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000b94:	f000 f908 	bl	8000da8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //ITM_SendChar( 65 );
  Duty_left = 0;
 8000b98:	4b3c      	ldr	r3, [pc, #240]	; (8000c8c <main+0x10c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
  Duty_right = 0;
 8000b9e:	4b3c      	ldr	r3, [pc, #240]	; (8000c90 <main+0x110>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000baa:	483a      	ldr	r0, [pc, #232]	; (8000c94 <main+0x114>)
 8000bac:	f001 f848 	bl	8001c40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb6:	4837      	ldr	r0, [pc, #220]	; (8000c94 <main+0x114>)
 8000bb8:	f001 f842 	bl	8001c40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc2:	4834      	ldr	r0, [pc, #208]	; (8000c94 <main+0x114>)
 8000bc4:	f001 f83c 	bl	8001c40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bce:	4831      	ldr	r0, [pc, #196]	; (8000c94 <main+0x114>)
 8000bd0:	f001 f836 	bl	8001c40 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bda:	482e      	ldr	r0, [pc, #184]	; (8000c94 <main+0x114>)
 8000bdc:	f001 f830 	bl	8001c40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be6:	482c      	ldr	r0, [pc, #176]	; (8000c98 <main+0x118>)
 8000be8:	f001 f82a 	bl	8001c40 <HAL_GPIO_WritePin>





  HAL_TIM_Base_Start_IT(&htim3);
 8000bec:	482b      	ldr	r0, [pc, #172]	; (8000c9c <main+0x11c>)
 8000bee:	f001 fd68 	bl	80026c2 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4829      	ldr	r0, [pc, #164]	; (8000c9c <main+0x11c>)
 8000bf6:	f001 fdbd 	bl	8002774 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	4827      	ldr	r0, [pc, #156]	; (8000c9c <main+0x11c>)
 8000bfe:	f001 fdb9 	bl	8002774 <HAL_TIM_PWM_Start>
 // TIM4->CCR1 = Duty;
 // TIM4->CCR2 = Duty;

 // HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);

  HAL_UART_Receive_IT(&huart3, receiveUART, sizeReceiveUART);
 8000c02:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <main+0x120>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	4926      	ldr	r1, [pc, #152]	; (8000ca4 <main+0x124>)
 8000c0a:	4827      	ldr	r0, [pc, #156]	; (8000ca8 <main+0x128>)
 8000c0c:	f002 fcd0 	bl	80035b0 <HAL_UART_Receive_IT>
  //HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);
 // printf("%u",sendUART[0]);
  printf("CONSOLE GOOD \n");
 8000c10:	4826      	ldr	r0, [pc, #152]	; (8000cac <main+0x12c>)
 8000c12:	f003 fb93 	bl	800433c <puts>
 // HAL_Delay(300);
 // HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c1c:	481e      	ldr	r0, [pc, #120]	; (8000c98 <main+0x118>)
 8000c1e:	f001 f80f 	bl	8001c40 <HAL_GPIO_WritePin>
  HAL_UART_Transmit_IT(&huart3, sendUART, sizeSendUART);
 8000c22:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <main+0x130>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	4922      	ldr	r1, [pc, #136]	; (8000cb4 <main+0x134>)
 8000c2a:	481f      	ldr	r0, [pc, #124]	; (8000ca8 <main+0x128>)
 8000c2c:	f002 fc7b 	bl	8003526 <HAL_UART_Transmit_IT>
  HAL_Delay(6000);
 8000c30:	f241 7070 	movw	r0, #6000	; 0x1770
 8000c34:	f000 fcfc 	bl	8001630 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart3, s_mux_1, size_s_mux_1);
 8000c38:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <main+0x138>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	491f      	ldr	r1, [pc, #124]	; (8000cbc <main+0x13c>)
 8000c40:	4819      	ldr	r0, [pc, #100]	; (8000ca8 <main+0x128>)
 8000c42:	f002 fc70 	bl	8003526 <HAL_UART_Transmit_IT>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4c:	4811      	ldr	r0, [pc, #68]	; (8000c94 <main+0x114>)
 8000c4e:	f000 fff7 	bl	8001c40 <HAL_GPIO_WritePin>
  HAL_Delay(6000);
 8000c52:	f241 7070 	movw	r0, #6000	; 0x1770
 8000c56:	f000 fceb 	bl	8001630 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <main+0x114>)
 8000c62:	f000 ffed 	bl	8001c40 <HAL_GPIO_WritePin>
  HAL_UART_Transmit_IT(&huart3, s_serv_1, size_s_serv_1);
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <main+0x140>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4915      	ldr	r1, [pc, #84]	; (8000cc4 <main+0x144>)
 8000c6e:	480e      	ldr	r0, [pc, #56]	; (8000ca8 <main+0x128>)
 8000c70:	f002 fc59 	bl	8003526 <HAL_UART_Transmit_IT>
  HAL_Delay(6000);
 8000c74:	f241 7070 	movw	r0, #6000	; 0x1770
 8000c78:	f000 fcda 	bl	8001630 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <main+0x118>)
 8000c84:	f000 ffdc 	bl	8001c40 <HAL_GPIO_WritePin>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <main+0x108>
 8000c8a:	bf00      	nop
 8000c8c:	2000032c 	.word	0x2000032c
 8000c90:	20000334 	.word	0x20000334
 8000c94:	40020c00 	.word	0x40020c00
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	200002e8 	.word	0x200002e8
 8000ca0:	2000002e 	.word	0x2000002e
 8000ca4:	20000330 	.word	0x20000330
 8000ca8:	200002a0 	.word	0x200002a0
 8000cac:	08005360 	.word	0x08005360
 8000cb0:	20000004 	.word	0x20000004
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000006 	.word	0x20000006
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000016 	.word	0x20000016
 8000cc4:	20000018 	.word	0x20000018

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b094      	sub	sp, #80	; 0x50
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 0320 	add.w	r3, r7, #32
 8000cd2:	2230      	movs	r2, #48	; 0x30
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f003 faa0 	bl	800421c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <SystemClock_Config+0xd8>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	4a2a      	ldr	r2, [pc, #168]	; (8000da0 <SystemClock_Config+0xd8>)
 8000cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfc:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <SystemClock_Config+0xd8>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <SystemClock_Config+0xdc>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a24      	ldr	r2, [pc, #144]	; (8000da4 <SystemClock_Config+0xdc>)
 8000d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <SystemClock_Config+0xdc>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d24:	2301      	movs	r3, #1
 8000d26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d3c:	23a8      	movs	r3, #168	; 0xa8
 8000d3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d40:	2302      	movs	r3, #2
 8000d42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d44:	2304      	movs	r3, #4
 8000d46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d48:	f107 0320 	add.w	r3, r7, #32
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 ffc3 	bl	8001cd8 <HAL_RCC_OscConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d58:	f000 fa00 	bl	800115c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d60:	2302      	movs	r3, #2
 8000d62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2105      	movs	r1, #5
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 fa1c 	bl	80021b8 <HAL_RCC_ClockConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d86:	f000 f9e9 	bl	800115c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8000d8a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d8e:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8000d92:	2000      	movs	r0, #0
 8000d94:	f001 faf6 	bl	8002384 <HAL_RCC_MCOConfig>
}
 8000d98:	bf00      	nop
 8000d9a:	3750      	adds	r7, #80	; 0x50
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40007000 	.word	0x40007000

08000da8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08e      	sub	sp, #56	; 0x38
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	f107 0320 	add.w	r3, r7, #32
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
 8000dd4:	615a      	str	r2, [r3, #20]
 8000dd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dd8:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <MX_TIM3_Init+0xfc>)
 8000dda:	4a33      	ldr	r2, [pc, #204]	; (8000ea8 <MX_TIM3_Init+0x100>)
 8000ddc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4999;
 8000dde:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <MX_TIM3_Init+0xfc>)
 8000de0:	f241 3287 	movw	r2, #4999	; 0x1387
 8000de4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de6:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <MX_TIM3_Init+0xfc>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000dec:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <MX_TIM3_Init+0xfc>)
 8000dee:	2263      	movs	r2, #99	; 0x63
 8000df0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df2:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <MX_TIM3_Init+0xfc>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df8:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <MX_TIM3_Init+0xfc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dfe:	4829      	ldr	r0, [pc, #164]	; (8000ea4 <MX_TIM3_Init+0xfc>)
 8000e00:	f001 fc34 	bl	800266c <HAL_TIM_Base_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e0a:	f000 f9a7 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4822      	ldr	r0, [pc, #136]	; (8000ea4 <MX_TIM3_Init+0xfc>)
 8000e1c:	f001 feb6 	bl	8002b8c <HAL_TIM_ConfigClockSource>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e26:	f000 f999 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e2a:	481e      	ldr	r0, [pc, #120]	; (8000ea4 <MX_TIM3_Init+0xfc>)
 8000e2c:	f001 fc6d 	bl	800270a <HAL_TIM_PWM_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e36:	f000 f991 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e42:	f107 0320 	add.w	r3, r7, #32
 8000e46:	4619      	mov	r1, r3
 8000e48:	4816      	ldr	r0, [pc, #88]	; (8000ea4 <MX_TIM3_Init+0xfc>)
 8000e4a:	f002 fa8f 	bl	800336c <HAL_TIMEx_MasterConfigSynchronization>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e54:	f000 f982 	bl	800115c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e58:	2360      	movs	r3, #96	; 0x60
 8000e5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_TIM3_Init+0xfc>)
 8000e70:	f001 fdc6 	bl	8002a00 <HAL_TIM_PWM_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e7a:	f000 f96f 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2204      	movs	r2, #4
 8000e82:	4619      	mov	r1, r3
 8000e84:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <MX_TIM3_Init+0xfc>)
 8000e86:	f001 fdbb 	bl	8002a00 <HAL_TIM_PWM_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000e90:	f000 f964 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e94:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <MX_TIM3_Init+0xfc>)
 8000e96:	f000 f9b9 	bl	800120c <HAL_TIM_MspPostInit>

}
 8000e9a:	bf00      	nop
 8000e9c:	3738      	adds	r7, #56	; 0x38
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200002e8 	.word	0x200002e8
 8000ea8:	40000400 	.word	0x40000400

08000eac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <MX_USART3_UART_Init+0x50>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_USART3_UART_Init+0x4c>)
 8000ee4:	f002 fad2 	bl	800348c <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000eee:	f000 f935 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200002a0 	.word	0x200002a0
 8000efc:	40004800 	.word	0x40004800

08000f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	; 0x30
 8000f04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	4b89      	ldr	r3, [pc, #548]	; (8001140 <MX_GPIO_Init+0x240>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a88      	ldr	r2, [pc, #544]	; (8001140 <MX_GPIO_Init+0x240>)
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b86      	ldr	r3, [pc, #536]	; (8001140 <MX_GPIO_Init+0x240>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	4b82      	ldr	r3, [pc, #520]	; (8001140 <MX_GPIO_Init+0x240>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a81      	ldr	r2, [pc, #516]	; (8001140 <MX_GPIO_Init+0x240>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b7f      	ldr	r3, [pc, #508]	; (8001140 <MX_GPIO_Init+0x240>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b7b      	ldr	r3, [pc, #492]	; (8001140 <MX_GPIO_Init+0x240>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a7a      	ldr	r2, [pc, #488]	; (8001140 <MX_GPIO_Init+0x240>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b78      	ldr	r3, [pc, #480]	; (8001140 <MX_GPIO_Init+0x240>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b74      	ldr	r3, [pc, #464]	; (8001140 <MX_GPIO_Init+0x240>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a73      	ldr	r2, [pc, #460]	; (8001140 <MX_GPIO_Init+0x240>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b71      	ldr	r3, [pc, #452]	; (8001140 <MX_GPIO_Init+0x240>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b6d      	ldr	r3, [pc, #436]	; (8001140 <MX_GPIO_Init+0x240>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a6c      	ldr	r2, [pc, #432]	; (8001140 <MX_GPIO_Init+0x240>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b6a      	ldr	r3, [pc, #424]	; (8001140 <MX_GPIO_Init+0x240>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b66      	ldr	r3, [pc, #408]	; (8001140 <MX_GPIO_Init+0x240>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a65      	ldr	r2, [pc, #404]	; (8001140 <MX_GPIO_Init+0x240>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b63      	ldr	r3, [pc, #396]	; (8001140 <MX_GPIO_Init+0x240>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000fc4:	485f      	ldr	r0, [pc, #380]	; (8001144 <MX_GPIO_Init+0x244>)
 8000fc6:	f000 fe3b 	bl	8001c40 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 4106 	mov.w	r1, #34304	; 0x8600
 8000fd0:	485d      	ldr	r0, [pc, #372]	; (8001148 <MX_GPIO_Init+0x248>)
 8000fd2:	f000 fe35 	bl	8001c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000fd6:	2370      	movs	r3, #112	; 0x70
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000fe6:	230d      	movs	r3, #13
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4856      	ldr	r0, [pc, #344]	; (800114c <MX_GPIO_Init+0x24c>)
 8000ff2:	f000 fc73 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffa:	4b55      	ldr	r3, [pc, #340]	; (8001150 <MX_GPIO_Init+0x250>)
 8000ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ffe:	2302      	movs	r3, #2
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	484f      	ldr	r0, [pc, #316]	; (8001148 <MX_GPIO_Init+0x248>)
 800100a:	f000 fc67 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800100e:	2304      	movs	r3, #4
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001012:	4b4f      	ldr	r3, [pc, #316]	; (8001150 <MX_GPIO_Init+0x250>)
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4849      	ldr	r0, [pc, #292]	; (8001148 <MX_GPIO_Init+0x248>)
 8001022:	f000 fc5b 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001026:	2350      	movs	r3, #80	; 0x50
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001036:	230d      	movs	r3, #13
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4841      	ldr	r0, [pc, #260]	; (8001148 <MX_GPIO_Init+0x248>)
 8001042:	f000 fc4b 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001046:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800104a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4839      	ldr	r0, [pc, #228]	; (8001144 <MX_GPIO_Init+0x244>)
 8001060:	f000 fc3c 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001064:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001076:	230d      	movs	r3, #13
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	4834      	ldr	r0, [pc, #208]	; (8001154 <MX_GPIO_Init+0x254>)
 8001082:	f000 fc2b 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	4829      	ldr	r0, [pc, #164]	; (8001148 <MX_GPIO_Init+0x248>)
 80010a4:	f000 fc1a 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 80010a8:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	4821      	ldr	r0, [pc, #132]	; (8001148 <MX_GPIO_Init+0x248>)
 80010c2:	f000 fc0b 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c6:	23c0      	movs	r3, #192	; 0xc0
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010d6:	230d      	movs	r3, #13
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	481d      	ldr	r0, [pc, #116]	; (8001158 <MX_GPIO_Init+0x258>)
 80010e2:	f000 fbfb 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ec:	2312      	movs	r3, #18
 80010ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f8:	2304      	movs	r3, #4
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4815      	ldr	r0, [pc, #84]	; (8001158 <MX_GPIO_Init+0x258>)
 8001104:	f000 fbea 	bl	80018dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2006      	movs	r0, #6
 800110e:	f000 fb8c 	bl	800182a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001112:	2006      	movs	r0, #6
 8001114:	f000 fba5 	bl	8001862 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2100      	movs	r1, #0
 800111c:	2007      	movs	r0, #7
 800111e:	f000 fb84 	bl	800182a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001122:	2007      	movs	r0, #7
 8001124:	f000 fb9d 	bl	8001862 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2100      	movs	r1, #0
 800112c:	2008      	movs	r0, #8
 800112e:	f000 fb7c 	bl	800182a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001132:	2008      	movs	r0, #8
 8001134:	f000 fb95 	bl	8001862 <HAL_NVIC_EnableIRQ>

}
 8001138:	bf00      	nop
 800113a:	3730      	adds	r7, #48	; 0x30
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40020000 	.word	0x40020000
 800114c:	40021000 	.word	0x40021000
 8001150:	10110000 	.word	0x10110000
 8001154:	40020800 	.word	0x40020800
 8001158:	40020400 	.word	0x40020400

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <HAL_MspInit+0x4c>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <HAL_MspInit+0x4c>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <HAL_MspInit+0x4c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_MspInit+0x4c>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <HAL_MspInit+0x4c>)
 8001198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_MspInit+0x4c>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800

080011bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <HAL_TIM_Base_MspInit+0x48>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d115      	bne.n	80011fa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_TIM_Base_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	4a0c      	ldr	r2, [pc, #48]	; (8001208 <HAL_TIM_Base_MspInit+0x4c>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6413      	str	r3, [r2, #64]	; 0x40
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_TIM_Base_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	201d      	movs	r0, #29
 80011f0:	f000 fb1b 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011f4:	201d      	movs	r0, #29
 80011f6:	f000 fb34 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40000400 	.word	0x40000400
 8001208:	40023800 	.word	0x40023800

0800120c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <HAL_TIM_MspPostInit+0x68>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d11d      	bne.n	800126a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_TIM_MspPostInit+0x6c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a10      	ldr	r2, [pc, #64]	; (8001278 <HAL_TIM_MspPostInit+0x6c>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <HAL_TIM_MspPostInit+0x6c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800124a:	2330      	movs	r3, #48	; 0x30
 800124c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800125a:	2302      	movs	r3, #2
 800125c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <HAL_TIM_MspPostInit+0x70>)
 8001266:	f000 fb39 	bl	80018dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800126a:	bf00      	nop
 800126c:	3720      	adds	r7, #32
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40000400 	.word	0x40000400
 8001278:	40023800 	.word	0x40023800
 800127c:	40020400 	.word	0x40020400

08001280 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a1d      	ldr	r2, [pc, #116]	; (8001314 <HAL_UART_MspInit+0x94>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d134      	bne.n	800130c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_UART_MspInit+0x98>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <HAL_UART_MspInit+0x98>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_UART_MspInit+0x98>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_UART_MspInit+0x98>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a14      	ldr	r2, [pc, #80]	; (8001318 <HAL_UART_MspInit+0x98>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_UART_MspInit+0x98>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012ec:	2307      	movs	r3, #7
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	4809      	ldr	r0, [pc, #36]	; (800131c <HAL_UART_MspInit+0x9c>)
 80012f8:	f000 faf0 	bl	80018dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	2027      	movs	r0, #39	; 0x27
 8001302:	f000 fa92 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001306:	2027      	movs	r0, #39	; 0x27
 8001308:	f000 faab 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40004800 	.word	0x40004800
 8001318:	40023800 	.word	0x40023800
 800131c:	40020800 	.word	0x40020800

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler+0x4>

0800133a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <UsageFault_Handler+0x4>

08001346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001374:	f000 f93c 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001380:	2001      	movs	r0, #1
 8001382:	f000 fc91 	bl	8001ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}

0800138a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800138e:	2002      	movs	r0, #2
 8001390:	f000 fc8a 	bl	8001ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800139c:	2004      	movs	r0, #4
 800139e:	f000 fc83 	bl	8001ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <TIM3_IRQHandler+0x10>)
 80013ae:	f001 fa1f 	bl	80027f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200002e8 	.word	0x200002e8

080013bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <USART3_IRQHandler+0x10>)
 80013c2:	f002 f94b 	bl	800365c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200002a0 	.word	0x200002a0

080013d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	e00a      	b.n	80013f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013e2:	f3af 8000 	nop.w
 80013e6:	4601      	mov	r1, r0
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	60ba      	str	r2, [r7, #8]
 80013ee:	b2ca      	uxtb	r2, r1
 80013f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3301      	adds	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	dbf0      	blt.n	80013e2 <_read+0x12>
	}

return len;
 8001400:	687b      	ldr	r3, [r7, #4]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <_close>:
	}
	return len;
}

int _close(int file)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
	return -1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001432:	605a      	str	r2, [r3, #4]
	return 0;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_isatty>:

int _isatty(int file)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
	return 1;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
	return 0;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <_sbrk+0x50>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x16>
		heap_end = &end;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <_sbrk+0x50>)
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <_sbrk+0x54>)
 8001488:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <_sbrk+0x50>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <_sbrk+0x50>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	466a      	mov	r2, sp
 800149a:	4293      	cmp	r3, r2
 800149c:	d907      	bls.n	80014ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800149e:	f002 fe93 	bl	80041c8 <__errno>
 80014a2:	4602      	mov	r2, r0
 80014a4:	230c      	movs	r3, #12
 80014a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ac:	e006      	b.n	80014bc <_sbrk+0x48>
	}

	heap_end += incr;
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <_sbrk+0x50>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <_sbrk+0x50>)
 80014b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000022c 	.word	0x2000022c
 80014c8:	20000340 	.word	0x20000340

080014cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <SystemInit+0x28>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d6:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <SystemInit+0x28>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <SystemInit+0x28>)
 80014e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e6:	609a      	str	r2, [r3, #8]
#endif
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001530 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014fe:	e003      	b.n	8001508 <LoopCopyDataInit>

08001500 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001502:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001504:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001506:	3104      	adds	r1, #4

08001508 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001508:	480b      	ldr	r0, [pc, #44]	; (8001538 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800150c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800150e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001510:	d3f6      	bcc.n	8001500 <CopyDataInit>
  ldr  r2, =_sbss
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001514:	e002      	b.n	800151c <LoopFillZerobss>

08001516 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001516:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001518:	f842 3b04 	str.w	r3, [r2], #4

0800151c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800151e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001520:	d3f9      	bcc.n	8001516 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001522:	f7ff ffd3 	bl	80014cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001526:	f002 fe55 	bl	80041d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152a:	f7ff fb29 	bl	8000b80 <main>
  bx  lr    
 800152e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001530:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001534:	0800553c 	.word	0x0800553c
  ldr  r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800153c:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 8001540:	2000020c 	.word	0x2000020c
  ldr  r3, = _ebss
 8001544:	20000340 	.word	0x20000340

08001548 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001548:	e7fe      	b.n	8001548 <ADC_IRQHandler>
	...

0800154c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_Init+0x40>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0d      	ldr	r2, [pc, #52]	; (800158c <HAL_Init+0x40>)
 8001556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800155a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_Init+0x40>)
 8001562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001566:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_Init+0x40>)
 800156e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001574:	2003      	movs	r0, #3
 8001576:	f000 f94d 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157a:	2000      	movs	r0, #0
 800157c:	f000 f808 	bl	8001590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001580:	f7ff fdf4 	bl	800116c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00

08001590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x54>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_InitTick+0x58>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f965 	bl	800187e <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00e      	b.n	80015dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d80a      	bhi.n	80015da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015cc:	f000 f92d 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <HAL_InitTick+0x5c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000030 	.word	0x20000030
 80015e8:	20000038 	.word	0x20000038
 80015ec:	20000034 	.word	0x20000034

080015f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000038 	.word	0x20000038
 8001614:	20000338 	.word	0x20000338

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000338 	.word	0x20000338

08001630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff ffee 	bl	8001618 <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001648:	d005      	beq.n	8001656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_Delay+0x40>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001656:	bf00      	nop
 8001658:	f7ff ffde 	bl	8001618 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d8f7      	bhi.n	8001658 <HAL_Delay+0x28>
  {
  }
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000038 	.word	0x20000038

08001674 <__NVIC_SetPriorityGrouping>:
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_EnableIRQ>:
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	db0b      	blt.n	8001702 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	4907      	ldr	r1, [pc, #28]	; (8001710 <__NVIC_EnableIRQ+0x38>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	2001      	movs	r0, #1
 80016fa:	fa00 f202 	lsl.w	r2, r0, r2
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff29 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff3e 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff8e 	bl	8001768 <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff31 	bl	80016d8 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d004      	beq.n	80018b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e00c      	b.n	80018ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2205      	movs	r2, #5
 80018b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0201 	bic.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e16b      	b.n	8001bd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	429a      	cmp	r2, r3
 8001912:	f040 815a 	bne.w	8001bca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d00b      	beq.n	8001936 <HAL_GPIO_Init+0x5a>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d007      	beq.n	8001936 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800192a:	2b11      	cmp	r3, #17
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b12      	cmp	r3, #18
 8001934:	d130      	bne.n	8001998 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	2203      	movs	r2, #3
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 0201 	and.w	r2, r3, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0xfc>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b12      	cmp	r3, #18
 80019d6:	d123      	bne.n	8001a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	69b9      	ldr	r1, [r7, #24]
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80b4 	beq.w	8001bca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b5f      	ldr	r3, [pc, #380]	; (8001be4 <HAL_GPIO_Init+0x308>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a5e      	ldr	r2, [pc, #376]	; (8001be4 <HAL_GPIO_Init+0x308>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b5c      	ldr	r3, [pc, #368]	; (8001be4 <HAL_GPIO_Init+0x308>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a7e:	4a5a      	ldr	r2, [pc, #360]	; (8001be8 <HAL_GPIO_Init+0x30c>)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a51      	ldr	r2, [pc, #324]	; (8001bec <HAL_GPIO_Init+0x310>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d02b      	beq.n	8001b02 <HAL_GPIO_Init+0x226>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a50      	ldr	r2, [pc, #320]	; (8001bf0 <HAL_GPIO_Init+0x314>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d025      	beq.n	8001afe <HAL_GPIO_Init+0x222>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4f      	ldr	r2, [pc, #316]	; (8001bf4 <HAL_GPIO_Init+0x318>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d01f      	beq.n	8001afa <HAL_GPIO_Init+0x21e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4e      	ldr	r2, [pc, #312]	; (8001bf8 <HAL_GPIO_Init+0x31c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d019      	beq.n	8001af6 <HAL_GPIO_Init+0x21a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4d      	ldr	r2, [pc, #308]	; (8001bfc <HAL_GPIO_Init+0x320>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_GPIO_Init+0x216>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4c      	ldr	r2, [pc, #304]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00d      	beq.n	8001aee <HAL_GPIO_Init+0x212>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4b      	ldr	r2, [pc, #300]	; (8001c04 <HAL_GPIO_Init+0x328>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d007      	beq.n	8001aea <HAL_GPIO_Init+0x20e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4a      	ldr	r2, [pc, #296]	; (8001c08 <HAL_GPIO_Init+0x32c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d101      	bne.n	8001ae6 <HAL_GPIO_Init+0x20a>
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	e00e      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	e00c      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001aea:	2306      	movs	r3, #6
 8001aec:	e00a      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001aee:	2305      	movs	r3, #5
 8001af0:	e008      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001af2:	2304      	movs	r3, #4
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001af6:	2303      	movs	r3, #3
 8001af8:	e004      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e002      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001b02:	2300      	movs	r3, #0
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	f002 0203 	and.w	r2, r2, #3
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b14:	4934      	ldr	r1, [pc, #208]	; (8001be8 <HAL_GPIO_Init+0x30c>)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b22:	4b3a      	ldr	r3, [pc, #232]	; (8001c0c <HAL_GPIO_Init+0x330>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b46:	4a31      	ldr	r2, [pc, #196]	; (8001c0c <HAL_GPIO_Init+0x330>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b4c:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_GPIO_Init+0x330>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b70:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <HAL_GPIO_Init+0x330>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_GPIO_Init+0x330>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <HAL_GPIO_Init+0x330>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <HAL_GPIO_Init+0x330>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc4:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <HAL_GPIO_Init+0x330>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	2b0f      	cmp	r3, #15
 8001bd4:	f67f ae90 	bls.w	80018f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bd8:	bf00      	nop
 8001bda:	3724      	adds	r7, #36	; 0x24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40013800 	.word	0x40013800
 8001bec:	40020000 	.word	0x40020000
 8001bf0:	40020400 	.word	0x40020400
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	40020c00 	.word	0x40020c00
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40021400 	.word	0x40021400
 8001c04:	40021800 	.word	0x40021800
 8001c08:	40021c00 	.word	0x40021c00
 8001c0c:	40013c00 	.word	0x40013c00

08001c10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	887b      	ldrh	r3, [r7, #2]
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e001      	b.n	8001c32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c50:	787b      	ldrb	r3, [r7, #1]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c5c:	e003      	b.n	8001c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	041a      	lsls	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	619a      	str	r2, [r3, #24]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	887b      	ldrh	r3, [r7, #2]
 8001c84:	401a      	ands	r2, r3
 8001c86:	887b      	ldrh	r3, [r7, #2]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d104      	bne.n	8001c96 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	041a      	lsls	r2, r3, #16
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001c94:	e002      	b.n	8001c9c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	619a      	str	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d006      	beq.n	8001ccc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fca0 	bl	800060c <HAL_GPIO_EXTI_Callback>
  }
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40013c00 	.word	0x40013c00

08001cd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e25b      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d075      	beq.n	8001de2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cf6:	4ba3      	ldr	r3, [pc, #652]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d00c      	beq.n	8001d1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d02:	4ba0      	ldr	r3, [pc, #640]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d112      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0e:	4b9d      	ldr	r3, [pc, #628]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d1a:	d10b      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	4b99      	ldr	r3, [pc, #612]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d05b      	beq.n	8001de0 <HAL_RCC_OscConfig+0x108>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d157      	bne.n	8001de0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e236      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCC_OscConfig+0x74>
 8001d3e:	4b91      	ldr	r3, [pc, #580]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a90      	ldr	r2, [pc, #576]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e01d      	b.n	8001d88 <HAL_RCC_OscConfig+0xb0>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x98>
 8001d56:	4b8b      	ldr	r3, [pc, #556]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a8a      	ldr	r2, [pc, #552]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	4b88      	ldr	r3, [pc, #544]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a87      	ldr	r2, [pc, #540]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e00b      	b.n	8001d88 <HAL_RCC_OscConfig+0xb0>
 8001d70:	4b84      	ldr	r3, [pc, #528]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a83      	ldr	r2, [pc, #524]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b81      	ldr	r3, [pc, #516]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a80      	ldr	r2, [pc, #512]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d013      	beq.n	8001db8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fc42 	bl	8001618 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fc3e 	bl	8001618 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e1fb      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b76      	ldr	r3, [pc, #472]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0xc0>
 8001db6:	e014      	b.n	8001de2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fc2e 	bl	8001618 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7ff fc2a 	bl	8001618 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1e7      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	4b6c      	ldr	r3, [pc, #432]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xe8>
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d063      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dee:	4b65      	ldr	r3, [pc, #404]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfa:	4b62      	ldr	r3, [pc, #392]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d11c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e06:	4b5f      	ldr	r3, [pc, #380]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d116      	bne.n	8001e40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	4b5c      	ldr	r3, [pc, #368]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_RCC_OscConfig+0x152>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e1bb      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2a:	4b56      	ldr	r3, [pc, #344]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4952      	ldr	r1, [pc, #328]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	e03a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d020      	beq.n	8001e8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e48:	4b4f      	ldr	r3, [pc, #316]	; (8001f88 <HAL_RCC_OscConfig+0x2b0>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff fbe3 	bl	8001618 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e56:	f7ff fbdf 	bl	8001618 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e19c      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e74:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4940      	ldr	r1, [pc, #256]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
 8001e88:	e015      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <HAL_RCC_OscConfig+0x2b0>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff fbc2 	bl	8001618 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff fbbe 	bl	8001618 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e17b      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d030      	beq.n	8001f24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d016      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eca:	4b30      	ldr	r3, [pc, #192]	; (8001f8c <HAL_RCC_OscConfig+0x2b4>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff fba2 	bl	8001618 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fb9e 	bl	8001618 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e15b      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x200>
 8001ef6:	e015      	b.n	8001f24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_RCC_OscConfig+0x2b4>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7ff fb8b 	bl	8001618 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f06:	f7ff fb87 	bl	8001618 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e144      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f0      	bne.n	8001f06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80a0 	beq.w	8002072 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10f      	bne.n	8001f62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_RCC_OscConfig+0x2b8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d121      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_RCC_OscConfig+0x2b8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <HAL_RCC_OscConfig+0x2b8>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7a:	f7ff fb4d 	bl	8001618 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f80:	e011      	b.n	8001fa6 <HAL_RCC_OscConfig+0x2ce>
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	42470000 	.word	0x42470000
 8001f8c:	42470e80 	.word	0x42470e80
 8001f90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f94:	f7ff fb40 	bl	8001618 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e0fd      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	4b81      	ldr	r3, [pc, #516]	; (80021ac <HAL_RCC_OscConfig+0x4d4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d106      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2f0>
 8001fba:	4b7d      	ldr	r3, [pc, #500]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	4a7c      	ldr	r2, [pc, #496]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc6:	e01c      	b.n	8002002 <HAL_RCC_OscConfig+0x32a>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b05      	cmp	r3, #5
 8001fce:	d10c      	bne.n	8001fea <HAL_RCC_OscConfig+0x312>
 8001fd0:	4b77      	ldr	r3, [pc, #476]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	4a76      	ldr	r2, [pc, #472]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	6713      	str	r3, [r2, #112]	; 0x70
 8001fdc:	4b74      	ldr	r3, [pc, #464]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	4a73      	ldr	r2, [pc, #460]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe8:	e00b      	b.n	8002002 <HAL_RCC_OscConfig+0x32a>
 8001fea:	4b71      	ldr	r3, [pc, #452]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	4a70      	ldr	r2, [pc, #448]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff6:	4b6e      	ldr	r3, [pc, #440]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	4a6d      	ldr	r2, [pc, #436]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8001ffc:	f023 0304 	bic.w	r3, r3, #4
 8002000:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d015      	beq.n	8002036 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200a:	f7ff fb05 	bl	8001618 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7ff fb01 	bl	8001618 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e0bc      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	4b61      	ldr	r3, [pc, #388]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ee      	beq.n	8002012 <HAL_RCC_OscConfig+0x33a>
 8002034:	e014      	b.n	8002060 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7ff faef 	bl	8001618 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7ff faeb 	bl	8001618 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	; 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e0a6      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002054:	4b56      	ldr	r3, [pc, #344]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ee      	bne.n	800203e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002060:	7dfb      	ldrb	r3, [r7, #23]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d105      	bne.n	8002072 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002066:	4b52      	ldr	r3, [pc, #328]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a51      	ldr	r2, [pc, #324]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 800206c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8092 	beq.w	80021a0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800207c:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b08      	cmp	r3, #8
 8002086:	d05c      	beq.n	8002142 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d141      	bne.n	8002114 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	4b48      	ldr	r3, [pc, #288]	; (80021b4 <HAL_RCC_OscConfig+0x4dc>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7ff fabf 	bl	8001618 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209e:	f7ff fabb 	bl	8001618 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e078      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b0:	4b3f      	ldr	r3, [pc, #252]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69da      	ldr	r2, [r3, #28]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	019b      	lsls	r3, r3, #6
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	3b01      	subs	r3, #1
 80020d6:	041b      	lsls	r3, r3, #16
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	061b      	lsls	r3, r3, #24
 80020e0:	4933      	ldr	r1, [pc, #204]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e6:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <HAL_RCC_OscConfig+0x4dc>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff fa94 	bl	8001618 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f4:	f7ff fa90 	bl	8001618 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e04d      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x41c>
 8002112:	e045      	b.n	80021a0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_RCC_OscConfig+0x4dc>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7ff fa7d 	bl	8001618 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002122:	f7ff fa79 	bl	8001618 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e036      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002134:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x44a>
 8002140:	e02e      	b.n	80021a0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e029      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <HAL_RCC_OscConfig+0x4d8>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	429a      	cmp	r2, r3
 8002160:	d11c      	bne.n	800219c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d115      	bne.n	800219c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002176:	4013      	ands	r3, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800217c:	4293      	cmp	r3, r2
 800217e:	d10d      	bne.n	800219c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d106      	bne.n	800219c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40007000 	.word	0x40007000
 80021b0:	40023800 	.word	0x40023800
 80021b4:	42470060 	.word	0x42470060

080021b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0cc      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021cc:	4b68      	ldr	r3, [pc, #416]	; (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d90c      	bls.n	80021f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b65      	ldr	r3, [pc, #404]	; (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b63      	ldr	r3, [pc, #396]	; (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0b8      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d020      	beq.n	8002242 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800220c:	4b59      	ldr	r3, [pc, #356]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	4a58      	ldr	r2, [pc, #352]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002216:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002224:	4b53      	ldr	r3, [pc, #332]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4a52      	ldr	r2, [pc, #328]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800222e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002230:	4b50      	ldr	r3, [pc, #320]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	494d      	ldr	r1, [pc, #308]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d044      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b47      	ldr	r3, [pc, #284]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d119      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e07f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d003      	beq.n	8002276 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002272:	2b03      	cmp	r3, #3
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002276:	4b3f      	ldr	r3, [pc, #252]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e06f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002286:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e067      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002296:	4b37      	ldr	r3, [pc, #220]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f023 0203 	bic.w	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4934      	ldr	r1, [pc, #208]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a8:	f7ff f9b6 	bl	8001618 <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b0:	f7ff f9b2 	bl	8001618 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e04f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 020c 	and.w	r2, r3, #12
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d1eb      	bne.n	80022b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d20c      	bcs.n	8002300 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b22      	ldr	r3, [pc, #136]	; (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e032      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4916      	ldr	r1, [pc, #88]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	490e      	ldr	r1, [pc, #56]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800233e:	f000 f889 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8002342:	4601      	mov	r1, r0
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	5cd3      	ldrb	r3, [r2, r3]
 8002352:	fa21 f303 	lsr.w	r3, r1, r3
 8002356:	4a09      	ldr	r2, [pc, #36]	; (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_RCC_ClockConfig+0x1c8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff f916 	bl	8001590 <HAL_InitTick>

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023c00 	.word	0x40023c00
 8002374:	40023800 	.word	0x40023800
 8002378:	08005370 	.word	0x08005370
 800237c:	20000030 	.word	0x20000030
 8002380:	20000034 	.word	0x20000034

08002384 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	; 0x30
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d129      	bne.n	80023ea <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_RCC_MCOConfig+0xc4>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a2a      	ldr	r2, [pc, #168]	; (8002448 <HAL_RCC_MCOConfig+0xc4>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b28      	ldr	r3, [pc, #160]	; (8002448 <HAL_RCC_MCOConfig+0xc4>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80023b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023bc:	2303      	movs	r3, #3
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80023c4:	2300      	movs	r3, #0
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	4619      	mov	r1, r3
 80023ce:	481f      	ldr	r0, [pc, #124]	; (800244c <HAL_RCC_MCOConfig+0xc8>)
 80023d0:	f7ff fa84 	bl	80018dc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80023d4:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <HAL_RCC_MCOConfig+0xc4>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	4919      	ldr	r1, [pc, #100]	; (8002448 <HAL_RCC_MCOConfig+0xc4>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80023e8:	e029      	b.n	800243e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <HAL_RCC_MCOConfig+0xc4>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a15      	ldr	r2, [pc, #84]	; (8002448 <HAL_RCC_MCOConfig+0xc4>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <HAL_RCC_MCOConfig+0xc4>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800240a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002418:	2300      	movs	r3, #0
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	4619      	mov	r1, r3
 8002422:	480b      	ldr	r0, [pc, #44]	; (8002450 <HAL_RCC_MCOConfig+0xcc>)
 8002424:	f7ff fa5a 	bl	80018dc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <HAL_RCC_MCOConfig+0xc4>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	00d9      	lsls	r1, r3, #3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	430b      	orrs	r3, r1
 8002438:	4903      	ldr	r1, [pc, #12]	; (8002448 <HAL_RCC_MCOConfig+0xc4>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
}
 800243e:	bf00      	nop
 8002440:	3730      	adds	r7, #48	; 0x30
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	40020000 	.word	0x40020000
 8002450:	40020800 	.word	0x40020800

08002454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	2300      	movs	r3, #0
 8002464:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800246a:	4b63      	ldr	r3, [pc, #396]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b04      	cmp	r3, #4
 8002474:	d007      	beq.n	8002486 <HAL_RCC_GetSysClockFreq+0x32>
 8002476:	2b08      	cmp	r3, #8
 8002478:	d008      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x38>
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 80b4 	bne.w	80025e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002480:	4b5e      	ldr	r3, [pc, #376]	; (80025fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002482:	60bb      	str	r3, [r7, #8]
       break;
 8002484:	e0b3      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002486:	4b5e      	ldr	r3, [pc, #376]	; (8002600 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002488:	60bb      	str	r3, [r7, #8]
      break;
 800248a:	e0b0      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800248c:	4b5a      	ldr	r3, [pc, #360]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002494:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002496:	4b58      	ldr	r3, [pc, #352]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d04a      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a2:	4b55      	ldr	r3, [pc, #340]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	099b      	lsrs	r3, r3, #6
 80024a8:	f04f 0400 	mov.w	r4, #0
 80024ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	ea03 0501 	and.w	r5, r3, r1
 80024b8:	ea04 0602 	and.w	r6, r4, r2
 80024bc:	4629      	mov	r1, r5
 80024be:	4632      	mov	r2, r6
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	f04f 0400 	mov.w	r4, #0
 80024c8:	0154      	lsls	r4, r2, #5
 80024ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024ce:	014b      	lsls	r3, r1, #5
 80024d0:	4619      	mov	r1, r3
 80024d2:	4622      	mov	r2, r4
 80024d4:	1b49      	subs	r1, r1, r5
 80024d6:	eb62 0206 	sbc.w	r2, r2, r6
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	f04f 0400 	mov.w	r4, #0
 80024e2:	0194      	lsls	r4, r2, #6
 80024e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024e8:	018b      	lsls	r3, r1, #6
 80024ea:	1a5b      	subs	r3, r3, r1
 80024ec:	eb64 0402 	sbc.w	r4, r4, r2
 80024f0:	f04f 0100 	mov.w	r1, #0
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	00e2      	lsls	r2, r4, #3
 80024fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024fe:	00d9      	lsls	r1, r3, #3
 8002500:	460b      	mov	r3, r1
 8002502:	4614      	mov	r4, r2
 8002504:	195b      	adds	r3, r3, r5
 8002506:	eb44 0406 	adc.w	r4, r4, r6
 800250a:	f04f 0100 	mov.w	r1, #0
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	0262      	lsls	r2, r4, #9
 8002514:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002518:	0259      	lsls	r1, r3, #9
 800251a:	460b      	mov	r3, r1
 800251c:	4614      	mov	r4, r2
 800251e:	4618      	mov	r0, r3
 8002520:	4621      	mov	r1, r4
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f04f 0400 	mov.w	r4, #0
 8002528:	461a      	mov	r2, r3
 800252a:	4623      	mov	r3, r4
 800252c:	f7fd fea8 	bl	8000280 <__aeabi_uldivmod>
 8002530:	4603      	mov	r3, r0
 8002532:	460c      	mov	r4, r1
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	e049      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002538:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	f04f 0400 	mov.w	r4, #0
 8002542:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	ea03 0501 	and.w	r5, r3, r1
 800254e:	ea04 0602 	and.w	r6, r4, r2
 8002552:	4629      	mov	r1, r5
 8002554:	4632      	mov	r2, r6
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	f04f 0400 	mov.w	r4, #0
 800255e:	0154      	lsls	r4, r2, #5
 8002560:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002564:	014b      	lsls	r3, r1, #5
 8002566:	4619      	mov	r1, r3
 8002568:	4622      	mov	r2, r4
 800256a:	1b49      	subs	r1, r1, r5
 800256c:	eb62 0206 	sbc.w	r2, r2, r6
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	f04f 0400 	mov.w	r4, #0
 8002578:	0194      	lsls	r4, r2, #6
 800257a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800257e:	018b      	lsls	r3, r1, #6
 8002580:	1a5b      	subs	r3, r3, r1
 8002582:	eb64 0402 	sbc.w	r4, r4, r2
 8002586:	f04f 0100 	mov.w	r1, #0
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	00e2      	lsls	r2, r4, #3
 8002590:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002594:	00d9      	lsls	r1, r3, #3
 8002596:	460b      	mov	r3, r1
 8002598:	4614      	mov	r4, r2
 800259a:	195b      	adds	r3, r3, r5
 800259c:	eb44 0406 	adc.w	r4, r4, r6
 80025a0:	f04f 0100 	mov.w	r1, #0
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	02a2      	lsls	r2, r4, #10
 80025aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80025ae:	0299      	lsls	r1, r3, #10
 80025b0:	460b      	mov	r3, r1
 80025b2:	4614      	mov	r4, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	4621      	mov	r1, r4
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f04f 0400 	mov.w	r4, #0
 80025be:	461a      	mov	r2, r3
 80025c0:	4623      	mov	r3, r4
 80025c2:	f7fd fe5d 	bl	8000280 <__aeabi_uldivmod>
 80025c6:	4603      	mov	r3, r0
 80025c8:	460c      	mov	r4, r1
 80025ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	0c1b      	lsrs	r3, r3, #16
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	3301      	adds	r3, #1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e4:	60bb      	str	r3, [r7, #8]
      break;
 80025e6:	e002      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025ea:	60bb      	str	r3, [r7, #8]
      break;
 80025ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ee:	68bb      	ldr	r3, [r7, #8]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025f8:	40023800 	.word	0x40023800
 80025fc:	00f42400 	.word	0x00f42400
 8002600:	007a1200 	.word	0x007a1200

08002604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_RCC_GetHCLKFreq+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000030 	.word	0x20000030

0800261c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002620:	f7ff fff0 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002624:	4601      	mov	r1, r0
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	0a9b      	lsrs	r3, r3, #10
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	4a03      	ldr	r2, [pc, #12]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002632:	5cd3      	ldrb	r3, [r2, r3]
 8002634:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40023800 	.word	0x40023800
 8002640:	08005380 	.word	0x08005380

08002644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002648:	f7ff ffdc 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 800264c:	4601      	mov	r1, r0
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0b5b      	lsrs	r3, r3, #13
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4a03      	ldr	r2, [pc, #12]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800265a:	5cd3      	ldrb	r3, [r2, r3]
 800265c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40023800 	.word	0x40023800
 8002668:	08005380 	.word	0x08005380

0800266c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e01d      	b.n	80026ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe fd92 	bl	80011bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3304      	adds	r3, #4
 80026a8:	4619      	mov	r1, r3
 80026aa:	4610      	mov	r0, r2
 80026ac:	f000 fb4e 	bl	8002d4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b06      	cmp	r3, #6
 80026ea:	d007      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e01d      	b.n	8002758 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d106      	bne.n	8002736 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f815 	bl	8002760 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2202      	movs	r2, #2
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3304      	adds	r3, #4
 8002746:	4619      	mov	r1, r3
 8002748:	4610      	mov	r0, r2
 800274a:	f000 faff 	bl	8002d4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2201      	movs	r2, #1
 8002784:	6839      	ldr	r1, [r7, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fdca 	bl	8003320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <HAL_TIM_PWM_Start+0x74>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d004      	beq.n	80027a0 <HAL_TIM_PWM_Start+0x2c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a14      	ldr	r2, [pc, #80]	; (80027ec <HAL_TIM_PWM_Start+0x78>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d101      	bne.n	80027a4 <HAL_TIM_PWM_Start+0x30>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_TIM_PWM_Start+0x32>
 80027a4:	2300      	movs	r3, #0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b06      	cmp	r3, #6
 80027ca:	d007      	beq.n	80027dc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40010000 	.word	0x40010000
 80027ec:	40010400 	.word	0x40010400

080027f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b02      	cmp	r3, #2
 8002804:	d122      	bne.n	800284c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b02      	cmp	r3, #2
 8002812:	d11b      	bne.n	800284c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0202 	mvn.w	r2, #2
 800281c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fa6b 	bl	8002d0e <HAL_TIM_IC_CaptureCallback>
 8002838:	e005      	b.n	8002846 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fa5d 	bl	8002cfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fa6e 	bl	8002d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b04      	cmp	r3, #4
 8002858:	d122      	bne.n	80028a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b04      	cmp	r3, #4
 8002866:	d11b      	bne.n	80028a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0204 	mvn.w	r2, #4
 8002870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2202      	movs	r2, #2
 8002876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fa41 	bl	8002d0e <HAL_TIM_IC_CaptureCallback>
 800288c:	e005      	b.n	800289a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa33 	bl	8002cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fa44 	bl	8002d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d122      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d11b      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0208 	mvn.w	r2, #8
 80028c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2204      	movs	r2, #4
 80028ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fa17 	bl	8002d0e <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fa09 	bl	8002cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 fa1a 	bl	8002d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b10      	cmp	r3, #16
 8002900:	d122      	bne.n	8002948 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b10      	cmp	r3, #16
 800290e:	d11b      	bne.n	8002948 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0210 	mvn.w	r2, #16
 8002918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2208      	movs	r2, #8
 800291e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f9ed 	bl	8002d0e <HAL_TIM_IC_CaptureCallback>
 8002934:	e005      	b.n	8002942 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f9df 	bl	8002cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f9f0 	bl	8002d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b01      	cmp	r3, #1
 8002954:	d10e      	bne.n	8002974 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d107      	bne.n	8002974 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0201 	mvn.w	r2, #1
 800296c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe f898 	bl	8000aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297e:	2b80      	cmp	r3, #128	; 0x80
 8002980:	d10e      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298c:	2b80      	cmp	r3, #128	; 0x80
 800298e:	d107      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fd6c 	bl	8003478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b40      	cmp	r3, #64	; 0x40
 80029ac:	d10e      	bne.n	80029cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b8:	2b40      	cmp	r3, #64	; 0x40
 80029ba:	d107      	bne.n	80029cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f9b5 	bl	8002d36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	d10e      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	d107      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0220 	mvn.w	r2, #32
 80029f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fd36 	bl	8003464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e0b4      	b.n	8002b84 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2202      	movs	r2, #2
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b0c      	cmp	r3, #12
 8002a2e:	f200 809f 	bhi.w	8002b70 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002a32:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a38:	08002a6d 	.word	0x08002a6d
 8002a3c:	08002b71 	.word	0x08002b71
 8002a40:	08002b71 	.word	0x08002b71
 8002a44:	08002b71 	.word	0x08002b71
 8002a48:	08002aad 	.word	0x08002aad
 8002a4c:	08002b71 	.word	0x08002b71
 8002a50:	08002b71 	.word	0x08002b71
 8002a54:	08002b71 	.word	0x08002b71
 8002a58:	08002aef 	.word	0x08002aef
 8002a5c:	08002b71 	.word	0x08002b71
 8002a60:	08002b71 	.word	0x08002b71
 8002a64:	08002b71 	.word	0x08002b71
 8002a68:	08002b2f 	.word	0x08002b2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fa0a 	bl	8002e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0208 	orr.w	r2, r2, #8
 8002a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0204 	bic.w	r2, r2, #4
 8002a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6999      	ldr	r1, [r3, #24]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	619a      	str	r2, [r3, #24]
      break;
 8002aaa:	e062      	b.n	8002b72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fa5a 	bl	8002f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6999      	ldr	r1, [r3, #24]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	021a      	lsls	r2, r3, #8
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	619a      	str	r2, [r3, #24]
      break;
 8002aec:	e041      	b.n	8002b72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 faaf 	bl	8003058 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0208 	orr.w	r2, r2, #8
 8002b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0204 	bic.w	r2, r2, #4
 8002b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69d9      	ldr	r1, [r3, #28]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	61da      	str	r2, [r3, #28]
      break;
 8002b2c:	e021      	b.n	8002b72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fb03 	bl	8003140 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69d9      	ldr	r1, [r3, #28]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	021a      	lsls	r2, r3, #8
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	61da      	str	r2, [r3, #28]
      break;
 8002b6e:	e000      	b.n	8002b72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002b70:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_TIM_ConfigClockSource+0x18>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e0a6      	b.n	8002cf2 <HAL_TIM_ConfigClockSource+0x166>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d067      	beq.n	8002cac <HAL_TIM_ConfigClockSource+0x120>
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	d80b      	bhi.n	8002bf8 <HAL_TIM_ConfigClockSource+0x6c>
 8002be0:	2b10      	cmp	r3, #16
 8002be2:	d073      	beq.n	8002ccc <HAL_TIM_ConfigClockSource+0x140>
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	d802      	bhi.n	8002bee <HAL_TIM_ConfigClockSource+0x62>
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d06f      	beq.n	8002ccc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002bec:	e078      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d06c      	beq.n	8002ccc <HAL_TIM_ConfigClockSource+0x140>
 8002bf2:	2b30      	cmp	r3, #48	; 0x30
 8002bf4:	d06a      	beq.n	8002ccc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002bf6:	e073      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002bf8:	2b70      	cmp	r3, #112	; 0x70
 8002bfa:	d00d      	beq.n	8002c18 <HAL_TIM_ConfigClockSource+0x8c>
 8002bfc:	2b70      	cmp	r3, #112	; 0x70
 8002bfe:	d804      	bhi.n	8002c0a <HAL_TIM_ConfigClockSource+0x7e>
 8002c00:	2b50      	cmp	r3, #80	; 0x50
 8002c02:	d033      	beq.n	8002c6c <HAL_TIM_ConfigClockSource+0xe0>
 8002c04:	2b60      	cmp	r3, #96	; 0x60
 8002c06:	d041      	beq.n	8002c8c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002c08:	e06a      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c0e:	d066      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x152>
 8002c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c14:	d017      	beq.n	8002c46 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002c16:	e063      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6899      	ldr	r1, [r3, #8]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f000 fb5a 	bl	80032e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c3a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	609a      	str	r2, [r3, #8]
      break;
 8002c44:	e04c      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	6899      	ldr	r1, [r3, #8]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f000 fb43 	bl	80032e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c68:	609a      	str	r2, [r3, #8]
      break;
 8002c6a:	e039      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f000 fab7 	bl	80031ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2150      	movs	r1, #80	; 0x50
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fb10 	bl	80032aa <TIM_ITRx_SetConfig>
      break;
 8002c8a:	e029      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f000 fad6 	bl	800324a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2160      	movs	r1, #96	; 0x60
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fb00 	bl	80032aa <TIM_ITRx_SetConfig>
      break;
 8002caa:	e019      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f000 fa97 	bl	80031ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2140      	movs	r1, #64	; 0x40
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 faf0 	bl	80032aa <TIM_ITRx_SetConfig>
      break;
 8002cca:	e009      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	f000 fae7 	bl	80032aa <TIM_ITRx_SetConfig>
      break;
 8002cdc:	e000      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002cde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a40      	ldr	r2, [pc, #256]	; (8002e60 <TIM_Base_SetConfig+0x114>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d013      	beq.n	8002d8c <TIM_Base_SetConfig+0x40>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6a:	d00f      	beq.n	8002d8c <TIM_Base_SetConfig+0x40>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a3d      	ldr	r2, [pc, #244]	; (8002e64 <TIM_Base_SetConfig+0x118>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00b      	beq.n	8002d8c <TIM_Base_SetConfig+0x40>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a3c      	ldr	r2, [pc, #240]	; (8002e68 <TIM_Base_SetConfig+0x11c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d007      	beq.n	8002d8c <TIM_Base_SetConfig+0x40>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a3b      	ldr	r2, [pc, #236]	; (8002e6c <TIM_Base_SetConfig+0x120>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d003      	beq.n	8002d8c <TIM_Base_SetConfig+0x40>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a3a      	ldr	r2, [pc, #232]	; (8002e70 <TIM_Base_SetConfig+0x124>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d108      	bne.n	8002d9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a2f      	ldr	r2, [pc, #188]	; (8002e60 <TIM_Base_SetConfig+0x114>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d02b      	beq.n	8002dfe <TIM_Base_SetConfig+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dac:	d027      	beq.n	8002dfe <TIM_Base_SetConfig+0xb2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a2c      	ldr	r2, [pc, #176]	; (8002e64 <TIM_Base_SetConfig+0x118>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d023      	beq.n	8002dfe <TIM_Base_SetConfig+0xb2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a2b      	ldr	r2, [pc, #172]	; (8002e68 <TIM_Base_SetConfig+0x11c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01f      	beq.n	8002dfe <TIM_Base_SetConfig+0xb2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a2a      	ldr	r2, [pc, #168]	; (8002e6c <TIM_Base_SetConfig+0x120>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d01b      	beq.n	8002dfe <TIM_Base_SetConfig+0xb2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a29      	ldr	r2, [pc, #164]	; (8002e70 <TIM_Base_SetConfig+0x124>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d017      	beq.n	8002dfe <TIM_Base_SetConfig+0xb2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a28      	ldr	r2, [pc, #160]	; (8002e74 <TIM_Base_SetConfig+0x128>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <TIM_Base_SetConfig+0xb2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a27      	ldr	r2, [pc, #156]	; (8002e78 <TIM_Base_SetConfig+0x12c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00f      	beq.n	8002dfe <TIM_Base_SetConfig+0xb2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a26      	ldr	r2, [pc, #152]	; (8002e7c <TIM_Base_SetConfig+0x130>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00b      	beq.n	8002dfe <TIM_Base_SetConfig+0xb2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a25      	ldr	r2, [pc, #148]	; (8002e80 <TIM_Base_SetConfig+0x134>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <TIM_Base_SetConfig+0xb2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a24      	ldr	r2, [pc, #144]	; (8002e84 <TIM_Base_SetConfig+0x138>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d003      	beq.n	8002dfe <TIM_Base_SetConfig+0xb2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a23      	ldr	r2, [pc, #140]	; (8002e88 <TIM_Base_SetConfig+0x13c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d108      	bne.n	8002e10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <TIM_Base_SetConfig+0x114>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d003      	beq.n	8002e44 <TIM_Base_SetConfig+0xf8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a0c      	ldr	r2, [pc, #48]	; (8002e70 <TIM_Base_SetConfig+0x124>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d103      	bne.n	8002e4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	615a      	str	r2, [r3, #20]
}
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40010000 	.word	0x40010000
 8002e64:	40000400 	.word	0x40000400
 8002e68:	40000800 	.word	0x40000800
 8002e6c:	40000c00 	.word	0x40000c00
 8002e70:	40010400 	.word	0x40010400
 8002e74:	40014000 	.word	0x40014000
 8002e78:	40014400 	.word	0x40014400
 8002e7c:	40014800 	.word	0x40014800
 8002e80:	40001800 	.word	0x40001800
 8002e84:	40001c00 	.word	0x40001c00
 8002e88:	40002000 	.word	0x40002000

08002e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f023 0201 	bic.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0303 	bic.w	r3, r3, #3
 8002ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f023 0302 	bic.w	r3, r3, #2
 8002ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a20      	ldr	r2, [pc, #128]	; (8002f64 <TIM_OC1_SetConfig+0xd8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d003      	beq.n	8002ef0 <TIM_OC1_SetConfig+0x64>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <TIM_OC1_SetConfig+0xdc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d10c      	bne.n	8002f0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f023 0308 	bic.w	r3, r3, #8
 8002ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <TIM_OC1_SetConfig+0xd8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d003      	beq.n	8002f1a <TIM_OC1_SetConfig+0x8e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <TIM_OC1_SetConfig+0xdc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d111      	bne.n	8002f3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	621a      	str	r2, [r3, #32]
}
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40010000 	.word	0x40010000
 8002f68:	40010400 	.word	0x40010400

08002f6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	f023 0210 	bic.w	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f023 0320 	bic.w	r3, r3, #32
 8002fb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a22      	ldr	r2, [pc, #136]	; (8003050 <TIM_OC2_SetConfig+0xe4>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d003      	beq.n	8002fd4 <TIM_OC2_SetConfig+0x68>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a21      	ldr	r2, [pc, #132]	; (8003054 <TIM_OC2_SetConfig+0xe8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d10d      	bne.n	8002ff0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a17      	ldr	r2, [pc, #92]	; (8003050 <TIM_OC2_SetConfig+0xe4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_OC2_SetConfig+0x94>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a16      	ldr	r2, [pc, #88]	; (8003054 <TIM_OC2_SetConfig+0xe8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d113      	bne.n	8003028 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003006:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800300e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	621a      	str	r2, [r3, #32]
}
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40010000 	.word	0x40010000
 8003054:	40010400 	.word	0x40010400

08003058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0303 	bic.w	r3, r3, #3
 800308e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a21      	ldr	r2, [pc, #132]	; (8003138 <TIM_OC3_SetConfig+0xe0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d003      	beq.n	80030be <TIM_OC3_SetConfig+0x66>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a20      	ldr	r2, [pc, #128]	; (800313c <TIM_OC3_SetConfig+0xe4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d10d      	bne.n	80030da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a16      	ldr	r2, [pc, #88]	; (8003138 <TIM_OC3_SetConfig+0xe0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d003      	beq.n	80030ea <TIM_OC3_SetConfig+0x92>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a15      	ldr	r2, [pc, #84]	; (800313c <TIM_OC3_SetConfig+0xe4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d113      	bne.n	8003112 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	621a      	str	r2, [r3, #32]
}
 800312c:	bf00      	nop
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40010000 	.word	0x40010000
 800313c:	40010400 	.word	0x40010400

08003140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800316e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4313      	orrs	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800318a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	031b      	lsls	r3, r3, #12
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <TIM_OC4_SetConfig+0xa4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d003      	beq.n	80031a8 <TIM_OC4_SetConfig+0x68>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a11      	ldr	r2, [pc, #68]	; (80031e8 <TIM_OC4_SetConfig+0xa8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d109      	bne.n	80031bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	019b      	lsls	r3, r3, #6
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	621a      	str	r2, [r3, #32]
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40010000 	.word	0x40010000
 80031e8:	40010400 	.word	0x40010400

080031ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f023 0201 	bic.w	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f023 030a 	bic.w	r3, r3, #10
 8003228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	621a      	str	r2, [r3, #32]
}
 800323e:	bf00      	nop
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800324a:	b480      	push	{r7}
 800324c:	b087      	sub	sp, #28
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f023 0210 	bic.w	r2, r3, #16
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003274:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	031b      	lsls	r3, r3, #12
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003286:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	621a      	str	r2, [r3, #32]
}
 800329e:	bf00      	nop
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b085      	sub	sp, #20
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
 80032b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f043 0307 	orr.w	r3, r3, #7
 80032cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	609a      	str	r2, [r3, #8]
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	021a      	lsls	r2, r3, #8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	431a      	orrs	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4313      	orrs	r3, r2
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	609a      	str	r2, [r3, #8]
}
 8003314:	bf00      	nop
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	2201      	movs	r2, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a1a      	ldr	r2, [r3, #32]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	43db      	mvns	r3, r3
 8003342:	401a      	ands	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a1a      	ldr	r2, [r3, #32]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	431a      	orrs	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	621a      	str	r2, [r3, #32]
}
 800335e:	bf00      	nop
 8003360:	371c      	adds	r7, #28
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003380:	2302      	movs	r3, #2
 8003382:	e05a      	b.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a21      	ldr	r2, [pc, #132]	; (8003448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d022      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d0:	d01d      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1d      	ldr	r2, [pc, #116]	; (800344c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d018      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1a      	ldr	r2, [pc, #104]	; (8003454 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00e      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a18      	ldr	r2, [pc, #96]	; (8003458 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d009      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a17      	ldr	r2, [pc, #92]	; (800345c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d004      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a15      	ldr	r2, [pc, #84]	; (8003460 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d10c      	bne.n	8003428 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	4313      	orrs	r3, r2
 800341e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800
 8003454:	40000c00 	.word	0x40000c00
 8003458:	40010400 	.word	0x40010400
 800345c:	40014000 	.word	0x40014000
 8003460:	40001800 	.word	0x40001800

08003464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e03f      	b.n	800351e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd fee4 	bl	8001280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2224      	movs	r2, #36	; 0x24
 80034bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 faf9 	bl	8003ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	4613      	mov	r3, r2
 8003532:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b20      	cmp	r3, #32
 800353e:	d130      	bne.n	80035a2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_UART_Transmit_IT+0x26>
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e029      	b.n	80035a4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_UART_Transmit_IT+0x38>
 800355a:	2302      	movs	r3, #2
 800355c:	e022      	b.n	80035a4 <HAL_UART_Transmit_IT+0x7e>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	88fa      	ldrh	r2, [r7, #6]
 8003570:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	88fa      	ldrh	r2, [r7, #6]
 8003576:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2221      	movs	r2, #33	; 0x21
 8003582:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800359c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e000      	b.n	80035a4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80035a2:	2302      	movs	r3, #2
  }
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d140      	bne.n	800364c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_UART_Receive_IT+0x26>
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e039      	b.n	800364e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_UART_Receive_IT+0x38>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e032      	b.n	800364e <HAL_UART_Receive_IT+0x9e>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	88fa      	ldrh	r2, [r7, #6]
 80035fa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2222      	movs	r2, #34	; 0x22
 800360c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003626:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0220 	orr.w	r2, r2, #32
 8003646:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	e000      	b.n	800364e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800364c:	2302      	movs	r3, #2
  }
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10d      	bne.n	80036ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_UART_IRQHandler+0x52>
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f98c 	bl	80039c4 <UART_Receive_IT>
      return;
 80036ac:	e0d1      	b.n	8003852 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80b0 	beq.w	8003816 <HAL_UART_IRQHandler+0x1ba>
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <HAL_UART_IRQHandler+0x70>
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 80a5 	beq.w	8003816 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_UART_IRQHandler+0x90>
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e4:	f043 0201 	orr.w	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_UART_IRQHandler+0xb0>
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003704:	f043 0202 	orr.w	r2, r3, #2
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_UART_IRQHandler+0xd0>
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	f043 0204 	orr.w	r2, r3, #4
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00f      	beq.n	8003756 <HAL_UART_IRQHandler+0xfa>
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d104      	bne.n	800374a <HAL_UART_IRQHandler+0xee>
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374e:	f043 0208 	orr.w	r2, r3, #8
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d078      	beq.n	8003850 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <HAL_UART_IRQHandler+0x11c>
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f926 	bl	80039c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <HAL_UART_IRQHandler+0x144>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d031      	beq.n	8003804 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f86f 	bl	8003884 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	d123      	bne.n	80037fc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d013      	beq.n	80037f4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d0:	4a21      	ldr	r2, [pc, #132]	; (8003858 <HAL_UART_IRQHandler+0x1fc>)
 80037d2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fe f85c 	bl	8001896 <HAL_DMA_Abort_IT>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d016      	beq.n	8003812 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037ee:	4610      	mov	r0, r2
 80037f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f2:	e00e      	b.n	8003812 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f83b 	bl	8003870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fa:	e00a      	b.n	8003812 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f837 	bl	8003870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003802:	e006      	b.n	8003812 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f833 	bl	8003870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003810:	e01e      	b.n	8003850 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003812:	bf00      	nop
    return;
 8003814:	e01c      	b.n	8003850 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_UART_IRQHandler+0x1d6>
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f85c 	bl	80038e8 <UART_Transmit_IT>
    return;
 8003830:	e00f      	b.n	8003852 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <HAL_UART_IRQHandler+0x1f6>
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f8a4 	bl	8003994 <UART_EndTransmit_IT>
    return;
 800384c:	bf00      	nop
 800384e:	e000      	b.n	8003852 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003850:	bf00      	nop
  }
}
 8003852:	3720      	adds	r7, #32
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	080038c1 	.word	0x080038c1

0800385c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800389a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0201 	bic.w	r2, r2, #1
 80038aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7ff ffc8 	bl	8003870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038e0:	bf00      	nop
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b21      	cmp	r3, #33	; 0x21
 80038fa:	d144      	bne.n	8003986 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003904:	d11a      	bne.n	800393c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800391a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d105      	bne.n	8003930 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	1c9a      	adds	r2, r3, #2
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	621a      	str	r2, [r3, #32]
 800392e:	e00e      	b.n	800394e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	621a      	str	r2, [r3, #32]
 800393a:	e008      	b.n	800394e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	1c59      	adds	r1, r3, #1
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6211      	str	r1, [r2, #32]
 8003946:	781a      	ldrb	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29b      	uxth	r3, r3
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	4619      	mov	r1, r3
 800395c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10f      	bne.n	8003982 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003970:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003980:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	e000      	b.n	8003988 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003986:	2302      	movs	r3, #2
  }
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ff51 	bl	800385c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b22      	cmp	r3, #34	; 0x22
 80039d6:	d171      	bne.n	8003abc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e0:	d123      	bne.n	8003a2a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10e      	bne.n	8003a0e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	1c9a      	adds	r2, r3, #2
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a0c:	e029      	b.n	8003a62 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28
 8003a28:	e01b      	b.n	8003a62 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6858      	ldr	r0, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	1c59      	adds	r1, r3, #1
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6291      	str	r1, [r2, #40]	; 0x28
 8003a42:	b2c2      	uxtb	r2, r0
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	e00c      	b.n	8003a62 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	1c58      	adds	r0, r3, #1
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	6288      	str	r0, [r1, #40]	; 0x28
 8003a5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d120      	bne.n	8003ab8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0220 	bic.w	r2, r2, #32
 8003a84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695a      	ldr	r2, [r3, #20]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0201 	bic.w	r2, r2, #1
 8003aa4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fd f810 	bl	8000ad4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e002      	b.n	8003abe <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e000      	b.n	8003abe <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003abc:	2302      	movs	r3, #2
  }
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003acc:	b085      	sub	sp, #20
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b0a:	f023 030c 	bic.w	r3, r3, #12
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	68f9      	ldr	r1, [r7, #12]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b36:	f040 818b 	bne.w	8003e50 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4ac1      	ldr	r2, [pc, #772]	; (8003e44 <UART_SetConfig+0x37c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d005      	beq.n	8003b50 <UART_SetConfig+0x88>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4abf      	ldr	r2, [pc, #764]	; (8003e48 <UART_SetConfig+0x380>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	f040 80bd 	bne.w	8003cca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b50:	f7fe fd78 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 8003b54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	461d      	mov	r5, r3
 8003b5a:	f04f 0600 	mov.w	r6, #0
 8003b5e:	46a8      	mov	r8, r5
 8003b60:	46b1      	mov	r9, r6
 8003b62:	eb18 0308 	adds.w	r3, r8, r8
 8003b66:	eb49 0409 	adc.w	r4, r9, r9
 8003b6a:	4698      	mov	r8, r3
 8003b6c:	46a1      	mov	r9, r4
 8003b6e:	eb18 0805 	adds.w	r8, r8, r5
 8003b72:	eb49 0906 	adc.w	r9, r9, r6
 8003b76:	f04f 0100 	mov.w	r1, #0
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b82:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b86:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b8a:	4688      	mov	r8, r1
 8003b8c:	4691      	mov	r9, r2
 8003b8e:	eb18 0005 	adds.w	r0, r8, r5
 8003b92:	eb49 0106 	adc.w	r1, r9, r6
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	461d      	mov	r5, r3
 8003b9c:	f04f 0600 	mov.w	r6, #0
 8003ba0:	196b      	adds	r3, r5, r5
 8003ba2:	eb46 0406 	adc.w	r4, r6, r6
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4623      	mov	r3, r4
 8003baa:	f7fc fb69 	bl	8000280 <__aeabi_uldivmod>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4ba5      	ldr	r3, [pc, #660]	; (8003e4c <UART_SetConfig+0x384>)
 8003bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	461d      	mov	r5, r3
 8003bc4:	f04f 0600 	mov.w	r6, #0
 8003bc8:	46a9      	mov	r9, r5
 8003bca:	46b2      	mov	sl, r6
 8003bcc:	eb19 0309 	adds.w	r3, r9, r9
 8003bd0:	eb4a 040a 	adc.w	r4, sl, sl
 8003bd4:	4699      	mov	r9, r3
 8003bd6:	46a2      	mov	sl, r4
 8003bd8:	eb19 0905 	adds.w	r9, r9, r5
 8003bdc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003be0:	f04f 0100 	mov.w	r1, #0
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bf0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bf4:	4689      	mov	r9, r1
 8003bf6:	4692      	mov	sl, r2
 8003bf8:	eb19 0005 	adds.w	r0, r9, r5
 8003bfc:	eb4a 0106 	adc.w	r1, sl, r6
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	461d      	mov	r5, r3
 8003c06:	f04f 0600 	mov.w	r6, #0
 8003c0a:	196b      	adds	r3, r5, r5
 8003c0c:	eb46 0406 	adc.w	r4, r6, r6
 8003c10:	461a      	mov	r2, r3
 8003c12:	4623      	mov	r3, r4
 8003c14:	f7fc fb34 	bl	8000280 <__aeabi_uldivmod>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4b8b      	ldr	r3, [pc, #556]	; (8003e4c <UART_SetConfig+0x384>)
 8003c20:	fba3 1302 	umull	r1, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	2164      	movs	r1, #100	; 0x64
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	3332      	adds	r3, #50	; 0x32
 8003c32:	4a86      	ldr	r2, [pc, #536]	; (8003e4c <UART_SetConfig+0x384>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c40:	4498      	add	r8, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	461d      	mov	r5, r3
 8003c46:	f04f 0600 	mov.w	r6, #0
 8003c4a:	46a9      	mov	r9, r5
 8003c4c:	46b2      	mov	sl, r6
 8003c4e:	eb19 0309 	adds.w	r3, r9, r9
 8003c52:	eb4a 040a 	adc.w	r4, sl, sl
 8003c56:	4699      	mov	r9, r3
 8003c58:	46a2      	mov	sl, r4
 8003c5a:	eb19 0905 	adds.w	r9, r9, r5
 8003c5e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c76:	4689      	mov	r9, r1
 8003c78:	4692      	mov	sl, r2
 8003c7a:	eb19 0005 	adds.w	r0, r9, r5
 8003c7e:	eb4a 0106 	adc.w	r1, sl, r6
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	461d      	mov	r5, r3
 8003c88:	f04f 0600 	mov.w	r6, #0
 8003c8c:	196b      	adds	r3, r5, r5
 8003c8e:	eb46 0406 	adc.w	r4, r6, r6
 8003c92:	461a      	mov	r2, r3
 8003c94:	4623      	mov	r3, r4
 8003c96:	f7fc faf3 	bl	8000280 <__aeabi_uldivmod>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	460c      	mov	r4, r1
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	4b6a      	ldr	r3, [pc, #424]	; (8003e4c <UART_SetConfig+0x384>)
 8003ca2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	2164      	movs	r1, #100	; 0x64
 8003caa:	fb01 f303 	mul.w	r3, r1, r3
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	3332      	adds	r3, #50	; 0x32
 8003cb4:	4a65      	ldr	r2, [pc, #404]	; (8003e4c <UART_SetConfig+0x384>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	f003 0207 	and.w	r2, r3, #7
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4442      	add	r2, r8
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	e26f      	b.n	80041aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cca:	f7fe fca7 	bl	800261c <HAL_RCC_GetPCLK1Freq>
 8003cce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	461d      	mov	r5, r3
 8003cd4:	f04f 0600 	mov.w	r6, #0
 8003cd8:	46a8      	mov	r8, r5
 8003cda:	46b1      	mov	r9, r6
 8003cdc:	eb18 0308 	adds.w	r3, r8, r8
 8003ce0:	eb49 0409 	adc.w	r4, r9, r9
 8003ce4:	4698      	mov	r8, r3
 8003ce6:	46a1      	mov	r9, r4
 8003ce8:	eb18 0805 	adds.w	r8, r8, r5
 8003cec:	eb49 0906 	adc.w	r9, r9, r6
 8003cf0:	f04f 0100 	mov.w	r1, #0
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cfc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d00:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d04:	4688      	mov	r8, r1
 8003d06:	4691      	mov	r9, r2
 8003d08:	eb18 0005 	adds.w	r0, r8, r5
 8003d0c:	eb49 0106 	adc.w	r1, r9, r6
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	461d      	mov	r5, r3
 8003d16:	f04f 0600 	mov.w	r6, #0
 8003d1a:	196b      	adds	r3, r5, r5
 8003d1c:	eb46 0406 	adc.w	r4, r6, r6
 8003d20:	461a      	mov	r2, r3
 8003d22:	4623      	mov	r3, r4
 8003d24:	f7fc faac 	bl	8000280 <__aeabi_uldivmod>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	460c      	mov	r4, r1
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4b47      	ldr	r3, [pc, #284]	; (8003e4c <UART_SetConfig+0x384>)
 8003d30:	fba3 2302 	umull	r2, r3, r3, r2
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	461d      	mov	r5, r3
 8003d3e:	f04f 0600 	mov.w	r6, #0
 8003d42:	46a9      	mov	r9, r5
 8003d44:	46b2      	mov	sl, r6
 8003d46:	eb19 0309 	adds.w	r3, r9, r9
 8003d4a:	eb4a 040a 	adc.w	r4, sl, sl
 8003d4e:	4699      	mov	r9, r3
 8003d50:	46a2      	mov	sl, r4
 8003d52:	eb19 0905 	adds.w	r9, r9, r5
 8003d56:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d5a:	f04f 0100 	mov.w	r1, #0
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d6e:	4689      	mov	r9, r1
 8003d70:	4692      	mov	sl, r2
 8003d72:	eb19 0005 	adds.w	r0, r9, r5
 8003d76:	eb4a 0106 	adc.w	r1, sl, r6
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	461d      	mov	r5, r3
 8003d80:	f04f 0600 	mov.w	r6, #0
 8003d84:	196b      	adds	r3, r5, r5
 8003d86:	eb46 0406 	adc.w	r4, r6, r6
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	4623      	mov	r3, r4
 8003d8e:	f7fc fa77 	bl	8000280 <__aeabi_uldivmod>
 8003d92:	4603      	mov	r3, r0
 8003d94:	460c      	mov	r4, r1
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b2c      	ldr	r3, [pc, #176]	; (8003e4c <UART_SetConfig+0x384>)
 8003d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	2164      	movs	r1, #100	; 0x64
 8003da2:	fb01 f303 	mul.w	r3, r1, r3
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	3332      	adds	r3, #50	; 0x32
 8003dac:	4a27      	ldr	r2, [pc, #156]	; (8003e4c <UART_SetConfig+0x384>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dba:	4498      	add	r8, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	461d      	mov	r5, r3
 8003dc0:	f04f 0600 	mov.w	r6, #0
 8003dc4:	46a9      	mov	r9, r5
 8003dc6:	46b2      	mov	sl, r6
 8003dc8:	eb19 0309 	adds.w	r3, r9, r9
 8003dcc:	eb4a 040a 	adc.w	r4, sl, sl
 8003dd0:	4699      	mov	r9, r3
 8003dd2:	46a2      	mov	sl, r4
 8003dd4:	eb19 0905 	adds.w	r9, r9, r5
 8003dd8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ddc:	f04f 0100 	mov.w	r1, #0
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003de8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003df0:	4689      	mov	r9, r1
 8003df2:	4692      	mov	sl, r2
 8003df4:	eb19 0005 	adds.w	r0, r9, r5
 8003df8:	eb4a 0106 	adc.w	r1, sl, r6
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	461d      	mov	r5, r3
 8003e02:	f04f 0600 	mov.w	r6, #0
 8003e06:	196b      	adds	r3, r5, r5
 8003e08:	eb46 0406 	adc.w	r4, r6, r6
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4623      	mov	r3, r4
 8003e10:	f7fc fa36 	bl	8000280 <__aeabi_uldivmod>
 8003e14:	4603      	mov	r3, r0
 8003e16:	460c      	mov	r4, r1
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <UART_SetConfig+0x384>)
 8003e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	2164      	movs	r1, #100	; 0x64
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	3332      	adds	r3, #50	; 0x32
 8003e2e:	4a07      	ldr	r2, [pc, #28]	; (8003e4c <UART_SetConfig+0x384>)
 8003e30:	fba2 2303 	umull	r2, r3, r2, r3
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	f003 0207 	and.w	r2, r3, #7
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4442      	add	r2, r8
 8003e40:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e42:	e1b2      	b.n	80041aa <UART_SetConfig+0x6e2>
 8003e44:	40011000 	.word	0x40011000
 8003e48:	40011400 	.word	0x40011400
 8003e4c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4ad7      	ldr	r2, [pc, #860]	; (80041b4 <UART_SetConfig+0x6ec>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d005      	beq.n	8003e66 <UART_SetConfig+0x39e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4ad6      	ldr	r2, [pc, #856]	; (80041b8 <UART_SetConfig+0x6f0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	f040 80d1 	bne.w	8004008 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e66:	f7fe fbed 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 8003e6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	469a      	mov	sl, r3
 8003e70:	f04f 0b00 	mov.w	fp, #0
 8003e74:	46d0      	mov	r8, sl
 8003e76:	46d9      	mov	r9, fp
 8003e78:	eb18 0308 	adds.w	r3, r8, r8
 8003e7c:	eb49 0409 	adc.w	r4, r9, r9
 8003e80:	4698      	mov	r8, r3
 8003e82:	46a1      	mov	r9, r4
 8003e84:	eb18 080a 	adds.w	r8, r8, sl
 8003e88:	eb49 090b 	adc.w	r9, r9, fp
 8003e8c:	f04f 0100 	mov.w	r1, #0
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ea0:	4688      	mov	r8, r1
 8003ea2:	4691      	mov	r9, r2
 8003ea4:	eb1a 0508 	adds.w	r5, sl, r8
 8003ea8:	eb4b 0609 	adc.w	r6, fp, r9
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	f04f 0400 	mov.w	r4, #0
 8003ebe:	0094      	lsls	r4, r2, #2
 8003ec0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ec4:	008b      	lsls	r3, r1, #2
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	4623      	mov	r3, r4
 8003eca:	4628      	mov	r0, r5
 8003ecc:	4631      	mov	r1, r6
 8003ece:	f7fc f9d7 	bl	8000280 <__aeabi_uldivmod>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	460c      	mov	r4, r1
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4bb8      	ldr	r3, [pc, #736]	; (80041bc <UART_SetConfig+0x6f4>)
 8003eda:	fba3 2302 	umull	r2, r3, r3, r2
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	469b      	mov	fp, r3
 8003ee8:	f04f 0c00 	mov.w	ip, #0
 8003eec:	46d9      	mov	r9, fp
 8003eee:	46e2      	mov	sl, ip
 8003ef0:	eb19 0309 	adds.w	r3, r9, r9
 8003ef4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ef8:	4699      	mov	r9, r3
 8003efa:	46a2      	mov	sl, r4
 8003efc:	eb19 090b 	adds.w	r9, r9, fp
 8003f00:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f04:	f04f 0100 	mov.w	r1, #0
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f18:	4689      	mov	r9, r1
 8003f1a:	4692      	mov	sl, r2
 8003f1c:	eb1b 0509 	adds.w	r5, fp, r9
 8003f20:	eb4c 060a 	adc.w	r6, ip, sl
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	f04f 0400 	mov.w	r4, #0
 8003f36:	0094      	lsls	r4, r2, #2
 8003f38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f3c:	008b      	lsls	r3, r1, #2
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4623      	mov	r3, r4
 8003f42:	4628      	mov	r0, r5
 8003f44:	4631      	mov	r1, r6
 8003f46:	f7fc f99b 	bl	8000280 <__aeabi_uldivmod>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4b9a      	ldr	r3, [pc, #616]	; (80041bc <UART_SetConfig+0x6f4>)
 8003f52:	fba3 1302 	umull	r1, r3, r3, r2
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	2164      	movs	r1, #100	; 0x64
 8003f5a:	fb01 f303 	mul.w	r3, r1, r3
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	3332      	adds	r3, #50	; 0x32
 8003f64:	4a95      	ldr	r2, [pc, #596]	; (80041bc <UART_SetConfig+0x6f4>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f70:	4498      	add	r8, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	469b      	mov	fp, r3
 8003f76:	f04f 0c00 	mov.w	ip, #0
 8003f7a:	46d9      	mov	r9, fp
 8003f7c:	46e2      	mov	sl, ip
 8003f7e:	eb19 0309 	adds.w	r3, r9, r9
 8003f82:	eb4a 040a 	adc.w	r4, sl, sl
 8003f86:	4699      	mov	r9, r3
 8003f88:	46a2      	mov	sl, r4
 8003f8a:	eb19 090b 	adds.w	r9, r9, fp
 8003f8e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f92:	f04f 0100 	mov.w	r1, #0
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fa2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fa6:	4689      	mov	r9, r1
 8003fa8:	4692      	mov	sl, r2
 8003faa:	eb1b 0509 	adds.w	r5, fp, r9
 8003fae:	eb4c 060a 	adc.w	r6, ip, sl
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	f04f 0400 	mov.w	r4, #0
 8003fc4:	0094      	lsls	r4, r2, #2
 8003fc6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fca:	008b      	lsls	r3, r1, #2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4623      	mov	r3, r4
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	4631      	mov	r1, r6
 8003fd4:	f7fc f954 	bl	8000280 <__aeabi_uldivmod>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	460c      	mov	r4, r1
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b77      	ldr	r3, [pc, #476]	; (80041bc <UART_SetConfig+0x6f4>)
 8003fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	2164      	movs	r1, #100	; 0x64
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	3332      	adds	r3, #50	; 0x32
 8003ff2:	4a72      	ldr	r2, [pc, #456]	; (80041bc <UART_SetConfig+0x6f4>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	f003 020f 	and.w	r2, r3, #15
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4442      	add	r2, r8
 8004004:	609a      	str	r2, [r3, #8]
 8004006:	e0d0      	b.n	80041aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004008:	f7fe fb08 	bl	800261c <HAL_RCC_GetPCLK1Freq>
 800400c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	469a      	mov	sl, r3
 8004012:	f04f 0b00 	mov.w	fp, #0
 8004016:	46d0      	mov	r8, sl
 8004018:	46d9      	mov	r9, fp
 800401a:	eb18 0308 	adds.w	r3, r8, r8
 800401e:	eb49 0409 	adc.w	r4, r9, r9
 8004022:	4698      	mov	r8, r3
 8004024:	46a1      	mov	r9, r4
 8004026:	eb18 080a 	adds.w	r8, r8, sl
 800402a:	eb49 090b 	adc.w	r9, r9, fp
 800402e:	f04f 0100 	mov.w	r1, #0
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800403a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800403e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004042:	4688      	mov	r8, r1
 8004044:	4691      	mov	r9, r2
 8004046:	eb1a 0508 	adds.w	r5, sl, r8
 800404a:	eb4b 0609 	adc.w	r6, fp, r9
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4619      	mov	r1, r3
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	f04f 0400 	mov.w	r4, #0
 8004060:	0094      	lsls	r4, r2, #2
 8004062:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004066:	008b      	lsls	r3, r1, #2
 8004068:	461a      	mov	r2, r3
 800406a:	4623      	mov	r3, r4
 800406c:	4628      	mov	r0, r5
 800406e:	4631      	mov	r1, r6
 8004070:	f7fc f906 	bl	8000280 <__aeabi_uldivmod>
 8004074:	4603      	mov	r3, r0
 8004076:	460c      	mov	r4, r1
 8004078:	461a      	mov	r2, r3
 800407a:	4b50      	ldr	r3, [pc, #320]	; (80041bc <UART_SetConfig+0x6f4>)
 800407c:	fba3 2302 	umull	r2, r3, r3, r2
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	469b      	mov	fp, r3
 800408a:	f04f 0c00 	mov.w	ip, #0
 800408e:	46d9      	mov	r9, fp
 8004090:	46e2      	mov	sl, ip
 8004092:	eb19 0309 	adds.w	r3, r9, r9
 8004096:	eb4a 040a 	adc.w	r4, sl, sl
 800409a:	4699      	mov	r9, r3
 800409c:	46a2      	mov	sl, r4
 800409e:	eb19 090b 	adds.w	r9, r9, fp
 80040a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040a6:	f04f 0100 	mov.w	r1, #0
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040ba:	4689      	mov	r9, r1
 80040bc:	4692      	mov	sl, r2
 80040be:	eb1b 0509 	adds.w	r5, fp, r9
 80040c2:	eb4c 060a 	adc.w	r6, ip, sl
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4619      	mov	r1, r3
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	f04f 0400 	mov.w	r4, #0
 80040d8:	0094      	lsls	r4, r2, #2
 80040da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040de:	008b      	lsls	r3, r1, #2
 80040e0:	461a      	mov	r2, r3
 80040e2:	4623      	mov	r3, r4
 80040e4:	4628      	mov	r0, r5
 80040e6:	4631      	mov	r1, r6
 80040e8:	f7fc f8ca 	bl	8000280 <__aeabi_uldivmod>
 80040ec:	4603      	mov	r3, r0
 80040ee:	460c      	mov	r4, r1
 80040f0:	461a      	mov	r2, r3
 80040f2:	4b32      	ldr	r3, [pc, #200]	; (80041bc <UART_SetConfig+0x6f4>)
 80040f4:	fba3 1302 	umull	r1, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	2164      	movs	r1, #100	; 0x64
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	3332      	adds	r3, #50	; 0x32
 8004106:	4a2d      	ldr	r2, [pc, #180]	; (80041bc <UART_SetConfig+0x6f4>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004112:	4498      	add	r8, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	469b      	mov	fp, r3
 8004118:	f04f 0c00 	mov.w	ip, #0
 800411c:	46d9      	mov	r9, fp
 800411e:	46e2      	mov	sl, ip
 8004120:	eb19 0309 	adds.w	r3, r9, r9
 8004124:	eb4a 040a 	adc.w	r4, sl, sl
 8004128:	4699      	mov	r9, r3
 800412a:	46a2      	mov	sl, r4
 800412c:	eb19 090b 	adds.w	r9, r9, fp
 8004130:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004134:	f04f 0100 	mov.w	r1, #0
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004140:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004144:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004148:	4689      	mov	r9, r1
 800414a:	4692      	mov	sl, r2
 800414c:	eb1b 0509 	adds.w	r5, fp, r9
 8004150:	eb4c 060a 	adc.w	r6, ip, sl
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4619      	mov	r1, r3
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	f04f 0400 	mov.w	r4, #0
 8004166:	0094      	lsls	r4, r2, #2
 8004168:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800416c:	008b      	lsls	r3, r1, #2
 800416e:	461a      	mov	r2, r3
 8004170:	4623      	mov	r3, r4
 8004172:	4628      	mov	r0, r5
 8004174:	4631      	mov	r1, r6
 8004176:	f7fc f883 	bl	8000280 <__aeabi_uldivmod>
 800417a:	4603      	mov	r3, r0
 800417c:	460c      	mov	r4, r1
 800417e:	461a      	mov	r2, r3
 8004180:	4b0e      	ldr	r3, [pc, #56]	; (80041bc <UART_SetConfig+0x6f4>)
 8004182:	fba3 1302 	umull	r1, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2164      	movs	r1, #100	; 0x64
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	3332      	adds	r3, #50	; 0x32
 8004194:	4a09      	ldr	r2, [pc, #36]	; (80041bc <UART_SetConfig+0x6f4>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	f003 020f 	and.w	r2, r3, #15
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4442      	add	r2, r8
 80041a6:	609a      	str	r2, [r3, #8]
}
 80041a8:	e7ff      	b.n	80041aa <UART_SetConfig+0x6e2>
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041b4:	40011000 	.word	0x40011000
 80041b8:	40011400 	.word	0x40011400
 80041bc:	51eb851f 	.word	0x51eb851f

080041c0 <atoi>:
 80041c0:	220a      	movs	r2, #10
 80041c2:	2100      	movs	r1, #0
 80041c4:	f000 b952 	b.w	800446c <strtol>

080041c8 <__errno>:
 80041c8:	4b01      	ldr	r3, [pc, #4]	; (80041d0 <__errno+0x8>)
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	2000003c 	.word	0x2000003c

080041d4 <__libc_init_array>:
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	4e0d      	ldr	r6, [pc, #52]	; (800420c <__libc_init_array+0x38>)
 80041d8:	4c0d      	ldr	r4, [pc, #52]	; (8004210 <__libc_init_array+0x3c>)
 80041da:	1ba4      	subs	r4, r4, r6
 80041dc:	10a4      	asrs	r4, r4, #2
 80041de:	2500      	movs	r5, #0
 80041e0:	42a5      	cmp	r5, r4
 80041e2:	d109      	bne.n	80041f8 <__libc_init_array+0x24>
 80041e4:	4e0b      	ldr	r6, [pc, #44]	; (8004214 <__libc_init_array+0x40>)
 80041e6:	4c0c      	ldr	r4, [pc, #48]	; (8004218 <__libc_init_array+0x44>)
 80041e8:	f001 f87a 	bl	80052e0 <_init>
 80041ec:	1ba4      	subs	r4, r4, r6
 80041ee:	10a4      	asrs	r4, r4, #2
 80041f0:	2500      	movs	r5, #0
 80041f2:	42a5      	cmp	r5, r4
 80041f4:	d105      	bne.n	8004202 <__libc_init_array+0x2e>
 80041f6:	bd70      	pop	{r4, r5, r6, pc}
 80041f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041fc:	4798      	blx	r3
 80041fe:	3501      	adds	r5, #1
 8004200:	e7ee      	b.n	80041e0 <__libc_init_array+0xc>
 8004202:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004206:	4798      	blx	r3
 8004208:	3501      	adds	r5, #1
 800420a:	e7f2      	b.n	80041f2 <__libc_init_array+0x1e>
 800420c:	08005534 	.word	0x08005534
 8004210:	08005534 	.word	0x08005534
 8004214:	08005534 	.word	0x08005534
 8004218:	08005538 	.word	0x08005538

0800421c <memset>:
 800421c:	4402      	add	r2, r0
 800421e:	4603      	mov	r3, r0
 8004220:	4293      	cmp	r3, r2
 8004222:	d100      	bne.n	8004226 <memset+0xa>
 8004224:	4770      	bx	lr
 8004226:	f803 1b01 	strb.w	r1, [r3], #1
 800422a:	e7f9      	b.n	8004220 <memset+0x4>

0800422c <iprintf>:
 800422c:	b40f      	push	{r0, r1, r2, r3}
 800422e:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <iprintf+0x2c>)
 8004230:	b513      	push	{r0, r1, r4, lr}
 8004232:	681c      	ldr	r4, [r3, #0]
 8004234:	b124      	cbz	r4, 8004240 <iprintf+0x14>
 8004236:	69a3      	ldr	r3, [r4, #24]
 8004238:	b913      	cbnz	r3, 8004240 <iprintf+0x14>
 800423a:	4620      	mov	r0, r4
 800423c:	f000 fadc 	bl	80047f8 <__sinit>
 8004240:	ab05      	add	r3, sp, #20
 8004242:	9a04      	ldr	r2, [sp, #16]
 8004244:	68a1      	ldr	r1, [r4, #8]
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	4620      	mov	r0, r4
 800424a:	f000 fcab 	bl	8004ba4 <_vfiprintf_r>
 800424e:	b002      	add	sp, #8
 8004250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004254:	b004      	add	sp, #16
 8004256:	4770      	bx	lr
 8004258:	2000003c 	.word	0x2000003c

0800425c <putchar>:
 800425c:	b538      	push	{r3, r4, r5, lr}
 800425e:	4b08      	ldr	r3, [pc, #32]	; (8004280 <putchar+0x24>)
 8004260:	681c      	ldr	r4, [r3, #0]
 8004262:	4605      	mov	r5, r0
 8004264:	b124      	cbz	r4, 8004270 <putchar+0x14>
 8004266:	69a3      	ldr	r3, [r4, #24]
 8004268:	b913      	cbnz	r3, 8004270 <putchar+0x14>
 800426a:	4620      	mov	r0, r4
 800426c:	f000 fac4 	bl	80047f8 <__sinit>
 8004270:	68a2      	ldr	r2, [r4, #8]
 8004272:	4629      	mov	r1, r5
 8004274:	4620      	mov	r0, r4
 8004276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800427a:	f000 bf31 	b.w	80050e0 <_putc_r>
 800427e:	bf00      	nop
 8004280:	2000003c 	.word	0x2000003c

08004284 <_puts_r>:
 8004284:	b570      	push	{r4, r5, r6, lr}
 8004286:	460e      	mov	r6, r1
 8004288:	4605      	mov	r5, r0
 800428a:	b118      	cbz	r0, 8004294 <_puts_r+0x10>
 800428c:	6983      	ldr	r3, [r0, #24]
 800428e:	b90b      	cbnz	r3, 8004294 <_puts_r+0x10>
 8004290:	f000 fab2 	bl	80047f8 <__sinit>
 8004294:	69ab      	ldr	r3, [r5, #24]
 8004296:	68ac      	ldr	r4, [r5, #8]
 8004298:	b913      	cbnz	r3, 80042a0 <_puts_r+0x1c>
 800429a:	4628      	mov	r0, r5
 800429c:	f000 faac 	bl	80047f8 <__sinit>
 80042a0:	4b23      	ldr	r3, [pc, #140]	; (8004330 <_puts_r+0xac>)
 80042a2:	429c      	cmp	r4, r3
 80042a4:	d117      	bne.n	80042d6 <_puts_r+0x52>
 80042a6:	686c      	ldr	r4, [r5, #4]
 80042a8:	89a3      	ldrh	r3, [r4, #12]
 80042aa:	071b      	lsls	r3, r3, #28
 80042ac:	d51d      	bpl.n	80042ea <_puts_r+0x66>
 80042ae:	6923      	ldr	r3, [r4, #16]
 80042b0:	b1db      	cbz	r3, 80042ea <_puts_r+0x66>
 80042b2:	3e01      	subs	r6, #1
 80042b4:	68a3      	ldr	r3, [r4, #8]
 80042b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042ba:	3b01      	subs	r3, #1
 80042bc:	60a3      	str	r3, [r4, #8]
 80042be:	b9e9      	cbnz	r1, 80042fc <_puts_r+0x78>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	da2e      	bge.n	8004322 <_puts_r+0x9e>
 80042c4:	4622      	mov	r2, r4
 80042c6:	210a      	movs	r1, #10
 80042c8:	4628      	mov	r0, r5
 80042ca:	f000 f8e5 	bl	8004498 <__swbuf_r>
 80042ce:	3001      	adds	r0, #1
 80042d0:	d011      	beq.n	80042f6 <_puts_r+0x72>
 80042d2:	200a      	movs	r0, #10
 80042d4:	e011      	b.n	80042fa <_puts_r+0x76>
 80042d6:	4b17      	ldr	r3, [pc, #92]	; (8004334 <_puts_r+0xb0>)
 80042d8:	429c      	cmp	r4, r3
 80042da:	d101      	bne.n	80042e0 <_puts_r+0x5c>
 80042dc:	68ac      	ldr	r4, [r5, #8]
 80042de:	e7e3      	b.n	80042a8 <_puts_r+0x24>
 80042e0:	4b15      	ldr	r3, [pc, #84]	; (8004338 <_puts_r+0xb4>)
 80042e2:	429c      	cmp	r4, r3
 80042e4:	bf08      	it	eq
 80042e6:	68ec      	ldreq	r4, [r5, #12]
 80042e8:	e7de      	b.n	80042a8 <_puts_r+0x24>
 80042ea:	4621      	mov	r1, r4
 80042ec:	4628      	mov	r0, r5
 80042ee:	f000 f925 	bl	800453c <__swsetup_r>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d0dd      	beq.n	80042b2 <_puts_r+0x2e>
 80042f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	da04      	bge.n	800430a <_puts_r+0x86>
 8004300:	69a2      	ldr	r2, [r4, #24]
 8004302:	429a      	cmp	r2, r3
 8004304:	dc06      	bgt.n	8004314 <_puts_r+0x90>
 8004306:	290a      	cmp	r1, #10
 8004308:	d004      	beq.n	8004314 <_puts_r+0x90>
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	6022      	str	r2, [r4, #0]
 8004310:	7019      	strb	r1, [r3, #0]
 8004312:	e7cf      	b.n	80042b4 <_puts_r+0x30>
 8004314:	4622      	mov	r2, r4
 8004316:	4628      	mov	r0, r5
 8004318:	f000 f8be 	bl	8004498 <__swbuf_r>
 800431c:	3001      	adds	r0, #1
 800431e:	d1c9      	bne.n	80042b4 <_puts_r+0x30>
 8004320:	e7e9      	b.n	80042f6 <_puts_r+0x72>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	200a      	movs	r0, #10
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	6022      	str	r2, [r4, #0]
 800432a:	7018      	strb	r0, [r3, #0]
 800432c:	e7e5      	b.n	80042fa <_puts_r+0x76>
 800432e:	bf00      	nop
 8004330:	080053ac 	.word	0x080053ac
 8004334:	080053cc 	.word	0x080053cc
 8004338:	0800538c 	.word	0x0800538c

0800433c <puts>:
 800433c:	4b02      	ldr	r3, [pc, #8]	; (8004348 <puts+0xc>)
 800433e:	4601      	mov	r1, r0
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	f7ff bf9f 	b.w	8004284 <_puts_r>
 8004346:	bf00      	nop
 8004348:	2000003c 	.word	0x2000003c

0800434c <strncat>:
 800434c:	b530      	push	{r4, r5, lr}
 800434e:	4603      	mov	r3, r0
 8004350:	781c      	ldrb	r4, [r3, #0]
 8004352:	1c5d      	adds	r5, r3, #1
 8004354:	b944      	cbnz	r4, 8004368 <strncat+0x1c>
 8004356:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 800435a:	d304      	bcc.n	8004366 <strncat+0x1a>
 800435c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004360:	f803 4b01 	strb.w	r4, [r3], #1
 8004364:	b914      	cbnz	r4, 800436c <strncat+0x20>
 8004366:	bd30      	pop	{r4, r5, pc}
 8004368:	462b      	mov	r3, r5
 800436a:	e7f1      	b.n	8004350 <strncat+0x4>
 800436c:	2a00      	cmp	r2, #0
 800436e:	d1f2      	bne.n	8004356 <strncat+0xa>
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	e7f0      	b.n	8004356 <strncat+0xa>

08004374 <_strtol_l.isra.0>:
 8004374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004378:	4680      	mov	r8, r0
 800437a:	4689      	mov	r9, r1
 800437c:	4692      	mov	sl, r2
 800437e:	461e      	mov	r6, r3
 8004380:	460f      	mov	r7, r1
 8004382:	463d      	mov	r5, r7
 8004384:	9808      	ldr	r0, [sp, #32]
 8004386:	f815 4b01 	ldrb.w	r4, [r5], #1
 800438a:	f000 fabf 	bl	800490c <__locale_ctype_ptr_l>
 800438e:	4420      	add	r0, r4
 8004390:	7843      	ldrb	r3, [r0, #1]
 8004392:	f013 0308 	ands.w	r3, r3, #8
 8004396:	d132      	bne.n	80043fe <_strtol_l.isra.0+0x8a>
 8004398:	2c2d      	cmp	r4, #45	; 0x2d
 800439a:	d132      	bne.n	8004402 <_strtol_l.isra.0+0x8e>
 800439c:	787c      	ldrb	r4, [r7, #1]
 800439e:	1cbd      	adds	r5, r7, #2
 80043a0:	2201      	movs	r2, #1
 80043a2:	2e00      	cmp	r6, #0
 80043a4:	d05d      	beq.n	8004462 <_strtol_l.isra.0+0xee>
 80043a6:	2e10      	cmp	r6, #16
 80043a8:	d109      	bne.n	80043be <_strtol_l.isra.0+0x4a>
 80043aa:	2c30      	cmp	r4, #48	; 0x30
 80043ac:	d107      	bne.n	80043be <_strtol_l.isra.0+0x4a>
 80043ae:	782b      	ldrb	r3, [r5, #0]
 80043b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80043b4:	2b58      	cmp	r3, #88	; 0x58
 80043b6:	d14f      	bne.n	8004458 <_strtol_l.isra.0+0xe4>
 80043b8:	786c      	ldrb	r4, [r5, #1]
 80043ba:	2610      	movs	r6, #16
 80043bc:	3502      	adds	r5, #2
 80043be:	2a00      	cmp	r2, #0
 80043c0:	bf14      	ite	ne
 80043c2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80043c6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80043ca:	2700      	movs	r7, #0
 80043cc:	fbb1 fcf6 	udiv	ip, r1, r6
 80043d0:	4638      	mov	r0, r7
 80043d2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80043d6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80043da:	2b09      	cmp	r3, #9
 80043dc:	d817      	bhi.n	800440e <_strtol_l.isra.0+0x9a>
 80043de:	461c      	mov	r4, r3
 80043e0:	42a6      	cmp	r6, r4
 80043e2:	dd23      	ble.n	800442c <_strtol_l.isra.0+0xb8>
 80043e4:	1c7b      	adds	r3, r7, #1
 80043e6:	d007      	beq.n	80043f8 <_strtol_l.isra.0+0x84>
 80043e8:	4584      	cmp	ip, r0
 80043ea:	d31c      	bcc.n	8004426 <_strtol_l.isra.0+0xb2>
 80043ec:	d101      	bne.n	80043f2 <_strtol_l.isra.0+0x7e>
 80043ee:	45a6      	cmp	lr, r4
 80043f0:	db19      	blt.n	8004426 <_strtol_l.isra.0+0xb2>
 80043f2:	fb00 4006 	mla	r0, r0, r6, r4
 80043f6:	2701      	movs	r7, #1
 80043f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043fc:	e7eb      	b.n	80043d6 <_strtol_l.isra.0+0x62>
 80043fe:	462f      	mov	r7, r5
 8004400:	e7bf      	b.n	8004382 <_strtol_l.isra.0+0xe>
 8004402:	2c2b      	cmp	r4, #43	; 0x2b
 8004404:	bf04      	itt	eq
 8004406:	1cbd      	addeq	r5, r7, #2
 8004408:	787c      	ldrbeq	r4, [r7, #1]
 800440a:	461a      	mov	r2, r3
 800440c:	e7c9      	b.n	80043a2 <_strtol_l.isra.0+0x2e>
 800440e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004412:	2b19      	cmp	r3, #25
 8004414:	d801      	bhi.n	800441a <_strtol_l.isra.0+0xa6>
 8004416:	3c37      	subs	r4, #55	; 0x37
 8004418:	e7e2      	b.n	80043e0 <_strtol_l.isra.0+0x6c>
 800441a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800441e:	2b19      	cmp	r3, #25
 8004420:	d804      	bhi.n	800442c <_strtol_l.isra.0+0xb8>
 8004422:	3c57      	subs	r4, #87	; 0x57
 8004424:	e7dc      	b.n	80043e0 <_strtol_l.isra.0+0x6c>
 8004426:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800442a:	e7e5      	b.n	80043f8 <_strtol_l.isra.0+0x84>
 800442c:	1c7b      	adds	r3, r7, #1
 800442e:	d108      	bne.n	8004442 <_strtol_l.isra.0+0xce>
 8004430:	2322      	movs	r3, #34	; 0x22
 8004432:	f8c8 3000 	str.w	r3, [r8]
 8004436:	4608      	mov	r0, r1
 8004438:	f1ba 0f00 	cmp.w	sl, #0
 800443c:	d107      	bne.n	800444e <_strtol_l.isra.0+0xda>
 800443e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004442:	b102      	cbz	r2, 8004446 <_strtol_l.isra.0+0xd2>
 8004444:	4240      	negs	r0, r0
 8004446:	f1ba 0f00 	cmp.w	sl, #0
 800444a:	d0f8      	beq.n	800443e <_strtol_l.isra.0+0xca>
 800444c:	b10f      	cbz	r7, 8004452 <_strtol_l.isra.0+0xde>
 800444e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8004452:	f8ca 9000 	str.w	r9, [sl]
 8004456:	e7f2      	b.n	800443e <_strtol_l.isra.0+0xca>
 8004458:	2430      	movs	r4, #48	; 0x30
 800445a:	2e00      	cmp	r6, #0
 800445c:	d1af      	bne.n	80043be <_strtol_l.isra.0+0x4a>
 800445e:	2608      	movs	r6, #8
 8004460:	e7ad      	b.n	80043be <_strtol_l.isra.0+0x4a>
 8004462:	2c30      	cmp	r4, #48	; 0x30
 8004464:	d0a3      	beq.n	80043ae <_strtol_l.isra.0+0x3a>
 8004466:	260a      	movs	r6, #10
 8004468:	e7a9      	b.n	80043be <_strtol_l.isra.0+0x4a>
	...

0800446c <strtol>:
 800446c:	4b08      	ldr	r3, [pc, #32]	; (8004490 <strtol+0x24>)
 800446e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004470:	681c      	ldr	r4, [r3, #0]
 8004472:	4d08      	ldr	r5, [pc, #32]	; (8004494 <strtol+0x28>)
 8004474:	6a23      	ldr	r3, [r4, #32]
 8004476:	2b00      	cmp	r3, #0
 8004478:	bf08      	it	eq
 800447a:	462b      	moveq	r3, r5
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	4613      	mov	r3, r2
 8004480:	460a      	mov	r2, r1
 8004482:	4601      	mov	r1, r0
 8004484:	4620      	mov	r0, r4
 8004486:	f7ff ff75 	bl	8004374 <_strtol_l.isra.0>
 800448a:	b003      	add	sp, #12
 800448c:	bd30      	pop	{r4, r5, pc}
 800448e:	bf00      	nop
 8004490:	2000003c 	.word	0x2000003c
 8004494:	200000a0 	.word	0x200000a0

08004498 <__swbuf_r>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	460e      	mov	r6, r1
 800449c:	4614      	mov	r4, r2
 800449e:	4605      	mov	r5, r0
 80044a0:	b118      	cbz	r0, 80044aa <__swbuf_r+0x12>
 80044a2:	6983      	ldr	r3, [r0, #24]
 80044a4:	b90b      	cbnz	r3, 80044aa <__swbuf_r+0x12>
 80044a6:	f000 f9a7 	bl	80047f8 <__sinit>
 80044aa:	4b21      	ldr	r3, [pc, #132]	; (8004530 <__swbuf_r+0x98>)
 80044ac:	429c      	cmp	r4, r3
 80044ae:	d12a      	bne.n	8004506 <__swbuf_r+0x6e>
 80044b0:	686c      	ldr	r4, [r5, #4]
 80044b2:	69a3      	ldr	r3, [r4, #24]
 80044b4:	60a3      	str	r3, [r4, #8]
 80044b6:	89a3      	ldrh	r3, [r4, #12]
 80044b8:	071a      	lsls	r2, r3, #28
 80044ba:	d52e      	bpl.n	800451a <__swbuf_r+0x82>
 80044bc:	6923      	ldr	r3, [r4, #16]
 80044be:	b363      	cbz	r3, 800451a <__swbuf_r+0x82>
 80044c0:	6923      	ldr	r3, [r4, #16]
 80044c2:	6820      	ldr	r0, [r4, #0]
 80044c4:	1ac0      	subs	r0, r0, r3
 80044c6:	6963      	ldr	r3, [r4, #20]
 80044c8:	b2f6      	uxtb	r6, r6
 80044ca:	4283      	cmp	r3, r0
 80044cc:	4637      	mov	r7, r6
 80044ce:	dc04      	bgt.n	80044da <__swbuf_r+0x42>
 80044d0:	4621      	mov	r1, r4
 80044d2:	4628      	mov	r0, r5
 80044d4:	f000 f926 	bl	8004724 <_fflush_r>
 80044d8:	bb28      	cbnz	r0, 8004526 <__swbuf_r+0x8e>
 80044da:	68a3      	ldr	r3, [r4, #8]
 80044dc:	3b01      	subs	r3, #1
 80044de:	60a3      	str	r3, [r4, #8]
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	6022      	str	r2, [r4, #0]
 80044e6:	701e      	strb	r6, [r3, #0]
 80044e8:	6963      	ldr	r3, [r4, #20]
 80044ea:	3001      	adds	r0, #1
 80044ec:	4283      	cmp	r3, r0
 80044ee:	d004      	beq.n	80044fa <__swbuf_r+0x62>
 80044f0:	89a3      	ldrh	r3, [r4, #12]
 80044f2:	07db      	lsls	r3, r3, #31
 80044f4:	d519      	bpl.n	800452a <__swbuf_r+0x92>
 80044f6:	2e0a      	cmp	r6, #10
 80044f8:	d117      	bne.n	800452a <__swbuf_r+0x92>
 80044fa:	4621      	mov	r1, r4
 80044fc:	4628      	mov	r0, r5
 80044fe:	f000 f911 	bl	8004724 <_fflush_r>
 8004502:	b190      	cbz	r0, 800452a <__swbuf_r+0x92>
 8004504:	e00f      	b.n	8004526 <__swbuf_r+0x8e>
 8004506:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <__swbuf_r+0x9c>)
 8004508:	429c      	cmp	r4, r3
 800450a:	d101      	bne.n	8004510 <__swbuf_r+0x78>
 800450c:	68ac      	ldr	r4, [r5, #8]
 800450e:	e7d0      	b.n	80044b2 <__swbuf_r+0x1a>
 8004510:	4b09      	ldr	r3, [pc, #36]	; (8004538 <__swbuf_r+0xa0>)
 8004512:	429c      	cmp	r4, r3
 8004514:	bf08      	it	eq
 8004516:	68ec      	ldreq	r4, [r5, #12]
 8004518:	e7cb      	b.n	80044b2 <__swbuf_r+0x1a>
 800451a:	4621      	mov	r1, r4
 800451c:	4628      	mov	r0, r5
 800451e:	f000 f80d 	bl	800453c <__swsetup_r>
 8004522:	2800      	cmp	r0, #0
 8004524:	d0cc      	beq.n	80044c0 <__swbuf_r+0x28>
 8004526:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800452a:	4638      	mov	r0, r7
 800452c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800452e:	bf00      	nop
 8004530:	080053ac 	.word	0x080053ac
 8004534:	080053cc 	.word	0x080053cc
 8004538:	0800538c 	.word	0x0800538c

0800453c <__swsetup_r>:
 800453c:	4b32      	ldr	r3, [pc, #200]	; (8004608 <__swsetup_r+0xcc>)
 800453e:	b570      	push	{r4, r5, r6, lr}
 8004540:	681d      	ldr	r5, [r3, #0]
 8004542:	4606      	mov	r6, r0
 8004544:	460c      	mov	r4, r1
 8004546:	b125      	cbz	r5, 8004552 <__swsetup_r+0x16>
 8004548:	69ab      	ldr	r3, [r5, #24]
 800454a:	b913      	cbnz	r3, 8004552 <__swsetup_r+0x16>
 800454c:	4628      	mov	r0, r5
 800454e:	f000 f953 	bl	80047f8 <__sinit>
 8004552:	4b2e      	ldr	r3, [pc, #184]	; (800460c <__swsetup_r+0xd0>)
 8004554:	429c      	cmp	r4, r3
 8004556:	d10f      	bne.n	8004578 <__swsetup_r+0x3c>
 8004558:	686c      	ldr	r4, [r5, #4]
 800455a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800455e:	b29a      	uxth	r2, r3
 8004560:	0715      	lsls	r5, r2, #28
 8004562:	d42c      	bmi.n	80045be <__swsetup_r+0x82>
 8004564:	06d0      	lsls	r0, r2, #27
 8004566:	d411      	bmi.n	800458c <__swsetup_r+0x50>
 8004568:	2209      	movs	r2, #9
 800456a:	6032      	str	r2, [r6, #0]
 800456c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004570:	81a3      	strh	r3, [r4, #12]
 8004572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004576:	e03e      	b.n	80045f6 <__swsetup_r+0xba>
 8004578:	4b25      	ldr	r3, [pc, #148]	; (8004610 <__swsetup_r+0xd4>)
 800457a:	429c      	cmp	r4, r3
 800457c:	d101      	bne.n	8004582 <__swsetup_r+0x46>
 800457e:	68ac      	ldr	r4, [r5, #8]
 8004580:	e7eb      	b.n	800455a <__swsetup_r+0x1e>
 8004582:	4b24      	ldr	r3, [pc, #144]	; (8004614 <__swsetup_r+0xd8>)
 8004584:	429c      	cmp	r4, r3
 8004586:	bf08      	it	eq
 8004588:	68ec      	ldreq	r4, [r5, #12]
 800458a:	e7e6      	b.n	800455a <__swsetup_r+0x1e>
 800458c:	0751      	lsls	r1, r2, #29
 800458e:	d512      	bpl.n	80045b6 <__swsetup_r+0x7a>
 8004590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004592:	b141      	cbz	r1, 80045a6 <__swsetup_r+0x6a>
 8004594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004598:	4299      	cmp	r1, r3
 800459a:	d002      	beq.n	80045a2 <__swsetup_r+0x66>
 800459c:	4630      	mov	r0, r6
 800459e:	f000 fa2f 	bl	8004a00 <_free_r>
 80045a2:	2300      	movs	r3, #0
 80045a4:	6363      	str	r3, [r4, #52]	; 0x34
 80045a6:	89a3      	ldrh	r3, [r4, #12]
 80045a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045ac:	81a3      	strh	r3, [r4, #12]
 80045ae:	2300      	movs	r3, #0
 80045b0:	6063      	str	r3, [r4, #4]
 80045b2:	6923      	ldr	r3, [r4, #16]
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	89a3      	ldrh	r3, [r4, #12]
 80045b8:	f043 0308 	orr.w	r3, r3, #8
 80045bc:	81a3      	strh	r3, [r4, #12]
 80045be:	6923      	ldr	r3, [r4, #16]
 80045c0:	b94b      	cbnz	r3, 80045d6 <__swsetup_r+0x9a>
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045cc:	d003      	beq.n	80045d6 <__swsetup_r+0x9a>
 80045ce:	4621      	mov	r1, r4
 80045d0:	4630      	mov	r0, r6
 80045d2:	f000 f9c3 	bl	800495c <__smakebuf_r>
 80045d6:	89a2      	ldrh	r2, [r4, #12]
 80045d8:	f012 0301 	ands.w	r3, r2, #1
 80045dc:	d00c      	beq.n	80045f8 <__swsetup_r+0xbc>
 80045de:	2300      	movs	r3, #0
 80045e0:	60a3      	str	r3, [r4, #8]
 80045e2:	6963      	ldr	r3, [r4, #20]
 80045e4:	425b      	negs	r3, r3
 80045e6:	61a3      	str	r3, [r4, #24]
 80045e8:	6923      	ldr	r3, [r4, #16]
 80045ea:	b953      	cbnz	r3, 8004602 <__swsetup_r+0xc6>
 80045ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80045f4:	d1ba      	bne.n	800456c <__swsetup_r+0x30>
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
 80045f8:	0792      	lsls	r2, r2, #30
 80045fa:	bf58      	it	pl
 80045fc:	6963      	ldrpl	r3, [r4, #20]
 80045fe:	60a3      	str	r3, [r4, #8]
 8004600:	e7f2      	b.n	80045e8 <__swsetup_r+0xac>
 8004602:	2000      	movs	r0, #0
 8004604:	e7f7      	b.n	80045f6 <__swsetup_r+0xba>
 8004606:	bf00      	nop
 8004608:	2000003c 	.word	0x2000003c
 800460c:	080053ac 	.word	0x080053ac
 8004610:	080053cc 	.word	0x080053cc
 8004614:	0800538c 	.word	0x0800538c

08004618 <__sflush_r>:
 8004618:	898a      	ldrh	r2, [r1, #12]
 800461a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800461e:	4605      	mov	r5, r0
 8004620:	0710      	lsls	r0, r2, #28
 8004622:	460c      	mov	r4, r1
 8004624:	d458      	bmi.n	80046d8 <__sflush_r+0xc0>
 8004626:	684b      	ldr	r3, [r1, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	dc05      	bgt.n	8004638 <__sflush_r+0x20>
 800462c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800462e:	2b00      	cmp	r3, #0
 8004630:	dc02      	bgt.n	8004638 <__sflush_r+0x20>
 8004632:	2000      	movs	r0, #0
 8004634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800463a:	2e00      	cmp	r6, #0
 800463c:	d0f9      	beq.n	8004632 <__sflush_r+0x1a>
 800463e:	2300      	movs	r3, #0
 8004640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004644:	682f      	ldr	r7, [r5, #0]
 8004646:	6a21      	ldr	r1, [r4, #32]
 8004648:	602b      	str	r3, [r5, #0]
 800464a:	d032      	beq.n	80046b2 <__sflush_r+0x9a>
 800464c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800464e:	89a3      	ldrh	r3, [r4, #12]
 8004650:	075a      	lsls	r2, r3, #29
 8004652:	d505      	bpl.n	8004660 <__sflush_r+0x48>
 8004654:	6863      	ldr	r3, [r4, #4]
 8004656:	1ac0      	subs	r0, r0, r3
 8004658:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800465a:	b10b      	cbz	r3, 8004660 <__sflush_r+0x48>
 800465c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800465e:	1ac0      	subs	r0, r0, r3
 8004660:	2300      	movs	r3, #0
 8004662:	4602      	mov	r2, r0
 8004664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004666:	6a21      	ldr	r1, [r4, #32]
 8004668:	4628      	mov	r0, r5
 800466a:	47b0      	blx	r6
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	d106      	bne.n	8004680 <__sflush_r+0x68>
 8004672:	6829      	ldr	r1, [r5, #0]
 8004674:	291d      	cmp	r1, #29
 8004676:	d848      	bhi.n	800470a <__sflush_r+0xf2>
 8004678:	4a29      	ldr	r2, [pc, #164]	; (8004720 <__sflush_r+0x108>)
 800467a:	40ca      	lsrs	r2, r1
 800467c:	07d6      	lsls	r6, r2, #31
 800467e:	d544      	bpl.n	800470a <__sflush_r+0xf2>
 8004680:	2200      	movs	r2, #0
 8004682:	6062      	str	r2, [r4, #4]
 8004684:	04d9      	lsls	r1, r3, #19
 8004686:	6922      	ldr	r2, [r4, #16]
 8004688:	6022      	str	r2, [r4, #0]
 800468a:	d504      	bpl.n	8004696 <__sflush_r+0x7e>
 800468c:	1c42      	adds	r2, r0, #1
 800468e:	d101      	bne.n	8004694 <__sflush_r+0x7c>
 8004690:	682b      	ldr	r3, [r5, #0]
 8004692:	b903      	cbnz	r3, 8004696 <__sflush_r+0x7e>
 8004694:	6560      	str	r0, [r4, #84]	; 0x54
 8004696:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004698:	602f      	str	r7, [r5, #0]
 800469a:	2900      	cmp	r1, #0
 800469c:	d0c9      	beq.n	8004632 <__sflush_r+0x1a>
 800469e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046a2:	4299      	cmp	r1, r3
 80046a4:	d002      	beq.n	80046ac <__sflush_r+0x94>
 80046a6:	4628      	mov	r0, r5
 80046a8:	f000 f9aa 	bl	8004a00 <_free_r>
 80046ac:	2000      	movs	r0, #0
 80046ae:	6360      	str	r0, [r4, #52]	; 0x34
 80046b0:	e7c0      	b.n	8004634 <__sflush_r+0x1c>
 80046b2:	2301      	movs	r3, #1
 80046b4:	4628      	mov	r0, r5
 80046b6:	47b0      	blx	r6
 80046b8:	1c41      	adds	r1, r0, #1
 80046ba:	d1c8      	bne.n	800464e <__sflush_r+0x36>
 80046bc:	682b      	ldr	r3, [r5, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0c5      	beq.n	800464e <__sflush_r+0x36>
 80046c2:	2b1d      	cmp	r3, #29
 80046c4:	d001      	beq.n	80046ca <__sflush_r+0xb2>
 80046c6:	2b16      	cmp	r3, #22
 80046c8:	d101      	bne.n	80046ce <__sflush_r+0xb6>
 80046ca:	602f      	str	r7, [r5, #0]
 80046cc:	e7b1      	b.n	8004632 <__sflush_r+0x1a>
 80046ce:	89a3      	ldrh	r3, [r4, #12]
 80046d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	e7ad      	b.n	8004634 <__sflush_r+0x1c>
 80046d8:	690f      	ldr	r7, [r1, #16]
 80046da:	2f00      	cmp	r7, #0
 80046dc:	d0a9      	beq.n	8004632 <__sflush_r+0x1a>
 80046de:	0793      	lsls	r3, r2, #30
 80046e0:	680e      	ldr	r6, [r1, #0]
 80046e2:	bf08      	it	eq
 80046e4:	694b      	ldreq	r3, [r1, #20]
 80046e6:	600f      	str	r7, [r1, #0]
 80046e8:	bf18      	it	ne
 80046ea:	2300      	movne	r3, #0
 80046ec:	eba6 0807 	sub.w	r8, r6, r7
 80046f0:	608b      	str	r3, [r1, #8]
 80046f2:	f1b8 0f00 	cmp.w	r8, #0
 80046f6:	dd9c      	ble.n	8004632 <__sflush_r+0x1a>
 80046f8:	4643      	mov	r3, r8
 80046fa:	463a      	mov	r2, r7
 80046fc:	6a21      	ldr	r1, [r4, #32]
 80046fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004700:	4628      	mov	r0, r5
 8004702:	47b0      	blx	r6
 8004704:	2800      	cmp	r0, #0
 8004706:	dc06      	bgt.n	8004716 <__sflush_r+0xfe>
 8004708:	89a3      	ldrh	r3, [r4, #12]
 800470a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800470e:	81a3      	strh	r3, [r4, #12]
 8004710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004714:	e78e      	b.n	8004634 <__sflush_r+0x1c>
 8004716:	4407      	add	r7, r0
 8004718:	eba8 0800 	sub.w	r8, r8, r0
 800471c:	e7e9      	b.n	80046f2 <__sflush_r+0xda>
 800471e:	bf00      	nop
 8004720:	20400001 	.word	0x20400001

08004724 <_fflush_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	690b      	ldr	r3, [r1, #16]
 8004728:	4605      	mov	r5, r0
 800472a:	460c      	mov	r4, r1
 800472c:	b1db      	cbz	r3, 8004766 <_fflush_r+0x42>
 800472e:	b118      	cbz	r0, 8004738 <_fflush_r+0x14>
 8004730:	6983      	ldr	r3, [r0, #24]
 8004732:	b90b      	cbnz	r3, 8004738 <_fflush_r+0x14>
 8004734:	f000 f860 	bl	80047f8 <__sinit>
 8004738:	4b0c      	ldr	r3, [pc, #48]	; (800476c <_fflush_r+0x48>)
 800473a:	429c      	cmp	r4, r3
 800473c:	d109      	bne.n	8004752 <_fflush_r+0x2e>
 800473e:	686c      	ldr	r4, [r5, #4]
 8004740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004744:	b17b      	cbz	r3, 8004766 <_fflush_r+0x42>
 8004746:	4621      	mov	r1, r4
 8004748:	4628      	mov	r0, r5
 800474a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800474e:	f7ff bf63 	b.w	8004618 <__sflush_r>
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <_fflush_r+0x4c>)
 8004754:	429c      	cmp	r4, r3
 8004756:	d101      	bne.n	800475c <_fflush_r+0x38>
 8004758:	68ac      	ldr	r4, [r5, #8]
 800475a:	e7f1      	b.n	8004740 <_fflush_r+0x1c>
 800475c:	4b05      	ldr	r3, [pc, #20]	; (8004774 <_fflush_r+0x50>)
 800475e:	429c      	cmp	r4, r3
 8004760:	bf08      	it	eq
 8004762:	68ec      	ldreq	r4, [r5, #12]
 8004764:	e7ec      	b.n	8004740 <_fflush_r+0x1c>
 8004766:	2000      	movs	r0, #0
 8004768:	bd38      	pop	{r3, r4, r5, pc}
 800476a:	bf00      	nop
 800476c:	080053ac 	.word	0x080053ac
 8004770:	080053cc 	.word	0x080053cc
 8004774:	0800538c 	.word	0x0800538c

08004778 <std>:
 8004778:	2300      	movs	r3, #0
 800477a:	b510      	push	{r4, lr}
 800477c:	4604      	mov	r4, r0
 800477e:	e9c0 3300 	strd	r3, r3, [r0]
 8004782:	6083      	str	r3, [r0, #8]
 8004784:	8181      	strh	r1, [r0, #12]
 8004786:	6643      	str	r3, [r0, #100]	; 0x64
 8004788:	81c2      	strh	r2, [r0, #14]
 800478a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800478e:	6183      	str	r3, [r0, #24]
 8004790:	4619      	mov	r1, r3
 8004792:	2208      	movs	r2, #8
 8004794:	305c      	adds	r0, #92	; 0x5c
 8004796:	f7ff fd41 	bl	800421c <memset>
 800479a:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <std+0x38>)
 800479c:	6263      	str	r3, [r4, #36]	; 0x24
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <std+0x3c>)
 80047a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80047a2:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <std+0x40>)
 80047a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047a6:	4b05      	ldr	r3, [pc, #20]	; (80047bc <std+0x44>)
 80047a8:	6224      	str	r4, [r4, #32]
 80047aa:	6323      	str	r3, [r4, #48]	; 0x30
 80047ac:	bd10      	pop	{r4, pc}
 80047ae:	bf00      	nop
 80047b0:	0800516d 	.word	0x0800516d
 80047b4:	0800518f 	.word	0x0800518f
 80047b8:	080051c7 	.word	0x080051c7
 80047bc:	080051eb 	.word	0x080051eb

080047c0 <_cleanup_r>:
 80047c0:	4901      	ldr	r1, [pc, #4]	; (80047c8 <_cleanup_r+0x8>)
 80047c2:	f000 b885 	b.w	80048d0 <_fwalk_reent>
 80047c6:	bf00      	nop
 80047c8:	08004725 	.word	0x08004725

080047cc <__sfmoreglue>:
 80047cc:	b570      	push	{r4, r5, r6, lr}
 80047ce:	1e4a      	subs	r2, r1, #1
 80047d0:	2568      	movs	r5, #104	; 0x68
 80047d2:	4355      	muls	r5, r2
 80047d4:	460e      	mov	r6, r1
 80047d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047da:	f000 f95f 	bl	8004a9c <_malloc_r>
 80047de:	4604      	mov	r4, r0
 80047e0:	b140      	cbz	r0, 80047f4 <__sfmoreglue+0x28>
 80047e2:	2100      	movs	r1, #0
 80047e4:	e9c0 1600 	strd	r1, r6, [r0]
 80047e8:	300c      	adds	r0, #12
 80047ea:	60a0      	str	r0, [r4, #8]
 80047ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047f0:	f7ff fd14 	bl	800421c <memset>
 80047f4:	4620      	mov	r0, r4
 80047f6:	bd70      	pop	{r4, r5, r6, pc}

080047f8 <__sinit>:
 80047f8:	6983      	ldr	r3, [r0, #24]
 80047fa:	b510      	push	{r4, lr}
 80047fc:	4604      	mov	r4, r0
 80047fe:	bb33      	cbnz	r3, 800484e <__sinit+0x56>
 8004800:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004804:	6503      	str	r3, [r0, #80]	; 0x50
 8004806:	4b12      	ldr	r3, [pc, #72]	; (8004850 <__sinit+0x58>)
 8004808:	4a12      	ldr	r2, [pc, #72]	; (8004854 <__sinit+0x5c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6282      	str	r2, [r0, #40]	; 0x28
 800480e:	4298      	cmp	r0, r3
 8004810:	bf04      	itt	eq
 8004812:	2301      	moveq	r3, #1
 8004814:	6183      	streq	r3, [r0, #24]
 8004816:	f000 f81f 	bl	8004858 <__sfp>
 800481a:	6060      	str	r0, [r4, #4]
 800481c:	4620      	mov	r0, r4
 800481e:	f000 f81b 	bl	8004858 <__sfp>
 8004822:	60a0      	str	r0, [r4, #8]
 8004824:	4620      	mov	r0, r4
 8004826:	f000 f817 	bl	8004858 <__sfp>
 800482a:	2200      	movs	r2, #0
 800482c:	60e0      	str	r0, [r4, #12]
 800482e:	2104      	movs	r1, #4
 8004830:	6860      	ldr	r0, [r4, #4]
 8004832:	f7ff ffa1 	bl	8004778 <std>
 8004836:	2201      	movs	r2, #1
 8004838:	2109      	movs	r1, #9
 800483a:	68a0      	ldr	r0, [r4, #8]
 800483c:	f7ff ff9c 	bl	8004778 <std>
 8004840:	2202      	movs	r2, #2
 8004842:	2112      	movs	r1, #18
 8004844:	68e0      	ldr	r0, [r4, #12]
 8004846:	f7ff ff97 	bl	8004778 <std>
 800484a:	2301      	movs	r3, #1
 800484c:	61a3      	str	r3, [r4, #24]
 800484e:	bd10      	pop	{r4, pc}
 8004850:	08005388 	.word	0x08005388
 8004854:	080047c1 	.word	0x080047c1

08004858 <__sfp>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	4b1b      	ldr	r3, [pc, #108]	; (80048c8 <__sfp+0x70>)
 800485c:	681e      	ldr	r6, [r3, #0]
 800485e:	69b3      	ldr	r3, [r6, #24]
 8004860:	4607      	mov	r7, r0
 8004862:	b913      	cbnz	r3, 800486a <__sfp+0x12>
 8004864:	4630      	mov	r0, r6
 8004866:	f7ff ffc7 	bl	80047f8 <__sinit>
 800486a:	3648      	adds	r6, #72	; 0x48
 800486c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004870:	3b01      	subs	r3, #1
 8004872:	d503      	bpl.n	800487c <__sfp+0x24>
 8004874:	6833      	ldr	r3, [r6, #0]
 8004876:	b133      	cbz	r3, 8004886 <__sfp+0x2e>
 8004878:	6836      	ldr	r6, [r6, #0]
 800487a:	e7f7      	b.n	800486c <__sfp+0x14>
 800487c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004880:	b16d      	cbz	r5, 800489e <__sfp+0x46>
 8004882:	3468      	adds	r4, #104	; 0x68
 8004884:	e7f4      	b.n	8004870 <__sfp+0x18>
 8004886:	2104      	movs	r1, #4
 8004888:	4638      	mov	r0, r7
 800488a:	f7ff ff9f 	bl	80047cc <__sfmoreglue>
 800488e:	6030      	str	r0, [r6, #0]
 8004890:	2800      	cmp	r0, #0
 8004892:	d1f1      	bne.n	8004878 <__sfp+0x20>
 8004894:	230c      	movs	r3, #12
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	4604      	mov	r4, r0
 800489a:	4620      	mov	r0, r4
 800489c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800489e:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <__sfp+0x74>)
 80048a0:	6665      	str	r5, [r4, #100]	; 0x64
 80048a2:	e9c4 5500 	strd	r5, r5, [r4]
 80048a6:	60a5      	str	r5, [r4, #8]
 80048a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80048ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80048b0:	2208      	movs	r2, #8
 80048b2:	4629      	mov	r1, r5
 80048b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048b8:	f7ff fcb0 	bl	800421c <memset>
 80048bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048c4:	e7e9      	b.n	800489a <__sfp+0x42>
 80048c6:	bf00      	nop
 80048c8:	08005388 	.word	0x08005388
 80048cc:	ffff0001 	.word	0xffff0001

080048d0 <_fwalk_reent>:
 80048d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048d4:	4680      	mov	r8, r0
 80048d6:	4689      	mov	r9, r1
 80048d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048dc:	2600      	movs	r6, #0
 80048de:	b914      	cbnz	r4, 80048e6 <_fwalk_reent+0x16>
 80048e0:	4630      	mov	r0, r6
 80048e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80048ea:	3f01      	subs	r7, #1
 80048ec:	d501      	bpl.n	80048f2 <_fwalk_reent+0x22>
 80048ee:	6824      	ldr	r4, [r4, #0]
 80048f0:	e7f5      	b.n	80048de <_fwalk_reent+0xe>
 80048f2:	89ab      	ldrh	r3, [r5, #12]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d907      	bls.n	8004908 <_fwalk_reent+0x38>
 80048f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048fc:	3301      	adds	r3, #1
 80048fe:	d003      	beq.n	8004908 <_fwalk_reent+0x38>
 8004900:	4629      	mov	r1, r5
 8004902:	4640      	mov	r0, r8
 8004904:	47c8      	blx	r9
 8004906:	4306      	orrs	r6, r0
 8004908:	3568      	adds	r5, #104	; 0x68
 800490a:	e7ee      	b.n	80048ea <_fwalk_reent+0x1a>

0800490c <__locale_ctype_ptr_l>:
 800490c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004910:	4770      	bx	lr

08004912 <__swhatbuf_r>:
 8004912:	b570      	push	{r4, r5, r6, lr}
 8004914:	460e      	mov	r6, r1
 8004916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800491a:	2900      	cmp	r1, #0
 800491c:	b096      	sub	sp, #88	; 0x58
 800491e:	4614      	mov	r4, r2
 8004920:	461d      	mov	r5, r3
 8004922:	da07      	bge.n	8004934 <__swhatbuf_r+0x22>
 8004924:	2300      	movs	r3, #0
 8004926:	602b      	str	r3, [r5, #0]
 8004928:	89b3      	ldrh	r3, [r6, #12]
 800492a:	061a      	lsls	r2, r3, #24
 800492c:	d410      	bmi.n	8004950 <__swhatbuf_r+0x3e>
 800492e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004932:	e00e      	b.n	8004952 <__swhatbuf_r+0x40>
 8004934:	466a      	mov	r2, sp
 8004936:	f000 fc8b 	bl	8005250 <_fstat_r>
 800493a:	2800      	cmp	r0, #0
 800493c:	dbf2      	blt.n	8004924 <__swhatbuf_r+0x12>
 800493e:	9a01      	ldr	r2, [sp, #4]
 8004940:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004944:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004948:	425a      	negs	r2, r3
 800494a:	415a      	adcs	r2, r3
 800494c:	602a      	str	r2, [r5, #0]
 800494e:	e7ee      	b.n	800492e <__swhatbuf_r+0x1c>
 8004950:	2340      	movs	r3, #64	; 0x40
 8004952:	2000      	movs	r0, #0
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	b016      	add	sp, #88	; 0x58
 8004958:	bd70      	pop	{r4, r5, r6, pc}
	...

0800495c <__smakebuf_r>:
 800495c:	898b      	ldrh	r3, [r1, #12]
 800495e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004960:	079d      	lsls	r5, r3, #30
 8004962:	4606      	mov	r6, r0
 8004964:	460c      	mov	r4, r1
 8004966:	d507      	bpl.n	8004978 <__smakebuf_r+0x1c>
 8004968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	6123      	str	r3, [r4, #16]
 8004970:	2301      	movs	r3, #1
 8004972:	6163      	str	r3, [r4, #20]
 8004974:	b002      	add	sp, #8
 8004976:	bd70      	pop	{r4, r5, r6, pc}
 8004978:	ab01      	add	r3, sp, #4
 800497a:	466a      	mov	r2, sp
 800497c:	f7ff ffc9 	bl	8004912 <__swhatbuf_r>
 8004980:	9900      	ldr	r1, [sp, #0]
 8004982:	4605      	mov	r5, r0
 8004984:	4630      	mov	r0, r6
 8004986:	f000 f889 	bl	8004a9c <_malloc_r>
 800498a:	b948      	cbnz	r0, 80049a0 <__smakebuf_r+0x44>
 800498c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004990:	059a      	lsls	r2, r3, #22
 8004992:	d4ef      	bmi.n	8004974 <__smakebuf_r+0x18>
 8004994:	f023 0303 	bic.w	r3, r3, #3
 8004998:	f043 0302 	orr.w	r3, r3, #2
 800499c:	81a3      	strh	r3, [r4, #12]
 800499e:	e7e3      	b.n	8004968 <__smakebuf_r+0xc>
 80049a0:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <__smakebuf_r+0x7c>)
 80049a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	6020      	str	r0, [r4, #0]
 80049a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	9b00      	ldr	r3, [sp, #0]
 80049b0:	6163      	str	r3, [r4, #20]
 80049b2:	9b01      	ldr	r3, [sp, #4]
 80049b4:	6120      	str	r0, [r4, #16]
 80049b6:	b15b      	cbz	r3, 80049d0 <__smakebuf_r+0x74>
 80049b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049bc:	4630      	mov	r0, r6
 80049be:	f000 fc59 	bl	8005274 <_isatty_r>
 80049c2:	b128      	cbz	r0, 80049d0 <__smakebuf_r+0x74>
 80049c4:	89a3      	ldrh	r3, [r4, #12]
 80049c6:	f023 0303 	bic.w	r3, r3, #3
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	81a3      	strh	r3, [r4, #12]
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	431d      	orrs	r5, r3
 80049d4:	81a5      	strh	r5, [r4, #12]
 80049d6:	e7cd      	b.n	8004974 <__smakebuf_r+0x18>
 80049d8:	080047c1 	.word	0x080047c1

080049dc <__ascii_mbtowc>:
 80049dc:	b082      	sub	sp, #8
 80049de:	b901      	cbnz	r1, 80049e2 <__ascii_mbtowc+0x6>
 80049e0:	a901      	add	r1, sp, #4
 80049e2:	b142      	cbz	r2, 80049f6 <__ascii_mbtowc+0x1a>
 80049e4:	b14b      	cbz	r3, 80049fa <__ascii_mbtowc+0x1e>
 80049e6:	7813      	ldrb	r3, [r2, #0]
 80049e8:	600b      	str	r3, [r1, #0]
 80049ea:	7812      	ldrb	r2, [r2, #0]
 80049ec:	1c10      	adds	r0, r2, #0
 80049ee:	bf18      	it	ne
 80049f0:	2001      	movne	r0, #1
 80049f2:	b002      	add	sp, #8
 80049f4:	4770      	bx	lr
 80049f6:	4610      	mov	r0, r2
 80049f8:	e7fb      	b.n	80049f2 <__ascii_mbtowc+0x16>
 80049fa:	f06f 0001 	mvn.w	r0, #1
 80049fe:	e7f8      	b.n	80049f2 <__ascii_mbtowc+0x16>

08004a00 <_free_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4605      	mov	r5, r0
 8004a04:	2900      	cmp	r1, #0
 8004a06:	d045      	beq.n	8004a94 <_free_r+0x94>
 8004a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a0c:	1f0c      	subs	r4, r1, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bfb8      	it	lt
 8004a12:	18e4      	addlt	r4, r4, r3
 8004a14:	f000 fc50 	bl	80052b8 <__malloc_lock>
 8004a18:	4a1f      	ldr	r2, [pc, #124]	; (8004a98 <_free_r+0x98>)
 8004a1a:	6813      	ldr	r3, [r2, #0]
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	b933      	cbnz	r3, 8004a2e <_free_r+0x2e>
 8004a20:	6063      	str	r3, [r4, #4]
 8004a22:	6014      	str	r4, [r2, #0]
 8004a24:	4628      	mov	r0, r5
 8004a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a2a:	f000 bc46 	b.w	80052ba <__malloc_unlock>
 8004a2e:	42a3      	cmp	r3, r4
 8004a30:	d90c      	bls.n	8004a4c <_free_r+0x4c>
 8004a32:	6821      	ldr	r1, [r4, #0]
 8004a34:	1862      	adds	r2, r4, r1
 8004a36:	4293      	cmp	r3, r2
 8004a38:	bf04      	itt	eq
 8004a3a:	681a      	ldreq	r2, [r3, #0]
 8004a3c:	685b      	ldreq	r3, [r3, #4]
 8004a3e:	6063      	str	r3, [r4, #4]
 8004a40:	bf04      	itt	eq
 8004a42:	1852      	addeq	r2, r2, r1
 8004a44:	6022      	streq	r2, [r4, #0]
 8004a46:	6004      	str	r4, [r0, #0]
 8004a48:	e7ec      	b.n	8004a24 <_free_r+0x24>
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	b10a      	cbz	r2, 8004a54 <_free_r+0x54>
 8004a50:	42a2      	cmp	r2, r4
 8004a52:	d9fa      	bls.n	8004a4a <_free_r+0x4a>
 8004a54:	6819      	ldr	r1, [r3, #0]
 8004a56:	1858      	adds	r0, r3, r1
 8004a58:	42a0      	cmp	r0, r4
 8004a5a:	d10b      	bne.n	8004a74 <_free_r+0x74>
 8004a5c:	6820      	ldr	r0, [r4, #0]
 8004a5e:	4401      	add	r1, r0
 8004a60:	1858      	adds	r0, r3, r1
 8004a62:	4282      	cmp	r2, r0
 8004a64:	6019      	str	r1, [r3, #0]
 8004a66:	d1dd      	bne.n	8004a24 <_free_r+0x24>
 8004a68:	6810      	ldr	r0, [r2, #0]
 8004a6a:	6852      	ldr	r2, [r2, #4]
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	4401      	add	r1, r0
 8004a70:	6019      	str	r1, [r3, #0]
 8004a72:	e7d7      	b.n	8004a24 <_free_r+0x24>
 8004a74:	d902      	bls.n	8004a7c <_free_r+0x7c>
 8004a76:	230c      	movs	r3, #12
 8004a78:	602b      	str	r3, [r5, #0]
 8004a7a:	e7d3      	b.n	8004a24 <_free_r+0x24>
 8004a7c:	6820      	ldr	r0, [r4, #0]
 8004a7e:	1821      	adds	r1, r4, r0
 8004a80:	428a      	cmp	r2, r1
 8004a82:	bf04      	itt	eq
 8004a84:	6811      	ldreq	r1, [r2, #0]
 8004a86:	6852      	ldreq	r2, [r2, #4]
 8004a88:	6062      	str	r2, [r4, #4]
 8004a8a:	bf04      	itt	eq
 8004a8c:	1809      	addeq	r1, r1, r0
 8004a8e:	6021      	streq	r1, [r4, #0]
 8004a90:	605c      	str	r4, [r3, #4]
 8004a92:	e7c7      	b.n	8004a24 <_free_r+0x24>
 8004a94:	bd38      	pop	{r3, r4, r5, pc}
 8004a96:	bf00      	nop
 8004a98:	20000230 	.word	0x20000230

08004a9c <_malloc_r>:
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	1ccd      	adds	r5, r1, #3
 8004aa0:	f025 0503 	bic.w	r5, r5, #3
 8004aa4:	3508      	adds	r5, #8
 8004aa6:	2d0c      	cmp	r5, #12
 8004aa8:	bf38      	it	cc
 8004aaa:	250c      	movcc	r5, #12
 8004aac:	2d00      	cmp	r5, #0
 8004aae:	4606      	mov	r6, r0
 8004ab0:	db01      	blt.n	8004ab6 <_malloc_r+0x1a>
 8004ab2:	42a9      	cmp	r1, r5
 8004ab4:	d903      	bls.n	8004abe <_malloc_r+0x22>
 8004ab6:	230c      	movs	r3, #12
 8004ab8:	6033      	str	r3, [r6, #0]
 8004aba:	2000      	movs	r0, #0
 8004abc:	bd70      	pop	{r4, r5, r6, pc}
 8004abe:	f000 fbfb 	bl	80052b8 <__malloc_lock>
 8004ac2:	4a21      	ldr	r2, [pc, #132]	; (8004b48 <_malloc_r+0xac>)
 8004ac4:	6814      	ldr	r4, [r2, #0]
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	b991      	cbnz	r1, 8004af0 <_malloc_r+0x54>
 8004aca:	4c20      	ldr	r4, [pc, #128]	; (8004b4c <_malloc_r+0xb0>)
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	b91b      	cbnz	r3, 8004ad8 <_malloc_r+0x3c>
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f000 fb3b 	bl	800514c <_sbrk_r>
 8004ad6:	6020      	str	r0, [r4, #0]
 8004ad8:	4629      	mov	r1, r5
 8004ada:	4630      	mov	r0, r6
 8004adc:	f000 fb36 	bl	800514c <_sbrk_r>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d124      	bne.n	8004b2e <_malloc_r+0x92>
 8004ae4:	230c      	movs	r3, #12
 8004ae6:	6033      	str	r3, [r6, #0]
 8004ae8:	4630      	mov	r0, r6
 8004aea:	f000 fbe6 	bl	80052ba <__malloc_unlock>
 8004aee:	e7e4      	b.n	8004aba <_malloc_r+0x1e>
 8004af0:	680b      	ldr	r3, [r1, #0]
 8004af2:	1b5b      	subs	r3, r3, r5
 8004af4:	d418      	bmi.n	8004b28 <_malloc_r+0x8c>
 8004af6:	2b0b      	cmp	r3, #11
 8004af8:	d90f      	bls.n	8004b1a <_malloc_r+0x7e>
 8004afa:	600b      	str	r3, [r1, #0]
 8004afc:	50cd      	str	r5, [r1, r3]
 8004afe:	18cc      	adds	r4, r1, r3
 8004b00:	4630      	mov	r0, r6
 8004b02:	f000 fbda 	bl	80052ba <__malloc_unlock>
 8004b06:	f104 000b 	add.w	r0, r4, #11
 8004b0a:	1d23      	adds	r3, r4, #4
 8004b0c:	f020 0007 	bic.w	r0, r0, #7
 8004b10:	1ac3      	subs	r3, r0, r3
 8004b12:	d0d3      	beq.n	8004abc <_malloc_r+0x20>
 8004b14:	425a      	negs	r2, r3
 8004b16:	50e2      	str	r2, [r4, r3]
 8004b18:	e7d0      	b.n	8004abc <_malloc_r+0x20>
 8004b1a:	428c      	cmp	r4, r1
 8004b1c:	684b      	ldr	r3, [r1, #4]
 8004b1e:	bf16      	itet	ne
 8004b20:	6063      	strne	r3, [r4, #4]
 8004b22:	6013      	streq	r3, [r2, #0]
 8004b24:	460c      	movne	r4, r1
 8004b26:	e7eb      	b.n	8004b00 <_malloc_r+0x64>
 8004b28:	460c      	mov	r4, r1
 8004b2a:	6849      	ldr	r1, [r1, #4]
 8004b2c:	e7cc      	b.n	8004ac8 <_malloc_r+0x2c>
 8004b2e:	1cc4      	adds	r4, r0, #3
 8004b30:	f024 0403 	bic.w	r4, r4, #3
 8004b34:	42a0      	cmp	r0, r4
 8004b36:	d005      	beq.n	8004b44 <_malloc_r+0xa8>
 8004b38:	1a21      	subs	r1, r4, r0
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	f000 fb06 	bl	800514c <_sbrk_r>
 8004b40:	3001      	adds	r0, #1
 8004b42:	d0cf      	beq.n	8004ae4 <_malloc_r+0x48>
 8004b44:	6025      	str	r5, [r4, #0]
 8004b46:	e7db      	b.n	8004b00 <_malloc_r+0x64>
 8004b48:	20000230 	.word	0x20000230
 8004b4c:	20000234 	.word	0x20000234

08004b50 <__sfputc_r>:
 8004b50:	6893      	ldr	r3, [r2, #8]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	b410      	push	{r4}
 8004b58:	6093      	str	r3, [r2, #8]
 8004b5a:	da08      	bge.n	8004b6e <__sfputc_r+0x1e>
 8004b5c:	6994      	ldr	r4, [r2, #24]
 8004b5e:	42a3      	cmp	r3, r4
 8004b60:	db01      	blt.n	8004b66 <__sfputc_r+0x16>
 8004b62:	290a      	cmp	r1, #10
 8004b64:	d103      	bne.n	8004b6e <__sfputc_r+0x1e>
 8004b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b6a:	f7ff bc95 	b.w	8004498 <__swbuf_r>
 8004b6e:	6813      	ldr	r3, [r2, #0]
 8004b70:	1c58      	adds	r0, r3, #1
 8004b72:	6010      	str	r0, [r2, #0]
 8004b74:	7019      	strb	r1, [r3, #0]
 8004b76:	4608      	mov	r0, r1
 8004b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <__sfputs_r>:
 8004b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b80:	4606      	mov	r6, r0
 8004b82:	460f      	mov	r7, r1
 8004b84:	4614      	mov	r4, r2
 8004b86:	18d5      	adds	r5, r2, r3
 8004b88:	42ac      	cmp	r4, r5
 8004b8a:	d101      	bne.n	8004b90 <__sfputs_r+0x12>
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	e007      	b.n	8004ba0 <__sfputs_r+0x22>
 8004b90:	463a      	mov	r2, r7
 8004b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b96:	4630      	mov	r0, r6
 8004b98:	f7ff ffda 	bl	8004b50 <__sfputc_r>
 8004b9c:	1c43      	adds	r3, r0, #1
 8004b9e:	d1f3      	bne.n	8004b88 <__sfputs_r+0xa>
 8004ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ba4 <_vfiprintf_r>:
 8004ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba8:	460c      	mov	r4, r1
 8004baa:	b09d      	sub	sp, #116	; 0x74
 8004bac:	4617      	mov	r7, r2
 8004bae:	461d      	mov	r5, r3
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	b118      	cbz	r0, 8004bbc <_vfiprintf_r+0x18>
 8004bb4:	6983      	ldr	r3, [r0, #24]
 8004bb6:	b90b      	cbnz	r3, 8004bbc <_vfiprintf_r+0x18>
 8004bb8:	f7ff fe1e 	bl	80047f8 <__sinit>
 8004bbc:	4b7c      	ldr	r3, [pc, #496]	; (8004db0 <_vfiprintf_r+0x20c>)
 8004bbe:	429c      	cmp	r4, r3
 8004bc0:	d158      	bne.n	8004c74 <_vfiprintf_r+0xd0>
 8004bc2:	6874      	ldr	r4, [r6, #4]
 8004bc4:	89a3      	ldrh	r3, [r4, #12]
 8004bc6:	0718      	lsls	r0, r3, #28
 8004bc8:	d55e      	bpl.n	8004c88 <_vfiprintf_r+0xe4>
 8004bca:	6923      	ldr	r3, [r4, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d05b      	beq.n	8004c88 <_vfiprintf_r+0xe4>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8004bd4:	2320      	movs	r3, #32
 8004bd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bda:	2330      	movs	r3, #48	; 0x30
 8004bdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004be0:	9503      	str	r5, [sp, #12]
 8004be2:	f04f 0b01 	mov.w	fp, #1
 8004be6:	46b8      	mov	r8, r7
 8004be8:	4645      	mov	r5, r8
 8004bea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004bee:	b10b      	cbz	r3, 8004bf4 <_vfiprintf_r+0x50>
 8004bf0:	2b25      	cmp	r3, #37	; 0x25
 8004bf2:	d154      	bne.n	8004c9e <_vfiprintf_r+0xfa>
 8004bf4:	ebb8 0a07 	subs.w	sl, r8, r7
 8004bf8:	d00b      	beq.n	8004c12 <_vfiprintf_r+0x6e>
 8004bfa:	4653      	mov	r3, sl
 8004bfc:	463a      	mov	r2, r7
 8004bfe:	4621      	mov	r1, r4
 8004c00:	4630      	mov	r0, r6
 8004c02:	f7ff ffbc 	bl	8004b7e <__sfputs_r>
 8004c06:	3001      	adds	r0, #1
 8004c08:	f000 80c2 	beq.w	8004d90 <_vfiprintf_r+0x1ec>
 8004c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c0e:	4453      	add	r3, sl
 8004c10:	9309      	str	r3, [sp, #36]	; 0x24
 8004c12:	f898 3000 	ldrb.w	r3, [r8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80ba 	beq.w	8004d90 <_vfiprintf_r+0x1ec>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c26:	9304      	str	r3, [sp, #16]
 8004c28:	9307      	str	r3, [sp, #28]
 8004c2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c2e:	931a      	str	r3, [sp, #104]	; 0x68
 8004c30:	46a8      	mov	r8, r5
 8004c32:	2205      	movs	r2, #5
 8004c34:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004c38:	485e      	ldr	r0, [pc, #376]	; (8004db4 <_vfiprintf_r+0x210>)
 8004c3a:	f7fb fad1 	bl	80001e0 <memchr>
 8004c3e:	9b04      	ldr	r3, [sp, #16]
 8004c40:	bb78      	cbnz	r0, 8004ca2 <_vfiprintf_r+0xfe>
 8004c42:	06d9      	lsls	r1, r3, #27
 8004c44:	bf44      	itt	mi
 8004c46:	2220      	movmi	r2, #32
 8004c48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c4c:	071a      	lsls	r2, r3, #28
 8004c4e:	bf44      	itt	mi
 8004c50:	222b      	movmi	r2, #43	; 0x2b
 8004c52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c56:	782a      	ldrb	r2, [r5, #0]
 8004c58:	2a2a      	cmp	r2, #42	; 0x2a
 8004c5a:	d02a      	beq.n	8004cb2 <_vfiprintf_r+0x10e>
 8004c5c:	9a07      	ldr	r2, [sp, #28]
 8004c5e:	46a8      	mov	r8, r5
 8004c60:	2000      	movs	r0, #0
 8004c62:	250a      	movs	r5, #10
 8004c64:	4641      	mov	r1, r8
 8004c66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c6a:	3b30      	subs	r3, #48	; 0x30
 8004c6c:	2b09      	cmp	r3, #9
 8004c6e:	d969      	bls.n	8004d44 <_vfiprintf_r+0x1a0>
 8004c70:	b360      	cbz	r0, 8004ccc <_vfiprintf_r+0x128>
 8004c72:	e024      	b.n	8004cbe <_vfiprintf_r+0x11a>
 8004c74:	4b50      	ldr	r3, [pc, #320]	; (8004db8 <_vfiprintf_r+0x214>)
 8004c76:	429c      	cmp	r4, r3
 8004c78:	d101      	bne.n	8004c7e <_vfiprintf_r+0xda>
 8004c7a:	68b4      	ldr	r4, [r6, #8]
 8004c7c:	e7a2      	b.n	8004bc4 <_vfiprintf_r+0x20>
 8004c7e:	4b4f      	ldr	r3, [pc, #316]	; (8004dbc <_vfiprintf_r+0x218>)
 8004c80:	429c      	cmp	r4, r3
 8004c82:	bf08      	it	eq
 8004c84:	68f4      	ldreq	r4, [r6, #12]
 8004c86:	e79d      	b.n	8004bc4 <_vfiprintf_r+0x20>
 8004c88:	4621      	mov	r1, r4
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f7ff fc56 	bl	800453c <__swsetup_r>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d09d      	beq.n	8004bd0 <_vfiprintf_r+0x2c>
 8004c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c98:	b01d      	add	sp, #116	; 0x74
 8004c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9e:	46a8      	mov	r8, r5
 8004ca0:	e7a2      	b.n	8004be8 <_vfiprintf_r+0x44>
 8004ca2:	4a44      	ldr	r2, [pc, #272]	; (8004db4 <_vfiprintf_r+0x210>)
 8004ca4:	1a80      	subs	r0, r0, r2
 8004ca6:	fa0b f000 	lsl.w	r0, fp, r0
 8004caa:	4318      	orrs	r0, r3
 8004cac:	9004      	str	r0, [sp, #16]
 8004cae:	4645      	mov	r5, r8
 8004cb0:	e7be      	b.n	8004c30 <_vfiprintf_r+0x8c>
 8004cb2:	9a03      	ldr	r2, [sp, #12]
 8004cb4:	1d11      	adds	r1, r2, #4
 8004cb6:	6812      	ldr	r2, [r2, #0]
 8004cb8:	9103      	str	r1, [sp, #12]
 8004cba:	2a00      	cmp	r2, #0
 8004cbc:	db01      	blt.n	8004cc2 <_vfiprintf_r+0x11e>
 8004cbe:	9207      	str	r2, [sp, #28]
 8004cc0:	e004      	b.n	8004ccc <_vfiprintf_r+0x128>
 8004cc2:	4252      	negs	r2, r2
 8004cc4:	f043 0302 	orr.w	r3, r3, #2
 8004cc8:	9207      	str	r2, [sp, #28]
 8004cca:	9304      	str	r3, [sp, #16]
 8004ccc:	f898 3000 	ldrb.w	r3, [r8]
 8004cd0:	2b2e      	cmp	r3, #46	; 0x2e
 8004cd2:	d10e      	bne.n	8004cf2 <_vfiprintf_r+0x14e>
 8004cd4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8004cda:	d138      	bne.n	8004d4e <_vfiprintf_r+0x1aa>
 8004cdc:	9b03      	ldr	r3, [sp, #12]
 8004cde:	1d1a      	adds	r2, r3, #4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	9203      	str	r2, [sp, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bfb8      	it	lt
 8004ce8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004cec:	f108 0802 	add.w	r8, r8, #2
 8004cf0:	9305      	str	r3, [sp, #20]
 8004cf2:	4d33      	ldr	r5, [pc, #204]	; (8004dc0 <_vfiprintf_r+0x21c>)
 8004cf4:	f898 1000 	ldrb.w	r1, [r8]
 8004cf8:	2203      	movs	r2, #3
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f7fb fa70 	bl	80001e0 <memchr>
 8004d00:	b140      	cbz	r0, 8004d14 <_vfiprintf_r+0x170>
 8004d02:	2340      	movs	r3, #64	; 0x40
 8004d04:	1b40      	subs	r0, r0, r5
 8004d06:	fa03 f000 	lsl.w	r0, r3, r0
 8004d0a:	9b04      	ldr	r3, [sp, #16]
 8004d0c:	4303      	orrs	r3, r0
 8004d0e:	f108 0801 	add.w	r8, r8, #1
 8004d12:	9304      	str	r3, [sp, #16]
 8004d14:	f898 1000 	ldrb.w	r1, [r8]
 8004d18:	482a      	ldr	r0, [pc, #168]	; (8004dc4 <_vfiprintf_r+0x220>)
 8004d1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d1e:	2206      	movs	r2, #6
 8004d20:	f108 0701 	add.w	r7, r8, #1
 8004d24:	f7fb fa5c 	bl	80001e0 <memchr>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d037      	beq.n	8004d9c <_vfiprintf_r+0x1f8>
 8004d2c:	4b26      	ldr	r3, [pc, #152]	; (8004dc8 <_vfiprintf_r+0x224>)
 8004d2e:	bb1b      	cbnz	r3, 8004d78 <_vfiprintf_r+0x1d4>
 8004d30:	9b03      	ldr	r3, [sp, #12]
 8004d32:	3307      	adds	r3, #7
 8004d34:	f023 0307 	bic.w	r3, r3, #7
 8004d38:	3308      	adds	r3, #8
 8004d3a:	9303      	str	r3, [sp, #12]
 8004d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d3e:	444b      	add	r3, r9
 8004d40:	9309      	str	r3, [sp, #36]	; 0x24
 8004d42:	e750      	b.n	8004be6 <_vfiprintf_r+0x42>
 8004d44:	fb05 3202 	mla	r2, r5, r2, r3
 8004d48:	2001      	movs	r0, #1
 8004d4a:	4688      	mov	r8, r1
 8004d4c:	e78a      	b.n	8004c64 <_vfiprintf_r+0xc0>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f108 0801 	add.w	r8, r8, #1
 8004d54:	9305      	str	r3, [sp, #20]
 8004d56:	4619      	mov	r1, r3
 8004d58:	250a      	movs	r5, #10
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d60:	3a30      	subs	r2, #48	; 0x30
 8004d62:	2a09      	cmp	r2, #9
 8004d64:	d903      	bls.n	8004d6e <_vfiprintf_r+0x1ca>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0c3      	beq.n	8004cf2 <_vfiprintf_r+0x14e>
 8004d6a:	9105      	str	r1, [sp, #20]
 8004d6c:	e7c1      	b.n	8004cf2 <_vfiprintf_r+0x14e>
 8004d6e:	fb05 2101 	mla	r1, r5, r1, r2
 8004d72:	2301      	movs	r3, #1
 8004d74:	4680      	mov	r8, r0
 8004d76:	e7f0      	b.n	8004d5a <_vfiprintf_r+0x1b6>
 8004d78:	ab03      	add	r3, sp, #12
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	4622      	mov	r2, r4
 8004d7e:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <_vfiprintf_r+0x228>)
 8004d80:	a904      	add	r1, sp, #16
 8004d82:	4630      	mov	r0, r6
 8004d84:	f3af 8000 	nop.w
 8004d88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004d8c:	4681      	mov	r9, r0
 8004d8e:	d1d5      	bne.n	8004d3c <_vfiprintf_r+0x198>
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	065b      	lsls	r3, r3, #25
 8004d94:	f53f af7e 	bmi.w	8004c94 <_vfiprintf_r+0xf0>
 8004d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d9a:	e77d      	b.n	8004c98 <_vfiprintf_r+0xf4>
 8004d9c:	ab03      	add	r3, sp, #12
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	4622      	mov	r2, r4
 8004da2:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <_vfiprintf_r+0x228>)
 8004da4:	a904      	add	r1, sp, #16
 8004da6:	4630      	mov	r0, r6
 8004da8:	f000 f888 	bl	8004ebc <_printf_i>
 8004dac:	e7ec      	b.n	8004d88 <_vfiprintf_r+0x1e4>
 8004dae:	bf00      	nop
 8004db0:	080053ac 	.word	0x080053ac
 8004db4:	080053f6 	.word	0x080053f6
 8004db8:	080053cc 	.word	0x080053cc
 8004dbc:	0800538c 	.word	0x0800538c
 8004dc0:	080053fc 	.word	0x080053fc
 8004dc4:	08005400 	.word	0x08005400
 8004dc8:	00000000 	.word	0x00000000
 8004dcc:	08004b7f 	.word	0x08004b7f

08004dd0 <_printf_common>:
 8004dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd4:	4691      	mov	r9, r2
 8004dd6:	461f      	mov	r7, r3
 8004dd8:	688a      	ldr	r2, [r1, #8]
 8004dda:	690b      	ldr	r3, [r1, #16]
 8004ddc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004de0:	4293      	cmp	r3, r2
 8004de2:	bfb8      	it	lt
 8004de4:	4613      	movlt	r3, r2
 8004de6:	f8c9 3000 	str.w	r3, [r9]
 8004dea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dee:	4606      	mov	r6, r0
 8004df0:	460c      	mov	r4, r1
 8004df2:	b112      	cbz	r2, 8004dfa <_printf_common+0x2a>
 8004df4:	3301      	adds	r3, #1
 8004df6:	f8c9 3000 	str.w	r3, [r9]
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	0699      	lsls	r1, r3, #26
 8004dfe:	bf42      	ittt	mi
 8004e00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e04:	3302      	addmi	r3, #2
 8004e06:	f8c9 3000 	strmi.w	r3, [r9]
 8004e0a:	6825      	ldr	r5, [r4, #0]
 8004e0c:	f015 0506 	ands.w	r5, r5, #6
 8004e10:	d107      	bne.n	8004e22 <_printf_common+0x52>
 8004e12:	f104 0a19 	add.w	sl, r4, #25
 8004e16:	68e3      	ldr	r3, [r4, #12]
 8004e18:	f8d9 2000 	ldr.w	r2, [r9]
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	42ab      	cmp	r3, r5
 8004e20:	dc28      	bgt.n	8004e74 <_printf_common+0xa4>
 8004e22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e26:	6822      	ldr	r2, [r4, #0]
 8004e28:	3300      	adds	r3, #0
 8004e2a:	bf18      	it	ne
 8004e2c:	2301      	movne	r3, #1
 8004e2e:	0692      	lsls	r2, r2, #26
 8004e30:	d42d      	bmi.n	8004e8e <_printf_common+0xbe>
 8004e32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e36:	4639      	mov	r1, r7
 8004e38:	4630      	mov	r0, r6
 8004e3a:	47c0      	blx	r8
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d020      	beq.n	8004e82 <_printf_common+0xb2>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	68e5      	ldr	r5, [r4, #12]
 8004e44:	f8d9 2000 	ldr.w	r2, [r9]
 8004e48:	f003 0306 	and.w	r3, r3, #6
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	bf08      	it	eq
 8004e50:	1aad      	subeq	r5, r5, r2
 8004e52:	68a3      	ldr	r3, [r4, #8]
 8004e54:	6922      	ldr	r2, [r4, #16]
 8004e56:	bf0c      	ite	eq
 8004e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e5c:	2500      	movne	r5, #0
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	bfc4      	itt	gt
 8004e62:	1a9b      	subgt	r3, r3, r2
 8004e64:	18ed      	addgt	r5, r5, r3
 8004e66:	f04f 0900 	mov.w	r9, #0
 8004e6a:	341a      	adds	r4, #26
 8004e6c:	454d      	cmp	r5, r9
 8004e6e:	d11a      	bne.n	8004ea6 <_printf_common+0xd6>
 8004e70:	2000      	movs	r0, #0
 8004e72:	e008      	b.n	8004e86 <_printf_common+0xb6>
 8004e74:	2301      	movs	r3, #1
 8004e76:	4652      	mov	r2, sl
 8004e78:	4639      	mov	r1, r7
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	47c0      	blx	r8
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d103      	bne.n	8004e8a <_printf_common+0xba>
 8004e82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8a:	3501      	adds	r5, #1
 8004e8c:	e7c3      	b.n	8004e16 <_printf_common+0x46>
 8004e8e:	18e1      	adds	r1, r4, r3
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	2030      	movs	r0, #48	; 0x30
 8004e94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e98:	4422      	add	r2, r4
 8004e9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ea2:	3302      	adds	r3, #2
 8004ea4:	e7c5      	b.n	8004e32 <_printf_common+0x62>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4622      	mov	r2, r4
 8004eaa:	4639      	mov	r1, r7
 8004eac:	4630      	mov	r0, r6
 8004eae:	47c0      	blx	r8
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d0e6      	beq.n	8004e82 <_printf_common+0xb2>
 8004eb4:	f109 0901 	add.w	r9, r9, #1
 8004eb8:	e7d8      	b.n	8004e6c <_printf_common+0x9c>
	...

08004ebc <_printf_i>:
 8004ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ec0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	7e09      	ldrb	r1, [r1, #24]
 8004ec8:	b085      	sub	sp, #20
 8004eca:	296e      	cmp	r1, #110	; 0x6e
 8004ecc:	4617      	mov	r7, r2
 8004ece:	4606      	mov	r6, r0
 8004ed0:	4698      	mov	r8, r3
 8004ed2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ed4:	f000 80b3 	beq.w	800503e <_printf_i+0x182>
 8004ed8:	d822      	bhi.n	8004f20 <_printf_i+0x64>
 8004eda:	2963      	cmp	r1, #99	; 0x63
 8004edc:	d036      	beq.n	8004f4c <_printf_i+0x90>
 8004ede:	d80a      	bhi.n	8004ef6 <_printf_i+0x3a>
 8004ee0:	2900      	cmp	r1, #0
 8004ee2:	f000 80b9 	beq.w	8005058 <_printf_i+0x19c>
 8004ee6:	2958      	cmp	r1, #88	; 0x58
 8004ee8:	f000 8083 	beq.w	8004ff2 <_printf_i+0x136>
 8004eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ef0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004ef4:	e032      	b.n	8004f5c <_printf_i+0xa0>
 8004ef6:	2964      	cmp	r1, #100	; 0x64
 8004ef8:	d001      	beq.n	8004efe <_printf_i+0x42>
 8004efa:	2969      	cmp	r1, #105	; 0x69
 8004efc:	d1f6      	bne.n	8004eec <_printf_i+0x30>
 8004efe:	6820      	ldr	r0, [r4, #0]
 8004f00:	6813      	ldr	r3, [r2, #0]
 8004f02:	0605      	lsls	r5, r0, #24
 8004f04:	f103 0104 	add.w	r1, r3, #4
 8004f08:	d52a      	bpl.n	8004f60 <_printf_i+0xa4>
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6011      	str	r1, [r2, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	da03      	bge.n	8004f1a <_printf_i+0x5e>
 8004f12:	222d      	movs	r2, #45	; 0x2d
 8004f14:	425b      	negs	r3, r3
 8004f16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f1a:	486f      	ldr	r0, [pc, #444]	; (80050d8 <_printf_i+0x21c>)
 8004f1c:	220a      	movs	r2, #10
 8004f1e:	e039      	b.n	8004f94 <_printf_i+0xd8>
 8004f20:	2973      	cmp	r1, #115	; 0x73
 8004f22:	f000 809d 	beq.w	8005060 <_printf_i+0x1a4>
 8004f26:	d808      	bhi.n	8004f3a <_printf_i+0x7e>
 8004f28:	296f      	cmp	r1, #111	; 0x6f
 8004f2a:	d020      	beq.n	8004f6e <_printf_i+0xb2>
 8004f2c:	2970      	cmp	r1, #112	; 0x70
 8004f2e:	d1dd      	bne.n	8004eec <_printf_i+0x30>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	f043 0320 	orr.w	r3, r3, #32
 8004f36:	6023      	str	r3, [r4, #0]
 8004f38:	e003      	b.n	8004f42 <_printf_i+0x86>
 8004f3a:	2975      	cmp	r1, #117	; 0x75
 8004f3c:	d017      	beq.n	8004f6e <_printf_i+0xb2>
 8004f3e:	2978      	cmp	r1, #120	; 0x78
 8004f40:	d1d4      	bne.n	8004eec <_printf_i+0x30>
 8004f42:	2378      	movs	r3, #120	; 0x78
 8004f44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f48:	4864      	ldr	r0, [pc, #400]	; (80050dc <_printf_i+0x220>)
 8004f4a:	e055      	b.n	8004ff8 <_printf_i+0x13c>
 8004f4c:	6813      	ldr	r3, [r2, #0]
 8004f4e:	1d19      	adds	r1, r3, #4
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6011      	str	r1, [r2, #0]
 8004f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e08c      	b.n	800507a <_printf_i+0x1be>
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6011      	str	r1, [r2, #0]
 8004f64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f68:	bf18      	it	ne
 8004f6a:	b21b      	sxthne	r3, r3
 8004f6c:	e7cf      	b.n	8004f0e <_printf_i+0x52>
 8004f6e:	6813      	ldr	r3, [r2, #0]
 8004f70:	6825      	ldr	r5, [r4, #0]
 8004f72:	1d18      	adds	r0, r3, #4
 8004f74:	6010      	str	r0, [r2, #0]
 8004f76:	0628      	lsls	r0, r5, #24
 8004f78:	d501      	bpl.n	8004f7e <_printf_i+0xc2>
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	e002      	b.n	8004f84 <_printf_i+0xc8>
 8004f7e:	0668      	lsls	r0, r5, #25
 8004f80:	d5fb      	bpl.n	8004f7a <_printf_i+0xbe>
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	4854      	ldr	r0, [pc, #336]	; (80050d8 <_printf_i+0x21c>)
 8004f86:	296f      	cmp	r1, #111	; 0x6f
 8004f88:	bf14      	ite	ne
 8004f8a:	220a      	movne	r2, #10
 8004f8c:	2208      	moveq	r2, #8
 8004f8e:	2100      	movs	r1, #0
 8004f90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f94:	6865      	ldr	r5, [r4, #4]
 8004f96:	60a5      	str	r5, [r4, #8]
 8004f98:	2d00      	cmp	r5, #0
 8004f9a:	f2c0 8095 	blt.w	80050c8 <_printf_i+0x20c>
 8004f9e:	6821      	ldr	r1, [r4, #0]
 8004fa0:	f021 0104 	bic.w	r1, r1, #4
 8004fa4:	6021      	str	r1, [r4, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d13d      	bne.n	8005026 <_printf_i+0x16a>
 8004faa:	2d00      	cmp	r5, #0
 8004fac:	f040 808e 	bne.w	80050cc <_printf_i+0x210>
 8004fb0:	4665      	mov	r5, ip
 8004fb2:	2a08      	cmp	r2, #8
 8004fb4:	d10b      	bne.n	8004fce <_printf_i+0x112>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	07db      	lsls	r3, r3, #31
 8004fba:	d508      	bpl.n	8004fce <_printf_i+0x112>
 8004fbc:	6923      	ldr	r3, [r4, #16]
 8004fbe:	6862      	ldr	r2, [r4, #4]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	bfde      	ittt	le
 8004fc4:	2330      	movle	r3, #48	; 0x30
 8004fc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004fce:	ebac 0305 	sub.w	r3, ip, r5
 8004fd2:	6123      	str	r3, [r4, #16]
 8004fd4:	f8cd 8000 	str.w	r8, [sp]
 8004fd8:	463b      	mov	r3, r7
 8004fda:	aa03      	add	r2, sp, #12
 8004fdc:	4621      	mov	r1, r4
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f7ff fef6 	bl	8004dd0 <_printf_common>
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d14d      	bne.n	8005084 <_printf_i+0x1c8>
 8004fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fec:	b005      	add	sp, #20
 8004fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ff2:	4839      	ldr	r0, [pc, #228]	; (80050d8 <_printf_i+0x21c>)
 8004ff4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ff8:	6813      	ldr	r3, [r2, #0]
 8004ffa:	6821      	ldr	r1, [r4, #0]
 8004ffc:	1d1d      	adds	r5, r3, #4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6015      	str	r5, [r2, #0]
 8005002:	060a      	lsls	r2, r1, #24
 8005004:	d50b      	bpl.n	800501e <_printf_i+0x162>
 8005006:	07ca      	lsls	r2, r1, #31
 8005008:	bf44      	itt	mi
 800500a:	f041 0120 	orrmi.w	r1, r1, #32
 800500e:	6021      	strmi	r1, [r4, #0]
 8005010:	b91b      	cbnz	r3, 800501a <_printf_i+0x15e>
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	f022 0220 	bic.w	r2, r2, #32
 8005018:	6022      	str	r2, [r4, #0]
 800501a:	2210      	movs	r2, #16
 800501c:	e7b7      	b.n	8004f8e <_printf_i+0xd2>
 800501e:	064d      	lsls	r5, r1, #25
 8005020:	bf48      	it	mi
 8005022:	b29b      	uxthmi	r3, r3
 8005024:	e7ef      	b.n	8005006 <_printf_i+0x14a>
 8005026:	4665      	mov	r5, ip
 8005028:	fbb3 f1f2 	udiv	r1, r3, r2
 800502c:	fb02 3311 	mls	r3, r2, r1, r3
 8005030:	5cc3      	ldrb	r3, [r0, r3]
 8005032:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005036:	460b      	mov	r3, r1
 8005038:	2900      	cmp	r1, #0
 800503a:	d1f5      	bne.n	8005028 <_printf_i+0x16c>
 800503c:	e7b9      	b.n	8004fb2 <_printf_i+0xf6>
 800503e:	6813      	ldr	r3, [r2, #0]
 8005040:	6825      	ldr	r5, [r4, #0]
 8005042:	6961      	ldr	r1, [r4, #20]
 8005044:	1d18      	adds	r0, r3, #4
 8005046:	6010      	str	r0, [r2, #0]
 8005048:	0628      	lsls	r0, r5, #24
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	d501      	bpl.n	8005052 <_printf_i+0x196>
 800504e:	6019      	str	r1, [r3, #0]
 8005050:	e002      	b.n	8005058 <_printf_i+0x19c>
 8005052:	066a      	lsls	r2, r5, #25
 8005054:	d5fb      	bpl.n	800504e <_printf_i+0x192>
 8005056:	8019      	strh	r1, [r3, #0]
 8005058:	2300      	movs	r3, #0
 800505a:	6123      	str	r3, [r4, #16]
 800505c:	4665      	mov	r5, ip
 800505e:	e7b9      	b.n	8004fd4 <_printf_i+0x118>
 8005060:	6813      	ldr	r3, [r2, #0]
 8005062:	1d19      	adds	r1, r3, #4
 8005064:	6011      	str	r1, [r2, #0]
 8005066:	681d      	ldr	r5, [r3, #0]
 8005068:	6862      	ldr	r2, [r4, #4]
 800506a:	2100      	movs	r1, #0
 800506c:	4628      	mov	r0, r5
 800506e:	f7fb f8b7 	bl	80001e0 <memchr>
 8005072:	b108      	cbz	r0, 8005078 <_printf_i+0x1bc>
 8005074:	1b40      	subs	r0, r0, r5
 8005076:	6060      	str	r0, [r4, #4]
 8005078:	6863      	ldr	r3, [r4, #4]
 800507a:	6123      	str	r3, [r4, #16]
 800507c:	2300      	movs	r3, #0
 800507e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005082:	e7a7      	b.n	8004fd4 <_printf_i+0x118>
 8005084:	6923      	ldr	r3, [r4, #16]
 8005086:	462a      	mov	r2, r5
 8005088:	4639      	mov	r1, r7
 800508a:	4630      	mov	r0, r6
 800508c:	47c0      	blx	r8
 800508e:	3001      	adds	r0, #1
 8005090:	d0aa      	beq.n	8004fe8 <_printf_i+0x12c>
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	079b      	lsls	r3, r3, #30
 8005096:	d413      	bmi.n	80050c0 <_printf_i+0x204>
 8005098:	68e0      	ldr	r0, [r4, #12]
 800509a:	9b03      	ldr	r3, [sp, #12]
 800509c:	4298      	cmp	r0, r3
 800509e:	bfb8      	it	lt
 80050a0:	4618      	movlt	r0, r3
 80050a2:	e7a3      	b.n	8004fec <_printf_i+0x130>
 80050a4:	2301      	movs	r3, #1
 80050a6:	464a      	mov	r2, r9
 80050a8:	4639      	mov	r1, r7
 80050aa:	4630      	mov	r0, r6
 80050ac:	47c0      	blx	r8
 80050ae:	3001      	adds	r0, #1
 80050b0:	d09a      	beq.n	8004fe8 <_printf_i+0x12c>
 80050b2:	3501      	adds	r5, #1
 80050b4:	68e3      	ldr	r3, [r4, #12]
 80050b6:	9a03      	ldr	r2, [sp, #12]
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	42ab      	cmp	r3, r5
 80050bc:	dcf2      	bgt.n	80050a4 <_printf_i+0x1e8>
 80050be:	e7eb      	b.n	8005098 <_printf_i+0x1dc>
 80050c0:	2500      	movs	r5, #0
 80050c2:	f104 0919 	add.w	r9, r4, #25
 80050c6:	e7f5      	b.n	80050b4 <_printf_i+0x1f8>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1ac      	bne.n	8005026 <_printf_i+0x16a>
 80050cc:	7803      	ldrb	r3, [r0, #0]
 80050ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050d6:	e76c      	b.n	8004fb2 <_printf_i+0xf6>
 80050d8:	08005407 	.word	0x08005407
 80050dc:	08005418 	.word	0x08005418

080050e0 <_putc_r>:
 80050e0:	b570      	push	{r4, r5, r6, lr}
 80050e2:	460d      	mov	r5, r1
 80050e4:	4614      	mov	r4, r2
 80050e6:	4606      	mov	r6, r0
 80050e8:	b118      	cbz	r0, 80050f2 <_putc_r+0x12>
 80050ea:	6983      	ldr	r3, [r0, #24]
 80050ec:	b90b      	cbnz	r3, 80050f2 <_putc_r+0x12>
 80050ee:	f7ff fb83 	bl	80047f8 <__sinit>
 80050f2:	4b13      	ldr	r3, [pc, #76]	; (8005140 <_putc_r+0x60>)
 80050f4:	429c      	cmp	r4, r3
 80050f6:	d112      	bne.n	800511e <_putc_r+0x3e>
 80050f8:	6874      	ldr	r4, [r6, #4]
 80050fa:	68a3      	ldr	r3, [r4, #8]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	60a3      	str	r3, [r4, #8]
 8005102:	da16      	bge.n	8005132 <_putc_r+0x52>
 8005104:	69a2      	ldr	r2, [r4, #24]
 8005106:	4293      	cmp	r3, r2
 8005108:	db02      	blt.n	8005110 <_putc_r+0x30>
 800510a:	b2eb      	uxtb	r3, r5
 800510c:	2b0a      	cmp	r3, #10
 800510e:	d110      	bne.n	8005132 <_putc_r+0x52>
 8005110:	4622      	mov	r2, r4
 8005112:	4629      	mov	r1, r5
 8005114:	4630      	mov	r0, r6
 8005116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800511a:	f7ff b9bd 	b.w	8004498 <__swbuf_r>
 800511e:	4b09      	ldr	r3, [pc, #36]	; (8005144 <_putc_r+0x64>)
 8005120:	429c      	cmp	r4, r3
 8005122:	d101      	bne.n	8005128 <_putc_r+0x48>
 8005124:	68b4      	ldr	r4, [r6, #8]
 8005126:	e7e8      	b.n	80050fa <_putc_r+0x1a>
 8005128:	4b07      	ldr	r3, [pc, #28]	; (8005148 <_putc_r+0x68>)
 800512a:	429c      	cmp	r4, r3
 800512c:	bf08      	it	eq
 800512e:	68f4      	ldreq	r4, [r6, #12]
 8005130:	e7e3      	b.n	80050fa <_putc_r+0x1a>
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	6022      	str	r2, [r4, #0]
 8005138:	701d      	strb	r5, [r3, #0]
 800513a:	b2e8      	uxtb	r0, r5
 800513c:	bd70      	pop	{r4, r5, r6, pc}
 800513e:	bf00      	nop
 8005140:	080053ac 	.word	0x080053ac
 8005144:	080053cc 	.word	0x080053cc
 8005148:	0800538c 	.word	0x0800538c

0800514c <_sbrk_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	4c06      	ldr	r4, [pc, #24]	; (8005168 <_sbrk_r+0x1c>)
 8005150:	2300      	movs	r3, #0
 8005152:	4605      	mov	r5, r0
 8005154:	4608      	mov	r0, r1
 8005156:	6023      	str	r3, [r4, #0]
 8005158:	f7fc f98c 	bl	8001474 <_sbrk>
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	d102      	bne.n	8005166 <_sbrk_r+0x1a>
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	b103      	cbz	r3, 8005166 <_sbrk_r+0x1a>
 8005164:	602b      	str	r3, [r5, #0]
 8005166:	bd38      	pop	{r3, r4, r5, pc}
 8005168:	2000033c 	.word	0x2000033c

0800516c <__sread>:
 800516c:	b510      	push	{r4, lr}
 800516e:	460c      	mov	r4, r1
 8005170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005174:	f000 f8a2 	bl	80052bc <_read_r>
 8005178:	2800      	cmp	r0, #0
 800517a:	bfab      	itete	ge
 800517c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800517e:	89a3      	ldrhlt	r3, [r4, #12]
 8005180:	181b      	addge	r3, r3, r0
 8005182:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005186:	bfac      	ite	ge
 8005188:	6563      	strge	r3, [r4, #84]	; 0x54
 800518a:	81a3      	strhlt	r3, [r4, #12]
 800518c:	bd10      	pop	{r4, pc}

0800518e <__swrite>:
 800518e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005192:	461f      	mov	r7, r3
 8005194:	898b      	ldrh	r3, [r1, #12]
 8005196:	05db      	lsls	r3, r3, #23
 8005198:	4605      	mov	r5, r0
 800519a:	460c      	mov	r4, r1
 800519c:	4616      	mov	r6, r2
 800519e:	d505      	bpl.n	80051ac <__swrite+0x1e>
 80051a0:	2302      	movs	r3, #2
 80051a2:	2200      	movs	r2, #0
 80051a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a8:	f000 f874 	bl	8005294 <_lseek_r>
 80051ac:	89a3      	ldrh	r3, [r4, #12]
 80051ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051b6:	81a3      	strh	r3, [r4, #12]
 80051b8:	4632      	mov	r2, r6
 80051ba:	463b      	mov	r3, r7
 80051bc:	4628      	mov	r0, r5
 80051be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051c2:	f000 b823 	b.w	800520c <_write_r>

080051c6 <__sseek>:
 80051c6:	b510      	push	{r4, lr}
 80051c8:	460c      	mov	r4, r1
 80051ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ce:	f000 f861 	bl	8005294 <_lseek_r>
 80051d2:	1c43      	adds	r3, r0, #1
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	bf15      	itete	ne
 80051d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80051da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051e2:	81a3      	strheq	r3, [r4, #12]
 80051e4:	bf18      	it	ne
 80051e6:	81a3      	strhne	r3, [r4, #12]
 80051e8:	bd10      	pop	{r4, pc}

080051ea <__sclose>:
 80051ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ee:	f000 b81f 	b.w	8005230 <_close_r>

080051f2 <__ascii_wctomb>:
 80051f2:	b149      	cbz	r1, 8005208 <__ascii_wctomb+0x16>
 80051f4:	2aff      	cmp	r2, #255	; 0xff
 80051f6:	bf85      	ittet	hi
 80051f8:	238a      	movhi	r3, #138	; 0x8a
 80051fa:	6003      	strhi	r3, [r0, #0]
 80051fc:	700a      	strbls	r2, [r1, #0]
 80051fe:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005202:	bf98      	it	ls
 8005204:	2001      	movls	r0, #1
 8005206:	4770      	bx	lr
 8005208:	4608      	mov	r0, r1
 800520a:	4770      	bx	lr

0800520c <_write_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4c07      	ldr	r4, [pc, #28]	; (800522c <_write_r+0x20>)
 8005210:	4605      	mov	r5, r0
 8005212:	4608      	mov	r0, r1
 8005214:	4611      	mov	r1, r2
 8005216:	2200      	movs	r2, #0
 8005218:	6022      	str	r2, [r4, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	f7fb f9d7 	bl	80005ce <_write>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d102      	bne.n	800522a <_write_r+0x1e>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	b103      	cbz	r3, 800522a <_write_r+0x1e>
 8005228:	602b      	str	r3, [r5, #0]
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	2000033c 	.word	0x2000033c

08005230 <_close_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4c06      	ldr	r4, [pc, #24]	; (800524c <_close_r+0x1c>)
 8005234:	2300      	movs	r3, #0
 8005236:	4605      	mov	r5, r0
 8005238:	4608      	mov	r0, r1
 800523a:	6023      	str	r3, [r4, #0]
 800523c:	f7fc f8e5 	bl	800140a <_close>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d102      	bne.n	800524a <_close_r+0x1a>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	b103      	cbz	r3, 800524a <_close_r+0x1a>
 8005248:	602b      	str	r3, [r5, #0]
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	2000033c 	.word	0x2000033c

08005250 <_fstat_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4c07      	ldr	r4, [pc, #28]	; (8005270 <_fstat_r+0x20>)
 8005254:	2300      	movs	r3, #0
 8005256:	4605      	mov	r5, r0
 8005258:	4608      	mov	r0, r1
 800525a:	4611      	mov	r1, r2
 800525c:	6023      	str	r3, [r4, #0]
 800525e:	f7fc f8e0 	bl	8001422 <_fstat>
 8005262:	1c43      	adds	r3, r0, #1
 8005264:	d102      	bne.n	800526c <_fstat_r+0x1c>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	b103      	cbz	r3, 800526c <_fstat_r+0x1c>
 800526a:	602b      	str	r3, [r5, #0]
 800526c:	bd38      	pop	{r3, r4, r5, pc}
 800526e:	bf00      	nop
 8005270:	2000033c 	.word	0x2000033c

08005274 <_isatty_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4c06      	ldr	r4, [pc, #24]	; (8005290 <_isatty_r+0x1c>)
 8005278:	2300      	movs	r3, #0
 800527a:	4605      	mov	r5, r0
 800527c:	4608      	mov	r0, r1
 800527e:	6023      	str	r3, [r4, #0]
 8005280:	f7fc f8df 	bl	8001442 <_isatty>
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	d102      	bne.n	800528e <_isatty_r+0x1a>
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	b103      	cbz	r3, 800528e <_isatty_r+0x1a>
 800528c:	602b      	str	r3, [r5, #0]
 800528e:	bd38      	pop	{r3, r4, r5, pc}
 8005290:	2000033c 	.word	0x2000033c

08005294 <_lseek_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	4c07      	ldr	r4, [pc, #28]	; (80052b4 <_lseek_r+0x20>)
 8005298:	4605      	mov	r5, r0
 800529a:	4608      	mov	r0, r1
 800529c:	4611      	mov	r1, r2
 800529e:	2200      	movs	r2, #0
 80052a0:	6022      	str	r2, [r4, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	f7fc f8d8 	bl	8001458 <_lseek>
 80052a8:	1c43      	adds	r3, r0, #1
 80052aa:	d102      	bne.n	80052b2 <_lseek_r+0x1e>
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	b103      	cbz	r3, 80052b2 <_lseek_r+0x1e>
 80052b0:	602b      	str	r3, [r5, #0]
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	2000033c 	.word	0x2000033c

080052b8 <__malloc_lock>:
 80052b8:	4770      	bx	lr

080052ba <__malloc_unlock>:
 80052ba:	4770      	bx	lr

080052bc <_read_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	4c07      	ldr	r4, [pc, #28]	; (80052dc <_read_r+0x20>)
 80052c0:	4605      	mov	r5, r0
 80052c2:	4608      	mov	r0, r1
 80052c4:	4611      	mov	r1, r2
 80052c6:	2200      	movs	r2, #0
 80052c8:	6022      	str	r2, [r4, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f7fc f880 	bl	80013d0 <_read>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d102      	bne.n	80052da <_read_r+0x1e>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	b103      	cbz	r3, 80052da <_read_r+0x1e>
 80052d8:	602b      	str	r3, [r5, #0]
 80052da:	bd38      	pop	{r3, r4, r5, pc}
 80052dc:	2000033c 	.word	0x2000033c

080052e0 <_init>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	bf00      	nop
 80052e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e6:	bc08      	pop	{r3}
 80052e8:	469e      	mov	lr, r3
 80052ea:	4770      	bx	lr

080052ec <_fini>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr
